[
  {
    "startTime": "00:00:03",
    "text": "We have just hit the top of the hour. So welcome the 5 of you who are not area directors or chairs. Welcome to the seaborne Working Group, session at IETF 119 In lovely Brisbane, Nope. Note the note well well. As we always do, you've seen this now all week, so let's just move on. Yes. I keep forgetting this, so I'll remind everybody. Please use the meet echo to get the blue sheet signed. Given how few people we have, I'm not going to bother with with a queue. If you have something to say, just go up to the microphone or unmute yourself remotely There are hardly any people on. So in tea. If we wind up needing the queue, we will use it but for, For otherwise. So we're starting off with a 30 minute to tutorial, does it make sense to continue with this plan given how few people are on. Christian, what are your thoughts? I think yes. A before, a, because I think it's still relevant, to some of us, and b, it will make a great recording. For Well, that's true. Who will who will look at this later. that. Okay. Yep. Yes. You're right. So let's proceed with So that's the first thing on the agenda is, is our tutorial session. Karsten, should I turn over the slide control to you? Let's see how I do this or or Christian, can you give the slide control over to, crustin"
  },
  {
    "startTime": "00:02:27",
    "text": "Well, actually, let me do a quick interrupt before we start that. I, I wanted to introduce Ori and I forgot to. We have a new area of director, our former area of director from Jessica is in the room, but we also have our new one Orry Steele, or a Give a quick intro. Hi. I'm Ori Steele. I'm your new area director. I look forward to, supporting all of your work. You may always reach out to me by email. I'm fairly responsive. If you can make it your way into that slack instance, shall not be named. I'm often found there. You can contact me there as well. I look forward to working with all of you, especially, Berry. It's great to a chance to work together in Carston as well. I'll often be coming to the mic in this room to take my hat because I am a seaborne enthusiast So, make sure, if I ever slip up and I get excited about seaborne and it's not clear what whether I'm responding as area director or not, please asked me to clarify. I'll do my best as I'm learning how to take hats off and put them on again. Thanks. Okay. Thanks, Ori. Carsten. Take it away. Thank you, and maybe I should, tell people that I'm best reached on Telegram and, Zulep works pretty well. I don't know this as word because I personally have no s in my life. So sorry. You can't join that. Okay. So what do you wanted to do in the last"
  },
  {
    "startTime": "00:04:00",
    "text": "the first half hour was go through 2 areas where we have made some recent progress, diagnostic notation or EDN as we often college and, city area of the concise data deficient language. And this is really about drafts all at all. So, we're not just having a tutorial. We are looking whether we can advance some of the stuff that hasn't advanced So most of you will be aware that that Tivo is a binary interchange format or data representation format and the problem with binary formats is that you kind of really read them. We have this Cboe Prigg. Shing, which which makes them almost readable, almost readable hex dumps, but not really very useful. So we have 2 languages, text the injuries associated with Sebo. 1 is the diagnostic notation or EDN. And the other one is CDDL. EDN is for instances, so you can take any cboe file and translate it to EDN. You also can statutory jaminal, if that is your thing, but So here in in the ring group, we are using EGM. So this is a text form for for a single instance, and it's based on JSON. So everything you are thinking about JSON is going to work in EDN plus new things, India. Cddl is something that some people call a schema language or data definition language, which we use for specification and validation It's not about singer instances. This is it is about capturing data models and the the technology we are using is 3 grandmas, this, is highly inspired by ABNF. So So, technically, you have to look very close to see whether something is ABNF or CDL."
  },
  {
    "startTime": "00:06:01",
    "text": "And, yeah, set of of the JSON 1, can we describe both Jason and and seaborne that has turned out to be quite useful in some reason specifications but we are also looking at other things like CSV, you may not be aware how incredibly important your peers as a representation format and and some data engineering. So that would be good if we would get better there as well. This is just an individual draft that's definitely not ready. But, we we already have a few implementations. Okay. So Seabor, the the the interchange format, an EDN and city to associate a textual language. So let's talk about, EDN first. We we are flipping back and forth between calling this diagnostic notation, which 7 syllables and and EDN, which is 3 Do you understand why I want to use EDN today? So this is Jason. Everything you can do in Jason you can do in EDN, actually everything you can do in interoperable, Jason, you can do in in the end, you know, there's this sliver of toxic waste on on Jason, and we cannot do that. And we don't want be able to do So then there are some additions that that are just motivated by the fact that Cboe can do more things. 1 is binary strings. We can hex encoder them. We can base 64 encode them. We also can treat some to give a text as hex And, the the binary stuff is always in single quotes. So that's what the convention, how you see that something is bind really will completely destroy that convention on one of the next slides. The second, thing is tags. So this is currently very, very basic. You just provide a tech number and open"
  },
  {
    "startTime": "00:08:00",
    "text": "parenthesis, then the content of that check and, closing Fluorances. So eight team would be a tag you might find on a cozy sign 1. And the thing in the branches is is the course design 1. Data structure. And the third, addition is generalizing the map keys Jason only has strings, text strings, as map keys and, see what allows anything as map keys. So the the example you see here is from the RFC and users since New numeric, keys in those maps, seats are usually datas. And when we don't want the data for some reason, we have to tag the number with tax 47, and that's why you see your tax 47 in in the rep key there. Okay. But, otherwise, this this really looks like Jason owned. We we had have added comments. Some people want to add comments to Jason, and, yeah, since we weren't bound to to being backwards, compatibility with JSON, we added those. So let's quickly compare this to, Seabor Pretty. So this is an example from our seen in 9200. He's base specification, And, here you see a map that has an authorization server, an audience, a scope, and, non And, these have specific met keys assigned to them And you have the values, so 3 of the values are text strings. 1 is a byte string. And, the same thing you can see here, but you you don't get all the annotation, and you do get to see all the Hext. Bytes that are going to be on the right. Okay. So that's all I'm going to say about super pretty, and I'll focus"
  },
  {
    "startTime": "00:10:00",
    "text": "on EDN, from now on. Eddn is is, like, 10 years old now. It started out as diagnostic inflation the e later because we started extending it, like, like, mad. And, one really important thing is that there are lots of, seaborne documents that have embedded seaborne because you essentially can get at Embedded Seabor with with 0 overhead in in Cboe, which is very different from other representation, languages. That that's rather likely thing to have. And, of course, this you can read this when you have worked for 10 years with, but maybe it's better to to have the expanded version and you can embed EDN between angle brackets, w angle brackets, and here we see a map with just one element, a one. So it's just it's a map with one element. One member, excuse me, And, that map map's number 1 to number 1, and number 1 is the algorithm, and the other number one is ESGCM128. So this is slightly more readable this but, of course, this is shorter because it's just just exploded. So embedded sebo is something you cannot necessarily extract from a seabor instance because Without additional information, you just don't know whether that is 0 or not. Now there are enough redundant bits in in Cboe that that's that usually works reasonably well, but, Yeah. It's better if you actually have a data definition, then you can do this perfectly. I said, we have comments. We added hashmarks as comments, but that doesn't fix RFC 90 4 because he used the hedge mark for CDDlder."
  },
  {
    "startTime": "00:12:00",
    "text": "We cannot use a bookmark in CDA because already has a meeting in CDA. So we couldn't fixed city for to fix 1954. Okay. That that's one of the those areas where we just have the different legacies, the Jason legacy here, and the the, ABNF legacy for CDL causing us to have divergence where we wouldn't like to have but it's it's there. Second, top requirement was to lower trailing comma in in maps and arrays. Because that really helps with, get and we have, new thing called application oriented literals, which are just an abuse of the the text string Excuse me, after byte string, syntax, if the thing that is in front of the first quote is is not HR B Sixty all or one of the other 3 or 4, things allowed by by, 7049. Then this can be an application literal. And here, for instance, DTE is for big time. And it pauses and RC. 2239 string and gives you the posix, date. And, of course, it's not going to deal with sleep seconds and then all this stuff, but it's just to have more reasonable examples. Or if you want to have an IP address, it's in binary than you can use the IP literate. I'm not going to go into details on this. You you know where to find the draft, actually, the the EDN draft that we just to have completed in this working group. Has the the term literals in its name because it started out as a drop just doing the pictures. And then we started to put in things like an ABNF, and"
  },
  {
    "startTime": "00:14:03",
    "text": "more information for, for additional small extents. Yeah. So this will be with ISG Soon. I hope so. I hope when when it already comes home, he finds it on his desk So we are done with it, but we have these extension points. And and the main extension point of of EDN now is the application oriented interval. And so right now, that we have this new hammer, we are looking at nails. And, looking for nails. And, actually, the the most important thing, there is another draft I come to in the mid manage the most important thing that we found in our specifications was that we were hard wiring all these numbers into our examples. Okay. In this particular case, that's not a problem because that's an error see that a very unlikely to change. So everybody knows that one is algorithm and and one is ASGCM. 128. But it's a disaster when you actually developing, documents because all your examples have hard coded numbers in them, and you have to update them, and you're going to mess this up. On the time. So, we edit. An application of a little literary called E for for external reference to City Yale. And, in this case, the just says there must be a city to aid someone with that tells you what Elgus, and we insert that number here, and we have a valid example. So much less fixing of examples, but of course, the examples no longer have the actual code points of somebody who wants them to to look up numbers while you have to look into the correct Jayry for that now. So here's an example."
  },
  {
    "startTime": "00:16:00",
    "text": "The GM Edmond draft, we have over in in the coworking group. That has a number of of things, like 2105. But it also has map labels that actually our numbers. And, so because you cannot write variables in the EDN, easy to do those in CDL, but not in ADN. People were writing tech strings where they actually were Going to you, this is, number. So this is you cannot put this through CI systems because they were immediately show you that everything is wrong. And, of course, if you don't have CIs, you you make many more errors. So the idea is that, the the IDN processor actually can read CDDL and, extract constants from that. And if you have a CDA that tells you that group board actually is 33 and all these these other things, then you can transform this into this e notation. And now you have, an example that will work even if the those not really designed yet, numbers actually change. Sorry. Hi. Taking off my hat. The dash versus underscore in the e examples is the casing, Snake case versus Kebab case significant. Yes. Can you say more? Well, CDDL inherited from ABNF. ABNS keep up, When we did CDL, people told us oh my god, in my programming language, I I don't have,"
  },
  {
    "startTime": "00:18:00",
    "text": "skewers. I I only have underscores So, we just allowed both. And this is one example where I mean, th this comes from a spec that has been written In CDDL, So they have been using the the hyphens. And this comes from a spec that that didn't have CDL in the beginning. So they they use Okay. So it's, so it's fair to say that, you know, authors of document can can use either and Yes. Do you give them any guidance that they ought to use one consistently or that they should mix them, or is there Just don't mix them. Right? I I don't know. It's like is like the kind of thing that, also have lower case and upper case. So, yeah, that's that's We are different approaches collide. Yeah. So, in the tool CDLC, which supports this at the moment, you can, Well, actually in the CDL tool, not in the CDLC2, tool, you can set an environment variable so you will find the file that will govern this Now your question will be, what do you do if you need 2 serial files? And the answer is create a short CDF value that imports the other two And, then you can do something like diag, to transform this thing into the actual wire format, which which will retain bytes. So the this is what you are CI system is probably trying to check. Okay. So this is the e approach. I wrote an earlier draft I probably now have to update that defines a convention how we can deal with code points to be assigned."
  },
  {
    "startTime": "00:20:04",
    "text": "And probably the most important innovation here is to use the abbreviation CPA instead of TPG, because graph that had has tons of DVDs in them. Looks like it's not done, but a draft that has CPAs in them is just waiting for AENA to do the assignments, which happens at the stage very late, in in the processing. Code point to be assigned. Code point assignment, Codepoint Designing, something like that. It could be anything. What is the CPA certified public counting? Yes. Yeah. Okay. Fits well. Right? So dealing with these numbers is worth an encounter should be good. Yeah. Here's another examples. The the previous example was from, from the problem details, are see, or from, from what led to the problem details, RFC, and we now can just write things like each title, e detail, and e code for a 100, and this is why you need the CPA thing. Code for 100 is not a code point to be designed. That that is Correct. So that that's really fine. It's 128. We all know that. Oh, the semicolon is the comment in CDL. Because it has been in lisps since 1958 and, So we're not going to change that. Okay. So that was one really useful, addition to EDN that can be done entirely using its extension point. The other one is that you get these things hope you have your telescopes, with you. So this is an example for from Ratia. Writes. Where we have a data structure that includes a measurement information."
  },
  {
    "startTime": "00:22:01",
    "text": "The measurement, well, that that's a few hashes, pasted together in interesting ways. So when you actually put an example in your document, it it's going to be really big And, again, you probably want to have this in there so your CI system can check your exam. So, we just invented another literal, but this time not for reaching out into CDL, but reaching out into another EDN file. So you can say reference measure that went 1 dodge diag, here? And, of course, there's all this e stuff, in here as well. And, now you actually have, the and measurement information in India. So this needs to be an, EDN file on its own, which, of course, decodes to a single data item. The Seaboardager item, goes in right there. So this is extremely simple. Both eandref less than ten lines of code. And they really help. I think, I think, Okay. So this was the first 15 minutes. I didn't quite Keep trying here. And, the the question really is, what are you going to do with, raft behind them. I think it's draft Bowman Sebo, the ref or something like that. Maybe with an Indian throw in. And, so, I I would like to get more feedback from people who are trying, this so we can decide whether we want that. Okay. That was the EDN part. Now let's talk about CDL. There are three documents, here. One is your The the thing is now five years old, and we know so many"
  },
  {
    "startTime": "00:24:01",
    "text": "Raja document. So this fixes few things. There's a little bit of housekeeping, and in introduces, one significant omission or actually repairs one significant, Omission. This just finished working class call. It will also be with Jeed soon. I'm not going to talk about This, but, the the main thing is, if you know, are using something like tag number you no longer have to put them in literally. You can, take them from, another city The second one is more control. We occasionally define new control operators, control operators, are the main extension point of CDU. So, yeah, we had one in 19 165 and every 3 years So we are try to bunch them up and, put them into a a new document. I'll talk about that in a minute. And the third one is the module structure. I already have, hinted at what is a very simple way to support composition of city Gremers from Majapo fighters, fighters, So let's quickly talk about, more control. More control ads about a dozen control operators that mostly are concerned with the fact that, we sometimes have text that contains some data. The text may, for instance, be JSON text and and we actually want to be able to write down the data model for the JSON text. But still be able to say, we are actually carrying around that Jason text, and we we we ask the, grammar validator to check that it's actually JSON and it fits the data model that was given for it. Yeah, so this is mostly about text processing,"
  },
  {
    "startTime": "00:26:02",
    "text": "the the odd one, occasionally, just saying that something is deterministic and coded maybe useful decimal numbers, various base 16326445. And, yeah, this is being used in various documents. So for instance, the base 60 for you for URL. That is, used in reds each measured component. And, it it's the way we can carry both seaborne and Jason around in one of these items. But we actually went ahead and and put a printer in the for the case that we have forgotten something here. So if you need, 4 digit hex number or something like that, this can do it. So this is, this is actually a 4 digit text number and it proceeded with with, 0x and Or, actually, it doesn't say 4 digits. Sorry. This is a Higgs number with proceeded with 0 eggs, colon, and hex float representation. Otherwise, we would have to add all these predictive elements as as control operators that that becomes tedious, very slow. So we are using the C language. It's a normative preference here, and these right, which parts of the ceiling which work here, of course, you cannot use a pointer something, like that. So, Yeah. That's, The more control document. I'm not quite sure about its current status. I think we had a working class call. We had a working group last call, but we also had 0 feedback, from"
  },
  {
    "startTime": "00:28:03",
    "text": "anyone on the mailing list. So I encourage everyone who looks at this to have a close look that is close enough to state something publicly on their opinion on this So we probably should send a message to FFT The reds eat measured components also, that they want this. I have a question. This is Lawrence. We have an AJ Stein at the Top of CQ. Yeah. I'm sorry. sorry, Lawrence. I'm I also have a question that probably can be answered by the spec and it's probably not gonna be that interesting or exhaustive. If we talk about this example that you present with print f is the supposition that a conformant tool would understand All the print f syntax operators. Like, that's required or implied by the CDL more control specification now? Yes, minus the ones that are excluded so if if you look into the document, it tells you which of the ones actually work. Okay. Thank you. Okay. Lawrence, go ahead. Yeah. You know, you you said you weren't using the queue. So so seabor debt, that's that is CDE. Right? No. Oh, so it is has its own defines its own control operators. This is just plain 8949. And you want to argue, we should not have that. Let's let's argue that. I I think that's a tenable position. Well, What? But isn't CDE the only thing in 8949 that's deterministic? 8849 gives you a little bit more latitude"
  },
  {
    "startTime": "00:30:00",
    "text": "than city leaders. And this has it's somewhere in the the cloud spend by 8949? While CDE says it's in the subset There's actually defined possibility. So if you look into the CDE draft, that has a controller dotcde to say this this is this specific thing. Profile. And then you have a dot dot d c bar in the d c bar that shows you, it's not just city. It's also DC, but Right. a cheap Control operator is So that that's why I thought Yeah. But it's This is the this is a confusing topic for most people. So I would be a fan of minimizing this and maybe even not having seaboard, in favor of, just just just just seaboard, CDE, Okay. Can you write this as a very new plus call command, please? Sure. Thank you. I'm not currently aware of a draft uses this. So removing this at this point will will have little damage. I think Okay. So, the final thing on the in the tutorial segment. Might be using a little bit more time, is the the modules proposal, which definitely can grow, but we we found something like a minimum viable product here. By adding 2 directives"
  },
  {
    "startTime": "00:32:00",
    "text": "well, first of all, adding the concept of a directive and then adding 2 directives which are called include and import And these have a few options, which I, one of which I re mentioned in other they want, they want, they want, they want, they want, they want, they want, they want, they want, they want, they want so the the basic idea is that we now don't just see CTDA specification as a sea of rules. Which up to now it is with one weirdness, when you the the first rule actually is is more equal than the other, rules. But we are now thinking about CDL in terms of modules. Which, means files. Centrally, but they might also be using you can get from IANA and so on. We we really haven't explored this space, and we don't have to. We can can start, by by leaving that open work, we definitely want to have that discussion. So what it really does is when when you have some CDL that uses existing CGG can say something like import RFC952. And then all the undefined names here. Looked up. In the the RFC1952, CDL, and, edit. And if these have undefined names that in turn are defined in 1952, This is transitively done again. So, essentially, you you get you get an extract from 9952 that include everything you need to make your city a module. Rock. So that that's a relatively similar thing. It has one remaining bug. We we still have to find good ways to treat sockets because sockets are not always explicitly referenced. So that that will probably happen next month."
  },
  {
    "startTime": "00:34:02",
    "text": "There are various ways of doing this, and we just have to decide what what the best one is. There's not an obvious way, like, here that just falls out your fingers when you try to implement Okay. So this And this is really the main functionality. We also have a way to actually manage the name spaces a little bit. Because when the Doctor Sherman was written nobody cared about namespace pollution because, that that was city describing KOCE, but there there wasn't an import statement yet. So you can say prefix every name by the the spring cozy. And then you, of course, have to write you are using CDL by actually using this course in prefix. Names. Now here in this particular case, this is a bit tedious because, Koci did take care of of name spacing that that top level names, but not the internal ones like label and values and MTO serialized maps and so on. So this actually can We Sorry. I hope you have your telescopes with you. This can be, simplified a little bit so you can get back to your unnamed based names. By listing them explicitly as the ones you actually want to have. From 1952. And then, the importer will actually generate aliases. So it will still called the thing cozy dot something. But it will also generate unpriefixed, Ellias. So this is a very, very"
  },
  {
    "startTime": "00:36:00",
    "text": "cheap get name spacing, but not having way to to your code polluted by the databases you need for the other import said, stuff. Yeah, so the the idea here is to to have a pretty strong separation of concerns. So the There's no change to CGG itself. That that just continues in in all that city, one glory but we have this additional thing which I'm a bit very difficult preprocessor because when people have pea here, pure pre processor, they think about the seed processor. And this is not it. This thing has full control. It's fully on sense to the semantics of what it does. So, well, it's just the the process, that that, understands what an import might be and manufacturers are CJF for you from its inputs, that that is likely to do what you want the total. So no macros something. This is really just just, imputting it here, put the bad word on the side. So in the city LC. Tools, c for compiler. There is a dash 2 flag, which switches on this behavior and TD CDDL is needed to actually have a generate CDDL also generated JSON form and and other forms of the the the representations of CDL information. So you see me typing this pretty often at the moment. Where we use the preprocessor to actually, generate the the CGA that goes into the other CDDA tool, which is still a separate tool, to get her on to finishing forging everything over to CDAC."
  },
  {
    "startTime": "00:38:02",
    "text": "And so you can do a generation or, validation, this way from v. V. Input. There's also some some slightly more advanced shell magic you can use, so you still get to pipe things into the construct, but I'm drove this. Yep. Okay. So this is the the implementation and the Implementation is, Somewhere around a hundred lines of code. Because you actually do have to to do things like, like, impart this and so on, so it's not totally trimming. So what was the difference between include and import, import just get you what you need. Include gets you everything. Which may be what you want when you are actually not referencing foreign, a CDL, but you you are referencing your own CDDA modules. So the the only place where module is actually looked at maybe in another module that does an include of it. And if you just do an import, then you may have garbage in your included, part. That you never see because the the import, statement throws it away. Right so that's why why we we separate these include and import cases. So the include cases is really for when you just, split up your CDL into several modules. So they are easier reference. From outside and import actually is meant for reference, from outside like an existing published are received. Yeah. The the module that you are referencing may in turn be a module its own import statements and so on. And"
  },
  {
    "startTime": "00:40:01",
    "text": "of course, this all works like it should so the the, what the semantics of the reference, what you do not change do not change based on who imports it. So does all the importing on its own, and, then presents itself to to the importing to to the outer layer importing majority. So how do you find these files I've resisted the temptation actually define that so the current implementation simply uses an include path mechanism for that. So the the current default value of that include process current directory plus library, where does the library come from? Well, right now, I'm shipping 1 with CDDLC, but we probably need It's slightly more formal, way to to set up this library at some point, but, I just wanted to make sure that it's batteries included at this point in time. So the things we haven't done yet, but really want to do is Ianna scraping, And, I've heard from IANA that they are changing everything at the moment. So doing scraping right now might be a waste of time. We wanted to draft scrapping, and the main problem there is that, we Need to think about version numbers. So we probably will have a 2 day record in some point in time, if you know what that is. But I think that can be separate from from defining the module. Structure itself. And, of course, we want to be able to import from GitHub and manufacturer's sites and so on. I would love to get input from people. And we have somebody in the queue"
  },
  {
    "startTime": "00:42:00",
    "text": "Hey, Jake. Go ahead. Sorry. I I double muted at one point. I was talking about something else in the chat, but, I I see Ori already got point I actually was excited about. So I often invoke examples from a a programming language very unpopular and often is confusing. So I'll start first with something that's pop positive to me. Like, allowing local file URI and remote a UHDP Some security people because they've been traumatized rightfully so by the XML sins of the last 20 to 30 years or hopefully, like, please don't do that. I find that wonderfully convenient and awesome. Especially for scheme of validation things like with JSON scheme, an XML scheme. Obviously, this is like different, but analogous. I would think that's great. I don't really know if that's in the cards from what I see here. Is that something that's possible or something that people would be interested in? Well, as I said, this is currently the implementation in the plantation has a big red blinking light. Okay. That, this allows file access. I think we want to to define this more closely. But I think on the other hand, right now, we can live with things like import Rfc1952. And and, be be glad that this works. And, define our exact XML catalog equivalent or whatever. In, in a separate, activity. And I I was really, really worried that you were gonna say something like that. And then you did for the I just think that the XML catalog thing I I I don't know. I I will defer other people's pins. I I I know people that will purposely avoid that. Even if they are adimit or sorry, audit users of XML based They will refuse that part."
  },
  {
    "startTime": "00:44:00",
    "text": "Or x include. I don't know why, but, like, you know, if you get if you you're beyond the point of dipping your toe. I I understand deferring the work. I'm I'm fine with that. But that's exciting. The only other thing I was gonna comment on is I find in the include versus in port thing, like, is others somewhat confusing. Some languages use URLs, but I will tell you the only language I've seen that has this dichotomy between import and versus include with, like, a special kind of semantics is, like, the modern version of XSLT 2 or 3, and I made mistakes with this frequently had to have a more senior developer when I was trying to work code remind me that they don't operate the same with almost all the modern programming languages and template languages and for miller with. That dichotomy has to be repeated often and leads to very fusing, fusing leads to lots of confusion from developers who don't really expect it. So having only import or, like, scope to import might make sense, but you have a fairly strong rationale for this, but just my opinion. Having seen it right now and not running the draft. So I'm, like, being a very not constructive, but not helpful person with opinions but that's it. Yeah. I think it that's, natural for people to take the existing experience, from programming languages and try to apply it in in this place and be highly misled by that because CDL is a rather different animal from a programming language. So the the the sea of rules abstraction that that is underlying CDL enables some things that that you really want to treat differently from from importing Python module or something like that. So I think we we would have to examine that that experience a little bit more closely to see whether it's actually indicative what will happen was city, Elmer George, but please do send in these pieces of experience"
  },
  {
    "startTime": "00:46:00",
    "text": "So can analyze we we them. Alright. I'm doing thanks. Hi, Brendan here. And just for clarity, I'm an author of these draft or on this draft and, Kirsten and I, already given him this feedback, and we disagree. But I prefer the Pythonic approach to this. I I find if you're going to have include having import star actually makes it very clear what you are doing and it eliminates the confusion that AJ has just brought up. I I prefer that approach, but as I said, We disagree. Okay. So we would still have, include an import which would just use different syntax by by using Yes. That's correct. Yeah. Import, you know, Imports star from cozy. It gives you everything in cozy. It's effectively include, but it at least makes the semantics very clear upfront. you only have And whole directive. That's good. Yeah. But the the the observation would be that this is really just the syntax change. So there there is, would still have different semantics for the normal import case and the word star. Her case. Yeah, it's Lawrence Funblight here. I'm in favor of the distinction. I this all looks familiar from trying to the the CDD offer And, I think I wrote a lot of shell script stuff to try to replicate some of this. And the, not pretty. Just because I had to get it done, but the definitely the distinct I definitely understand Why you want import versus export, in, include. Those use cases because you're really trying to produce a clean set of rules and you wanna know if you've got excess junk in there."
  },
  {
    "startTime": "00:48:03",
    "text": "That doesn't belong. And so that's why you wanna know. And sometimes and sometimes you're you know, in control of it as soon as you're So not. I think that there there are a few projects like the project and the current Yeah. project that that now have, sizeable experience with the combining multiple CDA5 I think we can learn from them, and it would it's good that we are hearing from them. I got some input from Thomas Forsati offline as well, which which was really use for Okay. So, basically, with with that feedback would which we still need to process. I think we we have something like an MVP for the module structure, and, that there's enough on the to do list to to keep us busy for a couple more months in particular with the IANA structures. So I I did some scraping from my inner for a different project already and it just works fine. But it's not that useful if if they want to change everything. So I'm a bit hesitant to to introduce that now Okay. I think We have Completed. Our tutorial chat, Yes. I'd like to jump over briefly to the, to to chair slides again because now we are starting with the with with the more working group style part, even though I very much appreciate all the input that I already got in there from the in the working, in the tutorial part three more documents are up, 2 from Carlson, one from me. And I'd like to Yeah. Quite quite quickly go through the documents that we have now."
  },
  {
    "startTime": "00:50:03",
    "text": "Time tag is about to be published. It's in last 48 already. EDL Litros and update grammar custom set everything that is to say about that. We need more data there. With that, back to customer you have the 24 roads. Okay. So this is Another draft that that bears my name, but actually a significant input. Came from Maria. Yeah. The the basic observation is that know have an efficient representation of Yang, the teacher, And, that that works. Pretty well. This also works great for new stuff like the cryptotypes. I mean, I'm not going to say anything about whether cryptoizes is great stuff, but at least Jeng Zebra works great with it. But there are some data types that were defined in yang before yang sprung a binary type. And, the main two causes of trouble here are the date time. Type, or it's, like, half a dozen daytime types. And the IP address prefix types, which is more like, full dozen of of types."
  },
  {
    "startTime": "00:52:01",
    "text": "And, these fully show the the XML legacy is still even in Yang Sibo because they are still encoded as text trans because young people always encodes everything by the yang base type under using based IP is texturing. So the question is can we go, beyond that. And, actually, that's What happened to subject line. I don't know. That that's not hard. Because we already have, Siebel tags for these two Areas, the daytime check, and the IP address prefix tags for 32 bit IP and 128 bit IP. And, we really just need to use them. So they they essentially drop in there there may be a few minor caveats, but we can just just put them there. There are a few little questions here. Of course, the the people who did the definition of these types We are not thinking out about deterministic representation of the information So for instance, there are 2 different ways to say There is no time zone associated with this, daytime. And now, of course, if you want to implement implement this in such a way that you actually can completely undo. What we are doing here you have to decide which of the two get the preferential treatment and, which of the the other one then doesn't. So the that's some detailed work that we really need to do and probably have to analyze a corpus of ying dot data, that we find and"
  },
  {
    "startTime": "00:54:00",
    "text": "yeah, we also don't do times with time zones at all. In in these tags, we could use the the time tag 1001. Which is currently in the RBC editor queue. What has been assigned already to to do this, but it's not clear that we would gain much from that. So we we need to examine that. So that part is kind of clear how to do this. We still have to exactly say this in in yangterms, So Yang really only knows the base type, which is always a text string. So we have to finger around and finding enough other type that also apply to the thing to decide, whether to do this, the the late, 69 91 type may not be the top level type. You may have put other types on top of that, and you need to find the the interspersed 6990 one time to actually decide whether to do this. So this has to be has to be written up in in a way that young people I also can't understand that and of course, we have zone IDs. So, wanna know what that is. We we have to deal with our sin. Some form. So the the main remaining requirement now will be to discuss how to announce the capability Yang Seabaugh already has 2 branches. The branches with text string identifiers and the branch with seats And we have a defined way how to handle that. So we just have different media type names for for the 2, and you will need to figure out from your media type, what what to"
  },
  {
    "startTime": "00:56:02",
    "text": "you are sending or what what you should be receiving. But this is something that comes in a little bit later And, I think we need to be careful that we don't do something that essentially shuts off any deployment of this. So we have to sneak this in in a certain way. And, that sneaking in is going to be more difficult to to get reliable So the the problem really is that we will have 3 types of implementations, those that cannot those that can and those that need to use these concise forms because they are simply not implementing the other ones, and we cannot touch the yang modules because these are 5 years, 10 years old modules. If we were touching them, we would completely shut off any deployment. So this has to come from outside. The, Jing once you're Marcus? Sure. So I'll just say that I inadvertently encoded with the better coatings in my, voucher library. And ESCO said Hello? What's a good idea? Wait. I fixed my code. And then I went, we. That that wasn't what I was supposed to do, and that's the sort of the origin of this. The ship has not sailed in Panama. With respect to constrained voucher yet. The ship has sailed with respect to courses, which is an RFC blah blah blah. Right? We published we've published the the seaborne coating for yang, already So but but Anna could reference this document as well. As long as we published it, you know, this year. Okay. You you can use a media type."
  },
  {
    "startTime": "00:58:04",
    "text": "So you you are really in a in a great situation. So so but but in terms of our process, we don't really wanna delay very much. We would really like to do it by the end of April, but yeah. Okay. So I think that for a lot of things that it will be simply the case of of of We're gonna have some I think we're gonna have some new yang extensions that'll explain that this is going to be used But we can also say It's Yang and some other thing. Like, there's ways of in our in our documents to express the fact that we're doing this. And therefore, you better support it. Okay, going for it. And you better not use the old one. Maybe it's the other, the point. Okay? I think that's arguable and debatable, and I think we're gonna have to multiple things. But I actually clicked the button because I cared about the last point. I think we should do it in this working group. I think I think when we started Yang Seabour, We didn't have a CBAR working group. We didn't core. Right? I don't remember. I I I I it the document lingered for literally the whole pandemic. Right? Yeah. 2013. Okay. So we certainly did not have a seaborne working group. What I hear from I thought I saw him in the room. Okay. No. Jeff is here. Jeff is not not at all. He's not Kent. But what I what I heard from from Net mod is that they wish to be the working group of last resort for Yang And so think we have the expertise here but we're gonna need The expertise of the Yang people to write the right extension. Yes. But I what I've heard this week is that they seem very willing. We just pretty much have to"
  },
  {
    "startTime": "01:00:00",
    "text": "we have to say their name three times, and then they'll show up. Good. Right? Yeah. So in call, we did those working protocols as program plus codes. So we would So I I think that's you're you're asked those questions, and that's the thing. And as you say, we can use immediate I think for the classical network management situation, My understanding is that they can inquire as to what the right what the set of VA modules that are implemented on this the server And the network management systems are not particularly constrained and can encode in different ways. And they also have to deal with different versions and also other Malarkey so I don't think that those ends are are are problem. I think that they're going to want very quickly to be able to send like, more, more, constrained things because what I hear is they really like yang seaboard because it's so much smaller to the point where they can put smaller network interfaces, 1 gig interfaces instead of 10 gig interfaces, just to absorb all their their stuff. So so That's my answer. Dude here. Yeah. So in call, sometimes we are talking about Qualcomm. We have our own Yang Library. So we probably can wedge this some somewhere in there. Yep. And I think we just probably need to just do it quickly because it's It's like the band aid. Yep. Right. Hello. I am Jeffaz. I for context to this working group. work on the Beach B Yang module, the IETF, I've been a interest observer for seaborne. Haven't done anything deeply with it, but mid watching this stuff. My primary interest is, efficient streaming telemetry."
  },
  {
    "startTime": "01:02:02",
    "text": "One of the things that I've been looking for and I've been trying to socialize in the various place I touch because I don't deeply involve myself and, NetBot. You know, it's very hard to get them to take up work that is something they consider. Core piece of work. It's very hard to get them to move. But That is probably the right place for at least a piece of this. I'll I'll I've been trying to socialize is that What's missing as best I can tell you know, observing these two steps out. Is some way to take the yang modules and decorate them with the necessary information to say that this you know, seabor tag or, you know, the SID value has been bound in this weekway for various context is One piece of the machinery, another piece of the machinery that you've gotten through is, you know, these types that are very noisy that have deficient encodings. And as Michael was saying, you know, he just did it by accident, We need a way to be able to take things that have canonical forms and yang, like, IP address is a string. Well, we have other things that are also strings that are only strings that's what they thought was convenient So a way of also decorating those nodes to say, in an alternate format like seaborne Here's the alternate rendering for it. The in format is canonical and, you know, the regex are use the define the thing, but at least gives you a a pattern that you can use to talk about things like the seaborne ones. And I think these sort of last piece piece there that's sort of missing is, you know, once we have alternate ways of doing some of these there's a number of circumstances where strings or identities our stand ins for basically what should be an enum. But, you know, in Yangland, they are often put as identities for language maintenance purposes. Being able to do efficient string table type things and, you know, assigning enum like properties to strings, whether directly know, in the yang module,"
  },
  {
    "startTime": "01:04:04",
    "text": "targeting seaborne or in something in seaborne saying that coming from Yang is sort of the cluster of 3 properties, I think, is most hopeful. Yeah. We already have some mechanics for identities in Yang Sibo. I forget whether we actually can directly encode them as Sid. But that that would be something we would like to have any Yeah. Bose mostly, again, observing 2 steps out and not being current in all of work It looks like everything is rendezvouswing in the right place. Is a happy thing for me. That was, somebody that will want to use this. The thing that seems to be missing is the yang glue at this point. Thank you. So the the one point I was trying to make is that we should not be in a position where to wait for that young group because how long has 69.91 been out there? Yeah. So, maybe doing something with tools we have in our own hands and and actually solve solve the problem like the media type name is is an expedient way to to solve that problem. But let's let's discuss it. Good. Oh, Maria's in line. Hello. I hope you can hear me. Yes. So does it work? We even can see you. Yeah. It works. Nice. You can see me nice. Yeah, I'd like to say that, the young saying, has, deviations and augmentations and modules. And, what we were discussing in our team in in season 8. It looks like, the the right way for us to go would be to include,"
  },
  {
    "startTime": "01:06:00",
    "text": "to include augmentations, this seaborne module. Okay. To have a super module which could say there is a stand in with this tag, for this thing, and and Then in our young module, which would describe what we are doing In our young model, we would augment those IP, IP types and date types. Or we could even include those, like a canonical augmentation of the of those canonical types, end. And we could also with this Add more annotations for our internal types. Okay. So The question is what we are optimizing here. Are we looking for the best way to integrate into the yin world, or are we trying to reduce the the time to market from 10 years to 1 year. 1 year. If I may interject. Well, I think I think we want to do both, but we have to balance the the requirements. And if we come up with something that is not creating deployment, issues. Then then, of course, I would prefer the best integration into the young universe that that is possible. Yeah. We we should, devote an interim to this, at some time in April so we can spend more time discussing it. Yeah. I think of another young module, which is actually actually, an extension extension is the right word. Having young extension for seaborne,"
  },
  {
    "startTime": "01:08:03",
    "text": "is something that we can, I think we can define it without others? Because it's just our extension the seaborne working group and with that, we can say and coding this to see more can be done like this. The the standards can be defined inside the extension. And, then everybody can use the extension. So we are reducing the the time to market and on the other hand I think for now, it's the best, is the best way how to integrated with the the ecosystem anyway. I can't find anything better. Format format format Thank you. Jeff has again. So building at what Maria is saying, augmentation with an extension is the easiest path for exactly what's going on here. The challenge becomes, it's very trivial to do these augmentations. A note at a time, to put in the bindings. That part is easy. We should pursue that one is, you know, a very short path to at least getting something done. The thing that is trickier for the language is the fundamental data types. It's picking date and time and IP address example. as an Those are typedefs inside of yang. The language doesn't quite have the right plumbing to augment a type, that is unfortunately a fault of the language. There is room there to break the rules from seaborland, in my opinion, if you want to past I had because because for the most part, Things just make sense. Know if this thing is an IP address know, your schema actually can tell you that because Yang schema will carry the fundamental base type through, but the actual type it is, you know, this string is an IP address. Does carry through the compilation tools, which means that if you externally influence it it can do the right thing. I don't think they could do it in the language right now."
  },
  {
    "startTime": "01:10:00",
    "text": "But I think, you know, it's a rule that's easy to break. Thank you. I was hoping we we could, use an avenue that that has the small footprint on on DANG. So the the worst cases that we have to touch everything module that wants to make use of this. And, this global thing. So you switch an entire this should be a server to stand ins. Not you touch module by module and have to code for both around, all the time. Let me ask in the queue. Yeah. Myself, once again, Maria from Sizienake. I'd like to, back, I I'd like to add plus 1 to Jeff I think the right way to go is to rather break things slightly. And even push the networks working group to, actually make the update of, new young, the right way Then to keep using the batch tools we currently have. Okay. Good. I was hoping we wouldn't have to push network because it's really hard to push a cloud But yeah. Good. I think we had a good discussion here. Oh, we actually do have a little bit of a turn left So the the last item on my list, and we were continue that afterwards is the the Cboe pact document. So so Michael doesn't care about redundancy. That that's the overriding concern. Yes."
  },
  {
    "startTime": "01:12:05",
    "text": "So data items have have a lot of redundancy, and we have been using compression mechanisms, for a long time in the IETF to to manage that redundancy. And the the most obvious way to most people is to apply byte wise data conversion on an encoded representation. So people 1st general adjacent, and then put it to through deflate. Well, that does give you good compression, in many cases. But it also means that the the data item, the encoded data you get from the network, is entirely useless before you have, fully decompressed And, therefore, what we are I mean, this method 1, exists and is being used with 0. So we don't have to do anything. To make that, happen. It happens. But what civil pack is about is applying compression at the data model level. And, so this doesn't get confused. We call it packing and not compression, And, the the ideas that the consumer of a data item can work directly out of the start pact representation. This is not packaged representation. This is packed representation, but, We all have to learn new words. And that is actually something that is much more accessible to a constrained implementation because the constraint implementation is likely to use some form of of API style access to things anyway. So, this is something we want to have in in our set of, mechanisms we have worked on a draft for this for Since the start of the pandemic, I've lost count."
  },
  {
    "startTime": "01:14:00",
    "text": "And we have a very stable part of that draft, which is the reference set So the the tags and simple values we assign to actually referencing shared or, or compressed in some other way. So this is, again, a stand in mechanism. Where we have a referencing tag, awesome. Stand in for the actual reference date That's how you actually use it. You access something, you find a stand and then just follow the pointer and and use the shirt. Or processed, data Okay. So that part is really stable. The reference semantics have grown a little bit over time. The reference to shared items is trivial. But we have, several ways to reference something with arguments. And the most useful case is completed the nation. But there are also other ideas. So we actually finally decided to put in an engine point. We already have tags in seawalls, so we can use function tags as an extension point, and we actually defined a couple in the pack document, because we are trying to ship this with batteries included. So the third thing that that is probably least stable because We only want to ship a very basic battery here. So we we we we Really focused on finishing it. We could probably easy to finish. Is the table building tags the that build the tables, and we expect applications to to come up with additional ways of doing this and, Christian will have one such in a couple of way, minutes. So we have one open issue in number 20."
  },
  {
    "startTime": "01:16:03",
    "text": "Which really is about, how we represent the presence of errors in unpacking. One question, of course, would be do we actually even have to represent error. So do we just give up so that that's something we still have to, discuss And we have various, proof of concept implementations. I don't think we have one that that we would want to use in production. Yet, but we are playing around with this stuff and, and, typically don't get lots of negative, feedback. What's Good. Good. Hello. I'd like to, ask just a sync Sim sin, single question. I can do partially the same thing by, by designing the model itself in the right way for example, sending sending a cash ahead, and then having this pecking inside the model itself. What's preferred? Well, having it first to to pack, this way or or by the model. Having a common set of referencing tags has its advantages and disadvantages. The advantages that common. So it's already there. The the numbers are already assigned. The disadvantage is, of course, that you have to coordinate its usage. There may be cases where you just define your own tags. Which will not be quite as efficient, but we'll we'll probably still give you some some gain. But, for for the the most likely cases, it's probably good to have common set of these tags so we can give them enough"
  },
  {
    "startTime": "01:18:02",
    "text": "from the total code space we have. To support this. Brandon Winterway again. Okay. Yeah, so, There there are now 4 drafts in the agenda draft directory that actually are relying on on seabor, packed And there is a 5th draft that is actually making an extension to it based on on what are defined extension points for this. So they they are not requiring a change in this draft. The the injecting with its extension points. So it's no longer something that we can just keep simmering but, we we probably need to finish this stuff. Soon. So I think all I have. And maybe we can switch to Christians. Item k. Seeing no questions pop up. Yes, that's what I will do. You know, here we go. Yep. This is an individual draft that I've submitted for, for setting up tables as customers already outlined. So I can skip through the table set up. But there is an aspect of background that I'd like to focus on here that is how this is used for all would be used in coral. coral, So sets up to be not only a replacement format for, our 690 link former documents, but more generally descriptions of resources on servers."
  },
  {
    "startTime": "01:20:05",
    "text": "And this can be part of discovery. This can be part of public scrap topic, discovery, and topic set up. And has also been part of some group communication management documents. So there's rather large variety of content that might be found in a crawl document. K. To get to express that variety will sorry, sooner or later have to extend the vocabulary or the the tables that come provisioned with with with a with a media type. So the I expect to be a common case is that we're using a media type and that media type already as this crowd impact has a set of, table entries that can be used. So for example Here, we're talking about and completely disregard any syntax here. Some sensor and the that we are saying that it has title for that, we use a pack, a shared reference, 6-2 reference is where references somewhere inside the table. And then we see the value And then the next line, we have content type, which is the first simple 0 refers to the first people in the entry and so on. So we are picking from that from that table and for example, in in this, media type, that dictionary may contain something about 200 if I'm saying dictionary on accident, sorry, that wasn't all the term from CBAR It's tables now. So that tape those tables, might contain somewhat about 200 entries, maybe for the first iteration. Now if that format gets extended, and all the caveats about negotiating versions and failing safe in case of an unknown item or negotiating presence do apply here, but those are well understood."
  },
  {
    "startTime": "01:22:03",
    "text": "If this this can get extended already with what is impact because the the table entries beyond what is originally populated are originally undefined so that reference those references would just trigger the mechanism that is the open issue impact that Carsten spoke about before. But if a consumer knows a new a new content of the table, for example, because an update defines how real equals how the description works then that could be referenced and there is a tag referencing into that previously undefined area. All of the tables. So that's well and good. And that works. But that works well for anything that is linear. So if we have a space and then the more uncommon items get out of the at the end, that works. And if there is one place where they can be added, that works well as well. But for a coral application, there might be, custom extensions that are not part of that central media type Table set up. So how would do we deal with them? We could, of course, prepend the tables. With the one simple extension mechanism that is defined. Well, that means lagging around those tables and for for every representation of a document. The mechanism introduced here and, ah, sorry, in the slide not get updated. I've in the meantime, updated the TBT 114 to mechanisms from the tutorial, which before. There could be a new a new mechanism to set up the table. So that is added here in the first line. That is setting up the table with 2 more entries, as with the simple simple setup, those 2 more entries are shifted in from the left to the to the table, So we're shifting in. Two items."
  },
  {
    "startTime": "01:24:02",
    "text": "From somewhere that is described by that URI, And then we do all the we do all the references into that table. As we have done before. And see, this is referencing to your there is dedicated documents to whether or not you should reference them and when you dereference them and what can go wrong. But Although that is understood and described in the document, And if you prefer to use your hands or identify the tables, say by their, by by a hash of their content. That works just as well. So that's the I'd say the the obvious use of this document There is one more efficient way of doing things because both that both any hash or the that name, is rather long but you could also use and identify that this part of the dictionary. Now that brings you back a picture. Of the table that brings you back a bit into the topic of centralization. So you would still depend on that central point that defines how the media type how the media types tables are set up. Again, but it only brings you back there for one entry. So in the concrete example of coral, when a pops up is defined in terms of coral, the one root, media type 4 link relation style content could just add the one URI that describes, pops up extensions into its tables, and then a particular document could say that it imports 2 items"
  },
  {
    "startTime": "01:26:02",
    "text": "from the location that we know by the shorthand, stand in minus 19. Which is yadayadayadaexampleofcon/calibration or or pops up in that case. And then those two items are prepended And the rest of the document can express everything it needs to express in a very concise way. And as with the preloading of the of the tables from the media type this can that document can be extended later. And to allow it to be extended later and also to allow the large document to be understood at least roughly by processes that do not understand that precise reference We always say how many items r prepended to the table. So When push comes to shove, processor receives the document that does not either does not know that reference minus 90 or does not know what example dotcom/calibprecisely means They can still process the document And those 2 entities entries that have been pushed into the table. Will just resolve as undefined and then it is up to the application or through the specification of the format per se whether encountering something that is undefined and cannot be and compressed will be a hard error in which case, yep, there are better be negotiation about supported extensions. Or as is the case in coral and also in CRS, whether that just means that this particular node in the larger data, cannot be processed. The rest of the document still can State of the whole thing. I think it is largely feature complete. I'm working on an implementation I'm working on incorporating in it into coral."
  },
  {
    "startTime": "01:28:00",
    "text": "And as for the future of the document, I'd like to ask whether this is something that this working group would like to take up Thank you. And I will just throw in a time check. We have 2 minutes left. Almost proud of time. Custom. The the question really is those those application oriented table setup. Thingies, do they go into the application working group, or this case, this would be Call or do they go here? That that, of course, depends on the level of application orientedness that we send for this I don't think that this is really application oriented. I think this is useful 4 just not just for coral, but just as useful for any application that prefers not to have tables in a media type or that maybe is not even media type based and does not have any other bootstrapping mechanism for large tables that it that it shares across the application. Okay. In that case, the answer is yes. I think should do that here. Okay. So I think at this point, we will get other opinions on this on the mailing list. And, decide what to do, Alright. We are about out of time then. Are we done with the agenda? Christian, Yes. I think so. Basically, that puts us in the oh, no. There's one there's one brief point to"
  },
  {
    "startTime": "01:30:01",
    "text": "to point out, in terms will continue, there are already proposed dates. This is keeping the cadence as always. Every other week in lockstep with, with core. And I think Any other business? Okay. We have hit the bottom of the hour. We you, everybody, for attending both remotely and in person. For those of you who are on-site, the, This is the end of the IETF week, and there's a the farewell reception Starting upstairs in a few minutes. We will see you all online. So you have a good trip home."
  }
]
