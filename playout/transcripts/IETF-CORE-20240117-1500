[
  {
    "startTime": "00:00:23",
    "text": "so as usual let's wait until for past or so before we start"
  },
  {
    "startTime": "00:04:12",
    "text": "okay being for p pass now I think we can start so welcome everyone to this um intering meeting of the co-working group uh the first of this New Year I'm marok micro Chaser Ken Borman and H menes and this is an official ITF meeting so as usual the not well applies it's not just about iprs but uh most and Especial about code of conduct so please be nice and professional um with each other uh before getting into the main uh topic for today just an announcement that uh less than 30 minutes ago I think umg approved uh the publication of the Yang seid uh document you can see the pre-announcement of the mail on the mailing list so uh we look forward for the uh final announcement and congratulations to the authors and the working group for this it was a very big achievement thanks Caron especially okay um you want to say something Carson by the way yeah this probably was the most difficult RFC to get through the final stages um the the work started like 10 years ago 11 years ago um and Peter vanderstar was one of the people who was pushing this forward and took us a long time to understand what we really wanted to do uh and then it took us a much longer time to actually uh get this uh understood by by a lot of people who needed to understand this to make this happen so thank you for for everybody who helped doing this and uh of course"
  },
  {
    "startTime": "00:06:00",
    "text": "thank you to the people who are retired uh now who who worked on this um yeah so I think we now have an efficient way to to give numbers to um items that occur in in a schema like a Yang schema and that will allow us to have very compact very concise and and very efficient uh management communication and and other kinds of communication so of course I started work on a new draft in the space this morning if you are on the SEO mailing list you may have seen that that I accidentally leaked where where that work is happening so the the work is not done but I think we reached a significant right stor thank you uh for the summer and I'll work on this again okay um after that we have one uh main item in the agenda for today um it was a proposal from Christian that came around a bit after the ITF meeting in Prague uh last year um it was U mostly about the um allcor key update or Kudos document in core but um closely related and mostly in the interest uh I understood of yet another document um in core um the proposed cash BOS core and yet the authors of Kudos meaning rard and I thought uh deeply about that and and we could come up um with our thoughts for today to to discuss more about that proposal and understand it better um but we have plenty of time for today uh if this is the only the the only item to discuss I think we'll save quite a lot of time so is there any other item for the agenda today or any"
  },
  {
    "startTime": "00:08:02",
    "text": "agenda bashing more in general if none let's focus on this then and rard the stage is yours if you want to share the slides yourself yeah definitely me ask to share slides so I should have asked now yes okay so yeah like Marco mentioned they gave a short introduction there this presentation is about Kudos but the focus is mainly this proposal from Christian that also affects um cashable core or was in the benefit of cash blow score has to recap the current state of the Kudos draft um it's it was composed of three parts uh part number one about the actual core Kudos procedure which is for renewing your master secret and master result and thus deriving new sender and recipient keys and it has some nice properties including no change to D context and the ability to preserve forward secrecy U or yeah and um it's also agnostic to the key establishment method originally used so maybe you establish your context with adok or uh pre-share or whatever it doesn't matter you can see run kidos to update your key material uh the second part of the draft used to be about the key usage limits meaning specific limits on how many times you can use your keys uh for protection in oscore this was split out into a separate draft as of March 2023 and then point number three which is still in the current Kudos draft that is about procedure for updating the OS core send and receive IDs which may"
  },
  {
    "startTime": "00:10:01",
    "text": "be desired in the sake of increased privacy and as we discussed during the ITF 118 session U this will also be split split out into a separate draft um and thus only point one will remain so Kudos draft will really focus on Kudos and these other two parts will have drafts of their own so Things become a bit more focused and the Kudos draft itself becomes a decent amount shorter also and also just to recap the procedure overall the cudos procedure itself it's about exchanging nses between the two pairs between the client and the server um in this figure we have the client as initiator but you can also have the client as responder so we have both the forward and reverse message flow uh similar to um to adok um you exchange the nces in a field in the off score cor option specifically the nun field uh we have a specific function that takes these nonas and also X bytes uh and XB code specific flags and also uh the length of the nuns and all this information is used to drive a new master secret um and um after that you get new sender recipient keys on both pairs and then to go into this proposal from Christian which we try to summarize here in this slide so basically um it was mainly presented in these two issues one in the osore key update repo and one in the cash osore repo and overall the idea was about um benefiting the cash bosar document So currently in cashow score the things the way things work is that a request hash value is computed over a plain cor request and then this request"
  },
  {
    "startTime": "00:12:02",
    "text": "will be created uh into the Oscar protected deterministic request and the request hash value is transported in a dedicated request hash option placed in the deterministic request um and then the question can become um yes see Christians already in the please to jump in when whenever you have something yeah I can't hear you if you're speaking yes I'm here an audio from Christian maybe some technical difficulties yeah before the meetings I I could hear some soft noise from Christian's side but never his voice no yeah I I I didn't I don't recall hearing's voice during the meeting that's true can you try to rejoin Christian looks like you can hear us at least maybe not even that but yeah let's give him some time to to try to fix things but yes to to um to clarify this is our perception or our summary of the of that idea presented um I guess yeah chrisan he can write in the chat it seems sure that would work work yeah one one more thing to try ah"
  },
  {
    "startTime": "00:14:03",
    "text": "yes now don't fix it okay sorry so the thing the thing why I wanted to jump in briefly was to give a bit of context of of that that is probably missing here that is um the original idea when sketching up cashable osore was to um just pick the oscore nons of the hash so so use the hash as the oscore NS MH um or kind of put that into the sequence number field but that thing is just too short to um to be sure that the um the random output of the of the hash function um will give us enough entropy not to not do any key reduce so I needed to have to add another way through this um extra option um to to add in something into into a non is field and that's why I was coming to um to Kudos because here hey we have a new way of inputting nonsters and all of a sudden this nons input is not limited to the length of the um aead nons minus our our identifiers and all of a sudden this becomes viable so this is um this is the context where this is where this is coming from right so thanks for the context uh so so um understand a bit better and likeing you already nearly were thinking about the the kid um field right but sure then basically as we summarized your proposal here is that what this would be about is enabling longer nonsense than 16 byes and Kudos um and one aspect was that this can be done the Nunes can be transferred in the nun field of the Oscar option or alternatively in the cor payload uh prend to the oscore cipher text which has some benefits because you can take advantage of fragmentation with"
  },
  {
    "startTime": "00:16:00",
    "text": "blockwise and then like you said this would also then enable actually transporting the request hash value in this nons field um and where you can have a non stand that would be well more than 32 bytes so to continue on this uh we were discussing and we had three kind of points to consider based on this idea and the first point being how do you encode now the size of these larger NS um the second point was the positioning so should it be what if you have it in the cor payload versus having it in the nuns field of the oscore option and analyzing both these two uh ideas and thirdly how does this overall fit with uh Kudos and cash below score so so as far as the encoding of the non size um you can see here the first part is the current way the non size is encoded which is in a quite simple manner basically the non size can be between one and 16 bytes and we encode in this m subfield of the X byte um the size minus one um and then immediately after following X spite we have the NS value itself so in this example you can see that the M sub field is seven meaning that the N length is in fact eight bytes and there a proposed new encoding which would allow for n sizes from 1 to 6585 bytes um it um we decided on an idea that is quite similar to how the cop option number Delta is encoded so we have the X field and the 4bit subfield M can then take uh"
  },
  {
    "startTime": "00:18:03",
    "text": "one of three cases basically case number one is uh like today it's between 0 and 12 H and it's to be interpreted as the size minus one alternatively the value could be 13 which signals that a one byte XM field follows um that holds the size minus33 minus one and option number three is that mfield has value 14 which is to signal that there's actually two a 2 byte xtm field following that has a 16 byte integer uh including the size minus 261 minus one 269 minus one and in the example you can see that we have m is equaling 13 meaning that it's signaling the presence of XM one byte and that one has value 18 and if you take 18 plus plus 13 + 1 you get 32 and thus the non field takes length 32 which is also and we chose this example because 32 would be the size of the uh request hash value in cashow core and uh so overall I mean in terms of encoding the size it's very much doable and it would work to enable um yeah very large ances um so that you be a an issue and then coding could be sold in this manner and then we come to the question of the actual positioning of the nuns so we had some discussions on this and well the question is where do you place now these nuns or the hash value if we're talking about cashable L score so we consider these two options option number one is to place it in the osore option which is where it's already in Kudos"
  },
  {
    "startTime": "00:20:00",
    "text": "alternatively you can put it in the core payload prepended to doore Cipher text as for Kudos uh we refer to this value V which is the Kudos nuns so we consider this requirement that V must be Integrity protected both in the request and response H which in which it indeed is because V is taken as input to the key derivation in Kudos so you take the actual n values as to the key derivation and as a conclusion uh placing the Kudos n in the Oscar option or in the cor payload uh would both work fine because the Integrity protection comes from the fact that it's used in the in the key derivation um as for cashow score in this case v would be the request hash value so in the ID deterministic request V takes place takes part in the key derivation uh and thus it's Integrity protected and its position would be IR relevant meaning you could place it either in the co-op option sorry either in the Oscar option or the co-op payload um as far as the response to the termin request we conclude now it um if it's um yeah if it's about response to the deterministic request um we concluded that if you place it in the osore option well it will be Integrity protected because the external ad includes those corruption um and would thus um provide Integrity protection this is because it's you being protected with um with group of core actually in this case in the cash score case now if you place the request hash value in the core payload um there's not really any mechanism then for integrity protecting it um since it won't take part in the well it's not"
  },
  {
    "startTime": "00:22:01",
    "text": "part of the external ad it's just loose there in the core payload let's say Christian um to be fair I haven't spent much time thinking yet about how this would be used on the response side um but I don't think that at least the request hash value would be transported in response in the first place because the um the uh responder can be reasonably sure that request can of that the requestor can map the response to request already mhm um and if the protocol necessarily mean um if the protocol mandates that there is a a nons value in the response the server might take a very very short non value even um because it can be sure that it's it's it's using sequence number so this kind of this there is no need to um transport large amounts of entropy um in the response because there's a signature under the response and there is a a a um signature and response and or a counter for the and and and a sequence number counter so um the request hash should not be transported in the response right and I believe that's what the draft says too that typically uh if it's assured I believe it says that the request hash option should be uh omitted from the response yeah and um but I guess the question is don't you regardless of that have to um when you're protecting that response somehow somehow involve the request hash value yeah the the request hash value is involved but that is one of the reasons I'm you I'm I'm suggesting to use Kudos here because by the time um that request hits the server the server creates a key state in into which the request hash is processed as part of a nons um so it is"
  },
  {
    "startTime": "00:24:02",
    "text": "um so that the response already Works only if the request if it's processed for the right request has uh I I see um I guess what we were discussing was that um yeah basically if you put the value in the core payload regardless if you like if you don't actually include it in the in the response I mean um when you're protecting the response if you're not including the request has value at all is that uh and then you you're involving it when I'm protecting the request but don't you need to also involve it somehow in the protection of the response or you were trying to explain that it's somehow well it does update the Kudos uh the Kudos key material so um therefore it is it is part already of the of the protected response I see what you're saying so we weren't thinking about it like that we were thinking so you're actually saying that this will actually trigger like an actual execution of Kudos yeah it's not just I see so it's not just about transferring the nums or request hash values actually it's really about running Kudos and the server in a sense um would have uh so the server has basically two options here the server can keep track of the say um short response nons values that it could use for the um for the deterministic requests and keep a sequence number for each individual deterministic request or otherwise just make sure that it is using the sequence numbers in the deterministic fashion in a in in a regularly ordered fashion or it could come up with a random response nons and thus um basically do what you can do after Kudos that is restart the sequence numbers I think it is preferable for the server to um to use actual incremental sequence"
  },
  {
    "startTime": "00:26:01",
    "text": "numbers because this allows the client to then reorder the responses which is a important property of cachable lacore um and from that would follow that the server would not even input kind of the server would input a nons but the non the server inputs would be determinist would be just as deterministic as the request but unlike the nons in the request it can be very short so like as you've shown you can't have a zero length um input material so it would be one length it would be one long and the server would pick one and stick with that um I see so but how would this work considering that this is a a cached um like um do you have all these necessary properties in terms of of freshness and such if you actually well freshness the the um Al kind of if it's supposed to be cashable it can't Pro provide freshness and that is a kind of that is a fundamental tradeoff that is done when doing cable so the when the client sends the request it cannot know whether the response that it gets might not have been created um before the request was sent it's kind of basic caching only thing that the that the client can do is it can order the responses by using the sequence numbers and it knows that if there was ever a reing in the on the group side it knows that the response is fresh is is fresh relative to the last reing because that is that is where the key material came from okay so I I haven't thought about this but basically in catore it's you're you're actually using group of scoree right so how would this yes I mean wouldn't it be um descri could is described for group of score as well so there I would basically just r that it's working for group osore uh well it's currently only for"
  },
  {
    "startTime": "00:28:03",
    "text": "vanilla osore in the the draft although we have thought about similar like solutions for group of score but I think the tricky thing is if you re key pair to pair like that don't you become out of sync with the overall group key material uh the thing is you don't you don't re you don't really Rey pair to pair it's more like so this would be in nonprofit perfect nonp mode M so when you have the the the groups the the group state that is kind of the pairwise state between the deterministic client and the and and the server um each of those Kudos executions that are triggered with the deterministic request spin off a new security context for each of those um deterministic responses um but because we are not in PFS mode MH um those don't overwrite each other but those live independently and basically can so and and as long as the server takes care to not uh to not forget things um or just has its monotonal it's it's always increasing sequence numbers the server doesn't even need to persist those individual ones but it can just see okay uh there is a new request coming in here it is doing Kudos with this and this hash okay I'll pick I basically I'll create a new of those child contexts and because I don't know whether I have created this CH context before or not I'm taking the next sequence number in my general s sequence number so I don't have to keep track of all of those um and then it's a kind of feral it's a kind of an FAL Kudos run so that Kudos run is good for exactly that request response pair okay and then you rort back to given that the requests are all deterministic um they still line up a cryptographically okay so it's really like FM like then when this C execution combined the terministic request and K"
  },
  {
    "startTime": "00:30:01",
    "text": "execution is done you well you revert back to using the general group cont yeah you don't kind of you're waiting for another request to come in that has its own Kudos St thing but that again is starting from the non PFS mode okay sorry to jump in why I think one thing I don't understand is um Kudos as it is designed now um protects the first message with a temporary context um derived from well the nouns involved in the message and the current uh context between those two exact ears an old fashion per Y is oscore context so group oscore is not really involved um in that to put it simple group of score has nothing to do with Kudos right now I think I remember that there was some well in the draft there's nothing about group of score have had other side discussions at in the past about how could this be applied to group of score to update the Parise keys but draft itself is only about OS score not group of score at all exactly Christian I think what you're remembering is an idea we quickly talked about and not in detail in the past about um a small uh Fork of Kudos uh yes in the interest of upgrading uh pairwise keys of group of score between to except group members but there's nothing like that around yet uh is not part of Kudos at all um to give a bit more detail on the second half of of this slide um in casab bosor as it is today using um group of score um even in the response it's important to um Integrity protected Ash value somehow uh to rebuild the sort of secure binding between request and response that would be otherwise broken IR respect respective of having the option put on the wire or not and it"
  },
  {
    "startTime": "00:32:01",
    "text": "works now because you're treating that that option as class I irrespective of its Regional not and well that's protected naturally through the external EAD and the slide says that even if um as you propose um the ash value would be put as a Kudos n IND corruption you still work luckily because grouos score um through the external ad all Al protects the Oscar option uh of the present message so that point means that yeah you still work just in a different way um the payload would not work because in that case you can protect it anymore but but doesn't the request n the nons that is sent in the request when using Kudos in full with some hand waving for the group part um it does update the key material and if the key material is updated um that input is protected as part of the authent of of the a tag well for the request uh response I think I mean your point Christian is that you we you were thinking about like actually truly running Kudos yes yes our mode of thinking was that you're using the field Mainely for transporting the hash you're not actually executing two those by means of the deterministic request as attribute yeah I'm I'm I'm really thinking of this as as running Kudos because that's the whole kind of to me that's the whole point of of offloading those things because I'm deterministic oscore is now reaching into depths of osore which I would prefer not to regen two and Kudos not only gives me the field to send the data in but also the mechanism of how that data is processed into into into updated key material so that I so that the the deterministic osore draft doesn't have to reach that far down into osore but just Al how basically guide the"
  },
  {
    "startTime": "00:34:03",
    "text": "decision steps in using deterministic osore that allow in in guide the decisions in in in kudos to make things deterministic yeah and I think then one complication we definitely have is that the way Kudos is defined now is exclusively for exclusively for osore and not group score and yes um it's not yeah it's not entirely clear to me how it work with group of score like you said you can have this kind of Shane or Epal context but I wonder if you wouldn't need to also update the some part of how the new context is derived and other things um yeah this this clearly needs needs a bit more more thinking on my part yeah yeah and other than this uh straight separation um in cashable score as it is now you have the the request protected with something special at the end of the day derived from the group material and fortunately in the request the ash contributes to the derivation of the key material specifically used for the request and then you Integrity protect it in the response instead um the key material to use is not newly derived it's just the center key of the server per group of score yeah but that then needs this weird con Str of having the invisible class ey option and yes we use if if we manage to use Kudos here we would just feed that that thing into the key material and then not need any any Shenanigans about how this is sent and not sent and still part of the authentication and I think it would be way cleaner to do it that way but the the whole point is transporting that value say in the osor option at the end of the day why does Kudo specifically has to be involved in"
  },
  {
    "startTime": "00:36:03",
    "text": "the point is not the point is not just transporting it the point is um transporting it and getting the request response binding um by means of that value finding its way into the into the osore key material that is um so so like if if it we just about transporting it yeah then it could it can be an option it can be another field in the osore um but Kudos has all the parts that are needed to make to make this secure without without the application of of theistic osore reaching that that far that far down into osore but that binding would work um anyway here right because the cor option is protected so the moment you something there in in the request yes but in the response if we don't want to send it explicitly it's not oh right that that's the problem you cannot Al light it anymore yeah and and and and and we needed all light it because the one of theistic goore is to have multicast notifications and we don't want to send stuff around there I agree is so you are you basically getting to the point of a of the next slide if I remember correctly on the performance so so far so good was about yeah making a s check of what is detected and how but but then we really get to the point you just mentioned yeah indeed and so but I think it's it's um so of course this presentation is based on we didn't consider that you were actually executing Kudos uh possibly we we should then rethink it based on that scenario if that is somehow possible like you're saying to take advantage of the fact that K is changing the keys um but I think I can go to the next slide because that's relevant also for"
  },
  {
    "startTime": "00:38:00",
    "text": "what we have discussed so um let me check I was something correct yes so this is the next slide um and then the question becomes um basically um yeah like we we concluded placing it in those Corr option would work technically um but is it a convenient solution for Kudos and well what we concluded is that kudos we don't really think that Kudos needs Kudos itself needs longer aners than 16 bytes um because well it's already supporting 16 bytes and if you have longer ones you really need a a very good source of entropy uh on the devices and um another let's say um complication is that in cash below score it would become a bit more difficult um parsing messages in the sense that um these messages would basically be marked in those cor option as if they were uh Kudos messages uh but not actually being about the key update but now I understand your point Christian that this would in fact be about the key update according to your idea um but nonetheless the message processing would be a bit more complicated because you it's not enough to check um that uh the the bit in those corruption is set so this is about Kudos you also have to check the the request kid to see that this is the that it's the sender ID of the deterministic client and as a next point we concluded as was just discussed that if you place the request hash option um and you place that value in the oscore option instead you are not able to Alli it from the response as is normally the case in cash ofos core um and that results in larger response"
  },
  {
    "startTime": "00:40:00",
    "text": "sizes So based on this and our current understanding of the idea you proposed we we kind of concluded that it would be better to keep the the current design in both documents uh as the Kudos doesn't really need longer nonces and it seems that it would in the case of cash score result in more complicated message processing and increased communic overhead but again this is based on that understanding that it's not actually about running Kudos and well feel free to jump in if you have let me just take this last slide about other General points so um as far as the limits document which has been split out from Kudos uh a new version was submitted version two has to rebump it and keep it from uh expiration uh otherwise we're we're most waiting for um updates to the CG aad limits document and we also heard that yon mson may be um going to um give some feedback either directly to the limits document or possibly otherwise into um c4g as far as the ID update procedure well that was discussed in id18 and decided to split it out into a new document uh so we will do that and submit before the next um cut of date uh as far as three specific open points that were discussed and um raised during ITF 118 where we also um got some feedback is the um enabling of a more flexible Kudos message flow so we don't have to have this red request response flow so it's not necessary that you have to have a request and a"
  },
  {
    "startTime": "00:42:00",
    "text": "response why can't you run Kudos with for instance a request from uh one pair to the other and then the next Kudos message is yet another request uh from that other pair to the first pair so doesn't have to be so read that it's only about request and responses always and Christian this was also based on um one of your scenarios based on the resource directory so we said that this seemed reasonable and good to kind of not put ourselves in such a rid structure so we will go ahead with that we also discussed um allowing Kudos messages to just be regular application messages there's no need that Kudos messages can only be sent to this wellknown Kudos resource it could just as well be a a client that's actually wanting to retrieve a resource on the server and it's not only doing that with the request but the request itself is also a Kudos message and then finally we discussed this usage of non-random nonsense in Kudos where Um this can be allowed but limited to capable devices while we still um recommend the usage of random ners and as far as implementation we're actually starting up now an implementation of Kudos both in yva and also in C with the aim of running it on some actual constraint devices yeah so that was the presentation the other things were um backup slides but um yeah I think we had a good discussion and uh again I think the the complication would be that if you want the terministic request the deterministic request to actually trigger a Kudos execution um yeah the way we have Kudos defined now it's it's completely only for o score and not for group of score at all yeah so I think if if if we want"
  },
  {
    "startTime": "00:44:01",
    "text": "to make any progress here I will have to look into how Kudos basically pick pick up on that thread about Kudos running in running for groups and then see where that gets us and whether that whether that when basically done straightforward has all the required properties for theistic go cor to just magically work because that's what in the end I I'm I'm hoping for so my My Hope here is that um when kudos for groups is defined in a way that is not too absurd um that then deterministic osore can just become can can not say anything about cryptography at all basically but just say that you're building this basically you're using this nons and it's okay to use this nons here and then everything else falls falls into place and probably means to say a few things about like you have to verify that this cash match is up yet but um that's about that should that should be about it and no no no digging deep in in in Osco security context but that only works if um that only works if um group if kudos for groups works well and on the point of of where to transport it um yeah I I have a hunch that if if it turns if if long nonsense would really be complicated to add in here um then it might even be an option to have that basically that request hash option act as something that overrides the kind of that interacts with the Oscar option in providing the actual long nons that is longer than could be expressed something like that to still um fall into that path of using Kudos even though Kudos on its own cannot express that long length that long NS I I think I see your point there I it would be like like the oscore option is"
  },
  {
    "startTime": "00:46:01",
    "text": "very Compact and it can express some things and there is another op another actual Co-op option so we're not getting too far into this business of having an option that has an internal structure that has some bits that because that that's that is one of the reasons I brought up the topic of of doing it in the payload because I'm seeing that there's this option and I have to make sure that the um the bits there are staying usable in the sense that you can really can process the whole message just from seeing those bits and using another group of bits is already something um to to indicate a length is already something that I'm yeah kind of not too happy with I mean it's it's been used that way so kind of it's fine but then playing some field extension tricks in there that have to be supported by all implementations because otherwise they can't even ignore that field if they know that they could ignore it um is is stretching it a lot so maybe yeah maybe maybe going with a dedicated option or something requ um deterministic allcore specific might really be a good path forward here um even though it would still use the full kuros mechanism because otherwise the exercise is need right so basically in terms of Kudos yeah there's then would be any need to support longer nces however if there when this group Kudos is actually defined and put into a draft that could possibly be taken advantage of to simplify some aspects of cash boss core and maybe removing this trick of handling the request cash option as class ey and instead relying on the the group Kudos uh key renewal to to um achieve similar properties and"
  },
  {
    "startTime": "00:48:02",
    "text": "um then whether if you're using a specific option you can say that in the context of like group Kudos combined with casos score that the value from that option is supposed to be taken and used in group Kudos as some kind of input yeah okay um there the que yeah yeah I just wanted to point out that nominally we are still using seore here so um I think the the number of special hacks for for conveying structure uh should be rained in a little bit um so um yes we are in the coab context so we we we kind of have the the coab uh functionality for expressing Lang L available as well uh now that actually comes in in a combination with with an option number so usually it's the the upper bits that carry that length information um I'm I'm just seeing us slide down this this path where where we invent a lot of binary syntax uh which will give us a lot of cves at some point in time because people aren't doing the paing right which is one of the reasons I was advocating against doing any any of those those magical things here it's we we need the bit Fields because that worked that was what made OS that was what allowed osore to be as compact as it is and we can't do bit Fields with seore but mixing in cabore or picking up Coop option ructure inside that option that already has its bespoke binary thing I think we should I think ideally"
  },
  {
    "startTime": "00:50:03",
    "text": "we should do neither and uh right because basically right because now yeah like to those corruption today it doesn't have any sear encoded stuff at all so even if we go with this custom non-size encoding or we go with putting in seore it would still be a complication of the like Christian said the oscore option already has its own custom structure and and none of the elements are are see encoded so probably the easiest is to do neither like neither include any SE encoded stuff or include this um bit uh signaling thing uh so I if you don't need longer aners we don't have to do either right but I also don't want to to blow up this stuff so it's no longer useful um but uh I think we we just have to to have have to be wary and and have a good reason for doing things like this before we do that I agree definitely because this would for sure I mean it would complicate the parsing of the those corruption definitely so the yeah the simpler way then would be to stick with our Uh current encoding I would say that would support 16 byes so um the the oscore option if I remember implementing it correctly which has been some time um is in a sense a shorthand of some components of um of a cozy structure right it's taken build from if too many of the things we are adding here become non not just set bits um but also type length values I mean like we this is like the the we we had we had the F the first the first um length The Limited"
  },
  {
    "startTime": "00:52:00",
    "text": "thing we had in there was the um was the nons sorry was the sequence number yeah and then we have the sender ID which is automatically length The Limited um the ID cont it might well be worth considering if for things that are not uh for for that when we are adding more things with a length even such as the nones we have here whether it might make sense to have another maybe Co-op option that expresses those things that are not as sensitive to length as osore osore was um to to move them into an into another field that also had sorry another option that basically gets unioned with the oscore option but is used for things that are more regularly cabore encoded so say um say if we were talking about this as a nons and I hope that it has some equivalent value in in in the Cozy context then that could be one bite indicating the key and then one bite indicating the length and then the value uh and comparing that to the current lengths we have that might add a bite or so probably two bytes because we'll have to add another option but it takes something away from this option again so um maybe that's that's a path to look into in parallel independent of of the length topic so your path would basically be like in in a sense like you could say well the osar option could stay as it was in the osar RFC but then we introduce Like A new cop option that is like osore extended or something where we place for instance the the two non say and but in that case encoded with seore yeah"
  },
  {
    "startTime": "00:54:01",
    "text": "if it's just it's just a rough idea from seeing that there might be reasons to do seore in there and if we we if we are ever tempted to do that the um the dedicated option that uses like uncompressed SE um might become a good thing yeah that's another facture and in if that been the case of course then enabling these longer anounces would have been trivial or a lot simpler um so yeah uh that that's also an interesting pa um but um yeah I think that's about it what I had um if no one has I have one more question for Christian most for my understanding um thinking of the current design of cash score um understand with the hope to somehow merge things together did you see any particular reason for basically get rid of the current request option yeah so the the particular reason is that I'm reaching down into the into the osore key handling stuff and that is a um hard to maintain from an implementation point of view because it's just another special case in the already special case heavy um part of deciding which key to use and and whether uh or nocore option whether a part of the OS corruption influences the whole processing regime and also from the security point of view because if Kudos gets kind of if we're building on Kudos and just stating that you using a terministic nons is okay under these and those circumstances that is easier to review from a security point of view"
  },
  {
    "startTime": "00:56:01",
    "text": "than reviewing that we are now creating a new security context with uh with with this and that input material okay uh yeah as rard mentioned before in our thoughts in our analysis we didn't really see cashar and Kudos mered we were more rethinking cash score um using the extended osore option like Kudos does yeah yeah exactly because for now Kudos is streamlined for oore indeed so we were thinking about this as like a transportation yeah problem where do you transport the has yeah I'm I'm I'm sorry I didn't Express this more clearly but you would actually work uh honestly it's just then you end up with the penalty of overhead that you can you can't really bypass because as we said you cannot really alide the your cor option alog together transporting the hash yeah but it's it's like on on the response like in Kudos in Kudos it wouldn't be part of the response so that I think that's fine right so then you're saying if it was this group Kudos then because it would be taken as input to the key derivation you wouldn't it would it would be Integrity protected because of that you wouldn't have to actually include it if this was about run really running a gr variant no okay but I think it was a good discussion I understand the the um the idea better now yeah so understood Christian you you'll go through Kudos again um yeah to double check if it matches and if it can be developed to the direction you hop for okay yes thank and feel free to comment on that issue you already opened or we can go VIA mail or if we meet at some point so let's"
  },
  {
    "startTime": "00:58:02",
    "text": "discuss it further okay thanks for thank you for listening thank you very much Rickard and all for the discussion and just jumping back to the top of the notes in the agenda actually I had to add one line because while we were discussing uh the mail was sent so renewed congrat tion for now approved for publication Coury document that was fast okay which brings us to the aob and there a nice note from Christian yeah um I I just want to take the this context to announce that um the rust implementations of seore H sorry of Co-op um are getting a big round of updates so um it's not quite where I want it to be on the long run but I think it should now also managed to give a good interface for requests not only for for for the client not only for the server side so if you're interested in Coop AP uh thank you your audio just cut off all the sudden uh but I think we got the point do you have any specific uh pointer uh basically once I'm done with once I'm done with this I'll update one of the readmes to illustrate what are the components because that this is really an interaction of um six or eight Library crates which all try to be minimal on their own um so there is once I have that graph that is part of this big update um I'll I'll send that to the call list and would be a better please please do thank you okay so we are at the end of the agenda on all the notes is there any other point you want to mention or discuss"
  },
  {
    "startTime": "01:00:06",
    "text": "today oh sorry I just Mis Mis pressed this button then but then I can say uh we have reached the end of our lotted slot I think no not really we but no one would complain I believe let me just say thank you this this was a a good discussion I'm not sure I understood all of it but it certainly pointed me to having to reread some of these documents sure okay uh thanks everyone then thanks a lot Christian for taking notes and talk to you in two weeks thank you thank you byebye bye bye"
  }
]
