[
  {
    "startTime": "00:00:02",
    "text": "Is Thank you. It's fine. Yeah. I don't know if I was worried about it, though, because we can we can steal it from that. Yeah, I know, but we can steal it from them instead. Hello? Welcome to Netmod at 118. For those of you who are in the room here in Prague or online, appreciate you joining in, and hope to have an interesting, session and discussion. We have some good discussion expected around versioning as well as some new topics. I'm Lou Berger. This is Kent Watson. Online, we should have Jason. We're hoping he's there. I know I said Alright. Just came in. Perfect. Perfect. So, I We're we're fully staffed and ready to go. On this page, you'll see that there's the notes link we really ask you to join that to help do the collaborative note taking, and this is particularly important for comments made at the mic if you make a comment go in and check that the comment was appropriately capture the discussions there so that we don't misquote you and So you feel like you're comments are appropriately recognized in the in the minutes. That's really important. The other important thing is please scan in it's important for those in the room to do that. If we end up doing it polling. That's how you'll participate. If we hit when when we have discussions, not if, but when we have discussions, We're doing a joint queue. And so we really want people in line for both remote and local so we can appropriately balance the the discussion. There we go."
  },
  {
    "startTime": "00:02:00",
    "text": "What day are we? We're Tuesday. So, hopefully, everyone's really familiar with the note well already. If you're not we have rules that govern our participation, our contribution to the IETF. Everything you say here everything you send to the list becomes part of our public record and our permanent record. There's, PCPs, best common practices govern these things. If you're not familiar with them, please join that, you know, go to the note well. And read it become familiar with Next. So right. We also have a code of conduct which basically governs how we behave here And it boils down to treating each other professionally and with respect, yes, we can have heated discussions, but keep it on topic. Not about the person. Those of you online, you figured this out already. Those in the room, again, please scan, join, another part that I didn't mention is being listed on the blue sheets. That recognizes that you're here, but also helps us get the right room size. So please do that. I think I've covered all of these So we have, a number of chartered items including a good discussion on Yang Versioning, And we have some non chartered items This shows the original list. We're actually gonna take number 8 and move it to the head of the non chartered items because of conflicts with the speaker's timing with another working group. We have, a number of documents in process. Some of them are so we have one that's sitting that's, post last call in the I'm sorry, submitted to the ISG. We have a number that our post last call And, some of them are on the agenda."
  },
  {
    "startTime": "00:04:01",
    "text": "Others are waiting for author's actions the first two we're going to hear in just a moment. Model versioning, we that's actually also on the agenda. The only one that's not on the agenda is sis law. Do you wanna say anything on that? Well, same status as last time, which is it's has a dependency on the I need to have TLS client draft. I think which is currently in a post last call in the NetComm Fork group. And we hope to, have it over the line. Before I'm hoping before December. Most of the documents that are not on the agenda were related to versioning. And basically are stuck behind the versioning documents. And, unless someone, one of the authors has something they wanna add, we're gonna move on. Not hearing anything. We have no incoming or outgoing liaisons. As usual, we think it's really important to be able to continue working on documents and making progress on documents independent of these meetings. That means working remote. So it's not just remote participation in this room. Virtually, that we want we want good discussions to continue on list. And for ongoing discussions to continue outside. Some of those discussions are informal. Some of those could be formal in the form of interim. If you have a topic, you would like to, have the working group focus on Please contact us. Example of ongoing discussion or related to versioning. Those are an example of a informal open meeting for those who are interested in that topic, you are always welcome to join. And those meetings are very helpful to continue progress and we'd really like to"
  },
  {
    "startTime": "00:06:04",
    "text": "to close out on some of these early versioning documents. So If you're interested in the topic, please, join those calls and I'm I'm hoping the, the, slot on there gives you those times. If not, take it to the list. And with that, I think that's my last item that was your last And so we're gonna move on to Scott. I guess I did need to go speakers do not need to join the game. That's true remote also. Here you go, Scott. Gotta stand on that. Oh, fan's hour. Okay. Welcome. I'm a Scott Mansfield affiliated with Ericsson. I have an update on 2 drafts. That are The last time I talked about these was back in March. So the status. They've been republished, again, because they expired. Because I ran out of time to work on them. And so what we have now are the, common interface extension Yang. This work started back 20 nineteen something. And then the sub interface VLAN Yang which is related. And so I've still got some acknowledgements and some just some general cleanup to do on them, but they are hosted on GitHub so, provide some links to where you can see those, see that work and, looking for support and moving these things forward so we can get them across the line. So very simple. The issues from the list have been addressed in the common interface extension Yang. And, we still need to understand if anything else needs to be done. I think that one's at the point where we could do a last call on it. And then, push it down the push it down the road. The sub interface VLAN Yang has an has an issue"
  },
  {
    "startTime": "00:08:03",
    "text": "in that it references a draft that has long died. So we need to look at that, discuss it on the mailing list figure out what to do with this with this link if we still need it if we wanna change it. And then, get this draft in in position where I could give a very rosy, you know, helpful, status report in, at the Australia meeting in March. So for real this time, so I didn't have an I did take this on and then failed to complete the work. So this time, I've got some time And so we need to take it to the list. Continue the review push the, one draft for last call. Efforts, if people are willing to do that. And then, consider what we need to do in the one that references the best draft. To see if we can get that one moving forward. That's it. Thanks. It it would be great to resolve that open question quickly. And then last call, both of them at the same time. Oh, okay. That's good. I get these done. Okay. Let me do that on the I'll do that on the list. Sounds very good. Thank you. Thank you. Thank you. I like that we're moving ahead of schedule. So Thank you. Hello, everyone. It's too far. This presentation is about a system defined configuration. And the latest version is the 04. Think this work was adopted in last year and to give a very brief introduction. It's about work to describe how, management client and the server handle your modeled configuration data that is defined by the server itself So it's we call system configuration."
  },
  {
    "startTime": "00:10:01",
    "text": "So there are some highlight or document updates this last IETF meeting. I think first, we have defined, net comfort capability identifier for the grid without system parameter. So, this is for this update, I feel, a little conflict before because I'm I'm we are thinking before to use, the the client can discover whether a server is supposed this parameter by reading the young life your library, operational information from the operational data dog. But we also think that it this parameter should also be able to be used for the non MDI servers. And those did not implement the young library So, choose to use a more generic red. It's to set with that we define. Lack of capability identifier so that these parameter, the support of this parameter can be divide can be find found in the hello message exchange. And second update is at some consideration for declined to use with our system parameter, has been added. So, I think there was a comment from the working group which is about how complex how how how expensive, for the server, it could be for the server to implement the read off system parameter because the server needs to resolve the reference during the validation and, retrieve the system that you start copy the reference system notes into logging and which might tech, a couple of rounds because of some error dependency. So Here, the client should know that it would cost reasonable amount of time for the server to"
  },
  {
    "startTime": "00:12:04",
    "text": "process this with our system parameter and they should also keeps the connection alive during the server processing. And the 3rd update is that we sent in a document that servers may upgrade system configuration as well as any COVID system nodes in running the license change. Device upgrade. I think we all agree that Yes. The server should not update running unexpectedly or surprisingly even when system configuration change, due to some sectors like had various resources of debt, but I think when it is licensed change, device upgrade some system events happened, it might be okay for the server to upgrade the node in running as well. But here, I we don't think it should be a mandatory. So a mental behavior. So I'm just using that server may have upgraded. Not Okay. And now we have the 2 open issues. I think still pending. The first one is that about the line validation of running along whether that is required and the second is out the, a bridging value folder. Now, this for the system configuration could be copied into running. I think both issues have been discussed, on the mailing list before, especially the first one, but I don't think any agreements have had been reached So I have to bring them again, and I think kind of think we can seek some convergence here. So So about this, first open issue, I post an email to the mailing list a couple of weeks ago. I"
  },
  {
    "startTime": "00:14:01",
    "text": "I I feel conflicted about this issue because I have to say, On the one hand, I appreciate the simplicity of not requiring the referenced system nodes be copied into running. And on the other hand, I do share the concern that we have some Lexi clients and existing tools, which might heavily rely on the validation of running along So as well as the fact that the configuration transformation from running to intended that has not be standardized to debt. So I'm not sure whether, So I think Jason and Ian has respond to the email, but I'm not sure whether We must have to standardize this comfort configuration transformation before we remove that requirements. So and I'm also thinking then and we finish this live. So Okay. So, I'm also thinking the other way, like, if if if if if if if if Whether we can, seek a a possible compromise which is that instead of in explicitly studying in a draft that any reference system knows, must be present in running. Can we just staying a draft. Bye. Ronnie must always be valid configuration status. Tree and reference the RFC ending 3 42 and 7950. I'm not sure whether, it will work. K? Kent has a contributor that last comment you just made, just simply saying that running must be valid. Without defining specifically the offline valid versus, you know, server valid, with it's a clever way of allowing the document to, proceed. Without us getting stuck on the details of offline validation. That being said, there was a discussion on lists"
  },
  {
    "startTime": "00:16:03",
    "text": "You mentioned just, 3 weeks ago, I think. I also replied to it. With Jan and Jason. And maybe we need to separate the the the question into 2 parts. Right? So they're sort of a a long term theoretical as to whether or not running should always be offline, validatable alone. And then there's a more near term, can it be done before yangnext? For instance, like, if we actually look at the semantics of what or prior RFC is trying to, define, is it in line or out of line for us to do it now, or do we have to wait for young nuts So I'd like to separate the conversation into first. Like, long term, Is it always desirable that we running alone must be valid, dataable? Not not just an aircraft. Okay. Rob Wilson's a that's a contributor. I wonder whether it'd be worth having, an interim meeting on this specific topic, this would be a useful thing because I think it's I I do understand the sort of compromise of trying to get the draft forward and saying less things, but I also see, to Kent's point, that there's an actual issue here and I'm not sure that sort of skirting around it actually is doing anyone much favors Right? And given the time, we don't have much time this meeting. So an interim sounds reasonable I Good idea. Yes. Yes, makes sense to others. So we can't have been to for this open issue Next slide. You're the kicker. Sorry. So, for this issue, This is about the original value for the system not committed into running because currently, the the the draft doesn't limit which origin should be used, whether it's system or intended. But we do have some examples that touch on this point and And I do want to know whether this should be clearly defined. Oh, we don't have to restrict that."
  },
  {
    "startTime": "00:18:01",
    "text": "Because, for the the previous discussion, I think we have some, thoughts that system should be used at We also have other folks think we should use intended but I think I I I don't really, think intended makes sense for the node if the the copies it to know this immutable because I think this is the case where the configuration in running should not take precedence. And so I don't think intended should be used for this case. Robleton. So just let's say, I think we should specify it not sure what the answer is, but I think we should specify Okay. Encanta is a contributor. I think here you're trying to decide whether or not we see a system or intended. Yeah. There's also a a question is is there any origin being specified in running at all at all. Right? Cause right now, origin is really only being specified in the operational data or or I think. Yes. So there's really a the the first we're saying it there should be an origin or maybe there should be an origin that's in running. Then on your previous slide, you had an open issue or 2 slides back. You had an open issue as to when we're upgrading server software, should the system configuration copied in the running also be migrated. Right. And and and I think that this is connected to that issue because well, it doesn't have to be, but it would be nice if the origin attribute was being specified in running then those notes would get, upgraded. But if they're not they if they don't have the origin attribute, then they would not get upgraded. Okay. It'd be a way for that to, to to to be allowed to happen. Yes. Good. K. Okay. So I think That's all for my presentation. It's, it it's a little frustrated when we don't have time for the good discussion. So,"
  },
  {
    "startTime": "00:20:01",
    "text": "but there is one more slide. Yeah. But, oh, he'll but clearly there's interest in resolving these issues And I think the idea of an interim is a really good one. Personally and, I'll I'll wear any hat I think it's really important that we give an answer and not sort of slide through the issues because that really, as I don't remember who said it, but it doesn't really help anyone. So if we need an interim to do that, that'd be great. Thank you. So moving on. Oscar. This is a quick one. I'm gonna present you the the latest update of the latest update of the extensions to the contradition model that we have, that we have done. So, we now have been on resolving all the open issues that we've had from the last idea here to have the pointed the to the data where we have all all of them track. And in this one, we have just finish the, the tutorial issue. So what we had big problem statement with all the gaps that it's just moved today. The appendix. And now, also, it's, is updated with all the the latest junk tree so you can you can see there. So just the, in terms of jam, I think, with it's quite complete now. So what what have been added. So in the last version, we had the, ICMP before matching. Now, also, we have other to match this, I think, V, C together so you can for MP 6. And in order to facilitate the life, have also included an ICM PB6 So we'll also include the explanation of the procedure to create this this module Also, as, as you know, we included the capability to match with sets"
  },
  {
    "startTime": "00:22:00",
    "text": "we also included the capability to create sets with ICM Pv4 and ICM Pvc, etcetera. And match against those those shades. Those shades. Those shades. In addition, also we have added the capability to match a PVC extension of headers so you can a pocket match against the applicator or this kind of the I appreciate you saying hello. Also, facilitate the life of of the matching would have created another, I, I, and I'm hazits, life on its own with Diana, you can at the all the station headers there. And from the of additional common actions we presented in the last eight years. We just kept the 2 that were, like, common across all the implementation, and we see that there were tttt what is commonly used and no no controversy. Just use the the log action, okay, so just to support to fill a lot with the match and counteraction that is just a update some counter, local counter, with big. Upon March, up on much action. Also, there was one comment to add, we've had different aliases. And we just missed one of them that was the villain. So what the shift. The committee in the last eight year meeting. So so we have added that that one. Okay. So, this stage, we think that all the requirements and comments have been raised around. Assured, So for us, all all the requirements are covered with at least we believe that the document is is ready from our side for going to, working with Glasgow. And we just want to do, last check. We tell you. If if we are happy with, current augmentation approach, or you still prefer to do an an update on a piece version of the"
  },
  {
    "startTime": "00:24:00",
    "text": "current ACL model. So the cleaner version is always that is, okay, but the pragmatic approach we have done is, okay, best to do this design. That this before just going to the, to the a a clarification. Question. When you say you wanna do a check, are you saying you're checking with working group, or do you want the authors to do a check? With the working group, Okay. We already have done the job. As per suggestion, go into documentation approach and then pay see the how the documentation are going, how the document goes. We have the young before the organization. So now that the young augmentations is there. We are still working group. Takes. I'd be happy to to keep and we end this work with the segmentations for now that we have all the what is needed. Put this in the Okay. Robleton. Thanks, Oscar. So just for clarifying, a a conference question. Are you saying, an augmentation as a separate young module versus a base that that that replaces Is that your question? Or Yes. Now we have a module that's up with the augmentations over the base module. Until the alternative is a new version. Of the base module. Okay? Or the ICL module, including all of the things that have been defined here. A documentation, but as part of the part of the module itself. So I have no preference. I think it's in my mind, it's entirely up to the in terms of annual working group. If nobody has a strong preference I would continue to do what you're doing now rather than Mahesh, as author of the ACL draft, my preference would be that it'd be a biz. Can you just repeat the end of your sentence your preference is what I couldn't there's Thank you."
  },
  {
    "startTime": "00:26:03",
    "text": "Oh, Sure. We're gonna do a poll, which includes, I'm not sure what formulation You're doing it. Help. Apparently, I'm doing it. That's right. So I'm not ready to do a poll, but, I thought you were getting ready. The the I think the questions is who's read this? Who thinks the current approach is good and who would prefer a best? Now we'll have to figure out how to do that so we include the people online because it's not fair just doing that it Ken, it's gonna do it. Give us a moment. While we're waiting in the room, how many have actually, I'm gonna do this on, in in chat. If you've read the document, Can you just then chat say that you've read the document? And if we go click yes. And the next poll, we're going to ask who likes the current approach. So yes means you do. No means change it. If you don't have an opinion, don't for it. Don't participate. We actually had good participation on the group on the last one. The interesting thing was we had yes was a is about a quarter of the room. No was a quarter. And then about half the rooms had no opinion. So I don't quite know what that means. I'm gonna take it as a quarter of the room have read. Ratty."
  },
  {
    "startTime": "00:28:01",
    "text": "So yes means you're happy with their approach. No is you'd like to see a change. I the person who I'm not if you're willing to share, but could you explain, presumably you read the draft and you do not think it's ready? Could you say why you do not think of credit? Joe, Joe Clark, it's kinda hard to follow the author Umesh saying he thinks of this, but for me, I I was a yes, that I think it's ready because I think the work should progress but I can For me, I think that there's enough use that I might wanna use the base module without the augmentation. I think it's useful as it is. I think this adds extra value, and I can see additional use cases for this. I would think the bis would be more real. The biz, in my opinion, would be more required if in order to get any use out of this, you needed the augmentation as well. And I don't think I I think the augmentation can stand alone. So for me, I'd like to see this progress. Without refactoring it as abyss. And Rob Wilson, just wanna process perspective, I think if you do it as a base, you can run it through the process and highlight these are things that have changed please try and focus reviews and comments on these on these changes rather than saying a review of the whole thing. So, so it doesn't necessarily mean that this has to be particularly heavy. That is an option although I don't think you can actually stop people from reviewing the rest of the as contributor. I'm actually in queue behind you, Rob. But as contributor, I actually agree with Joe. Is that if this was core to implementation, I think that this is right. If you can function, without it, and it adds value an augmentation is better. When I read it, I like the augmentation. But that's just me as an individual, not as chair."
  },
  {
    "startTime": "00:30:05",
    "text": "Okay. So we will discuss this offline and, I think we're going to move forward, but we'll discuss it offline afterwards. And if you were the no, please send a message to the list or put it in chat we're interested in in hearing from you. Clicker. Sorry. Thank you. So we got a fairly long slot. I had to get it with Joe talk about, What's it called? The Verde Tea, the versioning design teams weekly meeting and the questions we sent out there. And first, to summarize where we are, since last ICF meeting, we have had and some voting in the last meeting and on the list after that. As of regarding this, should we allow bankers compatible changes in, in the Yang RFC. Or, sorry, should peers are using Yank, be allowed to publish, non backwards compatible changes or not. And, The vote was we should allow this. That's our understanding. I think you is unanimous. That's that's, yes, that's what I was understood. And, it also, was a debate whether we should step to Zhang language revision number being one point, one at at most recent, if we should step at 1.2. Since in some ways, we already find it in language, even though none of the language construct no nothing that the compiler cares about to actually change And I think we agree that we do not change this the step of language identification, virtual identification, is keep 1.1.1 Yep. That's correct. Okay. Thank you. Good. So that's what we have established, already. And, after that, we send out, 10, questions to the working group."
  },
  {
    "startTime": "00:32:00",
    "text": "To we had some proposals and see if everybody on the list agreed And, for 6 of them, I think we have more or less agreed. I would come to them later. The first thing is I will focus on is the 4 that are more open to debate still. Because, that's what I was hoping that we could spend some time on to to to fix. I see that there is no, mentioning here on this slide of our weekly meetings. But they are happening on Tuesdays. At, 9 AM and 9 AM and eastern or 3 PM Center European time. You can if find the links that has been quite often, at least that's being made last time, the main list. And everybody's most welcome. Anybody who has opinions about this would be good if you're in the meeting because it's difficult to discuss with ghosts. This has been going on for many years, and we hope to at least close to basic documents as soon as possible now. The first item I want to bring up that was, still be incubated. We don't know exactly how to see here is about file name changes. So one of the things we are doing in this versioning work is to add version labels, So if current's yang modules, they have version dates, everything that's supposed to uniquely identify which version of the end model you have. But we wanted to have this, semantic versioning labels And the if you remember how the file name structure for young ones are, you can originally adding at sign and the date. So that you can keep multiple versions of the same yang model in the same directory. And keep track of which one is which. And since we are introducing them, labels should we also reflect that in the file names Should it be dates and labels or labels instead of dates and you can We don't know exactly what we should do there."
  },
  {
    "startTime": "00:34:01",
    "text": "Are several different options. We could leave this decided, which means that people can, of course, do whatever they want in their modules since one company can do one thing, another company does something else. Or we can move this to a later specification. We can keep it in the current set that we were aiming to take into the last call as soon as possible. Are you hoping for comments now or at the end? Yeah. I think we can take them one at a time. So if anybody has any opinions about what we do about the file names it's a good time to bring that color? Yes. Thank you, Richard. I just commented to the this morning on this, on the Edge doc. I think it's better to wait for the next young version because this version is building using the date as the main identifier of the YAM version. And the version is a is a basically attack for information. Maybe next question, I think it will be better to to reverse and use the the revision as the main identifier. I may also work in group last call that it will be good to have 2 revisions at the same date because in practice, if you have multiple revisions, but then we need a young So my bad my proposal is to keep the way it is today and but I've, and doing that in my nest and avoiding having 2 different ways to name the that's in the in the data store or in the young library will simplify the life at Atalo, before you go, when do you think the next version would be? What do you mean by next version? The next one. I think it will be good to do soon. So to close this issue, close quickly, and go to your nest as quickly as possible. I think there is There's definitely room for Yang Next, and I'm hoping we move on to Yang as soon as we wrap up versioning. But, you know, Yang Next is gonna take a while. We shouldn't expect Yang Next is something quick."
  },
  {
    "startTime": "00:36:01",
    "text": "It's okay. Okay. Great. Thank you. I think the next one. Yeah. Okay. Kent has a contributor. I second Italo's comment entirely. It and also, one extra point. I think when we switch over to the labels, it should be. That's the only way to do that, you know, we we don't we let go the at with the date approach at that time. There? So k. Paranish on Cisco. So I did a hackathon project where, I added support for, labels in, current And, I think it's easy to update the tooling to do all this so I think we could, do it now, actually. And suggest that we instead of just, dropping label I mean, dropping duration dates, and switching to labels enable, So we can have, whatever scheme we want. With some, tagging Thanks. Okay. Lou as contributor. I'm I would be I'm very concerned about just different vendors doing their own thing. And think that having a alternative that specified would be better than allowing sort free for all. So I'm in favor again, as a contributor, not as chair, of looking at moving this this, Semver. Any other comments? Thank you for your feedback. There will be more questions like this to bring up. Okay. I'll move on to the next question. The next thing is"
  },
  {
    "startTime": "00:38:02",
    "text": "when you are importing modules in Yang, you know, there's the possibility to import a specific version and that hasn't been very, useful. It turns out it's a little bit too rigid. But something that has been, talked about, replace that or to to be useful instead is something called recommended min And that's something that we have in the documents right now. But if we are if we are doing it with the current, modules, we have, the dates that's identifying these versions. So then we are suggesting that maybe we should have recommended mean date. As an additional attributes, now. And, so that we can have a recommended mean label as some later point in time so they don't collide So that's, something we'd be talking about. And also that this recommended min date or the table would be treated mostly as a implementation thing. It's not something that's confidential expected to enforce. But I know paperwork on that as well, so maybe you can go through the mic and explain what you did So, apparently, let's go again. So I basically, did this that you would suggest on on the last point there that just checking the revisions, seeing if the, recommended main labels are in order. And if they're if they are not, just, produce a warning and that is the on the level. I think it should be. Thank you. So any other comments when it comes to recommended mean, they able or anything. Counts as a contributor. The word recommended, it's not saying it has to be. So what what does that mean? If it's evident. They if they don't if it's less than with the recommended Is it wrong? I mean, you just said it's a warning."
  },
  {
    "startTime": "00:40:00",
    "text": "But but but word recommended is maybe you can use recommended now as a very soft way of allowing this to proceed before Yang Next. But when we get to Yang Next, it would just simply be Min version. That is definitely a potential development, but I cannot predict what's young next is gonna do with this, but that's a possibility. I'm trying to say is, would it make sense then, yang next would say that it's it's more of a must rather than a should. Because right now, I think with the word recommended is like I should, and it produces a warning. But in getting next, it'd be more like a must in which case it'd produce an error. I have heard the sentiments presented before, but I don't know exactly if that's a minority or majority opinion. And when it comes to, I would maybe recommended is not exactly or should is not maybe a capturing this intent exactly. I would say this more like the author of this module thinks that will be easier for you if you go this way. But it's, of course, if you wanna do something else, sure go ahead to Robleton as a contributor. So this issue and how we've expressed is evolved over time. So we started off with, like, a stricter minimum value you had to have. That's where we started from. And then we changed it for 2 reasons. One of them was this pushback of you can't make this change in Yang point 01. So there was that that aspect of it, and and I think from that perspective, moving it to being like a recommended guide that's rather than a strict thing to sort of fixes that. But the other aspect that came out was an observation of people saying, we shouldn't really be doing, like, performance checks within the yang language, the modules themselves. And that conformance would be better done for example, through Yang Library Yang packages, which is a bit more flexible. And, and the specific case that I was concerned about was recommended Min is that when you have branching occurs, and you write in a recommended min a particular version, it might be that there's another version that has that definition but it doesn't see it in the tree."
  },
  {
    "startTime": "00:42:02",
    "text": "And so I was wondering then if you made it make it very trick that actually causes you more grief where you can't use, cut you to find your nose entirely valid, where you where the where where the otherwise you keep it softer is like, just sort text recommendation as a warning, you'd still be allowed to compile and say, ultimately, I'm going to rely on, the yank package to define all my set of files and my directory to say exactly what I'm using, and this becomes a softer warning. I don't know if that makes sense in how I explained it. Unfortunately, I didn't quite follow that. I but we can take it offline. Okay. I tried. I'll note that on your slide, you don't say that they're you don't have a specific recommendation or question for the group right now. On this slide. Now I I know I know I know I know I'm not talking about the list discussion. Yes. Because we are a split in the group. We don't know exactly what to say about this. That's why. And the the discussion points, it seems things to be picked up that people commented on the these are some of the feedback that we got, but we don't know exactly what to do with this in the group, So when you say your split, is it that you have 2 camps of very different opinions or are you saying you don't have any sort of consensus points at all. No. I don't see. I mean, Rob you can Right? And I'm not sure whether I this I'll tranactically reflect what's been discussed. I think the concern is some people think feature is really important. We should do it now. And it's worth doing. I think that other people are concerned that because there's pushback on doing this, that might make our lives a bit easier just to say that it's parked this until later to remove one road bump from getting this document done. So I think that to me felt like that was the balance. I was in the favor of this isn't important enough to do now. So it's a nice thing to have, but not worth blocking the rest of work on."
  },
  {
    "startTime": "00:44:03",
    "text": "So there's no one who was saying that they dislike having this capability, it was more about getting this work done. I believe so. That's that's my recollection. Yeah. Joe's saying he agrees. Okay. We have a few people in queue. But maybe we'll do a little pull on in importance Okay. Well, and I was just gonna say going back to my earlier comment, the it seems like the recommended men the phraseology of it is a compromise. To allow it to go through now. Whereas if we were to defer and wait until Yang Max then it would be more just of a a min version. And I I I'm I know you're gonna I don't understand the company made before, but it seemed like a a a 2 pass compiler would be able to resolve the dependencies that you mentioned. So so I won't I won't try to explain it again, but we'll say is I don't I don't know if we were to delay this work. I suspect we might end up with exactly the same solution. That that would be my instinct is we wouldn't end up with a different solution because of one of those technical constraints. So you're preparing a bowl. Yeah. I think they should may have some input. Jason Stern. I just want to echo what Kent said that This was weakened from kind of a conformance statement to a recommended man And with the idea that that would allow us to keep it in the work and have it included in this. So personally, I'm in favor of keeping it because it's effectively just, machine readable documentation that helps users of the module or people constructing packages to know you know, what version of included modules they they should use So I think it was it was already softened in order to, allow us to keep it in my opinion."
  },
  {
    "startTime": "00:46:04",
    "text": "Okay. The poll says is men needed now, but should be read as recommended men. Needed now. Actually, that was, intentional. Because we've said that we're gonna end up with the same language. So I am saying is Minh needed now. And I I stay fortunate. Because I'm now gonna say no whereas before I would have said yes. I'm okay with doing a second poll with recommended the poll, the way the poll shows a meet echo has changed. No opinion means she exceeded the count of people who have not participated. It's not that they've or no opinion. That's right. Explicitly. It starts well, right now, we have forty two people. Right. So we'll give a a minute or 2 for more participation, then we'll rerun this with the same wording, but recommended. Men, Okay. So slightly in favor of yes, but I wouldn't call that a, you know, a clear split Give me a moment. I love that it wrote here as my typing."
  },
  {
    "startTime": "00:48:09",
    "text": "So I'd ask that if you would prefer men over recommended men just registered no opinion. Just so it's a little clearer So don't vote yes for both. Don't voice yes for both polls, please? I think we're ending up exactly the same number for recommended men as, as men. So, Yeah. I don't know if we add our numbers together or if we want. Well, I I switched my vote That's fine. Okay. Unfortunately, I, I don't think we're getting to a point of saying, clear consensus, we may be getting to a point of rough consensus And, you know, so this one's gonna end up being rough either way. Alright. You for the feedback anyway. Is good information to have when we are trying to progress this in some way in the next upcoming calls. And, if anybody's interested in this topic, please join out. Our Tuesday calls. We move on to the next one. So young versioning of instance data, and I think this is similar question. Is this needed now or can it wait? There was not, any feedback, I think, on the on the hedge stock and on the mailer. So anybody have comments about this? Do we need to includes versioning of instance data now. Sorry about the noise."
  },
  {
    "startTime": "00:50:11",
    "text": "I was just gonna add a comment as a contributor I don't think a doctor actually says very much about it now. So it's not necessarily losing very much by move this data. So I I'm not sure it matters too much either way. Yeah. Okay. Just like a comment on the list and the and in the room, I think support, Shoring. Notion that it's not the most important one. So so given the the lack of discussion, and get this. We're suggesting a different phrasing here is can you live without this? So if you can live without this Say yes. If you can if you really, really want it, say no. And the end result is we're gonna put this one to bed if it be end up with people saying load us out So, again, not huge participation but of those who are participating, I think they they they the views are unanimous. We can live without it. Absolutely. So If you think this is important, Please bring it up on the list. Otherwise, you're gonna see it go away. Yep. Yep. Thank you. Good feedback. And the last one that's, on of this type here is, about, versioning taking, white space into account when you're defining So if you have Yang module, you change your as you space your line breaks or something like that a bit. Not in, I mean, some space and white space, sorry, some of space and line breaks are really significant, and we're not talking about those now. This is only insignificant white space."
  },
  {
    "startTime": "00:52:02",
    "text": "That's that's, if you are motifying that, should you call that a new version? And, one articular thing to note is that if you say that the wide space changes are important as well. Then we can do things like check summing and saying that this module has this particular, you know, you have a CRC or some other check some to see that this is exactly the version that that we have had Sure. What's what's the poll that you want. Does white space changes matter or not, maybe it's a I mean, the the do you agree that white space changes should constitute a new version. Should should. That was a short question first. Yeah. The the other one that I really would like, but it's too late for is, should white space be included in the checksum? Now. I mean, you can, of course, define some other cannibalization of young modules, and do we check them over that? Yeah. We probably should have made it clear to not white space, and then we wouldn't have this problem. That we've done that. That's that's absolutely one option. But then you can't use ordinary CRT tools because you need to have some sort of processor in the Yeah. You would need a pre process. Yes. Agreed. So if you say that this is, important like this, you can use all the pulls right away so so, Lou, I think that's exactly the question we're really asking here is when you do, you want to generally check some of the Yang file can you do it on the plain text, in which case then it becomes meaningful, or do you have to get a canonical representation of it first and then do a check sum? That's to me what it comes down to, and that's why it went this direction we have. Right. That's why I was saying what question do we really wanna ask it out? Yep. Maybe awesome. Both. I don't know. You are you ready to come? I wasn't gonna run, Oh, okay. Sure. So the first one is I think we're going to ask the question as phrased on the slide. I'm not as quick, so I'm just gonna say as phrased on the slide."
  },
  {
    "startTime": "00:54:01",
    "text": "Then. Okay. Maybe I should have Jason, you're in queue. Jason Stern. I mean, what implication if we don't, require it to be consider a different version is that, imagine a publisher or owner of a of a module, publishes a version whatever you wanna label it, for using labels, the call it version 300, from And then that author, that authoritative source also somewhere publishes another slightly different version of the file with only in significant white space changes, but it will will look different. Say they move some things around, change the formatting descriptions or shrink their line length if we say that's not a different version, then those 2 copies of that file are floating around, both labeled 300. Is that what we'd want? That's that's the part that kinda worries me a bit is it's it's it's more about if the author owner of the module publishes a definitive version in the place where they publish their definitive versions with only insignificant white space changes. I I just found it hard to see how they could not be considered 2 different versions. Mean, we don't need bump the editorial digit. If you're using, like, December, for example, but don't know how you'd reconcile the two copies floating around. So I I think if you look at the question, it caught says, does it require a new revision to be published? So it would not have a 4 digit change. It would be the identical version. There would be no change number. Alright. You would have 2 different modules with different checksums, but it's the same module or something. Different checksums that include if you're including white spaces, if you have normalized have identical checks. Exactly."
  },
  {
    "startTime": "00:56:00",
    "text": "6 and Man, I don't know if this is the time for discussion, but check sums aren't something that we've standardized in the past. And we have revision dates. We're talking about revision labels. Never have we talked about checks on And so I don't know why I mean, I understand, mechanically the mechanics, like, why mentioning system might like to use checksums, but I don't think that's a feature or function that we've defined in the past. Alright. Let's dive into deep into discussions. But, if you had been in the Tuesday calls, you would have heard, I mean, this sort of horror stories that we see in the field, where it's kind of good to know that you're actually using exactly not what's what it claims to be, but what it is. So check sounds are, this in my experience, useful for for for people modify young audience without updating data. Sometimes it's So we we've gotten some participation, you know, about half in the room, and of that half, we have, 3 to 1. Preferring to ignore white space. So that's some good information, not conclusive again. We're gonna wherever we end up here, it's gonna be there's some someone's gonna be in the rough. Yep. But it's still good feedback. Yeah. Thank you for that. Atalo, it shows you're in queue and Joe, you're in queue. I don't know if you both still wanna be there. Is Yes. I have a comment on the white space, It's okay. What I notice sometimes when I unload, young fights from different sources, is that, sometimes there is an empty line at here, and sometimes there is not an empty 9 of the land at the end. I think that taking the white spaces into account will confuse a little bit, when when you have this type of problem because this empty line is a different white space in my opinion. Will will fail. So I'm much very much in favor of the normalization for a check sum to make because otherwise, it's"
  },
  {
    "startTime": "00:58:02",
    "text": "looking at it, our current experience is going to be difficult, to make sure that it should, you know, more than start the same. That's good. Thank you. Joe Clark. So what Jason said was you have versions floating around. Or you have instances of a of a of a Yang module floating around. And I know, Jan, one of the things you wanted to solve from the Tuesday call was I want to know that I have the canonically correct version 3.0.0. So I might go to vendor foo and download 3.0.0, And if someone gave me a different 3.0.0, and I really wanted to make that I had the right one, and I ran a checksum tool against it. If they added a new new line or they added some trailing white space and it was wrong, I don't trust this module. I don't know what else they may have done sure I can run some tools and figure that out, but I'd rather just go back to vendor Fu's web site and download it. So if I care about check sums, if I care about knowing that I have the canonical 3.0.0, I would wanna make sure that that that that that there is a formal publication of that module. That may not be the case. To, to italo's point. So My point has always been if we have a formal canonical source for a module and we want to do something like check something, then we have to take this into account. We have to make these white spaces matter And if I'm going to publish a new version as the authoritative publisher of that module, and I just choose to change a white space then I would also need to bump. The revision, the version. Okay. And, Kent is a contributor. If you were to try to convert, compare the checks on that you created to some canonical checksum. Where would that canonical checks come from? Where would it be published? I asked the same question on the call, and Jan, in that particular instance said, it would be published on the website next. There would be, like, a checksums.txt. Okay."
  },
  {
    "startTime": "01:00:01",
    "text": "That's that's a kind of the expected answer. But I then I wonder why we call this, semver and not checksumver. Right? Blush, So I agree with italo that people are not so precise and it will courseboard confusion if we new new line at the end of the file would make this different I am strongly in support of normalizing at least to some level before applying the check sum. And by the way, I think the example of reformatting a description that for me is a significant change. So that's out of scope of this discussion. Thank you. Okay. Thank you for the feedback. That was good for the working group to hear. I think we can now move on to the 6, items that we understand or have have a belief in the working group in the design team, that's these are agreed on that. We just confirmed that with you. So just to change that a little bit. This is what was sent to the list. As what the decisions are based on the previous discussions Yes. This is our understanding of what's That's right. So it's working with once. Just wanna check that we do. This is our interpretation. Yeah. So it a top of a module, we have this version colon nonbackless compatible marking. If you're doing a nonbackless compatible change, you have to add this at the top of the module. We believe the working groups, consensus is that we should have that keep that in the current set of things we wanna go to last call T2."
  },
  {
    "startTime": "01:02:04",
    "text": "We have, updated some of the rules in section 11 of 7950 and section 10 out of 60 20. When it comes to Okay. Turning something into status obsolete. Is now considered non bank is compatible. And, that's those changes. And that's just an example. There are a couple of other wordings changed too, but it's relatively minor. So those, word changes. We understand everybody wants them to be there to that we should retain them in the set that we go with with now. T3. In the drafts that we, have circuit earlier, there was something called the radiation label scheme, allowing different, organizations, companies, vendors to publish their own scheme in the in the framework of this particular set of graphs. So you could declare your own revision label scheme, we understand that we should now remove this so that this particular set of draft is only producing semantics for one particular scheme in Yang Semver, scheme. And if anybody and they are the organization would like to have some other scheme, they can go and define their own craft for that. So we'll take originator scheme out T4. So, revision label extension, we are moving that to the Yang Sandler modules. It is, we're just moving it from one draft to another. That's basically it. So we think it fits better there, when there's no different revision letter schemes, it's it's it's more natural thing to I'm not seeing anybody in the queues or so. Safe safe."
  },
  {
    "startTime": "01:04:02",
    "text": "Silence means you agree. I I I take it as silence means you can live with it. Because I actually don't agree with all these personally as contributor, but I can live with all of them. Yep. Get get And then we have T5. There was some language, in our draft about how to resolve ambiguous imports in Gang Library. We are removing this language and deferring it to yangnext So will be certain cases where you don't really know, what it means in the gallery. Anti 6, we have some language about how it deprecated and obsolete nodes are handled And we think this should remain in the in the first set of things that we wanna go to last call Alright? Sounds good. Very good. Thank you for that. I can't skip ahead anymore. That's that's the end. That's Dan. Okay. Good. Then it's Joe's Barton. Different different decks. Okay. Yeah. Thank you very much. Thank you. I got the right one, Jeff. Yep. This looks right. So some of the issues that that, Jan, just to, mention there, we're gonna go into a little more detail in this slide. Or this deck. What we're talking about here, same with the, the Tuesday meetings, the the contributors and authors around"
  },
  {
    "startTime": "01:06:02",
    "text": "module versioning. We've been talking about this semantic versioning for Yang for a while. In 117, we called this key issue 2. Key issue 1 was about the, non backwards compatible changes in the version of Yang. Key issue 2 from that meeting was about whether or not we need it, as Jan just pointed out, whether or not we need it multiple revision label schemes. So back when when we were the design team, there was this thinking that yes, we do need this. Vendor, a, we'll want to bring their proprietary Terry version, versioning scheme, vendor b will wanna bring their proprietary versioning scheme so we should make this as flexible as possible. Yes, we'll have one thing that is recommended or prescribed for the IETF, but we need to support these other vendors. That said, it added complexity. It also added some contention, with the working group on this. And, ultimately, no one really brought any concrete examples of what they wanted to use. Simbers seem to be good enough so our recommendation after discussing this is we would drop as as Jan said, we would drop the multiple revision label schemes. And we would stick with the the name I put there, the Yang cimbercolinversion, yankcimbermainspacecolinversion. That's still to be decided. But as an example, It would be moved into the Yang Simberg draft And this would be the extension. It would be yang dash sembercolonversion or something along those lines. Would be not a flexible. You pick the scheme, but this would be the revision label. And the reason we still want a revision label is because we feel it's it's important. It's valuable. To encode that that compatibility or do a russin coating of that compatibility information into something that is human readable. So that's why we want to keep that. So our recommendation"
  },
  {
    "startTime": "01:08:02",
    "text": "remove the scheme. The the flexible schemes stick to 1 revision label, and that will be this Yang Semberg. No one stood up when when Jan mentioned it, but I will pause here and see if there are any comments on this recommendation is key issue. I think the working group has spoken. We don't have to keep asking. No. Okay. No. That's fair. Thank you, Lou. Key issue number 3, again, we called it 3 in 117. This was why do we need Yang Simber when they're is perfectly good simver2.0.0 that's already out there. A little bit about December 2.0.0. First of all, it is linear. It does not really support any kind of branching. And I have an example of this that that will kinda give you a little clarity there. It's simpler in construction. So this is a good thing. It's got this concept of a major version component where you have these breaking or non backwards compatible changes. You have a minor component. Where you can add features, but you don't break any of the things that used to work. And then you have this patch component for these editorial changes. Or changes that aren't adding features. They're not taking anything away. They're maybe adding some clarity. Let's take a look at an example here. So let's say you have 1.0.0, and you come out with 1.0.1, and then 1.0.1 just clarified something, and then now then you wanna add a feature. So you come out with a 1.1.0. Great features out there, but then you wanna radically shift the paradigm, shape some things up, break some things, non backward compatible changes, So you come out with 2.0.0. Now one of your customers says, This is great and all. We're using 1.0.1. And we would like this new feature. Okay? So what do you do? What can you do here? Well, one thought, and and at least initially, my my gut instinct was, well, we already have a 1.1.0"
  },
  {
    "startTime": "01:10:04",
    "text": "feature release on top of 1.0. Why not come up with 1.2.0? Yes. Bump that. And Jason pointed out that this this is an ambiguous thing. Because 2.0.0 is already out. If you come out with a 1.2.0, does it incorporate any of the new features of 2.0.0 or better yet is 2.0.0incorporating that new feature that you added in 1 2.0. And you don't really know that. So the clearer thing to do and why there is necessarily no branching here is the less ambiguous thing is to mint a 2.1.0release. That adds that new feature you could do a one dot 2.0. But, again, it's it's ambiguous with what might be 2.0.0 relative to the the the new 1.2.0, feature release. So that's cimber2.0.0. What we discussed from a versioning standpoint, however, was something that was somewhat nonlinear. So we had the linear simver. We decide it or part of our our version requirements and part of the things we discuss this slide actually came from, IETF 105. Was that we wanted to have this modular or module versioning that was dependent or or used the date, the revision date of the module. And using that that lineage, using that history we could determine if a new revision was descended from, I should say, descended from a previous revision. So this allowed for some level of branching we didn't wanna just arbitrarily branch all over the place we wanted to allow for some level of branching. Unfortunately, though, the dates alone, and this is why we have to do that that kind of up."
  },
  {
    "startTime": "01:12:01",
    "text": "Look up, the the re the lineage in the revision history dates alone don't tell the whole story. So in this example here, we have something coming off of 2019 0201 that ultimately descends to 2019 0501. Well, what happens if you you look at 2019 0601 you might assume that since it's later date wise, than 2019-0501, it's fully compatible with version of the module, whereas if you look at the the lineage, the history, It's not necessarily that's not necessarily the case. Because they did not descend from a common parent. 2009 0501 might contain other non backwards compatible changes. So we needs we needed something that reflected or allowed us to reflect this. And that got into a since IETF 105 up until today in 118 that we needed, a version, a revision label scheme, that also reflected this limited branching. But we also wanted something that the human brain, when they they already kinda get Croc timber, they could look at this and apply the timber rules to it. So we developed a modified version symbol that we call Yang Simber. That without any branching, if you don't do any branching in in your modules, which is almost certainly gonna be the case if not all of them. Without that branching, Our Yang Simberg scheme is a 100% compatible to Semper. The rules are the same. It looks the same. However, when you do meet that branching, you're going to have this new modifier component. So you have the major, the minor, the patch as I already talked about. Then you'll have an underscore And one of these two things, you'll have an underscore compatible when you're creating a a feature release on top of a"
  },
  {
    "startTime": "01:14:03",
    "text": "of another release that that doesn't break anything. Doesn't have any non backward compatible changes. And then you'll have an underscore non underscore compatible when you are introducing some non backwards compatible or breaking changes. So as an example, you have that same 1.0.01.1.1. So on so forth. And your customer said, we're using 1.0.1. And we need a feature added to that you could branch and mint a 1.0.2 since other version numbers already taken, you take you increment the patch version and you add this modifier that Yang Simber defines underscore compatible in this case since it's a feature release. It's not adding anything that's non backwards compatible. And that's your new yangsymbre version label for this module. So that's the kind of the the wherefore and and and the history there. So our recommend is that given that we're already allowing the branching and module versioning. Again, we need our our revision label scheme to support this. We have the one scheme, and we're recommending that be Yang Simber, which balances nicely between the simplicity, December 2.0.0 provides and allows for some of that, that branch sheet that we talked about We think again, without any other concrete examples of meeting other revision label schemes, we think that this is sufficient for both the STOs And we've had some liaison statements from 3gpp that says they like this as well. As well as vendors. The vendors, as part of the Tuesday call, are are either already using something like this, the Yang Simber, or can can make this work. Common thoughts. Think this might be my last slide. Canceled the contributor."
  },
  {
    "startTime": "01:16:01",
    "text": "Yeah. I feel like I'm out of water, but, like a fish out of water. The underscore compatible and underscore non compatible. I I wonder I okay. If it says either one of those, then it's still the case that they have to go to the revision history to understand fully the the relationship, So in all cases, they have to go the revision history to understand the the full un fully understand what happened. So why then do we need to have the underscore with the suffix at all? So, yes, they would have to look if if they wanted to really understand what the the the lineage is. They would have to look at the revision history. Because you don't it it you you assumed that one, but you don't really know. We wanted it there for that that, encoding back a few slides and said being the rough encoding of compatibility information. A human could look at this and go, ah, okay. I know that there is something that that may or may not affect my tooling. In this case, since it's a compatible, probably not affecting my tooling, it's adding something versus breaking something. But I would wanna see that if it is a 1.0. 3 non backward compatible That would alert me that perhaps I need to do some deeper analysis into what is non backwards compatible in this module that can break my tooling because it's not just a 1.0.3. I can't assume that that because it's it's just a patch change from the 1.0.1 I'm using, then I can just use this module. There there's something that could break what I'm what I'm doing in here. I guess that's the part where I don't understand, because if it is a patch change, almost the definition of being a patch change means it doesn't break anything. And so now you're saying that there can be some patches that do break and sometimes the don't break. Yes. That's that's that's what I'm saying. I'm saying that that we are are saying that we're basing our change off of this patch version But what or off of this version, but we're making a"
  },
  {
    "startTime": "01:18:04",
    "text": "maybe a single non backwards compatible change. So it's based off, it has a base of 1.0.1, The only reason we're using we're incrementing the patch version is because we can't increment anything else at that point. And we have to also reflect that something is breaking in here. So it's not a true patch release. In the sense of what cimber2.0.0 calls a patch So this is why we introduced the modifier. Okay. Rum Kumar. Hey, Ram Kumar from Cisco. So in that case, is you don't really need the compatible modifier. Right? Because if there is no modifier, it means it's compatible. You don't need the compact modifier. We we think you do because technically, if I'm using my if I have my Semver hat on, and I just see 1.0.2 I'm just thinking that is an editorial change. There's nothing sub there's nothing substantive, perhaps, in that change. However, what the compatible is saying. It's not saying that it it It's kinda saying 2 things. It's saying yes, it's backwards compatible, but there is a feature or there is something that would otherwise be the equivalent of a minor version change in this module that you might wanna be aware you might have a new feature in here that you can make use of. So again, as a human, you're like, oh, okay. There's something It's it's not urgent because it's not gonna break anything. But it's something I might wanna look into. So, yes, it's backwards compatible, but what the the underscore compatible is signaling there, is there something more in this module that would otherwise be allowed by a simple patch change. Okay. Thanks. Sure thing. Until anyone else gets in the queue, I just"
  },
  {
    "startTime": "01:20:00",
    "text": "up in back in NetComm, Kent made the point of asking a speaker, what are your next steps And I thought, that was a good question. I didn't have any here. Our next steps are to fold in from the module versioning draft. If if this in in fact, it sounds like this is the consensus. To fold this work from module versioning back in December it's not gonna be as trivial it might initially seem. To, collapse the multiple revision schemes and to clarify some of this, in in the single, gang timber document. So that that's what we're going to do. Once we we hit the green light here. Okay. Yes. Alright. That's the end of this one. Okay. That's appreciate all the discussion and the, keeping us making progress on it. Look forward to the next update. Yours is a little less contentious than the previous one, but so that's lucky. We have a number, via 4 non chartered items now, Sean, your first Oh, no. I'm sorry. We're going out of order. We're, Alex, for starting to move. 8. It's the one with 8. Electronic we're gonna do something try something a little different on your timer, you're actually gonna have 2 minutes less. So we were reserved 2 minutes for discussion. 16 flights. So you have 8 minutes for 16 slides. Okay. That'd be fine. Thank you. Okay. Yeah. So, yes, I'm, president, thank you for accommodating sicking shiver, Yeah. Alright. Okay. So I, I'm resetting a new proposal, amounting yang defined information from remote data source So presenting also on behalf of, Eric Boyd, Iowa and, Natural what's the motivation of this? Motivation here"
  },
  {
    "startTime": "01:22:01",
    "text": "is that today, young data stores provide local management data with the device level scope, However, we have increasingly use cases that are appearing that require more holistic and natural attributes. For instance, when you look at, controllers, there you there you would basically have things, that go the really span across different devices in the network. As part of the same data store that we would want to model. And there are more and more use cases coming up here. There's a lot of discussion on topologies on digital maps, network inventory in the IV working group, network little trend, those types of use cases, And, one implication is that only all of these in those cases, the data model includes information about devices which are also included in the network using their own data source. So, basically, this means there are some, there are some data that becomes increasingly redundant requiring redundant modeling, requiring synchronization, requiring redundant population and so forth. And so the question is how can we accommodate that better? And, yes, I'll, again, yeah, the the the the issues are like what I mentioned here. So we I feel we would really want to avoid the synchronization of modeling of data, which is already present in one level, just included in the other level as well. So, really, what's needed is a federated data store that provides a holistic view a network. So, basically, think of federated data, which includes data rich resides, which may reside on remote notes, cross notes, but which can be accessed by the client of that controller. For instance, as if it were one, conceptual data store. And so hence the the the the the proposal here to and introduce the concept of,"
  },
  {
    "startTime": "01:24:02",
    "text": "p amount. Basically, the rough analogy is that of noun points and a distributed file system, basically allowing to refer, data notes or actually really subtrees that are in a remote data, store. As if they were part of a local data. So the basically, by doing this, you can access it, basic transparency for the, for your, for the client location. You avoid the need for, data replication. Of course, there are caching considerations that apply. The authority remains, and of course, the authority remains with the original So it's basically just about providing a view Again, why it allows you to provide a federated? This is so that it allows you to treat the network as a system. Yeah. So then, basically, this here, this here depicted on this on on this diagram that essentially the the red and the green nodes are will tend to use as if they were part also of the of the blue data store. An example of a usage. So, basically, essentially the the core of the, the technical contents of the, of the draft consists of the definition of the yang module which defines a couple of things, most centrally, a set of pier mount extensions that allow you to define, to declare a mount point in a module, which which points were remote target, a remote subtree, to basically specify the information that should be included there. Then the idea is that there's, as you'll define this mountain, you see this depicted here. And if you work to then for some return instance data, you return instance data, which presa- which resides locally, as well as data under the moment. 66 global in the instance data from the remote system, which you have here, in red. So a lot easier to use. It's kind of like, again, this federated data store option."
  },
  {
    "startTime": "01:26:05",
    "text": "Okay. So what are the use cases? Why are we doing this? So It's, fine. If you wanted to provide a network ride view, often often network inventory of a network digital twin, but also include for certain action device configuration aspects from the from the systems. So data on hardware, firmware, location information, and so for Or likewise, we wanted to have a network inventory or digital twin type of thing, which or topology, which also provides your life monitoring data. What is the link status? What is the power status? Support to use some of those use cases. Again, making the design pay pattern in each of those cases, you would is the work you find, mount point in this, yeah, in this network wide module, which allows us to essentially incorporate the the freeze from the individual notes within that. And I realize I'm running low on time. So let me skip some of the next slides. So basically this says, okay. There are the issue well, but if not every not but if not every remote system has information that you want, less of design patterns. The 2 can used to deal with that Again, the core of the the, of the dividend is basically this yang model, not depicted here, but, the core, there are these young extensions that allow you to declare the mount points as well as facilities to manage those mount points, to instance, specify certain things such as communication retry policies. You do need to access remote data after all. And so forth, as well as also, RPCs for the manual maltained, unmuting, if that is needed. Couple of additional considerations. Mount cascades are supported, but of course, you cannot mount pro prohibit it should be a circular mounting for obvious reasons. In terms of operations,"
  },
  {
    "startTime": "01:28:03",
    "text": "the focus right now is just on data retrieval. So other operations of this configuration support and support is out cytoscope configuration would incur transactional ramifications. So we want to stay away from that. Certification, yang pusher, potentially doable when the need arises, but again, to keep the complexity low, this is been watching this. Again, authorization, the Target system is the authoritative owner. Cashing is considerable as an implementation, optimization, And, Yeah. Oh, Okay. So just to come, to to stay within the time, this final slide. So, final remarks on the, so actually one thing to mention is there was an earlier proposal made, 10 years ago, which at the time there was not really executed that they don't receive uptake because basically because there was no idea of interest in data multiplied by the data above the device level at this at at the time. So did not gain traction. However, we believe that the time may be right now be because now there are more and more network wide models, which are becoming into IETF scope, will be facing this problem of redundant data that we have there. Therefore, basically, we're reviving proposal with some modifications and simplifications in view of the new context and use that we have. And that's the question. This interest in taking up this work. Thanks. And I see you. I do remember your work from those. Was it 10 or maybe 15 years ago. Something like that. Yep. But then with the percent of of scheme amount. I remember I commented that really mount means mounting data, right, as you mentioned, NFS or something like that. So I was sort of against naming this scheme amount to use this word mount."
  },
  {
    "startTime": "01:30:04",
    "text": "This didn't happen, unfortunately, but I think if you introduce this again here with the same name, it becomes really confusing. So I would suggest we'd do something else because people will get immediately lost with all this. So, yeah, a good point. So, Well, the question well, so clearly we can name this something else One thing to be clear, and and the interest of time, I could not go into the differences scheme amount. We are, of course, very well aware that the schema amount is about mounting a schema which is an essentially locally. Right? You want to just reuse the model you don't have this federated this remoting aspect Here, we are this is about mounting instances live on remote system. So it's a different problem space. But I agree that the naming is maybe close or maybe we can come up with a different term. We have four people in queue, and the queue is not locked. Jason Stearns next. And we are over time, so try to keep your remarks and comp questions short, Jason. Jason Stern. Just a quick question. When you compose these models, how do you deal with the absolute leaf ref and absolute paths and must statements in the models you're taking from the devices. Well, so for the, well, So first of all, we're we're we're providing a read only view. I think this is about retrieval of information, in terms of must statements, and so forth, those things are would be network only when you, support configuration operations. So we don't believe that this applies here because the data is off voluntarily owned. By the remote system. So this is just about, providing the view here. The leaf ref paths, though, in in those composed models won't make sense if you expose that northbound of the controller Any absolutely rough paths. Right? Well, so well, I mean, so the question is if you wanted to have the lee well, if you wanted to have leaf ref pass and extend across multi data,"
  },
  {
    "startTime": "01:32:00",
    "text": "But that's that's your question. No. But, I don't wanna take the whole time, so maybe I'll I'll take Yeah. Take it to take it to the list. I I don't think it answered this question. At least not that one I heard. So so just a quick comment. I thought that Yang Mount's would have covered some of requirements. I didn't think it was requirement for young man that it had to be locally mounted. I think the case of fear, then they call it virtual routers, but I think You're talking about scheme amount? I mean, scheme them out. Yeah. It's different. It it it is different. In the past, actually, in the in the or 10 years ago, there was something included called alias mount. That is basically something that was addressed by a yet, but I see actually that the naming is creating personal questions and is then is good for this. So I It was different. Okay. Yeah. I've so my question really was then whether you then seam amounts, so to cover some of this data. Cause I don't see the difference between mounting a schema here and then saying this is the reference where the data is. Some of the principles are the are have similarities, but it's a different thing. Yeah. Do end up with the same schema. So there, there's some parallelism, but I I I think this is different work, Okay. And clearly, we have to discuss it on the list. In the interest of time, we have 2 more. We have Jan, and Ignacio. Those are the last two comments, but clearly there's interested interest in this work. So we're gonna wanna discuss on the list. Yeah. I just wanna say that I've read a draft, and I think it was interesting. Think there are many open questions relating to this work. And we have implemented much of similar life functionality. So I know this is really hard to do. Right? Hi, Natro from Telefonica. Very quickly, we we have an alternative to, the mount term, which is, data visualization that, we also, referenced in the, in the, in the draft. This is a term that is widely used in in the 2 communities. So we could go for Can you repeat the term? I didn't hear it. Date of utilization. Thank you."
  },
  {
    "startTime": "01:34:00",
    "text": "Okay. Thanks. Alright. I'll speak as a cool author. Alright. Well, thank you. I think you're just Scott, No. It's fine. I'm wrong. I grabbed his sequence. Okay. This is that mutable. Right? This is number 6. The number section. So I I will give, update of this in both, like, work might notice the document title has now been updated. Next So, the info flag, actually, this work is derived from the system defined configuration work. When we explore the different kinds of system configuration, people identify that there are, delete both. It's come delete both down delete both and what firebot non modifiable system configuration. So this immutable flag is used to document the probability of some system configuration. Though we want to explosome use cases, beyond system configuration, but now it is not available because of some non transaction or API discussion. So for this work, it it was the chair has read adoption poll after I have one survey meeting. I think we have received some concern and objections from the list So I'm going to, prevent some the the major concern we have received during the adoption call and how did drug is updated to resolve that concern. So the the the the very the first big concern is that the the server can dynamically decide what is considered immutable. I think, so that this value to the back the life of the client much more harder, but much harder, but I want to clarify that this is not the case. In the document now because we we we we we we want to think that this immutability and this essentially the value are relatively stable."
  },
  {
    "startTime": "01:36:02",
    "text": "Because, we're clarifying the draft that the probability and the value must only change during the system upgrade of due to the life since addition of the removal of the the hardware So this is independent on the operational stat and there are some packs pointed out to be ambiguous maybe by if you get a night has been removed from the that is the revision. And if Someone father is other, expression that might be considered pointed out and that authors can then see how to refine it. So The second concern is about that the solar's behavior follows a young model not the. I think this is because we emphasize in the draft that the in football config flag is used to describe the existing behavior of server. So in order to avoid the a logic revert and also to simplify the solution we have now removed the image for young extension definition. So now there is a single solution only in the the the metadata notation in the counter draft So it's still is a descript descriptive information to annotate the system configuration, which cannot be overridden. And this metadata notation will not be included in service response online is being explicitly asked by the client. The third concern is about the relation of the proposed system data store in system defined configuration work and how and this immutable magnetism is unclear how what's the relationship. So we have now add a new session to this that relationship will be turned immune to flag and see some data stop. I think Generally, the immutable configuration refers to the node, the by system yet cannot be overwritten by clients. And system configuration. Always equities"
  },
  {
    "startTime": "01:38:02",
    "text": "This is regardless of whether the system data store is implemented or not. So in mutual configuration, it's generated in system, but that not appear in running until being referenced. And this is on the premise that running needs to be, needs to satisfy the reference. The constraints, reference constraints. So in mutable configuration, be present in running is achieved by either the client copy it explicitly or use the reward system parameter to allow the server to do the copy automatically. And. Immutable mechanism allows a server to annot had non modifiable system configuration. With mandatory annotation when the configuration is retrieved. This is intended to be, backward compatible because a client aware of this annotation can then avoid making unnecessary modification attempts And for Lexi clients do not do not see any change. And they might encounter errors, but still trying to modify the configuration, but then it will encounter the error response as always. So this is about the the equitable consideration. I think that's or for my presentation. I think Belage is first in queue. Go ahead, blush. So, I'm very sorry about the state of this, and I was or I'm one of the authors, but I'm also speaking as a 3gpp delegate. Removing the immutable extension is is really bad for 3 GPP. We know in many cases, at design time or or, yeah, we hang module definition time that some data is immutable."
  },
  {
    "startTime": "01:40:00",
    "text": "And we are not allowed to put that into the Yang model. Probably will have to do a 3gpp. So extension for this It is Yep. Basically, IITF rejects the 3gppliersandstatement. I'll have to check do additional checking, but it's a big problem for us. Thank you. So Robleton, I'll speak at 2 points. So one in terms of the liaison statement, I think the of the outcome is, and I spoke in there was a 3 gpp IETF liaison coordination meeting, the the this work group should send an update back to them once the outcome is work to say what parts of this statement we are complying with and and satisfying on which ones we're not So I think that would be good to do. To Balaji's point in there, I wonder whether rather than call it immutable, something like system defined or system controlled configuration might be different name that might solve that problem. But that's just off the top of my head. I think, Chaffray, but most of these things you're changing, I think, look better to me. I think this is heading the right direction. I think that's good. I still have one question just to check is, if Is it the case ever that your client writes some configuration to running? Possible that delete requests to delete the configuration that they've added might ever fail. Is it always the case that I'd always just succeed? Sorry. I I don't So if a client added, it's not possible for client to add some configuration to running, and then the say, actually, that's now immutable, and then you try and remove it from running in that failed for any reason. Is that correct or not correct? Know if if if it's the same value, we can add it to run it successfully. And can also be deleted from running successfully. But so but conversely, if you cannot add it running, then you also cannot delete it for running. Fine. Okay. Fine. But it's it's the stuff that's already there and the system that says you can you can never change"
  },
  {
    "startTime": "01:42:00",
    "text": "stuff is not you've had some configuration in and now you're like, no, it's now locked. You can never change this. Correct. Correct. Correct. Yeah. Fine. Yes. Then I'm good. If I understand it correctly, that's what's been removed. That was the extension that's removed. I I thought the extension was just doing it in terms of statically declaring these things. I think different. It was. Yes. That's right. I'll I'll have to go back. But I thought it was completely, well, me go to read it again. So, yeah, so I think that's my conclusion as well. I need to read the I need to read the version, but it sounds like this is in better place than it was earlier. So it's going right direction. Sure. Thank you. The immutability of the data is not dependent on any client interaction. It's purely a server to find. Yeah. Thank you. We have also a tallow and myself. First thing? Okay. And just like we comment, there is no HTTP yet. I know other SDRs have the same issues. So I would prefer the solution to be done by the IETF to have, because if you started to use a young models from different SDR, if different SDRs have a different solution to represent this, we'll be to be complex. So it's better to have a one solution from the IETF, with all these issues, which are very value addressed, it will be better than having different test deals I've addressing this in a different way. Okay. Thank you. The we we received the liaison asking the IETF to fix a problem from another STO. We've had problem. We've had many times in the past, for other SDOs, look at IETF Technology and say, we're gonna change it on our own. We're not even gonna ask you about the technology that you own. So it's unusual. Wortz, not always the case where another SEO comes to us and says, help us. I personally think we should help them. And this is with any hat, all hats, speaking as chair and as contributor."
  },
  {
    "startTime": "01:44:02",
    "text": "I think it would be good for us to take a look is the request was not to standardize this document. But was to fix a particular problem and use case. I think it would be good for us as a group to figure out how to do that. Rather than tell the other SDOs, go change what you want in our technology. My opinion, just personal opinion, Please. Please. I heard Balash was, disappointed that this statement was not in there. Don't think that the statement the annotation statement itself is a problem. I think we should have it especially if CBPs once it's, sure, that shouldn't be a problem. The, the, the thing that's contentious here is definitions of what's mutable really means enough. And I know that some of the 3gpp that work in essay 5, which is doing this work. They have traditions in that space that are not compatible completely. We So we cannot say yes to everything they just adopt the model they have. That wouldn't work, but I think we can provides functionality that is enough for GPP. I hope so. That's my feeling at least speaking to Balash earlier. So I think we should try to get to that point Thank you. Alright. Thank you. The the queue is locked, but I'll let Belodge come in. Just because we need to get his response to that. I mean, Egypt. So Oh, we are 3 g p p ask for 2 things. 1 was the the restricted thing where you only allow you are only allowed to set set the value when, let's say, the encompassing list is created. And not change it later, that's wow. That's more problematic. But this that I already know at yanged model design time that this or that part will never or should never be changed."
  },
  {
    "startTime": "01:46:02",
    "text": "We really don't understand why that is a problem. Yes. You will have 2 manners because of some of the things, you know, within design time, Or it that's it's immutable But if you have that information at design time, why not share it in the yang model and why not share it with I don't know, OSS integrators or SMO integrators. Why do we have to wait for that information to be available only in runtime. Whole yang is on the pre based on the principle that We know a lot about our models. We document it before runtime. Already in design time. So I really don't understand why the extension needs to be removed. Thank you. Thank you. Alright. Moving on to the next presentation. And, Scott, if you can make it quick. Absolutely. Well, I certainly hope so. Scott Mansfield affiliated with Ericsson. So this is a draft that I'm really here just to ask the chairs what to do. Because we have NC Campulose. This is something that we've been doing NC Camp. There was a draft that was called, that's it's still in a draft. It's the microwave topology graph. There were 2 other modules inside of that draft. 1 was called the interface Frank's module. And all it did was it it allowed you to hook together an endpoint and a topology to the interface that it was supporting. And so we said, well, this isn't really a microwave thing. So would it be possible to progress this work somewhere else other than just CCAM. So CCamp is willing to give it up. If you want it to be done in CCamp, we can continue to do that, but I brought it here because this is the group that seems like it would be a place to put this kind of extension. And so what I've done here is just provided the GitHub and the draft"
  },
  {
    "startTime": "01:48:03",
    "text": "link and go to the next page, and it's basically the ask, so I can go to the next page. And so so we're asking, what do we do? Thanks. I I see old as in cube. I'll let oldest go first. Thank you, Olga. Haveri. Thanks, Scott. This is exactly what I was thinking also before when I saw this draft, you know, because, what we also did for the evaluation of 5, CA, 3, 4, 5, 4, perhaps for the digital map identified, you know, connecting old apology entities to different things. Like, are they face or configurations or inventory or, you know, different things. So we identified it as a requirement from the car customers with verified with operators, and it is something that are kind of planning to look at, but in a very generic way in terms of being supported for interface, but also for all the other things for that there. So at the moment, things that are related the apology. We have few things like Oscar's job that were not in the ops, but they were moved tops, and we have this draft in ops and also Nigel's draft, which is proposing some extensions to our CA3 45 to address some limitations. Right. So my recommendation would be to to join. Thanks. So, Kent, this chair, and, to answer your question, what to do with the document, we were looking at this before the the meeting and, our understanding is that there's a new working group called the inventory working group which is focusing on topology. And, I think I'm not sure if we have actually the of the chairs of that working group in the in the room right now. And, if if there's anything that you said there, but that might be a place to take it. It that mod is, obviously, the the the catchall but if there is a better working group, that'd be good for us."
  },
  {
    "startTime": "01:50:00",
    "text": "Okay. Okay. Good. I think that's the right way to to phrase it is We're the we're the catch all when there's not another working group to do it. So that one's a work a candidate you know, routing, working group boys likes taking things, CCAP, any any of those are good candidates. If you can't find elsewhere then come here, So I found various mailing lists and asked, hey, do you want this? Well, actually, maybe we can get our AD who's standing going to the mic to help help direct Yeah. We we do have a new working group called Ivy. And one of the working group objective is to define the correlation. Between the network inventory and the network topology. And I I do think there might be some relation between this, what can I think might be good for this one to be discussed in Ivy? And some core correlation might be quoted. A lot different. So I know what to do for Australia Thanks. Oh, yeah. Mine's not technical, so I'll drop it. So yes. I will help you find the right home because I don't know whether Ivy is right home or not. But, yes, I will help you find. Thanks. Bull. Here, I have some question. I have 2 comments. One is that, I noticed your model is a network model. That you you adding the interface name as a leaf reference but I I think from the network I'm sorry. I'm gonna have to cut the queue. This is too detailed of a question. We're running out of time. Okay. Can we take it to the list? Yeah. Take it. Yeah. That'd be great. Yann, have the last presentation. Okay. So here's some more work that's looking for a home. Let's see where where you think"
  },
  {
    "startTime": "01:52:05",
    "text": "So, recently, I've been starting to work with, yang based time series telemetry. I mean, climate buffs. So I wanna measure power and energy and stuff like that from devices. But as part of that work, part of that work, we realized that there was something that was, connecting temperature data is something that's been done, a lot of already, and there's a lot of of work in that space that could be generic. Which is the limited at all. This, little box at the end, there's supposed to be a check mark because, you have probably seen, I have seen lots of graphs with telemetry data coming from devices could be packets and binds or it could be power kilowatt hours or whatever it is but you have seen lots of these graphs. And so We have yang based devices that are producing graphs. So check we are there, aren't we? Well, I I say we are not We get to really nice graphs definitely, but what do they mean I mean, when I ask if people about these graphs, that I've seen. So is the cooling cost included in this value. People don't know. Because there's no way to trace this back. There's all this aggregate the data tracing back to where does it come from? What's included? Definition of this is what unit is it? Is it the real or reactive power? This is just no way of knowing what we have measured. This is done in a ad hoc way without so solid foundations. So I think we need a sort of framework based foundation for how we collect this data and, aggregated. And so that we keep all this metadata about what we are measuring And I think maybe Net Mod would be a good place for that framework, the generic collection framework, when it comes to time series data."
  },
  {
    "startTime": "01:54:02",
    "text": "We are going to use this data for making decisions, so that is kind of important. I mean, having a nice graph is impressive in a customer demo. But, when you make decisions, you need the data to be as reasonably accurate. Should we move this traffic from here to here or or not. So here's the fill out the list framework. It's all about collecting stamps or time stamped data, right, so we have provider devices on the bottom. We have collectors. We have aggregators. And the The thing with, coming here is not that we are going to standardize anyway, but I want to define APIs around this this, level for these roles in the collection framework And that once everything could be based on Yang. I mean, obviously, lots of devices out there do not have yang interfaces at all. It's a CPU rack. They have no yang models. It's a cooling system. They're no yang model for that. But in that case, I want the collector level to add yang modules so that we have clear definitions of what we are measuring at all levels and metadata for it. And the then we have this these providers that are either yang based or non yang based, and then we are either getting yang models from the source or we are adding it on the way. It lands in a time series database called Destination here, And then we have the aggregators we are reading and applying some sort of transformation of this either aggregation, just adding up time series linear averages or summing things up or maybe doing more complex transforms on the data on the way and storing if you get another destination. Part of this is, you have young model data and just storing it in the times of your database, times use databases, they don't have this young specter of data. And If you don't, pay attention, you lose track of what you are actually seeing up in the time search database."
  },
  {
    "startTime": "01:56:00",
    "text": "So Christian Larsen, at, there's a telecom mind presenting this on behalf of him. Came up with a mapping where you take yang, instance identifiers or yang pass and and produce a name that is usable in a timeshare database context. So that you have, the names are basically a concatenations of the path with slashes replaced by underscore and all the keys there is 5. What's called labels in many of these time series database systems. So We call this a mapping. It's not, transport. I mean, you can take young and see how things are encoded in XML or JSON and so on. Seabor. But, this is only taking This is only about finding out how you map data from in the in the Yang context into something that makes sense in the time series database. Want the Yang described everywhere so we have something to reason about when it comes we are think this cascade very well, and we have some imitations of this, And, it looks like this when you go to the times you just database side that you can use inflexQL or promptQL languages to select from, and then you see what you're actually talking about here. This map back all the way to the So we think that's, this framework part could maybe land here in Netmo, and we're at that's needed my hypothesis so far. Whereas this, mapping part is maybe more a net cost topic. And then we have the things that's the big parts of this, like a wildfire. I don't know exactly where you Okay. So you've expertly preempted my question because, the same presentation just given the Metcalfe and, the the draft names expertly,"
  },
  {
    "startTime": "01:58:03",
    "text": "don't provide which working group they're supposed to be targeting. Then that was going to be my question, which working group, so you're thinking of splitting the work. Some of the work would be in that mode, and some of the work would be in that cuff. That's my intuition. That's this, sort of mapping from yang into some not exactly transport protocol, but into something that makes sense in another world. That's more of that constant. I've That's my feeling. And this sort of general framework for collecting date, there would be maybe more here. And then the applications that are actually doing things with this would be, I don't know, maybe Ivy or so or something. Right. Right. Alright. Well, thank you for interest saying new work, and anticipating the question we asked for you. So that was awesome. We really appreciate all the good discussion and input we do think, it's gonna be important to have some offline discussions on where do we go on some of the issues with, versioning and also yeah, system config was the one I was really thinking of, but, yeah, movable fat flags sounds like they're a proposal. On how to move forward for the document, but not so much for delays on so we definitely wanna be go back to the liaison see what the solutions are that we have and see how we're lining up, and maybe we can offline conversations as well. Thank you all for a very good session. Thank you. And, even though it's only Tuesday, we'll see. From an economic standpoint, we'll see you at the like, yeah. Or if those who are going to the dinner tonight, Hopefully, everyone in the room saw Rob's invite and signed up for that So if you're there, I'll see you there. See you then"
  },
  {
    "startTime": "02:00:05",
    "text": "if you need to have a new button. I know it's this No. Not especially. Special Yeah. The point is that there are"
  }
]
