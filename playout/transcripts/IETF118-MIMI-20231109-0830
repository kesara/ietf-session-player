[
  {
    "startTime": "00:00:21",
    "text": "Started. So working on your slides. Actually, Matthew, do you mind closing the door. Right there. Thank you. So hopefully everyone is in the right place. Not as crowded as MLS. I don't know why we got a bigger room. Cut, cut, cut can spread out. So this is the note well. Hopefully, you've seen it already this week. This includes all the policies that govern the, activities that we have here today including our IPR policy code of conduct and a variety of other things. Please treat each other respectfully. We've been a pretty convivial group in the past. So hopefully that will continue. Have a note taker. Thank you so much. Thomas has already agreed to take note And those will be on notes dotitf.org so people can follow along and, add things if you want to. Thank you. Chris No. Okay. So we have 2 sessions here at, IETF 118 today is first one, and here's our agenda for today. Will have a brief update from Richard. I hope if he's online. On the Mimi Architecture and then, Rowan for content format, and then we have a big chunk of time to talk about the Mimi protocol and hear from the design team about what they've been up to."
  },
  {
    "startTime": "00:02:00",
    "text": "And we have the spill over time tomorrow for that as well in case we don't get through at all. Would anybody like to bash the agenda? Nope. Okay. Then I think we can turn it over to Richard. Good morning, everyone. The first slot of the day is always fun, especially when you're 6 timelines to the west. Don't worry. I have coffee. So this is, largely just a recap what we've been talking about at the interims, for folks, who might be at the ICF without having been the intervening interim meetings. And, also, am I driving this, or are you driving Up to you. I'm happy to drive. I feel sure we can go to the next slide. Yeah. So this is a recap. So those who are at the interims can kind of, you know, nod off and so the last couple of slides, which were just refreshed. And have the latest data So this is our our client server to server to server to server to client. Architecture. I think I may have had one too many servers in there, but, anyway, the idea is that, Service providers are represented by servers in system, and everything clients doing system is intermediate by servers. Servers work together to create a room and rooms have events that make them up. Next slide, please. An important invariant at the transport level, at least is that all when we have a room going, all the communications go via the hub for the room is a designated hub server for the room. Which where the room is is is honed and everything goes through that room. Even stuff might logically be between, to, non hub servers in the room, like, such a key package. This is just to to simplify, thinking about some of the community patients,"
  },
  {
    "startTime": "00:04:00",
    "text": "Next slide, please. One of the things we we wrangle about a little bit, was, over the course since the last IETF meeting was discussion of terminology. Especially, what a, what a member is, where we settled is, We have an apparel terminology for users and clients. So users we call participants in a room. Use for as a participant if they have some relationship with the room. So if they, are present in the room and have some certain rates to to interact with the room. Clients in parallel are members of the end to end security state of of the MLS group corresponding to the room. So so we have that that kind of parallel, some users, our participants in the room, clients are members in the, security stateroom. Now that obviously brings up the the question of whether you can be a member with no no clients. And so we have this active versus inactive terminology with this so that you can you if you are, user has a participant that has clients, joined as members then we call you active. Otherwise, you're inactive. Next slide, please. You're not gonna talk about the policy envelope. Oh, sure. That's, thank you for keeping me out of the the contract. Yeah. This this measurement policy envelope is still still important. You made your call on the IETF meeting, we we established this invariant that the the hub server dictates the policy envelope and, clients and servers within the meeting participants, in the meeting. Or in the room. Sorry. Define specific policy. So, you know, the the envelope will define things like which authorization policies are acceptable, and then the"
  },
  {
    "startTime": "00:06:02",
    "text": "clients and participating, users in the room will define. Who exactly has, you know, who exactly are the participants, who exactly has which right morning. I think Mara's still working on, you know, nailing out exact you describe that policy. I've left. It's definitely still a concept. We just need to to flushed out more detail. Next slide, Chris. This is an illustration advice on the last slide. We basically have 3 notions of state within the state of the room. We have an MLS group, that defines the most precise notion of state So this defines the specific physical clients that have access to the secrets and the physical ability to use those secrets to participate in the in the MLS group and that's to, to, to do a lot of the, the things that we'll we'll talk about doing in their we have a participant list that describes the users that are active, that that are participants in the room, I think we we generally assume there's a clear mapping between the clients, who are in the, in the, in the loss group, and the users who are participants, it's clear which clients pull under which users. You can see that user 3 there is inactive. It has been a client's joint And finally on the left, we have an authorization policy that guides all of this. So we had some notion of, what the capabilities are being used in participant lists what what what joins and, and removes are, are allowed for following some see if it's there. Next slide, please. Now, this, this framework, get To to keep this framework coherent as the group changes, people trying to leave, and as clients try to leave, you need a, the kind of a notion of preemption, to to dictate what operations are loud as things change."
  },
  {
    "startTime": "00:08:00",
    "text": "So we have 2 stages here. It's in this this preemption rule first one is that a user can be participant only if it's permitted by the authorization policy. And the second one the client can only join the MLS group if its owner is a user of, is it if it's owning users, a participant of the Next slide. Those, those preemption rules impose, constraints on how operations need to work. So if you're adding someone to the room, add them to the participant list before any of their clients can be added when they're being removed, all their clients need to be removed from the analyst group before, they can be removed from the participant list. So We will, we'll end up dealing with that in protocol. I haven't seen him come around in that, and, and Travis slides, but I assume they they articulate something that's consistent with that invariant. Following that, though, we also have this notion of confirmation. So Right. MLS operations are the archive the the the finest green nation of that state. Thank you, Apple, for helping with the thumbs up there, giving a little positivity this morning. I haven't I haven't So, MLS group, like I said, incurs the most fine grain state. But that needs to be consistent with already at the higher lows. So, so we have this kind of rotating thing where we make changes to the the name last group. And then the MLS group, because it's kind of a hash chain MLS is shaped kind of like a blockchain in the middle, gives us this this nice causal thing we can put changes to the group and to make sure that everyone, all the clients in the group have same representation of the group's safe. So because of this is preemption invariant, the MLS statements sometimes trail the, you know, what may have been done"
  },
  {
    "startTime": "00:10:03",
    "text": "hires, but the idea is that we'll take things that have been in the hialeah and reflect in the MLS state. So that, they can kind of confirm the blue area, the blue is representative confirmation, those state representations and the higher letters. Ecker. Yeah. I think you you complained about this slide in the interim. Yeah. Yeah. So what you just sent me to a lot of times to me, but I think wanna see if I can clarify, you know, a point you made earlier. Which you said that someone can't be removed for a dismount lesson. They'd be removed in the MLS State. Right? So, so imagine the following hypothetical. We are in a, you know, we are in a work we are in a, a chat together room to get room together. And I do something that violates in terms of of of the, of of the jet service. Right? So they I've asked me for every chat, they're they're they're basically calling the account. They wanna do every chat, right? Obviously, I my client is not gonna do it myself for the MOLs group. So how does that happen? Yeah. So so I think that there is the there's this this is sort of a a point that we're we're still working on a little bit. But I think the the idea we have is that the servers the state that the servers apply may run a little bit ahead of the state that is confirmed in the MLS group. So the servers, you know, when the user is banned, according in accordance with the depreciation policy. May have a state that is, you know, the that reflects the user no longer, being moved to some, band, but still present in the room, state in the participant list. So they're they're still reflected. They're they're still known about other room. Until their devices are removed. But at the same point, the, the servers can stage, MLS proposals to remove the the user's devices have to be committed before anything else."
  },
  {
    "startTime": "00:12:00",
    "text": "Anything else happens in the room. So basically, the server would move the users, you know, when that abandonment because the server use moved the user into a a statement. They couldn't do anything anymore. But we're still present, you know, present for for bookkeeping purposes. And then require the the corresponding, MLS operations to happen anything else happens in her and Let me just see if I can restate what you just said just in terms of your three boxes. So, in this case, when I am banned from the room, I'm removed from the green box effectively or marked in a green box as as defunct. And, and And then they stage a, and and then and then they stage, MLS commit that removes me, And then once that commit has been accepted into the group, then, then they remove the risk of list, and then I'm removed from the green box And then and then probably I'm gonna move to the green box and the launch empty not not not damaged. That way you had a Yeah. Correct. Okay. I I mean, much like in the ad case, you are added to the participant list before you have any clients, and then you add a, you you add clients and then then I'll just confirm. Yeah. Yeah. Well well, actually, Well, no. Actually, that that surprises me that you said that because, because I thought I thought what you would say would be that I'm added to the green box before I have any clients add a damn list group and then another participant list. Because I thought you were saying that the participant lied the MLS group. Not lead it. So No. No. Participants lead leads the MLS group. Okay. So So well, yeah. See what I mean? We Sorry. Yeah. Yeah. Yeah. Yeah. And it leads in the ad case and trails in the remove case. Because the the again, maybe have scope, so narrowing scoping here because the clients have to clients owners have to be in the participant list before they, you know, if a client is in your I'm just finding the indication now is, like, A client can only be in the MLS group if it's"
  },
  {
    "startTime": "00:14:00",
    "text": "So you have these, like, 2 phase strategies before where the the Yeah. In the ad direction, you have to be in the participant list before a client joins the group. And the reverse order of operations when you when you leave. Right. So I think so I think the implicature is the thing you just said. Which is that you can't be an MLS group coalition or business list. But, like, it's not a matter of order of operations. It's not it's a matter of, containment. Yes. Okay. I'm I'm not sure I think that's the best idea, but, like, I'm I'm about it a little bit, but I think I think we and I I understand we have Yep. Next. Ron? Ron. Yeah. So in my mental model, the any per user state is actually kind of restricted to the pink box. So there's like know, just one little in aspect there. But it's possible that you could be listed in the participant list as banned and there's still some places where you could still be a client in the MS group, but but you'd be, you'd be banned in the process of being removed while you're waiting for proposals to be committed. That's that's okay. That's just sort of a side effect of how those protocols work. So that's okay. Next slide, please. Oh, yeah. Order of operations. I already touched on this. Thanks for best forwarding. Next slide, please. Alright. So, yeah, we are we're approaching This, this is the first new slide since the last interim. So one of the things that the design team's been kicking around a whole bunch is how do we get the right kind of Lego bricks, And, you know, pieces that have a clear interface where we can swap out some implementation if we need to, you know, at least the clear, clear bounding lines and interfaces that let us modularize the system a little bit."
  },
  {
    "startTime": "00:16:04",
    "text": "These are the kind of, break points we came up with. So so the you'll notice the 3 middle here, right hand boxes, corresponds to those types state we're talking about. So we have some protocols dealing with the 3 different, elements of the state that were on the previous slide. So, you know, some policy, protocol describes the authorization policy, manages a signaling protocol, So that control the participant list and an end to end encryption management protocol. To control the MLS group. So we kind of have state control protocols that correspond to the bits of state. And then, of course, there's, you know, some protection protocol that describes how both, the the actual messages that people, it's users send. And some signaling message, you know, the messages for these control sub protocols, get protected on the wire and a transport frame with her physically sending them around. Next slide, please. And drum rolls is how the current documents maps all this. So the architecture defines how everything fits together. We have the content format that we've already adopted. And then the thing that We've we've kind of consolidated on, since the last interim. Is these 2 documents at the bottom. So we have, the Mimi protocol document that, describes the control protocol, the non cryptographic control protocols. So how we talk about who's in the room, how they're authorized, and how all these events get put together. And then a protocol that this, document describes the cryptographic bits of the protocol. How, how devices are are be a how how how commit some pro proposals are are managed in the in the protocol. And, how how messages are protected as they go around. So this this should be your kind of map for the rest of the session, because that these are the documents we're gonna be talking about. So The idea is that for the most part, you have, you know,"
  },
  {
    "startTime": "00:18:03",
    "text": "up down links here where, Application logic is controlling the room state. The room state is coordinated over the transport. I think the only kind of deviation from that is that there is a little bit of east west thing going over to the, That's a message protection protocol from from the the control protocols, but It's not too big of a deviation. So, yeah, this is just sort of your reminder of where we've gotten over the last few interims and, your guide for the rest of the session. That's all I have. So Thank you, Richard. In the last interim, We had talked about, more of a consolidation in the documents than what is shown here. So is is is this kind of what the design team has settled resettled on again, like, you'd rather keep these well, content was always separate, but the the other three you'll all agree. You wanna keep them separate. And in terms of, like, calling for adoption at some point in the future, you want them to be separate. So so the design team's talked about this, a fair bit, actually. The feeling and, yeah, this is kinda where we we came down. The Architecture so so keeping the the content and architecture separate I think was just sort of a, It seemed a little more natural. The concept formats already adopted the architecture fairly different than protocol documents. So that that seems sensible. In principle, one can converge the delivery service and a memeing protocol dress. The feeling there was that there's there was some interest, the, the folks that heard in reusing this delivery service in some other contexts and so it was it simplified some things to to have it separate. And also, kind of helps clarify I think when we started doing some actual engineering, helped clarify what the interface needed to be in crypto bits and the non crypto bits. So"
  },
  {
    "startTime": "00:20:04",
    "text": "actually having things as a separate documents is a little bit helpful for the engineering. And I I think shouldn't confuse the the reading too much given that we have pretty clear interface. So, you know, kind of, you can kind of abstract over the crypto and say the crypto is gonna do these things, as you're reading vertical. So I think this is not 200 risk document set. And so I think what we're hoping to build build toward is, adopting this architecture delivery service and and protocol trust. Okay. If anybody has thoughts on that now is the time to share them, I think. You have to read the documents first. Okay. Okay. I mean, they appeared like a day in Africa. So Like, I'd like to reserve the I'd have an opinion after I would tend to read them. To I know what you've been doing for the last day and a half besides reading. Yeah. It was more I mean, we have this discussion last time before some of these even really, I mean, the protocol document didn't but there there seemed to be strong opinions last time about having one big document. So that's That's why I'm referring to this. I didn't find a retrofit set for it persuasive. So but I'm I'm I'm I'm I'm preserving judgment on time for the documents, but, like, but, like, operator, I prefer F One. So So but I'm putting reserve government. And and, Akra, since you're at the mic, when when you say one, What would that that ideal ideal 1 giant document include all 4 of these? Or No. I'm just curious. All the profile ones. Everything but content, I think. I think the architecture document could be could be, like, a preview, you know, so think content would be separate and everything else would be. I mean, I'm open. I mean, I just gotta have to read them. But, like, if you just ask, if you ask what operator, I think a right document structure is, that's awesome. Yeah, again, I I I I'm only I'm only the microphone now because that speak now or, like, verbal or over being so. Well, yeah, I'm asking because"
  },
  {
    "startTime": "00:22:03",
    "text": "gonna have presentations on the other ones, and I think people want to have a conversation about adoption. It's very hard to, like, adapt documents if we're then gonna, like, condense them all into 1 or whatever. So that's I'm just trying to, like, get a sense of of whether that's like fair game for the end of today, or not. It's not. Okay. I mean, unreachable allows for adoption documents to appear today and So, so, like, I don't I don't care how much 1, 2, or 50. That's just not reasonable. Okay. DKG. God. Hi, Daniel Con Gilmore. So can we go back, two slides to 8. Right. So My understanding from some discussion on the chat as well is that if an MLS client in the situation where someone was banned, the situation where Ecker's been violating the terms of service He's been banned, and I'm in a group. And I'm sending stuff to the MLS group. My MLS client could eject Ecker from the group with a commit. How does my MLS client know that I'm obliged to eject Ecker from the group because if I don't eject echo from the group, presumably the hub server will block the rest of my MLS messages or drop them or reject them or something like that. But I need to, you know, my client needs to know that it needs to eject Edgar from the group. So what's the are we where where are we defining the the mechanism whereby the hub server communicates with the server that I'm connecting through, which communicates to me that this is the MLS message that I need to to admit. What's the what's that what's that channel? Yeah. That is an excellent protocol question. And that that's one of the jobs we need the protocol to do is communicate what with the client, dear dear client, thank thank you for your submission. Please take this action before we can act on it. And which document is that in which document is that in that'll be in the protocol, I believe. Is there a run, I think maybe it may have a more concrete idea. Rowing you. I think your next step Yeah."
  },
  {
    "startTime": "00:24:01",
    "text": "So in regards to the stack of documents, know, almost any nontrivial working group, is very likely to have a separate architecture document And I and so like, whether we merged DS and protocol or not, the architecture document really needs to be a separate document. It has different timelines and different level of detail. And for things like working group last call. Some some yeah, regarding your I think that would also be in the, delivery service document. That one there is pending things and do you send a message? You would actually get a an error message back. So, yeah, it would be both in the protocol and the and that yes. But, yeah, regarding the documents, so I could, I know you already voiced that concern at an interim a while ago, and, that has been brought into the discussion in the design team and that was discussed quite a bit. Particularly regarding emerging, maybe protocol and the delivery service. And there's some really good reasons to keep the delivery service separate. And one of them is that it's absolutely generic and specific to MLS only. So you have a a super clean separation of, the interface there. The other one is that it can be reused and there's some likelihood that it will be reused in a different context because it actually spans by design, the the whole root between clients and server while Mimi only really just, cover server to server. I don't know, Benjamin issue. Wanna say anything about, platforms here. Not. I keep relaying that information now the we have EOGs here."
  },
  {
    "startTime": "00:26:01",
    "text": "Sure. I mean, so, like, that guy had some normative some force what you're saying, but I like to read the documents in for an opinion. I guess, but, I I guess I actually got to talk about this, this question about the that that is kind of pushing on which is is the is this regards to where it appears in documents, question is does this does this protocol specify the specific mechanics that are followed in the cases we just indicated Right? Namely. So, so it, like, I heard DKG say, know, I need to So so you so was your wife floated this, like, banned case earlier, you said that the that that the the application emits, a proposal to, to remove movie, right? And and d and DKG, said, I'm supposed to know that I'm supposed to do a connect, right, And, like, I understand those can be really those those 2 things can be can be true in parallel. Right? But, yeah, another thing that could happen is a is one of the group members should be supposed to remove the person from the group, not setting the appraisal, but rather and but rather, bite issue in their own, like, removal. Right? It'll sort of look at that. Right? And so, I don't think that's the best best approach, but I that's what I'm saying is is like, Do we the the the question for this working group is, are we going to specify the semantic transitions and and who's responsible for doing what in each of these cases? Are we leading at the application to decide? Finding mechanism. And and and Oh, And I I don't know, but, like, that's actually an important, that we that we come down maybe a misunderstanding, or your proposal, but I don't really see how we can get around specifying that. It seems like if you leave different applications to interpret these requirements differently than you don't end up with interoperable So I think we need to have a defined order of operations here."
  },
  {
    "startTime": "00:28:00",
    "text": "And or define defined, you know, sequence of protocol actions. For these cases. I don't intend to lean that way, but I'm like, I'm I'm making sure that with everybody agrees over what they have to do. Right? And so and so I think that that that if that's what we have to do, then I think we actually have to make you know, I there's a tendency in front of these vertical design settings to sort of feel like this is one way you could do it and another way you could do it and just persuade yourself that that we have enough protocol mechanisms to do it, and unless it's sort of full of that stuff where it's you could do x, if you do y, you could do z. That's, like, fine. That's that's great. It's a building block. Right? But I'm saying that if what we're doing here is different and we ask if if we're we have to go through every single, you know, major scenario flow and ensure that we define exactly what's supposed to happen. So, that that's, like, that's, like, trying to make sure we all agree that's the scope of what we're taking on Yep. And and and and that and that does require making, I think, some actual, like, real decisions along the ones that we were discussing yesterday, Mimi, about, like, order of operations or what it actually needs to be part of a group and, like, you know, NLS status versus, versus business status and whatever. Right? Yeah. Yeah. On the on this building block versus super every, every situation prescribed, dichotomy or spectrum I think probably the the invariant that comes to my mind is I I think likely what what I I think you'll see in the document now at this point is that things are still not totally prescribed, but, there, the hub can, dictate what's happening in any given situation. So, like, we have availability blocks some flexibility, but they're it's at least clear to everyone participating in their room. You know, which, which kind of playbook we're following in this instance? Even Right. If there's some places. I mean, so, again, I haven't wrote the document like, I mean, to take this example, right? You know, I'm on, you know, the the the the the writer, mixed me from the group, at the same time as JK using the message. Now we always race,"
  },
  {
    "startTime": "00:30:03",
    "text": "And there are a number of things that can happen. One is the provider could just be like, well, I know DQG encrypted the entire group, and the keys haven't updated, so I won't forward it to Ecker but, like, I'll pass the message through. Another is that it says, actually, no. You gotta, like, you gotta, like, we have a group update and use the resend this message. And if it's the second one, then when you protocol message that says, you need to resend the message after this has happened. And so on on just and so I think know, you know, and just getting, like, we have to actually work through each of those cases. Also come down. I think they can just policy issues around on what's going Okay. I mean, My impression is that these some of the things are not specified at this point. It's not because people don't want to specify them. It's because we just haven't done it yet. That's like Great. The vibe that I get. Awesome. I can definitely second that, I mean, we try to get something you know, ready where the design team has, you know, cancers consents on and, So it needs to be rough around the edges and and bits are missing. That's That doesn't mean that that he won't be there eventually. Only needs to be good enough, for adoption. Not for last call. I'm not gonna come out and explore, but yeah, I agree on the current state of the agreement documents is fine. I mean, as Rafael discussed, it's it's nice the situation between those those documents, I think. But I don't have a strong opinion. It's I like the structure right now. See any problem with that. Thanks. Ron, Ron, Are you in the queue or no? You're not in the queue. Okay. Anything else, Richard? That's all I had. Okay. I do have one one request. In re reviewing right before this. I think we really need one terminology section if it's gonna be an arch or wherever it's gonna be. I know there's, like, set of terminology document, but, like, there's the terminology between the documents still inconsistent and"
  },
  {
    "startTime": "00:32:00",
    "text": "the architecture document doesn't it's sort of, puts the terms in narrative, would help a lot to have to add the 1 terminology section that all the documents are gonna refer to, someplace. So, Okay. Yeah. Yeah. Travis and I have been working to, to consolidate the terminology into the, into the architecture document but if you if you'd like more of a a glossary style section, I think we can I think it would benefit the whole work, the whole effort? Good. Sorry. I just wanted to respond, excuse me, to several of the the things, the questions or comments about we need to have one exactly one way of doing things. If this were a greenfield protocol, we'd have that luxury, but we're dealing with protocols that are in the wild we're dealing with user interfaces which are different And So we need to support reasonable things that are in the wild. So how can we make this sensible, the way is the way is that we have an authorization policy that describes what the policy actually is, what things you you are allowed to do and what you're expected to do. And then the clients have a have clear guidance about how they can authorize any operation that occurred by somebody else, and they know what they're supposed to do. So I think that that gives us the tools that we need to you know, tame the chaos and make this make this reasonable and doable. And it it doesn't mean that we need to go tell you know, we need to go tell, you know, what's up? No, you're not allowed to have your user interface do the do this thing the way that you do it hopefully that makes sense. Yeah. I I don't think people are trying to dictate the user interfaces. There is this piece which is undefined that that doesn't exist in the wild right now, right, because nobody's doing So I think that that's why people have an opportunity to be more specific."
  },
  {
    "startTime": "00:34:02",
    "text": "Yeah. I think we're we're creating We're creating semantics that will ultimately maybe be exposed by user interface or just by client behavior. Right? And I I agree with you. We need to think about how we support existing user experience. And thanks for clarifying that know, the authsy policy is gonna be in this group context extension And it's a higher level stuff that's brought into MLS. What I don't understand is is that thing gonna change? In the MLS group context, if the server is not part of the room. I don't that's that's what I'm not understanding. Like, like, I'm when when Edgar gets banned, sorry, Edgar. That that that when that happens, the the the green box has to mute it. Right? And currently, the mutation of that stuff happens by the clients. So if the server's engaged in mutating that state, that's the part that I'm that I'm missing. Yeah. I think Conrad This is in Conrad's deck. So, Yeah. Yeah. Okay. Thanks, Richard. I think we're gonna move on to content format. Grow in Europe. everybody. I'm Roan. Hello, Next slide, please. Setting my timer. Okay. So There have not been a ton of comments on this document. We have 4 open issues, but I'd but I'd mentioned during the last IETF, there was a little bit of discussion with, with Andrew from matrix and, pretty much other than that crickets. So what did I do? So, the major changes are first regarding a"
  },
  {
    "startTime": "00:36:01",
    "text": "attachments. So I was using this message format that was based on was using them. Message, external body, MIME type. And was kind of weird that we had a, like, basically a binary protocol where we're using and this, like, enormous string that needed to be part that had all these parameters and didn't actually reflect how modern messengers, deal with deal with attachments So created a new binary format or abstract format and discussed about encrypting external content, which is what every major messenger does with external content, there were us, there was also some question about the equivalent of content disposition, and what's the difference between render and inline that was clarified. Then, one of the one of the possibly most contentious, things that I, that I did that I'm looking forward to some discussion from is about, how we handle message IDs, So I had this assumption of sort of an envelope encrypted and then an outer message that has an envelope the outer message has a message ID and that you would be able know, at some point, clients would be able to compare that the outer message and the inner message They're had the same message ID or some it's some way to correlate between these two. But because we're not We're only defining client you know, behavior and end to end behavior for the MLS layer and the content. Document and not for anything lower in the stack, that's not really possible for us to That that's not in our purview. So what I did instead"
  },
  {
    "startTime": "00:38:01",
    "text": "as I created a a struct for additional authenticated data inside of an MLS application message. Where you could where you would, put the message, a copy of the message ID and time stamp. That can be that can be inspected by, intermediaries, and clients would be obliged to verify that these two are the same on receipt. So they would declare foul if there was a problem if those didn't didn't match. I'm I mean, I have individual slides for these later. And then, let's see. I expanded some discussion about how mentions should work particularly about confusion attacks, And then finally, I added a last scene field basically to create a, a a directed, acyclic graph of when messages arrived and what the what the rough order is. I have a slide about that. So next slide, please. So, this binary format it uses many of the same fields as message external body, but it doesn't have a separate, a separate hash, because it assumes that is gonna have to be encrypted. And it would be encrypted using the the client who sends a message who wants to send an external content would encrypt the message, and upload it and fill out the the key and the nonce, and any of these, the URL and any of these additional optional fields here. And send this information in this format end to end. And then the receiving client would download this according to their local policy and then decrypt it."
  },
  {
    "startTime": "00:40:01",
    "text": "Edgar, do you wanna wait for the next slide, or do you want which is it's about this slide, this topic, I don't know what this says. It's the same topic, but there's more detail about the Encryption on the next one. Sure. All white, navy. Next slide. Okay. So, The way that this is largely done is people generate an ephemeral symmetric key and anance. And then this, this uses, or, see, 5116, says you must implement AES 128 HCM. You can use another you can use another algorithm that is that is also in and registered. And you go and you do that and, it also specifies that for this sort of base implementation. There's no AED for the external contents, and Bob's your uncle. Can I say previous slide, please? Yes. Yeah. So, Yes. This is this is this is something that people do, and it's got good. And I've made this mistake myself. The problem is is that this does not crypto FOP bind the content to the message. Because anyone has the key can generate a new body. You actually do need to hash a meal. Anyone that has the key can generate. The point the point the point being So just just repeat. Yeah. Anybody has the key who's to receive her the message. Can change the content. Because they because they can generate a new perfectly valid a a a d encryption. Okay. So they could man in the middle of the It came in in the middle of the HDFC US URL. I mean, I mean, if if they Or if they have access to that, if they if they control yes. If they control if they if they also control that, the the the example that comes storage, right, I mean, the point is the point is breaking the end in integrity guarantees of of MLS. Right? Because because it's replacing them with an with integrity guarantees of HTTPS. So if you have a hashing here, then the an attacker has the key cannot substitute their own values."
  },
  {
    "startTime": "00:42:02",
    "text": "Okay. Could you please create an issue or send me a No problem. Short minute text? I it's trivially fixed. It's just it's just, like, it's it's a headphones using this A80. Okay? Connor. Cannot go broke. Yeah. 2 comments maybe on the message ID, you don't specify how that is, computed. Right? In the documents, I do. And that's there's another slide on that. Okay. Then I'm waiting for that. Then the other comment is with the encryption algorithm. We might want to sync somehow with the MLS group or somehow whatever is agreed in the room says that we know that everyone actually supports that was in the group. So otherwise, we'd be running into trouble if anyone just their own AAD and So it supports it. Yeah. So using this particular aid, AED goes along with the mandatory to implement safer suite for MLS. It has the same corresponding AAD Okay, judge. Because he said they can pick any in the AAD from the RC and Should be okay. That that's what I heard at least. Yeah, I mean, Modulo that do wanna make sure that Okay. Cool. That it's a full message. Yes. You can't Gilmore. So This is a web bug. Which is the that the the bug that Becker described or that we do No. No. Good mechanism is the web bug mechanism. Right? If I wanna see who's participating in this list and where they are on the network, I stand up my server, And I tell everybody, here's this image. And because they all promiscuously fetch arbitrary URLs. Mhmm. Then I see their clients appear You can do the print to the previous slide. So so I agree. Okay. That's the plan. Sorry. Is it different is it different from from an individual proprietary messenger Today? Well, I mean, it depends. It I mean, it it depends. Like, I I'm not I'm not entirely sure. The goal here is to"
  },
  {
    "startTime": "00:44:00",
    "text": "This is Email clients today, avoid fetching external resources. Privacy purposes. Right? Yeah. Yeah. So We're gonna go through that whole process again If we do this, So the being there yep. So the the the The issue here is Mhmm. What do you want the messenger behavior to be? Because the look, because right now, like, I'm saying, this according to your local to your local policy. So if your local policy is I don't ever download images unless the unless someone clicks on the link in the messenger our messenger implements that. Our messenger also has a mode where you can go and download an inline image. That that that, is stored on a on another server. It happens to be on our own server Now he already have the same metadata, so it's design pattern is as protocol developers don't know how to deal with this. We'll kick it to the user agent. And the user agent doesn't know how to deal with it, so they'll kick it to the user the user has no idea what they're being asked. But they wanna see the kittens. The the administrator does have the ability to set this in many in in and many clients, but I'm gonna just say, like, what's your alternative? Right? If you have if you have a an alternative that gives us better that gives the user their kittens, then I'm all ears. I would love to implement it. Don't do extra no content. That's one thing. So that's that's one option. Don't do external content. Right? Or you could have group policies that say don't do external content. Or if you could you could have group policies that say you can only do external content at this particular location. So at least we know that the web bug is 1 central web bug for the conversation instead of everybody being able to bug the conversation anywhere. I don't have great answers here. But I'm just observing that what we were doing here is we are recapitulating the web bug arrangement."
  },
  {
    "startTime": "00:46:01",
    "text": "Okay. And and and surveillance architectures We'll jump on this. If they can Okay. So so wait. Stay there, please. So we have the in draftmaygroup, draftmayiminigroupchat I, like, outlined a bunch of a bunch of things that were Here are a bunch of things we could go and put in a policy document that is would have been stuff in that green box over on the left of rich Richard's 3 part slide. So those things that you just described Like, please help us define exactly how we want to you know, what parameters we want in that policy. So we can put that in the protocol document when we define those policies. And then they'll be there. And then we can give reasonable guidance to say, do these things to these fields And at least we can say, okay. This is gonna be you know, is going to be going to at least the a domain that already has the information about what users has some metadata, or we can put a recommendation you know, use a use a proxy or an onion server or whatever to, like, if you're if you are concerned about this. So here's here's another model. Mhmm. That Who already knows the network location of the clients? The local provider of that Their home server. Yeah. Yeah. Right? The hub does not. Correct. And the other participants do not. And that's what what everybody except for Webex does is they load it on the local provider. They they upload it to the local provider. Okay. So why don't we Push these objects to the local providers of each of the recipients. Of each of the local providers that are in the room, And then if you wanna get that thing, there's a way to query that thing. Instead of putting here this what we're saying here is"
  },
  {
    "startTime": "00:48:00",
    "text": "We expect all MLS clients to promiscuously fetch arbitrary network resources, and we don't know what the policy what the privacy policies are. Instead, we could say, we we recognize that the local client already has this delay this this relationship of their network location to one of the servers. And we could just say, external content has to be routed through that local through that home server. Yep. Very good last point. That's exactly what I want to say. We propose that in the attachment draft. I don't know if you read that, Ron. So essentially, it's that the we already have the hub as a coordinator for a number of things. So in a way, it's it makes sense that the hub also coordinates like quotas, how much can be uploaded, etcetera. Rooting it via the local provider might make a lot of sense for privacy reasons. But it's it's sort of orthogonal to the fact that at the end of the day, when you download it, you want to download it from the help. Or, again, read it through your own thing, but the coordination has to happen at the hub level. I I think that it sounds like we have least three different models that we could use here. So Let's go and have a vigorous discussion about this on the But I think it sounds like, you know, we could do it the way we're doing it, which is whoever uploads it, sticks it on their local server, and then the receivers have to decide whether they're gonna downloaded or not, We can push it to the hub server or we could have some way where it's more or less automatically distributed to each of the each of the receiver providers. Did I miss any of the possible options here? It. I'll I'll I'll let you come on to the mic for your snarky comment. Thank you."
  },
  {
    "startTime": "00:50:00",
    "text": "But but it seems like we have some early consensus on the fact that we don't want arbitrary So it's either hub or local provider or a combination thereof. Yeah. And then we need to figure out how we know that it is not that it's not actually arbitrary. Colin James. So so I'm not really commenting on the solutions. Okay. I'm just gonna talk about requirements slightly on this, which is the the quotas and, and I saw that is is really key. And the problem is and I suspect you're gonna want all of the above, including this, like, completely, agree with DKG on all the problems with this. And I hate the stuff where the IETF does the thing of, like, we can't solve this problem. So we punch an impossible problem to a group of people that's even less capable of solving us than we are. Okay? All of that set But I think you'll probably end up with that in the end. Anyway, it's one of the options. And the reason why is think that people run a lot of these things. If you may a system that's capable of transferring large files. And by large files, I mean, the size of a movie, you find that the RIA takes your site off. Takes you down. That's it. You'll be turned off. So you have to have so you either have say we aren't going to transfer things that meet that size. Or we're going to transfer those in a way that we aren't taken off the web when we do it, which it, it's turns into one way or another at some form of the privacy problem. So I think that, you know, obviously different clients and different service providers can make different choices of what they wanna do on But you end up in this situation where or I think a lot of people have found themselves in the situation where from a requirements point of view, they can't simultaneously solve the privacy problem and the large file problem. Simultaneous Matthew, Sorry. Yeah, just as a dice point on this, we've had this held discussion on Matrix over the years and decided not to use any dualurls to objects to the webhook, risks on it. Instead, everything gets cached on your local server. What we've discovered on that is say, secondary problem"
  },
  {
    "startTime": "00:52:04",
    "text": "where anybody can send any URLs into a room in order to potentially pair the cache particularly unpleasant content on your local server and so there's almost a separate thing of whether you want to just proxy through for the sake of privacy for your server. Which would obviously push away from the idea practically pushing our constant everywhere. Or whether you really want to catch it on the local server at all have, whichever server whose user posted this in the first place, post the one true copy of that they almost have the legal liability of what that is, and that's who the RIAA goes off or whoever the authority is it happens to be abusive forms of So I think there are patterns where this can work and if we have vigorous discussion on the mailing list, I'm pretty confident which one words and fall out because we've already gotten played the whole thing through Thanks. Thanks, man. Yeah. So it's gonna make several points. What I said before was you could put it in the blockchain, but I didn't mean that. I guess, 1st, like, Let's not get I agree with DKG. This is a problem. Let's not get too excited about the ability to solve it. One form of data I can after all send is HTML. Which contain embedded image links. And so even if results if there was an HTML around, which is how the problem happened in the email in the first place. Right? So, so, like, clients will still have to manage the situation in some way, even if we did not provide this feature at the second is, you know, one has to be a little a little have a little ability. Yeah. How much much we're gonna actually solve the problem even in this case. And in particular, you know, the usual thing that the way that the usual thing that that, that web bugs are designed to, to deal with is detecting when things have been read and that's just been red. On, and so in this in in this case, what we're doing is we're substituting the sender of the so that there basically are we think about this is there are 3 groups of people we might wanna design the information to"
  },
  {
    "startTime": "00:54:02",
    "text": "Sorry. There are 3 groups of people who emailing that information to. 1 of the message sender is the way email is typically dealt with. The second is the hub, and the third is the, is the local server, right, the receiver ultimate receiver or the risk? Sorry. So the receiving the receiving Yeah. So I think, you know, if we if we push it, so so if, you know, so the more you push it away from the initial sender, the more you sort of walk down that chain if who gets to learn about it. Right? And so but even but even in that last case, note that the, you know, that the that the local provider isn't getting effectively a red receipt for the message. On on in, in this case, and, so, like, even that is not the most best case scenario in the world. And so I think I guess what I what I mean to say is, like, even if we did exactly as DK2 Prosus, automatic loading of these messages is still problem. Because it still leaks information, which we're route week. The only way to solve that problem is definitely entire like in one shot. Well, I see it. Yeah. Yeah. On the same page, but they put the properties. Jonathan, yeah, Jonathan Leggkson, but maybe this is crazy, but I was thinking when when you mentioned the model of, okay. Well, the sender uploads the file to their local hub, and that gets distributed to all the other hubs and the clients may be downloaded. That sounds an awful lot like a regular MLS message. What if you just don't have external content at all? And just have some way of saying, telling the clients, hey. This MLS message is huge and a movie Download it if you want. Otherwise, don't. Yeah. There there are some good reasons why people don't want to send content that large inside of MLS messages regarding the way that messages are tend to be queued. And when offline clients come back online. They have to go and suck down took down a movie before they can get the get the call from their boss or the urgent message Okay. mean that we can't Yeah. So so, yeah, I mean, maybe it would be exactly right there. This doesn't that we can't"
  },
  {
    "startTime": "00:56:00",
    "text": "do more inline contents or I feel like maybe there's some way of, like, not an absolute, giving it the security properties of inline content, even if the protocol as somebody was saying, hey, this is special. We'll only get this if you really need it. Feels like it'd be better security properties than having yet the, you know, than trying to work around the web web bug problem. Rafael. Yeah. I just wanted to quickly second what you just said, Ron, because fundamentally important, you cannot have large messes messages in a queuing system. Because smartphones need to be able to download that when the app is in the background. Possibly over slow connection with very little run anyway. So this completely defines on what you can do on a technological level. So it's a completely complete non starter. If there's some back and forth between the client and the server to see how big an just before you download it, etcetera. So, I didn't I, I understood Jonathan's proposal differently. I think he was not proposing to treat content as a message and thus use the same queuing infrastructure. But to replace the generic HTTP patch here, with some sort of fetch through the room thing in Amy. So you could, post content to the room and we get stored and a similar way to other stuff associated to the room. But instead of being delivered actively, in, in queued, like, messages it would be delivered only on request. So, basically, you swap out HTTP for some meme efficiency, and that doesn't seem totally impossible to me. Doesn't sound very great for privacy. I don't know. I mean, it's good for privacy in the sense that you, it's falling the same thing. It's exposed to the same folks that message patterns are. Right? Yeah. But it's it's Okay. Right. Doesn't point out, it it it flows to the same set of servers."
  },
  {
    "startTime": "00:58:01",
    "text": "That the messages flow through the only difference is that you you would see when someone is awake to fetch it. When they go for it. But, you know, it's only exposed to the servers who already know the the ship of the group, Yeah. But they don't necessarily know the content of of that message, like, in my pdf with my legal discussion with my lawyer or something. It's like, No. I mean, it would be intense protected just like messages. It just wouldn't be eagerly delivered. Yeah. So let let's let's get the requirements written down. Let's get the ideas on the list so we can discuss them. But, yeah, definitely make sure that you include your, you know, the the requirements that you're assuming. You when you send your message. That that's gonna help a lot. Okay. Let's go on to the next slide. Okay. Sharing message ID and timestamp with providers. So We've got this MLS additional syndicated data field, AAD, So if we expose a copy of the message ID and the time stamp, a local or hub provider could project provisional message with timestamp that's too far in the past for the future. That might maybe that's know, more than 1 hour. Maybe that's more than 5 minutes, whatever. We could come up with some specific guidance about that. It might be different for past and future times. The clients would be primarily responsible for detecting duplicate message IDs. So that's with the caveat that not every client has been in the MLS group for its whole lifetime. And so they can only detect duplicate messages, during the lifetime that they have been involved that they been participants, that they've been members of the MS group. Then the local and hub providers can also reject messages with when they detect that a message ID is is duplicate."
  },
  {
    "startTime": "01:00:01",
    "text": "But would not be required to do that. Because that's hard. And I had a little, you know, little discussion about why in in my case, I included a provider domain in the in the message ID. So for whomever asked this question, the message ID is a UUID. Or it's recommended that it's a UUID could make this mandatory. But but but We do we do have stuff in the wild where we have different message ID formats. We might want to still allow that But since this is we're encrypting a new we we could go and we could ask, does any provider have a problem if we just make this mandatory a UUID. Eric, you wanna comment on the domain parts? No. Not not necessarily. I wanna make sure I understand what the problem statement is first. Which is why do anything here? Like, why not just, like, like, why just do not honestly do nothing? And then I'm not sure I disagree with that. Trying to understand the problem statement is so I couldn't even think of the engineering we shouldn't have Right. So we have the so the threat model for duplicate message IDs is that we have So first of all, It getting 2 messages near simultaneously with the same message ID that this because we use these most IDs in, replaces and the in reply to fields, this could cause, you know, I I could get a, I could have a message that is that is a, you know, It says, it says whatever, and then somebody replies to it, and then somebody sends a new message which has the the same I do. Right. So likewise with the replaces, I I just replaced a different message. Sure. So I guess I I'm very comfortable using IDs that way right way to do this by addressing them the content, which is a hash which is not remove that problem entirely. On,"
  },
  {
    "startTime": "01:02:02",
    "text": "and, and then that can be forced entirely. The client isn't any server support at all. In other words, so the in reply to already has a in reply to hash isn't it enough? What about replaces? Do we need that for replaces? Yes. That was your proposal. Okay. And if, if there is a duplicate message ID you just detect it, and the client says there was something went wrong and they just don't display. Well, I guess, I guess I'm now about to ask why you need message IDs. So What so if we assume that the message ID is the hash of the ciphertext of the and you have it replaces, then the thing that it replaced had one ID, and the thing that is doing the replacing is a different ID. And when you reply, you're replying to the most recent idea of that particular message. Right? Where do we need some non hash message ID? So right now, we do have It it's a pretty common problem that due to, you know, whatever, like, network synchronization that that a a client might get confused and or clients do get confused and send basically the same, the same exact content and that could be at radically different times. Now, if that that that The timestamp is the timestamp when you're encrypting and they're re encrypting, then We might be okay. But we we definitely do have a problem where clients you know, they, they don't know if they were if they sent a message because of some combination of, you know, network status, rebooting, you know, the the the operating system killing the process as it as it was sending in the middle of sending a message. So we do get these duplicate message. So the the question is what do we do about it? If I get 2 copies, of the exact same ciphertext then I have How far apart in time?"
  },
  {
    "startTime": "01:04:00",
    "text": "Doesn't matter. It does. If I send a message and it's know, if I get 4 hours later ciphertext. 24 hours after it was sent. Mhmm. Am I gonna do with it? Should throw it away. Okay. And if I get one copy right after it was sent, what do I do with it? I incorporated. Yeah? Yeah. So if it gets resent, I if I look at if I if I decrypt it and I see timestamp on the inside of the message. And it doesn't match the current time, I'll throw it away. But you are the receiver. Right? Yeah. Yeah. You can't tell the difference between a message which was sent late and a message which was received late because it was queued for you because you were offline. But that's That all seems okay. I don't understand why I would treat a message that has this exact same type of text. Which I hope means it has the exact same clear text. Well, yeah. Yeah. No. Not quite but, like, let's let's let's put a pen let's put a pen in that. We can solve that problem. Uh-huh. The key committing, blah blah blah. Yeah. We'll give this example. I still don't understand why Yeah. Yeah. I I still don't understand why we need a message rather than the hash of a ciphertext. I I I haven't seen the use case for it yet. So, so, so I guess, well, I would suggest that I think we actually pointed the cases of a rational address here and then, like, start trying to really try try to engineer a solution from that. Think like it's probably a little unclear exactly what we're trying to do and exactly what can go wrong. But, DKG, let me give let me give you an example of where I think this might be is if, what kind of what Ron was saying where you the user sends the message, and then, and they, they lose state and they're not sure if they have to resend the message, and then you have cyber text, right? And so now you do have an ambiguity problem. I'm not sure how problem solvable, but, like, but, like, anyways, I think I think that we were, like, working through trying to write down the use cases because I think I'm not sure that solves the problem. And I'm also on the on on team like you say for tax for this"
  },
  {
    "startTime": "01:06:01",
    "text": "Okay. And then in terms of the timestamp, did you wanna weigh in either of you on not sure again what the time stamp is doing. A time, like, I guess I'm not sure what the time stamp is doing. Yeah. So what let's let's just say that in a cooperative environment that this is the that this is the this is the time that the client encrypted the message. And, mhmm, that We do need a way to we do need a way to well, I I will talk about sort order I mean, maybe we should maybe we should go to the sort order slide and talk about it. Yeah. That that seems like bigger place to start. Okay. Jonathan, do you want to comment on this before or after the sort order slide? Okay. You're ready too. So just something that was mentioned in chat. Is there a reason we're not saying you must use a key committing AAD and, like, then some of these issues just go away. I mean, MLS uses an AD. What could you What property do you what property are you trying to get here? The the thing the echo was saying where, you know, the message that was re sent, and it has the same the same ciphertext that has a different plain text because you didn't use a key committing AAD in the piece have changed because there's now a different epoch. Alright. It's not a different epoch. It might be a different generation. Different generation. And, like, it's as in It's 3 days later, and I've suddenly received a message. They the keys might be the keys have changed and so you cannot guarantee that the plain text is the same you don't have a key commencing at 81. We'll put the we'll put the use cases on the list, but I would I would I would suspect that the receiving client cannot tell the difference between that"
  },
  {
    "startTime": "01:08:04",
    "text": "So we should try to wrap up on content format. We're running a bit over. So let's let's like get through this and sort order and be done. Okay? Let's go to the next one, but finish the, like, make sure you have the the discussion of a key commitment because about the key commitment, like, Jonathan said, because in the call, for the call, we don't need it. In the commerce protocol. It's okay for 3 chem to have these kind of problems. Not okay for duplication messages or for the dollars. Okay. Was a little quiet. Please make sure you send that in the the Zulu chat. Okay. And by the way, the the thing that I thought was to be the controversial bullet on the slide was about metadata. So sort order. Okay. So this is a requirements question. Is it? A requirement that different clients in the same room they have a consistent render rendering of the sword order. Is this a a feature that we need in Mimi? Anyone? Anyone? Now, I mean, they're obviously there. Whole class of attacks that can occur based on somebody inserting messages before or after they were actually sent, Did you wanna comment on the requirements? Sorry. I tried to join the queue, but it failed on me. Matthew. But I I will go behind whoever is in the queue. Okay. I was gonna say, like, look, you can't you you can't never mind anything to do with Mimi. You can't have a modern chat application where you know, people are typing things rapidly at the same time and people see their obviously, people will type things in different things when. But in the end, everybody needs see the same thing. If I say, Let's do blah. And somebody says, yes. And somebody says, no. I mean, the opposite of and somebody says, no. Like, you've gotta have the or like, you can't have Your message is randomly"
  },
  {
    "startTime": "01:10:00",
    "text": "swipping their order between different users, like, There's there isn't a single application on the market that successfully does that. Alan's shaking his head. So maybe correct. Okay. So I mean, I think it's a basic user experience here. We have to have a consistent ordering. Yeah. Yeah. Tom. Matthew's next. So I've got a data point from Matrix Land where we have gone back and forth on this enormously. At the moment, we don't actually have, we basically display messages in the order that they are received by the local server. So it's the opposite that if what Colin just sort of proposed However, there is a consistent ordering if you go back in time, the problem being that if there is a delay on a federated network, what do you do about the old just to come in. Sometimes it's very confusing to go and put them with the time stamps at the publisher page. Sometimes, but it's also weird if they pop up three pages ago you have to have an arrow that says, oh, there are random old messages going on that honestly it's up in the air for us, you know, we're fiddling with it right now metrics land and it's really unclear what the correct solution is gonna close the queue. So if you wanna comment on this, please get in the queue. Becker. Yeah. So maybe, like, just let's try to split the boundaries here. Like, It's always the case that you can have two people responding to the same message. As you just indicate here, and then you have to somehow order those messages. And If people, so the people we think that it's important to make this an order, I'm lucky at you, Colin, do you think how do you think the system's supposed to handle that? Is this arbitrary like pick 1? I'm just, like, I'm just trying to understand where we Yeah. I I I I I think any answer to how they're picked is is totally fine. Like, a real the, you know, compare the hashes of the two messages, time stamps that are on a som common time base. Anything is fine. It doesn't matter how we solve it, but just some way so that Everybody sees the same thing. Because when people you see this all time in conversations where you type something. Yeah. And it's what you typed, because somebody else got something in right ahead of you, you look like you're saying something that's"
  },
  {
    "startTime": "01:12:02",
    "text": "you know, that shit crazy. Right? And then you correct yourself. That's fine. But if it looks fine to you, but other people see you as bat shit crazy, that's a problem. Well, I I just so so so I'm I think I'm like, sort of with you, but let me just point out that, like, I'm not sure that that that that that cannot be solved entirely the client's side. And the reason, and the reason is because like, there's no consistent view between the clients of anything. Right? And so either you have to live with so you can, let's see, let's graphically sort, which is common thing people say to do. Right? Then you end up with situation where, or, the administration where messages come in and, like, you, and I message to reorder as they come in which sucks, right? You can have timestamps is like one thing people often will so I'm just So, I mean, like, so I can't trust the time stamp. Exactly. So I just wanna figure out where we are on this, just So, yeah, that that well, usually partial ordering is my point. And and you acknowledge that in the next message in the next point. Right? And so how do you resolve that partial ordering question I'm just trying to make sure do we think we have to solve solve resolving the partial ordering question? And it, making it forward. So, I mean, we can take the partial ordering and we can take you know, we can order That's what I was saying is that produces a very immersive UX experience. The messages reorders new ones come in. Yes. There's no way you as so what I am saying is that is absolutely mandatory to have the the the ex user experience that messages reorder as they come Okay. That's that's what you're why that's negative, but you have to have that Otherwise, you can't have consistent messages between Well, well, I I guess, I I do wanna suggest there's another way to deal with this, which you may or may not like, which is to have timestamps assigned to the central server we don't have so if you can come up with a way to do that in mini, I'm all ears because right now we don't have a way to get the anything below the the MLS messages, arrive at the end at the end client. I don't think I understand what Max, what Richard said. The"
  },
  {
    "startTime": "01:14:04",
    "text": "the the, you know, me me me protocol, the transport protocol, doesn't go to the client. It only goes to the client's provider. Thank you. I understand your So how would we get that time stamp in? Yeah. Yeah. Yeah. Yeah. Yeah. Yeah. that standpoint, don't know. Okay. Wanna do maybe a show of hands about whether people wanna weigh in on this order question or sort I already asked anybody who wants to weigh in to get it to the mic. So I think you're getting everybody who wanna hear from. So just to summarize what the situation here, The theoretical situation from information theory point of view is that we have a we have a causal order, which is not a total order on the messages. From what we want the users to experience, we want them to see a full order, and we want it to be a uniform full order across all the clients. So I don't think So I can't I have not even begun to think about what kinds of attack server could do if we allow the server to specify the full order that doesn't already exist. Right. Like, it's a We know that there is no actual full order of the messages. I don't see how we I I don't know what the I don't know what the risks are there. We may need to say, I I think this may be a moot point because of what I just said to Ecker. Right. I don't think that anybody has come up with a way that we could get the server to provide us with with an order. So if we can't come up with a way to do it, then you don't need to worry about whether that's important or not. That's that that makes the security analysis even easier if we can't do it. Great. We are talking here about the actual user experience of what the user sees. Our protocol cannot expose a full order digits So Either we're giving user interface guidance that says if you want to have a compatible thing, This is what your user interface needs to do to render the messages. Or we are not giving user interface guidance and All we can give you from the protocol the partial causal order."
  },
  {
    "startTime": "01:16:02",
    "text": "And your user interface needs to pick its best way to do it. So know we don't do user interface here at the IETF, but if what we care about is user experience, we do We do give recommendations. I'm I was saying that to hear the nose. Great. Yes. Should give recommendation. Okay. So we should give one specific recommendation and say if you follow this, your client will render things in the way that all the other clients follow a due. I'm very happy with that. Thank you. Agree with with the KG. We have we have the causal ordering from the protocol already, which is good. So, like, you never swap the messages from one's clients. Alright. But, the global consistency across all clients is a problem, but having some policies good. One thing I wanted to note is if you could add somewhere missing messages, right, because at the end of each flight, of of MNS application messages, if you don't confirm, if each client don't confirm the number of messages that that we sent, you can miss some messages. Right? We have an extension for helping that. But With that back, you mean? Yeah. Be that fine. So That's a you that's a discussion. Right? But I think it's you know, if you miss messages, it's is it worse or not worse, then the all doing messages. Good point. Okay. You get a message. You feel like you got what you need? On that. I think so. Yeah. Okay. But, yeah, please either you got us got an opinion on this, please comment on an issue, you know, create or comment on an existing issue in the GitHub or make a make a post on the mailing list, Or, you know, if you want to say something quickly, like, on the Zulive, I'm gonna harvest all those before before the end of this meeting. Bye bye. We're gonna have skip mentions and just can you just skip it quickly to the neck to the next one? And I'm just gonna say that I did make some changes to the the text about local policy for mentions. If you care about that, please have a look. And and we can skip that. That's Okay. Irrelevant. Thank you."
  },
  {
    "startTime": "01:18:01",
    "text": "Conrad and Travis are up next. K. So we have until the end of the session today, and then we have more time on tomorrow as well. So, Take your time. Take your time. K. So, yeah, just to kinda cover briefly what we're gonna go through, is kind of a almost a recap of what Richard, already covered earlier. So kind of what the actual documents are doing, more specifically, and then also some of the changes that we've made since that last design team thing. So of the agreements that we have are that the signaling should be crypto agnostic. This largely for on ramping, but for the IATF purposes, we are focusing on MLS. So the documents are very much written in the MLS language. We also reduced the number of documents. I think we already hatched through that. And, Yep. We're just gonna recap the Allison bug flows. Next slide. So, yeah, these are the 4 documents that we have at the moment. We have the mini architecture, as already covered, we have the message content, which Rohen just went through. The delivery service, which covers all of the MLS specific components. So key delivery, that sort of, aspect. And then we have the protocol which covers all the room level operations. Ecker. I hate to be nitpicky, but nitpick is important in nitpick, previous like this. So I don't know what agreed upon means it mean you guys, or does it mean we all this is, as far as I'm aware, consensus based from the design team and then with input from I'll let Richard kinda continue on that."
  },
  {
    "startTime": "01:20:02",
    "text": "Yes. This is what we talked about at the interim. Right. That's what I thought. So we've not agreed to recognize what you agreed was that it should assume MLS, but not like making imposities or really not the same thing at all. Okay. Yeah. I I think we're where the design team has been operating is that the old documents written that are being written by the design team Mimi are focused on MLS, but trying to have clear interfaces in case one wanted to swap out and try ins and support it otherwise. Which I think is fine, but I thought it was how we how we it it is, but my point is that the design should and should simply assume that the functionality and loss of what we were basing And not and so it's like, there's and so conversations that say, well, blah doesn't have this out of scope. Yeah. That that's correct. So so we are assuming the functionality. As you said, we're assuming the function even less. And if you want to implement it some otherhow, you have you might have to invent things supply. Yep. Okay? Great. 7. So, yeah, those were the the 4 documents we covered them earlier. Next slide, please. So, yeah, on the MeetMe Architecture, again, also covered earlier. I thank you, Richard, for going through our slide with the so the memory architecture covers all the terminology. We'll get the the terminology, fuse there, I guess. The protocol overview, just general what of the documents we're trying to do navigating that sort of aspect. Next slide, please. Mimi delivery service. Did you wanna go through it? Sure. Give a brief overview. As Trevor said, that it's kind of trying to specify the MLA specific bits. We did, since the last we talked about the last intro oh, sorry, the last of interim, I think, or the last meeting in San Francisco, actually, where the criterion was for this to be a separate document. There should be a clear interface. I think, Edgar, you, you mentioned that"
  },
  {
    "startTime": "01:22:00",
    "text": "so that when you read the protocol documents, you should have a you should only have to write, you know, read a short section on how the interface looks like with maybe yes documents and we kind of put that both in the document ends in the protocol documents. What it does and kind of repeated here a bit, provides ordering of handshake messages, although that's kind of relevant for the it's relevant for NLS, but not necessarily relevant for the media protocol documents. It's membership management get that on on Richard's slides already it goes over the specifics of a proposal commit logic, which our I'm not specific, but because of the the the mechanic kind of leaks into the Mimi protocol document because it's, important and we'd already talked about the relations between the participants this and the membership list of the clients. So the proposal commit kind of paradigm inference that a bit. Then it talks about ver I mean, that specific verification that includes authentication of messages, it's tracking for public group states. So it gives the Mimi protocol kind of this agreed upon membership list. And provides assistance for new joiners and, it also deals with the download of the pre published key material, which is MST packages. Next slide, peace. Yeah, so what we changed since last time, since San Francisco, I think is that we don't, the Mimi Diaz protocol doesn't specify a specific operations, add, remove, updates, kind of trying to where we try to provide a clear, simplified interface, but that didn't really didn't really match what's happening on the media protocol level right now. And so it's just a simple you can you can use miscellaneous to propose things. You can do immediate to, commit to things and that of cleans up the interface to a certain degree. And I guess we'll talk about more when we look at the concrete Ellis botflow later on."
  },
  {
    "startTime": "01:24:03",
    "text": "Next slide, please. Can I just see the show of hands so many people have read the Mimi delivery service draft? The room and in the chat. Roughly. Okay. So that's, like, maybe 10. Just so you know who you're talking to. Okay. And before you start, I'll just ask for the protocol draft as well. People could raise your hand if you've read the protocol draft, which was posted very recently. So It's bit better. Okay. Alright. About the same. Alright. So for the most of you who haven't read the protocol draft, the the draft covers that they a lot of the room level operation So the delivery service covers everything within the MLS group. And then the protocol document is how do you get, say, messages between servers? How do you deal with, the concept of users versus clients, how make sure that those user clients actually end up in the MLS group. That sort of stuff, the signaling is based on events. Events is very much the wrong term for what we currently have in that document. We're kind of just deferring the terminology, to a to a later change, while we kind of focus on the actual mechanics of that draft. So this includes, room state changes. So you know, are currently just the participant list. Participants being the users themselves. So, Adding Alice, not necessarily Alice's clients, to the room. That is a participant. A member is the clients for that user. The framing is all done through MLS proposals. So you would simply just send an MLS proposal to add Alice, and that gets, appropriately authenticated sent between the relevant servers,"
  },
  {
    "startTime": "01:26:00",
    "text": "and managed by the hub. Currently, the assumption is that signaling proposals will take immediate effect on the room state. So adding Alice doesn't have to wait for a commit. But this is, a point of contention that needs, further discussion. then, yeah, the protocol makes use of the new media. So all of the commits And anchor the room state within the MLS group, by just nature of committing every so often as needed, And, Yeah. The some some of the signaling states, in particularly adding users or inviting users, can happen, atomically so you can add the user and their clients in the same logical operation. Without necessarily needing to wait an infinite amount of time for, the user to be added, then the clients to be added. Ecker, I'm trying to understand this third bullet on the first first third step on the first bullet because I think it not agree with what we were discussing earlier. Where, it says sending proposals take effect on the room state immediately not find commit. I understood from Richard if that was not the situation for for people being banned from the room. So this is is effectively saying that with the in order to get the sort of order of operations here, you do need to have like, the the actual room state to take effect because the user is isn't a client, so that it like, a user can't commit anything, And so if you wanna add that user, their clients can be added at any point later on. And so same thing with leaving, like, we want to remove the user just wants to self evict or is evicted through a ban. Their clients seem to be removed immediately. The protocol documents, requires that the clients be removed promptly. Although, yeah, like, it's"
  },
  {
    "startTime": "01:28:00",
    "text": "it's to sort of allow the room to continue in other aspects, without necessarily needing to wait for the user operation to conclude. Okay, but that's the opposite of riders in Richard to be saying 45 minutes ago. I don't believe so, but I'll let Richard go on. Yeah. Well, I'm I'm maybe this is a good time for Richard in China. So I I I I don't think I was being inconsistent with this. I think maybe the thing that the picture I, that was maybe missing from my slides is that I think what this protocol envisions is basically that the the hub server has a stack of proposals that represent the delta between the committed state. And the latest kind of signaling level state that the server as aware of. So, like, when you are, when, when users band that user's devices get, it, you know, the removes for that user's devices get, out of that second proposals, and it's up to the the hub server to require that second proposal to get committed. Before, meaningful, client actions gets out of the room. So but but at the same time, you know, the server can, enforce stuff based on how a stack of proposals. Before some, client comes online to commit them. So, yeah, it it is true that the the signal higher that the higher level than MLS State can run a bit ahead of the MLS State consistent with the preemption rules where the, the animalistic kind of trails and has to be consistent with the higher level state. Okay. But this, again, but that's not what I understood this hate situation to be. What I understood it should be earlier was you said that when someone's affected from the room, they're moved from MLS first, and then they are moved from the higher level state. And now you're telling me an opposite. I I think this may just be a question of what, what states people go into. I think that They they can immediately go into a,"
  },
  {
    "startTime": "01:30:00",
    "text": "still still someone we're aware of, but, you know, forbidden to do anything, you know, sort of state. And so effectively not not able to participate in their room, but little tracks on it. Well, I I I guess, but I think that this goes back to thick conversation media meeting, but with about about the status of the of the cryptographic state and and users, which are still part of your traffic state, but not part of the, for an interstate. Right? A part of the parent's state of the user. Right? So I guess, like, Like, it's it's like, I'm just playing for a 100% sure. I I think that that's why we have this that that consistency is why we have this distinction. Well, But I, I guess, but I I guess someone is is not removed from the the visible state the disputing computer graphic state. Okay. But you mean, you had 3 boxes. You had a authorization box. You had a participant box, and you had a and you had an MLS box. And what I understood this duration to be was that If someone was if someone was in the MLS box, they had to be in the participant box as That's what I thought you said. And so when I say takes immediate effect, I'm gonna understand what that means. It doesn't mean the opposite of that. When you said yeah. So I think I think, I'm hearing what the discrepancy is, which is this for take immediate effect only applies in the ad case. But in the remove case that we discussed before, It it was sounding like If if you if the hub receives the the proposal on for the participant list for the participant to be removed. Before that participant has been removed via an an MLS commit. It should not take any heat effect. Because you have to wait for the MLS commit you can't. Okay. But it just says it does. Yeah. That's all. That this is inconsistent with with that. That's all. This only applies on the ad side. It doesn't apply on the leave So I think what Alyssa's saying would be correct. Okay. Okay. So the bullet on the slide is not correct."
  },
  {
    "startTime": "01:32:00",
    "text": "Matthew? Yeah, I just wanted to ask a clarifying question about room state. So it says here, that, room states, and, an uncleared the distant list changes and I'm wondering what the position is from everybody here on whether we should be tracking RB tree, key value data on rooms, things like the name of the room or the topic of the room or not policy information, but just general decoration what the avatar or the rumors, that sort of thing. I'd make sure that that's just not yet. It's back to me. I'm focusing specifically on participant lists, or whether this is meant to be a generic mechanism for handling key value data tonight. Yeah. The current draft is very much focusing on participant list. Because it is the collection of consensus that we have within the design team. Other state changes could be applied, say, like, room name topic, that sort of stuff. They are very much curious as to what the the room here and online. Believes is the correct answer there. That's that's Richard. Alright. That that's sale. So one, I guess I have my my fundamental questions here are which of those boxes are we looking at that are gonna be visible to the servers? Are the will the server be able to see all of the contents of all of those three boxes. It'll be able to see like, the server should have a consistent state. So state does include all 3 of the the boxes, like, the the vertical columns you were talking about. Yeah. Do all the servers, have all of the visibility, the hub server, and all of the participating servers can see"
  },
  {
    "startTime": "01:34:01",
    "text": "the contents of all of these pieces. Yeah. So they will have a consistent view of the policy, the publicly exposed MLS group state and the, participant list in particular. Okay. Okay. So I don't wanna beat the ad remove horse further to death, but it just seems to me like the state needs to be not just there's, there's a band sit in the, in the green box, and there's a, probationary state in the blue box in the middle. I don't remember the colors of the box anymore. The the middle box has a probationary state. In the thick box and Well, the band state has to be in the authorization. There's an authorization policy, which is where the band has to happen, though. So the the, yeah, so bands are not necessarily part of authorization, because the authorization would be can you send this message, not are you banned? Like, it's a slightly different question. So the the membership or the participation states specifically join Ben, and remove, those are considered part of the user participation state. So if you wanted to ban a user, the policy or authorization involvement is more on the aid side of ensuring that you as a user have the capability to be able do that action. We don't have anything like that but, yeah, like, it's the it's very much the idea of Okay. So we need to work through those workflows in more detail about what the actual states are that are needed per for per per user. Yeah. They they are defined in the document. Yeah. And, VKG, if I could give you an example of you know, if if we assume that the green box says the the policy over on the left says that moderators and admins"
  },
  {
    "startTime": "01:36:01",
    "text": "are allowed to ban people There's no user specific information in the green box over and left. Then the pink box says, Daniel has just banned Rowan. In the pink box, if your client If you did this from a from a client who's a member, of the of the group, then you could send potentially you could send the proposal removing me from the moving me to bands, and send a remove proposal to remove all of my clients at the same time. If you are if the the banner is a member of the group. If you're not a member of the group, MLS doesn't allow us to do anything different and you could set, you could send a external proposal saying, plea, like, I proposed a band Rowan, the policy of the group would be to com for members to commit pending proposals. They would commit the pending proposal which would then allow the hub to go and send, a a remove and and the hub could already start filtering, you know, stop sending messages to the band user. At that point. Or allowing incoming messages. Hope that I hope that helps. Like, trying to make it a little bit more concrete, because I think when we're talking about this in the abstract, some of the some of the Oh, okay. It's like, that's adult care or this works, you know, those those things kinda get lost. Thanks. K? haven't heard any concerns or I points raised about the the sort of room state question that Matthew brought So please drop in the queue if you want to, talk about that on the event side of things for the protocol document, the"
  },
  {
    "startTime": "01:38:02",
    "text": "em room user of event, which again badly named, changes the participant list itself. So this is where you would say, I am inviting this user. I am joining as that user, that sort of stuff. The info includes a a static amount of information. It's not totally well defined at the moment in the protocol document. We think we need it we also think we might not need it so that there's a good chance that that gets removed at some point. And then we have all the DS operations, namely proposal commit setting application messages, key package operations, that sort of stuff. The name spacing here is all over the place. We, in we will have to work on that. But for now, kind of preemptively kicking that down the road. Next slide, please. Yeah, the overall document structure for that protocol document, is is here. So, yeah, we we talk about the framing. We talk about an example flow, simply at or Alice adding Bob just so we have that concrete example, that Ron was mentioning. And then, yeah, descriptions of what room state events the actual scheme of all this stuff is how the cryptographic state is specifically anchored, that's all in there. And then same thing with the user participation and, namely invite Adleav, join and then placeholders for knocking. The transport here is largely placeholder, while we use TLS trucks for a lot of the stuff, we Amber scarily simple rest API. There's there's certainly some more discussion to be had around that. Next slide, please. Your example, she Alice adds Bobby and Cathy and removes Bob. So for those who want"
  },
  {
    "startTime": "01:40:02",
    "text": "to work through the flows since it is getting built out a little bit more than just the simplest one. No. And I will pass the example flow off to Conor. Alright. So this is essentially like, a small variant of the flow that we presented at the last, interim And so it's Alice trying to add Bob. And in the last interim, we had a Alice invite swap flow, where Alice would first invites Bob as a user to the group, but not add Alice Bob's client to the group and then Bob would then go and joined the group via an external MS commits after the fact. In this flow, Alice just adds pop to the group. Using Ammonos welcome messages, but yeah. So so What we don't do here in the flow is talk about any of the identifier mapping or the consent flow or any of that kind of stuff But, yeah, just the specifics of the master flow. Slapies, And so before the flow starts, Atlas obviously has to create a room, And I think this didn't change from last time. We assume that room creation is a local operation, have to be There's no federation involved. But as soon as, Alice has created the room and another server, a bulb gets involved. The, Alice's server becomes the hub for the the initial room states, again, for now, for simplicity, we're only talking about the participant list here. Consists of just participant list with just Alice. Yes. Next up, please. And since Alice wants to, add Bob's client to the room as well as Bob is user, Alice First has to fetch key material, And this, happens via the DS fetch key packages event that you saw earlier on the slides. The list of events, And so Alice sends the fetch events, fetch event to the hub next slide, please. And from there, to, the"
  },
  {
    "startTime": "01:42:00",
    "text": "the hub sends it on to, Bob server next slide, please. communication between the hubs, sorry, between the servers is The just as last time as Yep. Yep. Security and transport protocol, which is MTS, this now lives in the the protocol document. Next slide, please. And then the, Next slide, please, it arrives at Bob Server and Bob Server responds with ops. Material for, Bob's clients. This could be one client could be more clients, clients, and, then it sends it on to Alice. And now Alice can finally create the ad. Next slide, please. To, add Bob, and this ad consists of, so this is kind of the atomic operation that Travis was talking about earlier So this is a a DS commit event. And, within the DS Commit event, there's an M Room user event and we can do this kind of events. Stacking or events, we we can have the DS commands contain the MRIM user event because the MRIM user event is contained in an analyst proposal. And so the the MLS commit that's inside that he has commit event just just also proposes that addition of Bob to the room as well as a regular MLS, client add. Next slide, please. This gets sent to the hub. Next slide, please. And then the hub already, has the whole room, the analyst room state can update the stage both, participant list, where Bob immediately transitions to the joint state And, Bob's client gets added to the list of clients. Next slide, please. This gets, transferred to the bob to Bob server just as before with the key package request. Next slide please. And then box server is, the first place where, where the the server can do a policy check, evaluate if if this is actually okay depending on on the data of the group that the server can look into. Next slide, please."
  },
  {
    "startTime": "01:44:00",
    "text": "And then this gets forwarded to Bob. Then once Bob has the event, but has received the ad event. Bob can participate in the group and immediately send messages. And, That's that's the result. That's just, last slide. And just as a note, what we still have to work on a bit. I think Roan mention that, is a fan out. So this is a very simple example where with Alison Bob, where fan out doesn't really come into play very much. But as soon as, we have, Alice Bob and, Charlie, Valis sends a message adding Charlie to the group, Bob will have to receive a different message than Charlie and we'll have to talk about that because that us from the way we've written it up currently. But, yeah, I think that was those up. Court questions on the example. I have a question. Let me go back. Woah, how is this gonna work? Is that looking crazy up there? What is happening? Okay. I don't know. What is happening? Oh, Rafael's in the queue. Go ahead. Then go back to me. Not really question. I just want to say thanks. So, the design team has done tremendous amount of work. So it has been a bit of an opaque process by design. Because he was not in the wider working group, So back in San Francisco, we had a lot of defenses on a number of very fundamental functions. And I feel we are in a very different place now where we discuss some specific questions. There seems to be way more consensus on on all the big questions, etcetera. So Yeah. I think, that is sort of a a run of applause, especially for Conrad and Travis."
  },
  {
    "startTime": "01:46:11",
    "text": "Hi. I wanted to ask a terminology question. Because an awful lot of this, hinges around the idea of events which, historically have meant something slightly different or at least people coming from the matrix, land, we'll know them to mean something slightly different metrics and events is something that happens in a room So it's message or it's key value state or it's a type doing notification or a read receipt or something like that. So it's basically the the sort of main object primitive for describing communication. Whereas here, it feels as if we're using the word event to almost describe it mechanism of, a method and operation that one is performing upon the room. And I wanted to get a stir from there were booking group as a whole on whether events is a good word for that, in which case we stick with it and lean into it. Whether it confuses people and therefore I've been brain damaged by Matrix. I I I I agree in some cases, it looks very much like a like a call and, like, a query in response sort of, pattern more than anything else. But, I mean, in in many instances and this is the case both for the fetch keys as well as the ad that we just saw it, it goes, like, through the hub and onto some other server. So it's not just a straight up you know, you know, sender and then recipient flow. There's, an engineer in the middle who does something maybe dependent on the room state or has to look at it and Again, I'm I'm not super familiar with the way that the the the metrics terminology and what exactly it means for something to be an event. But To me, at least, it doesn't really feel like, like, RBC call either. But"
  },
  {
    "startTime": "01:48:02",
    "text": "in the end, I guess, it's a terminology question. And what it is. We just have to figure out what to call mean, for me, it's almost the distinction between sort of, edge based signaling and level based signaling and you're describing the transition it takes order to get to a state or you are you actually sort of describing that state itself as the sort of main primitive which is conceptually quite an important thing to get right if people going to trip over it or not. Then again, events are typically used to just describe the transitions between states Perhaps this is just me. If anyone is strong for thoughts, say so. Otherwise, These are gonna be called events for everyone. Richard, go ahead. Yeah. I think events may have gotten a little here, and feel free to fix me, Conrad, and drive us. Event may have gotten diluted to mean more like, kind of datagram. So it's, it's a unit of information that that, gets transported in protocol. And, you know, that it has enough information to say type of, of, of, unit of information it has and prescribed formats. Those units of information might get to get tied together into things like RPCs. But the the events is the Samantha and the humidity, a unit that just transported, through, between the servers. that about right? Is that, is Protocol author guys. K. So my question was gonna be where in this flow does the room policy get set? I guess in this flow, the room policy would get set by, at the point where Alice creates the room, Although admittedly, and I think this was Rafael alluded to, like, we're not at a in a in a in a place where we caught where we yeah, I think we're we're still working on on figuring out know, terminology and the the basic flows. And,"
  },
  {
    "startTime": "01:50:01",
    "text": "of course, policy is important, especially with regard to the discussions we had on which state changes when and, which state lags behind so that's important to figure out. But in terms of, setting or changing policy dynamically in a room, think for now, we assume that's happening in the beginning, and then I'm sure there's going to be an event or whatever we wanna call it. That then changes to policy. I think in in this example, specifically, it's creation of the group where the policy is set Okay. So it's prior to this key fetch. Yep. Yeah. Okay. Any other comments, I'll I'll just note also along your your lines of the policy segment. There's also a nation of, that we're gonna need to tackle here of consent. We have in tacos in the in this in this basic example, but, Rowan, Rowan has been keeping us, well aware and then design team that we need we will need to back issues and consents are, in this this framework, we just haven't quite gotten it Broad. Hi, Rowan May. I'm really curious. If maybe we could get a show of hands for people think that this is going in the right direction, because, you know, it's kind of we didn't get a lot of feedback from right now from this presentation, and the design team obviously did put in a lot of especially in the last 2 weeks to kind of stitch a bunch of things together. Some some Yeah. I mean, this is kind of the struggle the document was published like, 2 days ago. And as we took the show of hands, there's only, like, ten people who've read it. So, I mean, I would invite those people to come to the mic, but I don't think we really really need to do a show of hands because that's not gonna be that meaningful among group of people who haven't read the document. So anybody who has a has an opinion who hasn't spoken yet, who has read the document,"
  },
  {
    "startTime": "01:52:00",
    "text": "Please come up. Yeah. I think the minute we got last time from the working group to figure out the the documents a bit more as well as the basic flows so it would be great to get feedback on what we've done over the last few weeks. I know I've already spoken, but I guess I didn't give any feedback on the document, itself less I'm also part of the design team's authority, getting some feedback there. But from my perspective, this is a pretty good mix of what we were talking about from San Francisco right over to very divergent ways of thinking about this of the hard coded MNS E media approach at the time. Versus the linearized matrix approach that was, almost at the other extreme of ignoring the MLS specifics and not necessarily making the best use of the primitives that you do get when you have MLS. So I'm I'm pretty on, what's the right words and enthusiastic, a hopeful that this is best of both loads in that it does provide an on ramp where people using existing encryption like the double ratchets or an Ostatic key based end to end encryption can basically replace the what we were calling a MNF shape blob is effectively now the mini DS interface. But something that provides the same interface and plugging either east west or south and so maybe Proxico, But if you, frankly, it works best by far, you are actually using MLS and obviously can benefit from the MLS proposal and commit mechanisms we're talking about as the mechanism to go and consistently synchronize state across the various different servers and so it's almost a breadcrumb trail that if you were a big, messaging provider today,"
  },
  {
    "startTime": "01:54:00",
    "text": "who's got billions of people talking double ratchet you can start off using this, the protocol layer as a way of modeling the users and some modeling policy in future modeling things like key value and Lee having a common language in the form of the content format. And you can replace that crypto block with a whole bunch of legacy double ratchet and stuff. However, you would be, framing things up as MLS commits which have got M and S proposals, I should say, which have kind of placeholders stuff in there for the MLS specific data, which would probably be blank. I understand it, if you're not yet talking MLS. It goes and increasingly encourages you to convert on MLS in the longer term. So that was my big concern in San Francisco that we were ending up basically clear. Hard coding everything completely to earn the lesson away that would uptake in the real world where it's hair, I think. We've got this 2 layer strategy allows the protocol to apply to the systems right now that you'll be able to bridge from an existing system like matrix or XMPP or whatever big messaging provider into this is a common language, and then down the road converge on MLS as the scalable standard space, end to end encryption blob 2. Sorry for filibustering. So that's basically one of them. Thanks, Alan. Alan Juric, at generally, agree with the Matthew that, step in the right direction. You get closer to the mic front. It's for a tour of people. I'm still growing. So, generally, happy with the the pro risk especially, last last 2 weeks. So, Rafael said that thumbs up, to especially, that"
  },
  {
    "startTime": "01:56:03",
    "text": "those two guys, those two gentlemen, they're, was was really, very worried after San Francisco because, it looked really horrible at that point, in time and, it continued the than for the weeks. So I think definitely, step in a right direction, do We still have quite a bit to finalize there were the parts that, need to be finalized, we need also to be careful, that we do not compromise too much. On MLS. Related parts for the benefits of something that may be with a double ratchet very important because those guys that are using double rocket, that that that wanna inter operate with a double ratchet. Most of the cases, they don't care about IETF, or they don't care even about set of her ability. We know why they are kind of a looking into it. So with the with this one, we're just like to conclude there, like, thumbs up, guys, for the work done so far. With reports, that, we need to finalize, we need to be careful, and, keep in mind saying, if you wanna be everything for everyone, you risk being nothing for no one. So, Thanks. Or fail or fail Yeah. Also, just to reiterate on these closing remarks, and just gonna say very obvious stuff. So in San Francisco, as Alan just said, the situation was not written that great, and then this design team was formed ad hoc more or less and tasked with"
  },
  {
    "startTime": "01:58:02",
    "text": "resolving all these issues. And in my mind, that has happened. We are at a state, where there's consensus among the design team that we have, you know, the basis to continue iterating on more specific questions obviously, there are many open question, but that is fine. And so to to put it very bluntly, This is heading in the right direction to have a concrete proposal for adoption. We've named the documents have the basis there. There isn't anything that is super contentious in the documents. Right now there are open questions, but not points of contention, any longer. So In case that wasn't obvious, I just want to state that. Thanks. Just since you were in the queue before, I'm gonna, like, take 2 minutes to figure out the next steps if that's okay. And then if we have time, we can come back So It would be great to get to a point where the work group could consider adoption of something here. And I'm wondering since this seems to be kind of driven by the interim schedule and giving people deadlines to, to, rev the documents. What seems reasonable to the people on the design team as far as, let's say if we wanted to have an interim 1st week of December, can you get your next rev of these documents done, a week in advance of that to give people time. Do you want to do that on the base of this set and just give people more times. It's lot of people didn't get time to read these before this meeting? Like, what do you wanna do as far as driving towards an adoption decision? Richard, go ahead. I didn't quite have a concrete suggestion yet. I And I think that there's a little bit of a question of how mature we want things to be before we adopt them. I think we, have enough in the documents right now. It's a kind of articulate direction but it's it's a little bit of still still a little starting in terms of the technical content."
  },
  {
    "startTime": "02:00:03",
    "text": "So I I think we could probably go to an adoption call with the documents that we have now, if folks are comfortable mainly in terms of adopting in terms of establishing direction. But I I Seems like with another couple of weeks, we could probably get a little bit more technical content. Maybe you'll be able to learn more confidence. So it's it's kinda up to what folks are looking for in the adoption. So does that imply document updates or no document updates? I mean, personally, I would probably go, go ahead and adopt without document updates. But, I think a little bit more feedback from the learning group would be would be helpful before we, you know, kind of make that funds and Okay. That's helpful for Tim and I. Go ahead, Matthew. You need the last word? No. I just wanted to respond to Alan's point earlier. About the risk of being all things to all people and the fact that the MLS sort of good stuff might get diluted by trying to support people who on on MLS today We we do have concrete data points, the folk who aren't yet on MLS. Would well, basically, you're right that they wouldn't necessarily follow an IETF standard for the sake of it, is why the onus is almost on us to provide the breadcrumb trail and on ramp encouraged the the into the process here in order to speak the common language. I think we've got the right balance here. Without compromising on the MLS side. We also have concrete data points that this approach Canbridge through to Doctor. Successfully. That the strategy, seems to be working Sure. Great. Thank you both. Thanks everyone for your engagement, and we'll see you tomorrow. We're gonna talk mostly about discovery. And maybe Rowan will bring back a couple of your if you wanna talk about mentions and encoding in more depth we can do that tomorrow too. We have time. Yeah. If there's if there's interest. Okay. Thanks. Thank you for taking notes."
  },
  {
    "startTime": "02:02:19",
    "text": "Yeah. Tim was online. So we were chatting in background Alright. Yeah. Every time anybody said AAD100AD I was I'm sorry. 20 documents, and it's with, like, as possible candidates. It's amazing how much money people wanna keep. Yep. And when we, like, ask"
  }
]
