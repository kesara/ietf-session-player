[
  {
    "startTime": "00:00:04",
    "text": "the other thing is we\u0027re gonna be taking notes on etherpad as we always do yes alright so here is me deco so I think we can switch over alright call this meeting of Parliament to order we\u0027re gonna be talking about Yang\u0027s it today therefore I must be Theresa May in all seriousness this is the update from our yang versioning design team initially the plan was to go to the next slide initially the plan was to have me talk for five minutes on requirements which after 103 we thought with some rewording that I\u0027ll go over we thought that they were as sufficient some recent discussion has come up on the mailing list and therefore we want to drill down a little bit here so if there is time after my session Rob and mala and Rashad will come up and talk about what\u0027s up there okay so this is the requirements Redux so next slide please okay changes since revision one we modified requirement the Textron requirement one for to pull out the word software release there was some contention last meeting that software release implied to vendor specific things and it was worried that we would just layer on more and more versions based on a vendor release cycle we also changed the requirement of 3.2 so it didn\u0027t suggest a solution but merely talked about what we needed to do in terms of a requirement we pulled out requirement for 4 and we added an acknowledgment for inspiration from the open config group let\u0027s take a deeper look into that so next slide please so this is the old text of requirement one for again we pulled out that talk about software releases and and and release sort of vendor release text and we made it a little bit more gen the solution must allow for "
  },
  {
    "startTime": "00:03:04",
    "text": "backwards-compatible enhancements and bug fixes as well as non backwards compatible bug fixes in non latest release modules we\u0027ll get into branching in a minute when I asked the various questions but this was sort of trying to address the need for some level of branching where we do not where we do want to make changes to the non current or non head version of a module next slide please loop so this is the modified requirement 3.2 again we did not want to suggest a solution this is just the requirements draft so the new text the solution must provide a mechanism to support clients that expect an older version of a given module when the current version has had non backwards compatible changes that\u0027s the new 3.2 next slide please 4.4 went away you can see what the old text was there is no new text next slide so the draft has been adopted we got an email over the weekend a belief from Lulu lure Kent the draft has been adopted but there were questions raised during the adoption call and we want to address them ultimately what we want to do is make some decisions this is not the final state of this document it has been adopted but it can still now be ratified and worked on by the working group so next slide please rod presented this slide in 1 103 the last meeting relative to the solution what I want to say here is we\u0027ve heard a lot of feedback from both ends of this spectrum the requirements are supposed to kind of meet in the middle what the the design team has thought is the best possible compromise to solve things that are we already perceive are problems or that are already happening and that we want to make sure that it\u0027s not the wild wild west vendors from one have a tendency to go crazy sometimes if we can ratify some requirements here as well as some guiding principles we can hopefully curtail any and everything is allowed or vendors are just going to do their own thing isms so we\u0027re trying to meet in the middle come up with a set of requirements that people can agree or at least live with next slide please so the open questions the questions that were raised and we really need to come to some level of consensus or agreements if you will on this number one who feels RFC 7950 section 11 I see Martin moving is sufficient and does not require changes I\u0027m gonna back away and Martin so Martin richlum I think that you still define backwards-compatible changes as "
  },
  {
    "startTime": "00:06:06",
    "text": "changes that follow this section right correct with respect there there was some differentiation and how we handle deprecated and obsolete rights in general yes apart from that so the question is do we want to define backwards-compatible changes in a different way to have problems with the current definition is that the question what we are the question here is more around is this too rigid are we do we need to we think at least for deprecated and obsolete changes are required is this not doing us a service in terms of being able to either release the yang modules we need to at at a timely manner or are we do or are we enforcing things that just aren\u0027t being followed and thus there are different solutions coming out of the module author space so isn\u0027t the question really should we allow long backwards-compatible changes that question is coming ok so then this is just about the definition of what isn\u0027t long backwards-compatible change correct ok Ilario vodka i think actually this is a wrong question for me the right question would be to ask whether section 11 has to be in in the definition of ganga language of course I understand that organizations like ITF may have some policies regarding to update rules for modules but in my rule this section shouldn\u0027t we shouldn\u0027t be in the definition of of yang and so we won\u0027t have these problems on the level of VM of code then if some mechanism like somewhere will be accepted in in the idea that\u0027s another question but it should not be a question for for yang as such it\u0027s an interesting observation it\u0027s not one that I think has come up in the design team is do we pull this out when we were talking about the solution space not that this is but we were talking about what what guiding principles what would we do and you\u0027re right I I think those obviously they would be in a different draft but they I think there should be something myself personally that stands alongside that kind of reins in some of this to not make it seem may be so daunting or or at least give some bounds into into how this is interpreted anyway next slide our position on before you go there a comment well an alternate question is "
  },
  {
    "startTime": "00:09:08",
    "text": "just whether the RFC is sufficient versus section 11 because I think if you\u0027re saying just section limiting it to section 11 you\u0027re actually presupposing a particular solution if you say can we say it can be changed that the base RFC that allows a wider scope of solution it\u0027s funny you said we actually that was how the question read initially last night we we wanted to rein it in because we didn\u0027t there are questions around yang and what\u0027s gonna happen ultimately to the definition of of Yang so we wanted to kind of rein it in a little bit by saying yeah that that question I\u0027d actually feel a lot more comfortable than the way they crazy yeah we know I have no idea which I\u0027m wearing okay so this is if this feels rough it\u0027s because yes we met again look like later late-ish last night to kind of put this together but I think and hopefully the next slide which shows our positions here we talked about some of the things that from the purpose of revision or modifying modules and it\u0027s already come up a little in the neck comp working group today this is our position to some extent we didn\u0027t have all the bullets but we feel that it is not sufficient because for example obsolete introduces non backwards compatibility x\u0027 already there is no way to with import by revision there is it\u0027s too rigid there\u0027s no way to say I need to import this revision of a yang module and later and you could say well because not there are no no there should not be any back non backwards compatible changes well what if you need a new leaf from or a new grouping from a future revision of the module how do you know that you\u0027re starting at that point and later so there\u0027s there\u0027s a limitation there we\u0027re capitulating that vendors are already making non backwards compatible changes and there\u0027s no signaling to the user to their consumers that these changes are in there so the onus becomes again on the client to be able to figure and distinguish what is change with respect to their use cases and today an implementer could if they wanted say you know what you\u0027re not gonna let me make these non backwards compatible changes so I\u0027ll create a new module with a new name and I\u0027ll just won\u0027t support the old one in the next client and then they\u0027re still going to be shuffling they\u0027re still going to be paying put on to the end user in order to adapt to that so we feel that there\u0027s that ultimately what we\u0027re saying is there is a problem to be solved here what that solution is what the solution to the problem is is up for some debate but "
  },
  {
    "startTime": "00:12:08",
    "text": "there are there is a problem to be solved thanks Lou unless you had any huh I could have sworn I fixed that to say too this is question to our non backwards compatible changes required I think that was the question Martin was getting to so our non backwards compatible changes required to an existing module see your you your inverter the question is under specified and so you have to say what you probably are saying or hinting in your head to the same module half right correct so I\u0027ll ask again our non backwards compatible change our non backwards compatible changes required to a existing yang path node to an existing node defining a yang in in a given you a module Montenegrin you probably mean aloud I mean obviously they are not required we can\u0027t require that every change must be known backwards compatible so you probably meant alone so I actually like I actually like Andes perhaps compromising solution on the mailing list where we phrase this as acknowledge that people sort of like deviations we acknowledge that people do these things so we should have a way to indicate that I wouldn\u0027t say allowed I allowed maybe but should they be supported yes I stand through the email this morning I saw Andy\u0027s email and and ultimately one of our goals has been in the design team is to make it to signal to the consumer the end user that non backwards compatible changes exist so I I would tend to agree with what Andy was saying there right and that is something that I can support as well you know if you phrase it that way then I think it makes sense because everyone knows that these things happen right and it is goodness that whatever happens is advertised or documented so I can live with that okay a cylinder Cisco Systems I have been involved in all the discussion so I apologize if I missed something but what would really be useful would be how these were handled from a workflow standpoint both of us from the client "
  },
  {
    "startTime": "00:15:08",
    "text": "and the server like how do you deprecated one node and support it and then move to something different just like you know you know what\u0027s what\u0027s day zero day two day three and the different phases that would be invaluable and get everybody do and to get everybody to agree on it so about that some of the proposed solution that that will maybe if we have time be presented next goes into some of that in fact we have sections in there about a believer Schad was one of the major contributors there what should a module author do as part of the transition if they need to introduce these non backwards compatible changes so time allowed we will get to discussing some of that from a requirement standpoint i like martin the kind of the question revision and yes we want to we realize these things in fact next slide please Lou I think we have some positional elements here they are not necessarily desired but sometimes you have to do them you have to make them because they make the most logical sense for example fixing a bug in a node makes more sense to change it than to deprecated and and then obsolete and then create a new node how do we signal that to the user to to handy and then Martin\u0027s point at the microphone how do we signal that so that there is an expectation that this could have a breaking or an impact on on tooling so it becomes the transitional period is less painful to that user from a requirements standpoint ultimately therefore we feel that yes non backwards compatible changes should be allowed should be supported and there needs to be that that mechanism to signal that I\u0027m struggling with a comment that I still feel like the phrasing here is presupposing a solution in that I think we can all agree that we need better support for non backward compatible changes whether it requires what we do with the the path or the specific node references the expats I think that could be part of the solution discussion and we don\u0027t have to include that in the phrasing of the requirements if it\u0027s not on the slide it\u0027s in it was in what you said ok earlier and it goes also a little bit too I think some of the point that Martin was raising about it was the term required allowed I think we all agree that we need to do something here I think it\u0027s in the solution space we have some radical disagree okay so let me ask it this way then to your comment is there anything in the current text of the requirements draft that you well "
  },
  {
    "startTime": "00:18:09",
    "text": "it\u0027s been adopted so I realize that text will change as we as we shape this is there anything immediately in that text that you object to that that we could quickly or or in the near term change I went through it actually last night with exactly that thought and didn\u0027t have a good a good answer there was some minor things like what Rob brought up about comments about is it really bad for the client or was it but those are that\u0027s not really significant I do think we should think about if there\u0027s a way we can improve it and and really that I think will directly address Martin\u0027s objection that he had during the adoption Paul or I hope we can figure out how to fix the language to do that okay and that that was part of why we we talked about whether we should adopt it or not and we eventually decided yes because we can change it okay and what we think is really important to do that so we have to it\u0027s a struggle but we have to figure out how to get the language right there oh great okay and to Andy\u0027s point about you know how important is that Harmons document personally this is not a personal statement not a chair statement I don\u0027t really care if it\u0027s publishes an RFC I think it\u0027s very important that we have a working good document that establishes consensus on or defines the consensus of what it is we\u0027re trying to solve so I think that\u0027s really important to help us get to a solution whether it the requirements that comes in RFC pairs and in fact I think initially that\u0027s what we said I think initially we said we would probably not take this all the way to ratification but it does help solidify on paper this is the problem Russell so Martin you\u0027re claiming and if that is what is going to happen with this document that it\u0027s not going to be published as Salar see then I think that should be stated because otherwise we\u0027ll be reduce as if it was going to be an RC right we don\u0027t we don\u0027t have to spend time reviewing language stuff for example or things like that if it\u0027s just for like an temporary document I just not going to be published I think we from a chair standpoint we haven\u0027t established that we\u0027re gonna defer to the working group on that so if the working group wants the publisher there\u0027s an RFC that\u0027s fine if there if we end up with the solution and then say okay now it doesn\u0027t matter that I think that\u0027s fine also so yeah I think as a chair I posted to the DT mailing list on this very point and I\u0027ve made exactly lose point that is it important to have a document that establishes working group consensus and even taking it to last call whether or not we published it would be sort of the open-ended question that and I personally wasn\u0027t concerned you know which way it went but I believe there were some feedback from the DTU members this is saying that you know put that much work into it that we should publish it it doesn\u0027t hurt the publication process itself is cheap if if the publication process is the thing "
  },
  {
    "startTime": "00:21:11",
    "text": "that\u0027s in the way then that\u0027s a process issue you know we shouldn\u0027t allow that to complicate things so I think I actually understood it at least that the DTD wanted to publish it you know to have it as an informational RFC we definitely want the working group to agree on this if this is this we feel is a problem a critical problem and something that we want the working group to agree on Rob Wilson Cisco so I think that one of the things I\u0027ve discussed with Martin earlier today was making like the background section in this document I think he was describing that some of those that description wasn\u0027t necessarily ideal and could be rephrased and worked on the question is whether that\u0027s a useful use of time if the only thing we care about this document is actually the list of definitive requirements then do got to spend time discussing the background text who\u0027s not going to progress further or would be better to say actually the only thing that matters in this document is that list of requirements and maybe make the doctor is shorter just to those bullet point statements and work on getting those agreed in the working group I think this is something we can defer until we have whether we published or not I think infer until the time we actually have a solution and we can decide at that point whether it still makes sense it\u0027s do you want to see what the sense of the room is right now of where we are leaning whereas does it sort of not matter at this point we you said that you defer until we have a solution and but I think the question is do we don\u0027t want to know that it requirements no we have a solution I think whether I\u0027m not saying the decision of whether anyone\u0027s proposing killing the document right now the question is is once we have it capture what the requirements are we have agreement down the line we\u0027ll build solutions based on that once we have that do we actually publish this in RFC or not and I think that\u0027s an open question right but to Rob\u0027s point the question was to what effort you know to what I simply put the effort into you know making sure every part of this document is complete now I personally would like to get a sense from the room if you don\u0027t mind so for those sorry Kristian hops can I make a suggestion I think Martin and Rob both saying let\u0027s not work on language issues if we\u0027re not going to publish it so why don\u0027t we just say let\u0027s not work on language issues until later since you guys want to defer to the decision and then we don\u0027t need to check there Chris is another way to phrase it is let\u0027s just focus on getting their agreement on the requirements and worry about the rest of the document later is that what you\u0027re saying Chris is nodding his head even though he\u0027s not it\u0027s like that\u0027s "
  },
  {
    "startTime": "00:24:13",
    "text": "fine okay well I think right so that was one of the opinions so Chris you get to not raise your hand so for those who would like to see this document published as an RFC can you please this is the requirements document for those who would like to see there are the requirements document published as an RFC please raise your hand just a few for those who would like to not see it published as obviously you do not want to have this published as an RFC please raise your hand equal number just a few so we\u0027re going to defer oh I\u0027m sorry how many people we should defer that decision and almost double the number is there say that\u0027s a few all right thanks okay all right last question also probably going to be question one next slide please yep is branching required and if so how much branching is needed and for clarity because again we wrote these last night branching means if I need to make a change to the non latest version of the module so things are going on I\u0027ve made some changes there\u0027s only one instance ever of that module and then all of a sudden I realized that the latest revision is something and I have to go back and change the other a change an older revision of it then a branch gets created how much of that branching is it should we allow that and if so how much branching is is needed there christian Hutt\u0027s again i i\u0027ve been trying to hold off on those questions the end but I think somebody else might have mentioned this in lists I don\u0027t think I would have it quite as many objections to all of this that\u0027s going on if you just said it was for vendor models like it wouldn\u0027t be used in standardization you say that if it just amend that you know if it was if the branching and all of these different requirements were narrowed in scope to only vendor in other words not IETF publish models modules you know because I don\u0027t see any need for branching in in standards and as a matter of fact it would be a horrible outcome to have branches of is is module right I mean it\u0027s just this is so much complexity that\u0027s absolutely not needed the process of standardizing modules should get us good enough things so we just need to augment them we just don\u0027t need this at all now you wanted to be able to track your vendor models on release trains and you have all these other requirements I just don\u0027t want to see that move into the standardization process right so you know I think that maybe if if there were two trains for the requirements right one for vendors non-standardized and one "
  },
  {
    "startTime": "00:27:13",
    "text": "for Center is because for standardization all we need is a way to import by revision and I think the problem solved so two things before Martin you take you take the mic one just because something is supported doesn\u0027t mean one has to use it just casually saying that so we\u0027ve started in at least in the require in the solution side trying to write guidelines maybe it is that the standards body or at least the IETF chooses not to do changes to older revisions that said we have heard from one working group chair in routing area that there is a desire to do this not necessarily make backward non backwards compatible changes to a previous revision of a module but to branch or create two parallel tracks of a single I don\u0027t know if it\u0027s still valid but this was heard on the design team a few months ago so maybe there is a need maybe not here in ops area that we\u0027ve heard but in routing area that was something that came up on one of our calls vodka I guess I agree with what Chris said just and I think it comes down to my point about having section 11 in in in in the yang the definition of yang because in fact I underst I agree that in the IDF we needn\u0027t any branching probably whereas there are communities that apparently need it right but at this point we shouldn\u0027t be discussing whether having some branches violates the young specification of something like that we just have to accept that there will be cases where some client won\u0027t be able to speak to some some server but I think this is okay we can have niches they just work and we already have them open config is such a niche and they can do it whatever they want so I think that it would be better if we have some some or if there are some standards underlying or all this even though there may be some some niche is having different tooling for example and and from a requirements standpoint I think it makes sense then to say that yes branching should be supported and and we can talk about what where we constrain that and then separately decide what is perhaps from a solution standpoint what are the right recommendations for different bodies if you will robots in Cisco so you\u0027re going back to Chris\u0027s points point about branching within like standard models I still think it\u0027s possible that I 84 standardized and yo module that has bugs in it it may be that that\u0027s the latest revision in and get fixed that\u0027s fine there\u0027s no issues no practice required it\u0027s also possible that that might happen to a model this "
  },
  {
    "startTime": "00:30:14",
    "text": "older that suddenly starts using some parts it\u0027s not been well implemented and finds out those mistakes in that and they actually want it to be fixed in that order efficient points rather be forced to update for latest so so I\u0027m staying away from trying to get too deep in here is branching is a branching solution considered changing the module name because that\u0027s what I would say you do there if you come up with a new BGP module and it\u0027s a major revision you just change it to PGP module to write and then I mean well why do I need branching it unless that\u0027s ranching Chris I\u0027ll point out that that is presupposing a solution and that\u0027s that\u0027s right so the problem here is is how to phrase the questions without getting into the solution space I think I tried to here I think allowed would help okay and probably every place you have this is Martin\u0027s point okay every place you have required say allowed okay and that\u0027s really what we\u0027re trying Elka so going back to Chris I still think in that scenario if it\u0027s an old module that says BGP for example and there\u0027s some bit it was broken and you said actually I\u0027ve seen that bit to be fixed in that order and that order revision you produce a new module just if that fix you got to not produce just a new module version for that BGP module but everything else or comments it also has to have a new revision to be able to hook together Chris because the Mike so Chris was asking can give a concrete example in terms of what is published now in an old module no L to SM when that was published had lots of mistakes in but it wasn\u0027t it wasn\u0027t developed so they just fixed it they they bypassed the rules and published a new revision that was number was compatible that\u0027s okay because you still do linear development but if the case that actually some people have implemented parts of that then it becomes much harder to do and that\u0027s the point where you may actually want branching even in IETF I I\u0027m not I\u0027m not saying it\u0027s a good thing I\u0027m not saying a be used a lot but there might be point instances even then the variety if is a pragmatic thing to do you just want to fix that much in a small way but I don\u0027t understand what okay so so I\u0027ve got a module and it\u0027s got a bug and then I need to fix the bug so I produce a new module right but you\u0027re saying I should produce a new branch and I should fix the old branch you know why don\u0027t I just fix the module and publish the new fix and if we have import by revision you could maybe narrow it down and get the old version of you so the case I\u0027m concerned about is if there\u0027s already a published provision there\u0027s already an updated revision so it\u0027s not the latest one you want to fix it\u0027s an older revision so yes you but I do want to fix both but it\u0027s the older one that I actually care about that\u0027s the one that we might be shipping that someone wants with a fix it I can\u0027t ensign own fix like I think "
  },
  {
    "startTime": "00:33:14",
    "text": "we were evolved into what would best be an offline conversation I think I think some Mortimer Club common to this discussion anyways and I think we have the same comment about non backwards compatible changes if we talk about on this without changing the identification of the node that is not changing the module name node name or path anything in that so branching and non backwards compatible changes or for existing or without changing the node identification because otherwise it\u0027s trivial as you said you can just create a new module right we don\u0027t have discuss anything yes and that\u0027s to the question I think that this is important just like with non backwards compatible changes this is something that vendor is faced it is a real problem so we should we should have some kind of support for this in the language I have a comment from jabber this is from Andy fix bug and module done with Harada and standards agree only one release train for standards multiple release trains only for vendors and maybe other SDOs so I I read that as allow for it but don\u0027t use it in the idea and again that\u0027s Andy\u0027s comment not one okay we\u0027ve heard we\u0027ve heard from Martin in fact last night I think polish at some point is going to address this with errata could could also be problematic but it sounds like just from a requirements standpoint this should be and I\u0027ll use I\u0027ll try to use the right word here should be allowed so another common muttering and another common today\u0027s question I think this should needs to be documented in their requirements I don\u0027t think this is part branching it\u0027s not part of the requirements I think it needs to be so that\u0027s the get this right that is the I think requirement one for we did not put in the explicit word branching but we intended to what we said is a change to a non latest or non current or non head version of a module would maybe imply maybe that\u0027s an area of language we could be more explicit in Tim so item carry no kid just to just let you know I mean we in in the BB F we\u0027ve been doing modeling for about fifteen years now and we do have this method in place and we have used this method it happens probably about every two years or so and it\u0027s on simplified backward-compatible changes things that you change may be a range you know like to get a portray long or or datatype might be wrong that "
  },
  {
    "startTime": "00:36:14",
    "text": "you can do but we have various we have very restrictive requirements as to what is allowed to be done in that in that fix right and it has to be the critical piece was that it had to be backwards compatible so you can only like increase arrange or the types have to be consistent between the two because we know that those things are in the fields so you can expand but you can\u0027t contract the meaning and so there were some rules that we put around it so we were very concerned about it to make sure the things were back last slide just to cap on this so so we think that some we should allow some level of branching but I think maybe Tim brought up the point of bound thing and he wasn\u0027t necessarily talking about branching there but bound what can be changed in the non latest version of a module we had this discussion on the design team a lot what is a bug-fix should only bugfixes be allowed in those non latest revisions of the module and we couldn\u0027t agree on what should be allowed because different authors are going to want to do different things but in terms of branching we\u0027ve heard from both sides and one side is no branching everything should be linear and then the other side is sky\u0027s the limit it can be more like get as an example or a revision control system and we think that there\u0027s probably a balance there but that goes more to the solution side of things which may be no we won\u0027t but in within the propose the design teams proposed solution we talked about how we would address branching regardless we feel that however we do it with recommendations for IETF versus non ITF we feel that branching as a as a concept should be allowed in the solution and therefore should be a requirement and maybe to Martin\u0027s point we need to be a little bit more explicit about branching as a requirement that is the final set of questions and positions that I was going to present Joe Thanks so question I we feel bad about having run out of time and of course we did have to address the requirements issue and but still there\u0027s a lot of discussion to be had around the other slides that were not presented the chair would like to ask if people are planning to be here on Friday we could potentially uncounseled Friday\u0027s meeting and and allow people to continue having some of discussions while you\u0027re here together so for I just get a sense from the room how many people are planning to be here on Friday okay quite a number what time was though I love 11:00 to "
  },
  {
    "startTime": "00:39:16",
    "text": "1:00 okay and and then how many people would like to us uncounseled that meeting and then allow you to use that time to continue this discussion raise your hand um just before that I know I will not be here I know Rob is also I believe having to leave so who in the design team is planning to be here on Friday polish doesn\u0027t even look like Rashad is yeah I know that there was scheduled that this Friday a little unusual and that yeah that\u0027s actually why we we did this Tim kabuki dance with schedules yeah maybe a scheduling question - I thought I saw something for Wednesday afternoon but it wasn\u0027t I was just catching up on email is there is that kind of a design team thing or I mean it was talked about that that\u0027s what we were gonna go is there what is a right now an informal design team meeting and a question for the design team are you comfortable publishing that to the list and have inviting anyone who wants to come discuss as have an informal meeting and just take advantage of the time here and see if you can have more discussion other requirements of course that would not be a working group meeting so you would come back and report what your findings word of the working group and we can on the on the list sort of try to hash through resolving the requirements I didn\u0027t I don\u0027t think I had anything on Wednesday on my calendars I personally do not have object I think we want to have one meeting with the design team but I personally don\u0027t know what there\u0027s what I want to say there\u0027s a planned gang next get-together meeting perhaps that\u0027s what Charles saw it says it\u0027s a different topic but there are there\u0027s other time within the experiment hours available and potentially even tomorrow you know this work we\u0027re not meeting okay but actually but going to the point about Friday if balázs is the only design team member that is going to be present on Friday I actually don\u0027t think it\u0027s going to make sense to try to do a meeting on Friday so let\u0027s just not try to push for that anymore so Rob Walton so we have a design gang version design team meeting scheduled for Tuesday afternoon the last slot about 4:00 p.m. to 6:30 and we\u0027ve got a room booked for that so which I think I might be wrong holds 60 people so I that might be a good opportunity for people who are interested to have that more open form and I think that makes sense to have everyone here because we meet a regular basis over WebEx anyway that\u0027s great offline and send a message to the list yeah with basically an invite say this is when we\u0027re getting together and please then report back to the working group on email and we can try to resolve this as much as possible on email given the time constraints I think we\u0027re gonna have to end up with a interim if we "
  },
  {
    "startTime": "00:42:17",
    "text": "don\u0027t end up with some easy solution on email yep oh okay by easy solution you mean easy violence easily adjudged as a consensus opinion of the working group of requirements or of the solution oh of the required okay thank that\u0027s what I thought you meant just what you said solution so I was I\u0027ve been there just five minutes ago thank you all for accommodating the the tight schedule and hopefully we can resolve this before the next IETF whether it be on list or through it use of interims thank you so we\u0027re meeting again later in this afternoon session one in Congress Hall one in Congress hall one so thank you and we do actually have to vacate the room because there\u0027s another group coming in in about ten minutes and if anybody knows the blue sheets are hold them up we do several versions we did not of shirts "
  }
]