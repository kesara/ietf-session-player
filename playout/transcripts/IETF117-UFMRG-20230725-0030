[
  {
    "startTime": "00:01:19",
    "text": "there's a QR code that you can scan for that, which is Not currently visible, but it will be passed around on a on a piece of paper. on the way around. Okay. So our short agenda today is We're just gonna, you know, see if anybody wants to bash the agenda, we had some discussion on the list. We have a draft about a sample problem. We'll talk about that a bit. then, Gerdley, Gouday is going to give us a presentation about Isabelle. If time permits, Jonathan has another presentation, which is managed to break meat echo somewhat. And then I'd be honored just talk a little bit about the idea we had of doing some training"
  },
  {
    "startTime": "00:02:00",
    "text": "in Prague around ATF 118. So does anybody want to bash the agenda? Not seeing anybody in the queue remotely either or locally. So I guess that's enough. Okay. So So we had some discussion on the list about this idea of having a sample problem. sorry. We have Chris and Phil have agreed to help take a few notes And thanks to those for doing that. So the discretionary and sample problems people seemed to be keen of the with of the idea, which roughly was that we could document some problem that was, like, a small enough IETF relevant thing that then people who have their favorite formal methods could use that problem to try and analyzed the sample problem that we've written down and hopefully find new things and make it you know, find new ways of making their methods usable, maybe find out something about the actual underlying problem, and maybe provide, you know, examples that then could be used whereabouts cap restocks it. okay. So Mitekko is about to do a reset of some search. So on the list, people were seemed happy enough to do that. I wrote up a a short drafts. which you can look at there, And, basically, what that tries to do is to tracked a bit of the I Mab specification to include a sort of snippet of yeah. snippet is a bit short, you know. It's longer than a snippet. try and include the the the description of the Imap search operation And maybe that would be a useful enough sample for people to use their formal methods on. And Mark, I'll probably get your name wrong, so you mark Mark Eddie Hoogentan. Yeah? Close. Close a little. Has actually"
  },
  {
    "startTime": "00:04:01",
    "text": "been looking at this a bit and kind of looking through the imap spec and has discovered that"
  },
  {
    "startTime": "00:06:17",
    "text": "to introduce people to the tools. Sure. Smuck. Smuck. Hi. Mark Pety. You're gonna this is why it Okay. Next time I get it. So, yeah, I started the during the icon to do the formalization for IMAP. And in fact, this is not complex. Right. So this this is a huge spec, but it took me probably a a day to understand. it works. So I I I don't consider it that complex, especially the the the the search subset is is not such that complex. So, no, no, I I would not By comparison, I I I would put SIP more complex in my piece. because of the complex transaction that we have here. So, yeah, I I I think it's a reasonable size. So far, I didn't find any issue with my minor stuff. in the ABNS, but I didn't find anything. But I'm still working on this, and it will take a few weeks. my tech at least to do some Yeah. Good. So the question I think is how many sample problems we want. maybe one isn't enough. Maybe 3 is too many, Do people have opinions on how many sample problems and of what complexity."
  },
  {
    "startTime": "00:08:03",
    "text": "no one in the queue. Yeah. Marcus back in the queue. Colin? Right. Please do that. Sorry. I I should use the q. Yeah. I mean, Oh, obviously, we don't want too many because that just Yes. There's there's an an infinite amount of choice and no one moves. So what to do. I think it's useful to have a range of levels. And there there are some which are just suspect they're just for Helping people get used to the tools. We don't expect them to be anything that's difficult is that, you know, here's a tutorial problem that you can solve in an afternoon. to demonstrate that you figure out how to use the tools at all and get the basics going. And then there are more complex things like perhaps the iMac 1 that that help you show something about the problem space and start tackling something that that's at least approximately a real problem. then you've got the full on, will it validate TLS 1 and freestyle problems? Mhmm. And I would suggest we perhaps 11 or 2 at e each of sort of difficulty levels of Thanks. Yeah. Cost. So just just sort of respond to color there. I mean, I think the something of the or the complexity of TLS 1.3 is That's not a sample problem anymore. That's That's like Yeah. That's a big idea. I realized I was being flippant. But I think one of the other things people mentioned about this kind of scale of efforts I one of the things we might be targeting is something that a was a a professor can give to a grad student and say, hey. Why don't you choose our you run our favorite method over this thing. So it's that level of scale, I think, is is probably one of the things. I don't know if there's something that's so simple. It's only a few days work."
  },
  {
    "startTime": "00:10:01",
    "text": "I'm not sure if that would be possible or that interesting. So so there is a very standard problem in formal analysis of the Needham Schroeder protocol, which, you know, you can prove is broken in about 4 minutes. but it's not very IT yaffe. So Is it worth coming up with a new IETF variant of that, or should we just say for the real basics, we'll just except non IDF protocol. 6. year. part of we're just chatting. It's a research group. Or we're not making any decisions, so it's gonna yeah. So -- Yeah. Wilhelm Baker. channeling my college tutor. Who did a few things in form method? I think that what he will be saying right now is what are you gonna prove As one thing to write a specification, he kept going on as as you know, what are you actually proving with it? because until you actually have have a proof, you've not really done anything more than write a spec in a language that doesn't work. yeah, the the properties that this case, iMac. has our in scope for the for the one. But, also, again, I mean, I think one of the points of this is not necessary to find out you know, that iMac search is broken but are not broken. but to try and work on the usability of some of these methods. So to give people a, you know, a thing that they can attack Chris, I think you're next. I guess, maybe similar to Phil's, but not quite same. So I know a lot of these tools can actually build running code, maybe not production code, but running code afterwards. And would it be would we want something that can be tested? that way, at the end of it, would that potentially be part of it or not be part of it."
  },
  {
    "startTime": "00:12:01",
    "text": "you know, as a toy. Right? Like so from the iMac case, can you actually do you know, do the take the formal version, generate something that can do a search, and does it work? So so yeah. I mean, I I I I don't I don't think we particularly have a have that as a goal. But, I mean, somebody up using somebody applying a method the sample may or may not depending on their tool choice, have that as well. I mean, to some extent, what's the definition of a usable tool like, as, you know, I think maybe we do care about. And is is that some part of it? Yeah. Robbie. It's a it's a demonstration. Richard Barnes. Just just raising a couple of you know, I was thinking about things of low to moderate complexity that could use yeah, that might be interesting try out your modeling tool things. The OAuth Working Group has this d POP thing, which is doing asymmetric you know, asymmetric key is bound to OAuth tokens so that and that doesn't inherit. inherits some of the complexity of OAuth, but not all of it. And it's got like, a pretty simple authenticate your HTTP request sort of thing. which is is pretty straightforward. The other thing that came to mind is HPKE, which is obviously, already had some modeling done on it, but it's kinda similar in scale to the Needham Schroeder stuff that that Jonathan mentioned are, hopefully, less broken. But, you know, it it but it touches the, you know, such as public encryption, such as symmetric encryption, such as key derivation. So so a bunch of things that would be useful to kind of play with in a in a in a modeling tool. Yeah. And I think it's a a point. I can't remember who made it on the list that, you know, it it might be kinda good if one of the sample problems is kinda more cryptographic, and the other one is Like, the iMac search was not. because there's different sets of tools. Yeah. And the d pop 1, it's kind of interesting. a little bit intermediate because it's partly crypto and it's partly looking at, like, HTTP integration. Cool. And were you were you volunteering Hannas to do that work again?"
  },
  {
    "startTime": "00:14:01",
    "text": "Yeah. Absolutely. Great. Alessandra Giddini Klotler. As someone who has basically zero experience with formal methods. It's sort of hard to No. know, whether a specific sample problem would be, like, you too hard or you know, too easy But I can like, based on experience, for example, from the the quick standardization process process, there's been a few instances where you know, someone realized, or if you either know, drop a packet. at a specific instance, then suddenly the connection hangs. And like, in in in those cases, it basically require someone to just, like, mentally go through all the possible you know, packet flows and what and whatnot. So so having something that could be used for even if you don't, not necessarily, you know, modeling the entirety of the Quick protocol, but there's, like, smaller bits and pieces that could potentially be done independently on their own and they could be, you know, useful simple, you know, problems, it's maybe a bit too late to actually change the quick protocol if you know, a problem is found, but Or even, like, you know, you model it and then you realize, oh, it's actually fine. like, we did a good job. But, again, it's hard to to know like, what a good sample problem would be because I wouldn't necessarily know how hard it would be to actually you know, modern. so so I guess in my head, like, kind of a useful sample problem was, you know, that's the scale of it is, like, either something that an academic could say to a grad students and you know, Why don't you spend some time looking at this?"
  },
  {
    "startTime": "00:16:01",
    "text": "and it might produce a paper or or might produce something that we could publish here. So not, you know, not something that should take 6 months. I mean, there's also the the question of at what resolution. Right? If you just want to measure the Is there a deadlock in quick if a packet drops you can model quick in a very, very simplistic way. But whereas if you wanna check security properties, you have to measure all the way down to, like, you know, what strings are being put into which hash functions. Sure. But, again, I mean, I've never had, you know, grad students. So In terms, it's the same. Well, I'm not I'm not sure Yep. You're on, Shafa, for the document to be complete. I think you need to define the question. to define each of the samples well And right now, it's it's not really defined for security protocols we sort of know, we want to prove. But for iMac search, I don't know I think we should say it out loud Sure. Connected. And our next volunteer. Well, until you hear the example I'm gonna use, and you'll know not to volunteer me. If you want really simple, And and, like, grad studentable, it seems like something closer to retransmit timers or or slow start for TCP might be interesting because it's well under stood, but I don't know that formal methods have been applied to it, to do verification and, you know, you you you would at least get an answer where you could point to it and go, yeah, this formal method did the right thing because we understand the problem space so well."
  },
  {
    "startTime": "00:18:00",
    "text": "But that would be closer to what Colin's talking about in the really simple, if you wanted to try it out example, it would be a very boring grad student problem. mark? Mark Petyugano. So If you want a really simple problem a really simple protocol to formalize. in which for by accident, I found an issue. It's TFTP I I send an email you say. There is a problem inside. explain what is the the problem. I know GFCP G FTP since I don't know, 20 years, and I never saw it. Right? And I believe in nobody. So It really works. people will say, oh, yes. Yeah. We know about this, but we never care. But this was really simple. And the how I found it in fact. is because I needed an example to put in one of my documentation. Right? So I say, let's use the simplest protocol that I know about protocol, not a standard, which is lockstep. Right? The rock step what what occurred. And I said it should be easy. Right? And I quite to to walk on this and then it didn't work. Right? And this was because there was a a small problem. So if you want really a minimal problem, that is not specific to security. I think this is a really good example, and I know that there is a bug in it. So let's see how many many people can find that will show the the same bugs that I that I found. Right? And the the the solution is is abuse all all also. So And that's clumsy? David, it's Ganazi, Transport enthusiast. Another example that comes to mind after hearing Pete was the bug in TCP Cubic"
  },
  {
    "startTime": "00:20:03",
    "text": "I don't remember all the details of it. So, hopefully, I don't get this horribly wrong. So Cubic first didn't have a spec just Linux implementation. It was in there for many years until when the quick team at Google decided to put Cubic in Quick, they lifted the code out of the kernel, put it there, and wrote a battery of unit tests. That's the great things you can do when you're not in the kernel. and one of them found this really intricate bug where if you get into sequence of events, you would end up, like, sending huge amounts of packets And then they did some telemetry or figured out that it was happening, like, at world scale and was, like, oops, just spending lots of packets that were pointless. wonder if that's something that could also be one of those examples of trying to model the cubic steady state in reproducing this. I guess, the question links to Yaron's question of What do you bind what what's the property you're proving there? and is because you've got no more questions to ask. So is the question, like, What's the maximum number of package I'd send? What what would the security property oh, no. Sorry. What would the Right. Performance Property B. Yeah. That's a great question. I have absolutely no idea. like, So I'm not an expert in formal methods or usable formal methods But a couple of things that occurred to me during this discussion. Right? 1, things like iMac, you know, are maybe great from a protocol point of view, but it does down into it depends on what's in the user's box. Right? So you end up in the space. And so that actually got me thinking down another road. So I'll give you another example of a protocol that actually would be interesting to study that is very simple in nature but has the same"
  },
  {
    "startTime": "00:22:02",
    "text": "problem at the end in terms of content. You eventually boil down to something that's outside this the scope of the spec. And that's the simple network management protocol. So SNMP because it is a query response. It's very simple. And the interesting thing about version 3 with the user base security module, it was developed in the ATF. meaning there it's not based on a formally proven you know, protocol. So if you found anything there, it'd actually be really, really bad. But but, you know, it was developed by IETF Geeks not by, you know, Yuri Blumenthal was, I think, the primary person behind it, and he has decent crypto chops far better than mine. but it really was sort of a one person design. Connor. Colin Perkins. I'm listening to the the discussion. It I I sort of wonder if not only should we be describing sample problems. should be trying to write down the list of types of questions you might be trying to answer ask about protocols. Yeah. Mark, Mark Petti Huggan. that's last time for me. So I I would like to go back to to something, which is a u in u 5, m, r g, one usable part. And this is really the thing I care don't because what I care about is to be able one day to have people from the ATF side coming and say, yeah, this is not as complex as, like, Fort. really would would like you to explain to me how to do this thing because it seems useful. want you and user able and and also you. Right? If we have too many example, we will not be able to compare different method to see if they are visible. I I said said this when we we are remote. I don't"
  },
  {
    "startTime": "00:24:01",
    "text": "remember when is that usability is in the eye of the b p order. Right? what is usable for me is not usable for for someone else. It depend on your training. Depends on your experience. Depends on on a lot of things. Why nobody can convince me that something is usual only myself. when looking at the example, I can say, oh, yes. This looks like something I know. And or this other thing looks absolutely and it will take a long time for me to understand it. So She's away. I I believe I understand her. that we cannot have one example for each system existing out there. But if we have one example per system, then it defeats the point. of be able to compare this thing. Right? I I use the example of rosetta coat white, which is a bright sea site site. If you want to know what a a new lang language is about, Why? You go. You you see how the code is written with the language. You know, language you know about. You look for the new language. You say, okay. Yeah. it's it's saying that a a certain class of problem can be solved very easily in prologue and not in in sea. Right? So this you you have your your comparison of usability. Jack. if we if we add too many, then we will not be able to reach this goal at least that way. net I think we're gonna wrap this up in a in a few minutes. So, Lucas, Yeah. Yeah. Well, I mean, the next question I'm gonna ask is is who wants to do who wants to actually do stuff. because that's you know? So it's great having ideas for the seemed better to do so. Lucas Pardy. I definitely don't wanna do stuff. Hi, because I wouldn't know on Darren. about the bike So so I think yeah. Just"
  },
  {
    "startTime": "00:26:01",
    "text": "just throwing ideas out there. Something I'd love is a is a formal analysis of the multipath quick work that we're doing, but that's super complex. and probably way beyond scope. but we can have that discussion later on for for for for kinds of problems. I wonder maybe I I don't recall hearing it, but things to do around compression. if if get keeps coming back and hitting us. Thinking about stuff to do with, like, the crime vulnerabilities a while ago that I maybe the intersection of performance and security and these kinds of things. but I again, I'm no expert that. But also related to compression things like the QPAT compression scheme and and HPAQ as well that were designed to be not the crime and breach vulnerabilities, but that the complications with QPAC that were added by Quick's kind of non or global ordering of streams, etcetera, blah blah blah. and the possibility of deadlocks in in that scheme. and that even if the protocol is done correctly, the implementations of that a still like, I think people who've implemented it hit the hard edges of Right. So Thanks everybody for lots of good ideas about what we might do or what somebody else might do. Anybody got suggestions as to how we turn that into somebody. I mean, I'm the ask here now is not to actually go in apply some form of method, but just to describe a problem. in a way that somebody else can come along and apply it from a method too. So is is anybody willing to kinda say they'll think about even? documenting something like that? some of the ad the good ideas you have. No. No. We're not looking for that now. We're not looking for to apply methods. We're just looking for somebody to describe a sample problem. an ATF relevant, an not too complicated things such as at people have been mentioning for the last 20 minutes. Alice. Alice. Alice,"
  },
  {
    "startTime": "00:28:01",
    "text": "Great. So minute takers? write down Hannah's volunteered. Depot. Okay. Cool. Is anybody else willing to to mean, you're not committing to doing something for 6 years here. It's You can give it a try. It doesn't work. It doesn't work. That's okay. years might be okay. 5 we have someone in the queue. Joshua. If you're sending audio, we can't hear you. We it's good to know for what though. Yeah. Joshua, if you you could If you're having audio problems, you could put it in the chat. or we can come back to you later. Okay. Okay. Alright. Well, we got one volunteer. Marco is already sort of started to help, so I'm I'm I'm not unhappy. I'm not unhappy. Okay. So I think we move along so we move on to Gergley and his presentation on Isabelle. So, Gregory, I'll pop the slides up now, and then I can give you control over them, or I can move the slides along for you if you prefer. this one second. each day. Oh, you're doing it. Yeah. Gotcha. yeah, so, Gregory, would you like to us to move the slides on, or would you like to have the controls locally? He's he's sharing himself. Okay. So Okay. Then Okay. So can I start"
  },
  {
    "startTime": "00:30:05",
    "text": "Yeah. Go go ahead. I start Yes, please. Go ahead. So Is it? Today, I would like to talk about Isabelle's weekly for Internet research. And from the feedback I got and the mailing list and the of the of the So I would not claim that Isabelle is Tennessee for everything doing Internet research, and for sure, there are better tools for specialized periods of but we've lost your audio. So I believe we've lost your audio here. whose idea was it anyway. is the number in the meeting room? Okay, guys. Bye, please. Yeah. You're back now. Yep. Jonathan, can you send me the next one or I I Oh, yes. Yes. Okay. So"
  },
  {
    "startTime": "00:32:00",
    "text": "In general form of math, the mathematics is about definition, theorems improves, But, of course, in such a short time, I would talk about only definition of CRMs So to how to actually model things because the proof language of their improver is a different thing. But, hopefully, in IETF 118 in Prague when I will be present in person, I can talk about more about form of proofs and and how to use because using a theory improver is not only about doing proofs, but probably finding counter examples and things. So ask questions at any time. Next slide, please. Okay. So Of course, there are expert some form of verification in this group, but for those who not So the main thing, of course, about formal verification is to they use formally to basic inferencer who's that but that's just part of the thory. But, also, our goal is to deeply understand our systems. And the next employees just somebody asked whether TCP was modeled especially slow start by formal methods. And I just sent you a paper on the list that TCP was actually modeled by Isabel by Peter COO. you can check. Okay. some extra reading for this talk would be these old papers, And the of and again, answering some feedback So I do not claim that now I talk about up to date, latest. formal verification tools for cryptography, this is a general method. There is a birth theorem everywhere. and it was it was some security analysis was done way back in the nineties."
  },
  {
    "startTime": "00:34:04",
    "text": "So but but for an introductory example, I just wanted to have something that I can talk about 20 minutes. So and these papers are on the Wiki page of the group. Okay? So Isabelle is a software It's actually a nice feat of software engineering. because it works So it does not use extra amount of memory for so for a start, 4 gigabytes is enough and even for larger projects. 16 gigabytes. So your your usual laptop will do the thing. only for very large projects like the SCF for microcare, no verification, you would need more. But usually, you don't work on that. the beginning. There's another website called the archive of former proofs, which is an important thing. If you would do anything then for first, you should go there and do a search, what kind of things has been done previously. And also a a software engineering feed that Isabel is a moving target But if you upload your code to the archive of former proofs, Then the maintainers maintain your code. So it will work with the latest version of the software. For a graphical user interface, there's a version with Jedit, a a Java based editor, That's the more developed one. But of course with the popularity of visual still be a code. we have an interface with that as well. You can try out it's in the bundle."
  },
  {
    "startTime": "00:36:02",
    "text": "Okay. Let's start with how to could we do protocols? So Poston's work is about using the dollar via model, which is course, not the most specialize the modeling of a security protocol So we treat cryptographic blocks as working perfectly, which is, of course, not true. But least, we we have a modeling of the protocol not the underlying cryptographic. for those with security protocols, I think these must be familiar We have names for agents, then technically, we have integers, which could be time steps, We we have known sales which are unguessable random numbers We have keys which can be shared keys or public and private keys. this later in the model, hashes, compound messages and, of course, encryption. and this is the same tax At least about the on on the right, of course, there are commence in the code. Okay. Then we model agents And in a simple model, we have a server which of course, we trust. And In in the middle of the slide, you see that server is not among the bad or compromised agents. We have friends. Some of them compromise or lost their keys, or or somehow the spy got their keys and, of course, they're despite the interview. improve their So our our protocols should be secure even in the face of compromised agents. so we do not live in a perfect world. And then we have events,"
  },
  {
    "startTime": "00:38:00",
    "text": "And later on, we we model the protocol as even lists So what happens on the network is much like you are using via Shark to see what's going on on your Eton network. So somebody says some a message to another agent somebody gets the message. So you can model men in the middle of a attacks where but the other party does not get actually your message. but the spy sends him some message and the notes when when somebody notices some message. Okay? This is a difficult thing starting, so we In the model, we have algebraic operators. So always, we have a base set age So something we learn from the network And then with this parts operator, we have a magic eye, we see even encrypted things but no keys. So but but somehow we know what's in the traffic. Then we have honors. We see all the things that are public or those we have key for So you can premises that some encrypted message is is part of this set And then the inverse key of this key is part of the message set, then we can decrypt the message. and at last, we can construct things by the same methods if we have some message, and we have if at the key, then we we can do things. And we can basically do anything At the very end of my slide set, if you download it, you can see the whole definitions for these, So you can anything, but no nonces or keys, so we cannot invent other people's secrets."
  },
  {
    "startTime": "00:40:02",
    "text": "Okay. So this is an algebraic theory. and Of course, there are many properties that you can actually prove with Isabelle. And then the nose predicate, which from an agent name, and some traffic on the network what you can actually learn And, of course, you can reason about what someone learns. and there's a special spies predicates what the intruder can learn from the Okay. Now how do we protocol? So a protocol run is a a list of events So what happens on the network. the protocol itself is over the possible prices So that is an event list sat, sat And there's a crucial thing here, that if the spy sees something on the network, then he can say anything that he can consult. So formerly, Sintana's spies, but in plain English, We see some framework of traffic. We analyze it and then we can construct anything from it. And and the spike can send anything using this method. Okay. Of course, I don't go to the details of DLS, but someone familiar with the protocol can recognize the names of the steps, So it's a large inductive set. So for inductive sets, the natural numbers can be seen as an inductive set of having zero, and having the success or of of a natural number. It's much like this, but, of course, more complex,"
  },
  {
    "startTime": "00:42:01",
    "text": "And later on, you will see that the a crucial thing about using a theorem prover for such definitions, is that it automatically creates an induction theorem that you can actually use and that induction theorem is is difficult enough. So you you could not do it in pen and paper. But with an automated theorem prover, you can actually use it, and it will check or the or the corner cases, and That's why on the first place you wanted to use some formal methods. Okay. Let's see an example. So there are three parts of my slide. So at first, we have a definition what a certificate is, So a certificate is something that we encrypt with the private shared key of the server, So my agent name and it's key So we bind together the name and the key And then defining in the protocol, that's the middle part of the slide. if something happened on or the in the network traffic, then bulb can send Alice this kind of certificate with bbobbs public key And then there will be a theorem about TLS if a a certificate appears in the traffic then we can be sure that the public key above is this KB k key Okay. Another thing. again, the definition of the protocol. So if something happens so something so when we say"
  },
  {
    "startTime": "00:44:00",
    "text": "bprimeat at the bottom of the slide, then we are not sure who who says it? some other party. So it might be Bob might not be Bob. and also that a already noted some type of message, Then Ellis will say Bob this kind of certificate with the private key of a and that would be part of the network traffic. So that's how the protocol participants should work, Next slide, And then there's a lemma that if we see such a certificate in the traffic then it was indeed a to send this cert certificate. of course, the proof is detailed and it's last part of my talk. Okay. Well, a little bit of that So we what you see is an apply script, so we work on the goal state, which sometimes we do sometimes it don't. we have basic inferencerals, iRev MPands, s sub substitution, We have then automated proof search, and the last one is the most important which makes it possible to do proofs and protocols an induction rule. So you could not even see this induction rule in 1 H horrible men. because of this complexity. Okay. How to use Isabelle? Is And I'm gonna miss really ask how do I actually use it, but it is not possible detail. This is a short haul, But what you do is you write model as definitions"
  },
  {
    "startTime": "00:46:00",
    "text": "like this inductive definition, and we state our properties of theorems. There might be some very simple sanity checks and you can start using NetPIC. NetPIC is a counter example finding tool, and then you can you can or you should write lemmas when you try to prove some things. So But but but interacting with the prover you will see some proof state and you realize that theorem Prober does not know something that is obvious to you, So then you should state your Lemma prove them and then you can prove your main theorem. and Sledgehammer is an automation tool that uses many other automated approver, for many problems, now it gives u, a simple solution, you will see an example And this is a relatively new phenomenon. So okay. Okay. Let let me go. Okay. So this is how it looks. so the previous Just search, verify, Lemma, live. And then your cursor is against after some proof command, and you will see a approved state and you can think what kind of thing you should do next, you see the induction rule and with some automation Okay? So you we we we would try induction because that's the obvious thing to do. Oh, we have 15 sub goals, which, again, does not fit one page. But then next slide, we can do HTML and"
  },
  {
    "startTime": "00:48:01",
    "text": "in a few seconds it will give us a few automated results, you just click and the result, and it will be copied into your proof text. of course, this does not solve all the fifteen subgoals you had. but the first one obviously. So now there's quite an automation which was not the case when Python developed is modeling. Okay. What I suggest if you are interested is that this concrete semantics box, which is not quite the thing you you would use for Internet protocols. But the first part of it contains, I think, a a nice introduction to doing formal proofs with Isabelle. it's you you can download the whole book as a PDF And, also, it is a book that is automatically not automatically, but they update it for the latest version of Visible. and the and the new one is coming. in the weeks. Okay. Another feedback was that, okay, but this is an old work of boson, and it uses the dollar b r model cryptoprematives are perfect building blocks, And, of course, there is space for inspective crypto building blocks. there's even Burke with Isabelle, so called crypthold, which defines a functional language for expressing games based proofs. So there is work all around with Isabelle. Okay. I I do appreciate that For crypto protocols, there are various"
  },
  {
    "startTime": "00:50:00",
    "text": "there are very good specialized tools like tamarind and things. But but here, at the user performer matters, probably, we would like to have a tool that is can be generally used, and I think transport protocols can be monitored as well. and and and As I said, I just sent paper about modeling TCP, and Tamarind, I read the dissertation about Tamarim and it has nice automation, and they reported even 2 orders of doads of speed up of on using modeling verticals, and and that they claim it is an engineering tool So now not to think too much about modeling, I think even in Isabelle, you can do much better than than posing the 20 years ago. because there's proof of information there is bug and and there are many things out. also, At IETF, you are concerned with the implementation And what you can do in Isabelle is to do code extraction. So you have a model, And then, magically, you would have some ML or scholar codes, or has scale to work with. Okay. Next one, So do you have any questions Thanks, Gary. So anybody has questions, just jump into the queue or Channel. So I I think I asked this on the list also. but you you put that Isabelle. Sorry. The cameron got 2 orders of magnitude speed improvement over Isabelle."
  },
  {
    "startTime": "00:52:01",
    "text": "For quite a lot of the models I do, Cameron takes You know? 100 of gigabytes of RAM and, you know, many days of compute time. Adding towards of magnitude on that would be very, very expensive. Is there a reason I should pick is it about, like, a Tamarin? Well, if for latest security pro protocols, probably know. I don't don't know. what I wanted to say that that that there's a there's a space for research. doing Isabelle. Of course, the question is who has the manpower and the cost of it. I don't know. Or or or what kind of research can be done in an academic setting. e, Colin? Hi. Colin Perkins. F a, I mean, Michael Hi. I'm cut so I'm coming from this from the point of view of someone who does not understand formal Mhmm. And, you know, I I I can sort of see that, you know, okay, I can, you know, describe my first call then. claratively and use this inductive thing to do it. Where where I think I would struggle as a protocol designer is figuring out how to go from type of protocol specification we write in the IETF. to the set of declarative statements about the protocol, which you can then put into the modeling. And I I don't know how to get over that gap. I don't know if this is an entry location thing or if there are standard techniques should doing it to to sort of get things into the format that they can go into these sorts of tools. Is this something where there's typical typical ways of doing it that we can elaborate on in in this group maybe?"
  },
  {
    "startTime": "00:54:01",
    "text": "I hope so. So I I think I should address this in my tutorial in November. But let us exchange mails about it because to tell the truth, I don't know too much about about the other end of the gap. So so let let me have some examples of for what what kind of protocol specifications you would like to formalize and and and see there, how can we do it? Yeah. I mean, I I guess this comes back to the sample protocols that we we would Yeah. Yeah. Well, but I I anything trying to one of the challenges is gonna be trying to bridge that gap. that's a comprehension gap between the the two different ways that the the communities work. So, yeah, I I would say, Colin, there definitely is. standard ways of doing various things. then there's also a whole lot of blackmagic, woo woo nonsense that we do and I was quite sure why it works, but it seems to. So may maybe there's a couple of gap bridges to gap the Yeah. I mean, there's also just such radically different ways of scraping protocols and, you know, and and this type of formalism versus the way they IETF rates for specifications. So that's It's it's it's a pretty big conceptual difference. in in the way of what Hi. It's to answer Colin's question, it's actually pretty similar. if and leading back to this discussion we had earlier about the samples if you actually look at the security protocol, you first have to abstract,"
  },
  {
    "startTime": "00:56:00",
    "text": "thinks that the whole exchange lull a bit, and sort of, like, this is the modeling phase. where you need to figure out, like, what's actually relevant for you integ that out and describe this in whatever your favorite forming method languages. then, typically, So once you got there, you have something that is very similar to what you would describe in in a message exchange in the in the protocol you are talking about. So that will actually be quite accessible that IETF people in my opinion. it gets far more complicated if you in my opinion, if you look into other types of problems that some people also mentioned here, like, when it comes to cryptographic algorithms, and you want to demonstrate something there, then you obviously aren't into a totally different realm or if you actually want to provide or demonstrate deadlock free properties and and liveness properties. which I think is a completely different sort of area here what performance aspects, which is again different But if you stay with the formal one, you would typically have a number of protocols already scripe and you could sort of look at those and and start from from those And and most of the work is actually finding out, like, what in your protocol you really want to focus on. And then the goals the security goals are often also very similar to other protocols looked at into in the past. Like, if we talk about protocols like TLS or They mentioned OS, t pop, like the Needham, shredder protocol, etcetera, etcetera. So it's actually those are really pretty it forward, in my opinion, there's not a lot of fuss about them. So I think if we start with them I've given tutorials in, for example, at the OS security workshops like him were in"
  },
  {
    "startTime": "00:58:01",
    "text": "in, like, 2 hours I think people got the basic ideas So it's not it's not that complicated. But, of course, if you start for, like, pretty much from scratch. Like, with Isabelle, you would you would spend base just writing things down for what I call for no good reason. It's almost like you have an opinion on it. Thanks. So, again, and thanks gurgly for for staying up late. I think it's, like, AM or something for you now, is it? Really appreciate it, and look forward to hearing more about that. So I think we had one last kind of agenda item, which is more, I guess, an announcement at this point probably. So we discussed on the list spend at the last meeting the idea of having some kind of Sunday training tutorials, before Prague, So I think what we plan to do there is to try and see. A number of people said that they'd be willing to come out for some training. So we've I think we have set up all with those people in the next few weeks and have some discussions with the secretariat here hopefully, the idea would be we'd have a room. We can record if and spend I don't know, 3 or 4 hours, whatever you get available. So I think if you're if you're interested in this topic, then planning for Sunday before IETF118 would be a good thing, and we'll try and make that happen. The other thing I was gonna ask the room are people more interested in I I think I propose this on the list. I very like, a an intermediate or masterclass level tutorial or are people more interested in the beginner stuff? because one of the usability aspects we've had mentioned is There's no intermediate level training. available anywhere."
  },
  {
    "startTime": "01:00:02",
    "text": "Okay. So I I guess given that given that we're around a minute to go with take that to the list, but just Yeah. So we'll probably set up a call with people who said they would try and help for that in in the next number of weeks of depending on availability and if you're interested in that topic, then just send a mail to the list or to the chairs, Really includes you. And I I I think that means, Jonathan, you're for the third time in a row, your if time permits presentation, it is not permitted. So thanks, everybody. I think we're out of time. and we'll discuss things on the list. So thank you. Thanks, Alice. I look forward to seeing you're oh, you can die. Okay. Yeah. I I think you remember that. Yes. Expect a lack of time is gonna be a problem. You have that even if you have 4 hours, like, my bill. a beginner thing. It's been, like, And then no one's ever been like this looks Yeah."
  },
  {
    "startTime": "01:02:01",
    "text": "Yeah. We probably do a convo at the school. I think also Mark"
  }
]
