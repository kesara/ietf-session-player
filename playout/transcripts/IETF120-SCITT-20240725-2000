[
  {
    "startTime": "00:00:07",
    "text": "See, that's overall so big to keep the water vapor away from the steam Thank you It is one o'clock Okay, it is one o'clock, so we'll call the meeting to order. Just a reminder for everybody here and not here. The session is being recorded If you don't wish to be recorded, then I guess you have to get somewhere else So, as ever and in keeping with every other meeting you've been in, the last few days, this meeting is under the note well. It is an official meeting of the IETF and you have to advise by these rules if you don't know what these rules are then please please do go and familiarize yourself with them because they concern IP and behaviour and conduct and how we actually do the official business of the idea rules are, then please, please do go and familiarize yourself with them because they concern IP and behavior and conduct and how we actually do the official business of the IETF, but hopefully you all are familiar with this and will apply by it similarly note really well, not only codes of professional conduct, but also a professional"
  },
  {
    "startTime": "00:02:01",
    "text": "code of personal conduct we don't tolerate or accept abusive behavior or any kind of upsetting behavior in the meetings thankfully I haven't seen any but just in case anybody's feeling spicy, please stay don't. This is a nice club of people who are just trying to do good work and there's never any need to get personal or upset people or be be rude so don't do that, and we'll all be happy and the work items will get done faster and the internet will be a better place Hi Deb, so just in case anybody does feel upset or there's any bad behavior and don't want to raise it in the room do go wherever you are anybody does feel upset or there's any bad behavior and don't want to raise it in the room, do go wherever you want, including us as chairs or Deb cooley, who's entered the room, who's our responsible AD I'm like, where do you go? Yeah I'm just letting people know that if ever they feel upset, they can tell somebody Yeah, quite so enough of that anyway for just to mention it. And the Ambats team That's your ultimate resource. The links are in the slides The Ombudsperson team will look after all this sort of stuff so we joke about it but it is serious if you do get upset we will fix it For running the meeting, so everybody who's here, please sign in to the on-site tool If for any reason at all, you can't do that scan the QR code at the back, please. It's important to record attendance but hopefully everybody's on the onsite tool Obviously, everybody who's on the line is recorded automatically, so you don't need to do it anything about that. We did have issues with this in a previous meeting so please if you're in the tool click the wrong button whatever please do mute"
  },
  {
    "startTime": "00:04:01",
    "text": "because the echo problems are horrific and here so Chris got in early with this but I'll ask again a few more people have filtered in the room AJ has volunteered, AJ always volunteers, he's great at doing that but it would be wonderful if he has some help too so if anybody in the room can assist with the note-taking, that'll also be very good. We need to have agreed and high-quality notes of these kinds of things So please do help out and as a bonus as I always like to point out if you take notes you get to look at the pretty hedgehogs, which is cool Okay, so that's it, I think, unless you can think of anything else So agenda is as posted, we've made slight adjustments to the timings, but the procession of the meeting tends to make adjustment to timings anyway So without further ado, if steve lasker could come to the mic, for anybody who is new to skit or needs a refresh we're going to give an overview of what this whole thing is about. Thank you Hello, I'm steve lasker and we'll start with next. So our working group chart this hasn't changed, so it's providing integrity, transparency, and trust and defining a set of interoperable standards, building blocks for implementers to build integrity accountability into software supply chain systems to help assure trustworthy operation And the key there is around that trustworthy. Who do you trust? And that's key because we try different sources for different scenarios And that's really a lot of what you see come through in many of the scale scenarios next So in this working group, we have three main documents so far there's the architecture"
  },
  {
    "startTime": "00:06:01",
    "text": "which we're hoping to wrap up And so that's why you kind of see it's been our priority And we're trying to trend down the priority meeting we feeling it's in great shape thus feedback would tell us whether it's in great shape and we need to change the trajectory of our focus We are transitioning over to the referencing API, Scrappy, for the Skip Reference API to see does it actually help us implement the reference architecture? and what issues it would surface back and forth? And we'll talk about that quite a bit today. One of the things that the group has been discussing and debated is while the use cases were extremely important for us to get focus on what we were accomplishing in the working group, there's been various debates around whether use cases should be promoted and you know go through the whole draft process or other great building blocks but we won't carry them forward We have been discussing bringing the summary of the use cases into the architecture so that there's a reference to those in the official docs so that we know what it is we're trying to solve. So that been probably the biggest, well, it's one of the debates we've been having so with that, next So well, what does Skit do, right? We got this nice text I'm a visual person, I like thinking in pictures. So we have issuers which are entities of whatever. It could be a machine, could be a user It could be a company. It could be a project Anything that there can be an identity about can make a statement about an artifact. I think this software is good. It was built on this environment. Here's the S-bomb for this artifact. Here's the Vex for this binary Here's the people"
  },
  {
    "startTime": "00:08:01",
    "text": "that were involved in a virtual conversation Here's my support for a virtual conversation to be allowed for distribution. Here's a redaction that says, I no longer want this VCon, my participant in the VCon to be used for distribution Those are all statements about a thing that are made over time and then you can choose whether you trust the issuer of that statement or not One of the things that we've been having on the thread just today was the idea that multiple statements can be put onto a skit instance that are the same statement and whether they're the same statement by the same issue and they just register multiple times or it different entities making can making or conflicting statements about an art of those are all valid scenarios So the idea is I can bundle that information together and then I sign it through the issuer and then it can get registered on a scale instance so next next oh okay so um it's a sort of that. Oh, okay. So the sign statement, all of that happens before you even gets to skip. So now you are registering a sign statement on an instance of a skip server, and then there's a notary step that will evaluate the identity of what of the issuer to decide what it should accept that we make the analogy to notaries you know that doesn't validate the contract that you're getting notarized? is a valid contract, just are the identities who they say they are. So now you can debate around the contract and not who the issuers are That's the main purpose and there are the each skin instance can host a set of registration policies that it decides what time of identities it will allow. We do this"
  },
  {
    "startTime": "00:10:01",
    "text": "a gym allows me they don't care what my identity is as long as I pay Domestic travel, my driver's license is fine International travel, passport's required So it's just, those are kind of good analogies of thinking about what of the identity types that you want to trust for a particular SCID instance and then relying parties can query that in information or they can use the receipts that are given about a registration to decide how they want to decide how they want to process that software or that scenario at that point next How does this come out? We focus on Seabor as our protocol or payloads for how things are shared. So we have some information here and how this is all structured This has evolved over time, depending on how much you've been watching skid over time so we we definitely want to be leveraging existing standards. So we have adopted this CWT claims and the issuer is captured there, as well as the subject. What is the subject? What is the collection of artificial? that I, or sorry, what are the, what is the art? as the subject what is the subject what is the collection of artifacts that I or sorry what are the what is the artifact that a collection of statements wants to be referring to You think it was the correlation ID, if you will So that goes in the CWT claims. The, uh, claims go in the protected header, and then there's some other header parameters depending on what identity you chose So in this, well, first of all, we have the content type of the statement. So that's what you have there And then you have, in this case, we have some X-5 properties if you're using X509 Next. And then for a standard cozy signing you're signing the protected header and the payload. That's what the signature is based on there is an unprotected header which can hand additional metadata, but it is not part of the integrity checking that's in the signature. Next And the unprotected header is a nice bucket"
  },
  {
    "startTime": "00:12:01",
    "text": "to be able to put additional information to, not just metadata but when we want to simplify the distribution of these statement, sign statements, the receipts, and the content. So at the end of a registration, you can take the sign statement and put the receipt in the sign statement in the unprotected head So now you have a single piece of contract a transparent statement that has a reference to the statement the thing that you were saying in the first place, the yes bomb, the vex the this is good, whatever you want to, what is the pay statement, the thing that you were saying in the first place, the yes bomb, the vex, the this is good, whatever you want to, what is the payload or a hash of that. And you've got the receipt and the transparency statement all put together. So that's the basic structure that you'll see passed around Next Now the this one was kind of understanding of certainly you know, it doesn't go in irony that the internet kind of hit some challenges just as people that help form standards of the internet are trying to come to a conference. So everybody wants to talk about the list security issue or latest challenge so with skit we often talk about there's multiple vendors or multiple issuers can be making similar statements or conflicting statements In this case, if I've got Big Co, which is just some random company, they're probably using software for multiple vendors, and each of those vendors can be making and publishing signed statements around their content. Security companies on their instance of a SCIT service, can be made statements around software So, for instance, somebody could be saved that maybe I shouldn't be deploying the latest version of CROT CrowdStrike. And it could be a company or it could be inside the know, inside the big co environment. So, you know, it's see this all the time. What's the best way to deploy? a vulnerability, whether it's human mistake"
  },
  {
    "startTime": "00:14:02",
    "text": "or malicious intent, is it deployed as an update so staying the most up to date is not necessarily the most secure. Of course, after you have the vulnerability, now you want to be up to date for the later So there's all those semantics And it couldn't vary on the environment So anyway, that's kind of what we have here, is just with skit, you can correlate a collection of statements around the thing over time and then you can choose which issuers you wish to trust for the statements you want to process and use. Next I think that's you talking about these scenarios of whether I should deploy the VEX or should consume, sorry consume, sorry, should deploy the software based on the VEX or the S-Bomb or this is good. With SCIT, we do not have content types that are on owned. The content is opaque. So this is where we're looking for various industries to define what is the format for the subject What is the format of the content that should go in? The S-Bomb, various S-Bomb teams are defining what an S-bomb is. Great, you just put it in this payload. We're not part of that decision. We're going to facilitate trustworthy sharing of that in information. So that's what's really nice about this, is that it gives you a boundary to put issuers trust into content, but the ecosystem of all those content providers build on their own. They can provide all of that, they can evolve and then we can help facilitate trust in that content So that's it Next. I think that's it Next is the next section. So thanks Steve for being perfectly on time. And if we could welcome Hank Burk Holtz and roy williams at the stage In whatever order you wish to do this this this"
  },
  {
    "startTime": "00:16:01",
    "text": "this having trouble standing. It had to happen Yeah, IETF are dangerous take care i might be feral um for nothing too much so soap Not doing that. Here we are doing coal and sewers, so no soap inside Yeah, our recap is we have been working on this for quite some time That's the Datatracker, of course. It felt like an age It's two years So for two years, I think we're on a pretty okay stage We reshuffled the architecture and shrimp down the lot. The architecture was a gravity well of all the things that we wanted to do We defined receipts complete there, although it's a cozy item And we should talk to cozy people. We started that area. It's not in there anymore And we will come to all that. We had a lot of what I want to say, application user scenarios We trimmed those down. The use cases has been highlighted by Steve are still living in another document but I think some tightened up excerpts of those would help the reader to get context for the architecture, which is, I guess, a lot biggest editorial issue that remains up to this day So in 119, next slide Huh This is a weird There's some some show why not I can do this for memory Let me see if I could find out. One important thing is that we have technical functions like we sign stuff or we convey it important thing is that we have technical functions, like we sign stuff or we convey items and there are functions in there that guarantee some correlation of events that happens So if you register something at the transparency service, at the same time you get a receipt, that is not an atomic function, but it's tightly bound"
  },
  {
    "startTime": "00:18:01",
    "text": "So these technical functions are now in a diagram. And then there are also roles that execute these functions or have utilization of those functions and there was a little bit mixed. So let's maybe just move on to the architecture side that we can look at something instead of the Datatracker box This thing? Yeah, so that's move with that. OK, so what I highlighted is that the architecture was a gravity belt for everything we wanted to do. We scraped that out So there's now a verifiable data structure ID in the cozy working group called a cozy receipt receipts are basically proof containers for certain actions or qualities of a verifiable data structure operated on them So we have inclusion proofs. That's most obvious the thing we need for SCIT, because when you enter some data structure operated on them so we have inclusion proofs that's most obvious the thing we need for SCIT because when you enter something to transparency service you want to have a knowledge about that it's in there. So why do that in the first? place? Why not just keep the science statement? Because the key material typically is knowledge about that it's in there so why do that in the first place why not just keep the sign statement because the key material typically and the certificate itself has a crypto period this things expire and you want sometimes all auditability long after the fact that a VDS quote the very favorite data structure quality, typically it's a mercury. It can be anything. So I'm falling back to the super hardened Linux structure quality. Typically, it's a mercury. It can be anything. So I'm falling back to the superhardened Linux-based SQL database. It would trust very, very, very much. And if you run that in a TE, it's could be a VDS in the end So it all defines, it depends on your requirements and how you'd sell the implementation. That's not our concern Then the cozy working group's cozy receipts basically tell you what proof is used and expand on the proof. You can add additional proof types, for example a consistency proof that would be the next one in COSI. We would do it there We would not use it in Skit. We would profile it at Skit. We would pull it in"
  },
  {
    "startTime": "00:20:02",
    "text": "put all the extra header parameters and content here And so that is I think the main step And there was an artifact left in the architecture document that is the tag for the cozy receipt the CEPA tag that was somehow left over in the architecture that also is not exclusively registered in COSI. So that has moved out we had a lot of discussions about what a refresh or new receipt means because you, of course, get a receipt then you register a sign statement. You get this receipt back. But what if you need another receipt? Behavior here depends, of course, on the implementation you could get the exact same receipt back if there's no timestamp in your script profile And if you're using a deterministic signing function the key material hasn't changed. Then the receipt that we will get back is the exact same one this is a very fringing case. Typically, signatures are not limited. Sometimes you have profited of timestamps. So expect a refresh receipt to be about the exact same thing but not identical to the receipt you lost If you lost the invoice on paper that you get from this whole when you check out and get another one, it typically says copy on it, right? And there's might be even a different date on it. So it is the same thing, you can reimburse their money, you can get it back from your employer, most likely. But it is a different receipt about the same statement that I have been staying in some hotel So that is how this works. And you add something to that? okay oh yeah absolutely and finally, yeah, we have the diagram We will come to this in the next slide. So I'm skipping the fun now. We have made an interesting decision for the use of certificate paths for validation in sign statements or corresponding receipts So in this case, for both of them certification paths help validation a lot It might make you a little bit lazy because you don't like"
  },
  {
    "startTime": "00:22:01",
    "text": "to look that up yourself, but including them in a science statement including them in a received helps in a lot of use cases, but they should be optional How do we deal with that? We are basically thumb printing the issuing certificate and put the thumb-prick mandatory into the protected title of the cozy statements of both signed statements or receipts and then put the certification path in the unprotected header. You can leave that out You can prune it out, but it will be registered with that if you put it in the sign statement. So if you pull it out, you can't correlate it if you see it's missing It can't validate it anymore in the same way Also, it is cryptographically bound because the leaf certificate sumthrant is in the protected header. So you have a, and it cryptographic anchor for the certification path, and so it is now when your processes up to you, if it's big, okay, well, I'll grab it out move it away. Oh, I need it again. Okay, I lost it, I didn't say it, I had a new receipt with it and again. So, you know there's a lot of flexibility in having the certification path in the unprotected header but you must need some cryptographic anchor for it in the signed immutable statement, and that is the X5T thumbprint of the issuing certificate I think that was a good compromise. Nobody really hated it. Nobody actually a lot people didn't love it, but I think it's compromise and standardization I think we did a good job there Um, hash envelope is something that has spawned in Cozy. That is very, very important when you have large payloads. Payloads typically go into the COSI envelope if you have a 20 gigabyte S bomb and you want to have it registered sending all this 20 gigabyte to a transparency service like every second minute might not make a lot of sense. So it is okay now to use a so-called cozy"
  },
  {
    "startTime": "00:24:01",
    "text": "what's it? I think a hash envelope, okay, it's all right there. And so um, but this basically does is it allows for the payload to be a specific payload that is the hash of the actual payload and that is the the content envelope that goes into the transparency service that is a new thing in COSI. I think it's now 01 that it has not been adopted yet or was there an adoption call in COSI this time I can't remember. All right? I can't remember either yeah there was there was a vote so yeah. I want to bring up and unpopular term here because there's a quality feature to the Skid Transparency Service that it handles all payload opaque as cosy has signs to uh as cosy has for example bytes to be signed skid has bytes to be registered when you put something into the unprotected header it will be registered If you scrape it out afterwards, that's your problem Deep with that. Now, the opaque sorry, the opakness of this payload is kind of broken when you do hash envelope You kind of have to understand that there's content somewhere in the unprotected header that can be appointed to but there are the when you do hash envelopes. You kind of have to understand that there's content somewhere in the unprotected header that can be appointed to what the content is. And in some scenarios that could be called a hash envelopes. You kind of have to understand that there's content somewhere in the unprotected header that can be appointed to what the content is. And in some scenarios that could be called in non-opaque payload in the content of SCET sketch. I'm not entirely sure if that's true. I'm leaning to towards that. It's not important to the architecture, but it's important to people who implement it to understand is it still something that I have to understand all the time, then it would be a non-opold payload, or is it something that I can just use? and assume that people will understand it or implement it correctly? And there are opinions about that Go ahead, OI. All right. orie steele"
  },
  {
    "startTime": "00:26:01",
    "text": "uh i think justin pointed this out in code so I'm going to give him the credit for this, but if you've got a hash and you're signing the hash, like you better actually go check that that hash is matching the artifacts that you're trying to protect. Which would make it a non-opake. It's non-opake. Like, you better check the hash. The consumer at the end Sorry, the consumer at the end has to validate the hash anyway. So it's just, it's not the function of the ledger to validate the content. So at some point, all is doing is validating the identity like Steve said it's a notary. So the end result, the customer is still ends up having to validate the content hash anyway Further to that point, it seems a tad bit risky to me to leave your URI in an unprotected header What is the threat model that allows that? Clarify with your question You are placing a piece of temporal data which is necessary for validation How are you, like what is your threat model? How does that work? It's a valid question The question is whether it's is your threat model? How does that work? It's a valid question. The question is whether it is the pattern we want to see that the point about the opaque content in this case offers a scenario where a subscription service like any malware can sell their feed and prove their time and reference of the content without exposing their material. If they weren't to charge for it, then potentially the suggestion may be not to put that there, period. I guess we're I'm going is maybe I'm misunderstanding something. I probably am but it looks to me like you've got two choices Either it's opaque and you don't even need the URI, or it's not opaque and it better be the correct URI In the case where it's opaque is the subscription service where it's offered out of band a different way, whether that you need the URI as a"
  },
  {
    "startTime": "00:28:01",
    "text": "query prompt to go and retrieve it off that feed is an interesting question as to, since you're buying it as a subscription for your company, then basically you're relying on the authentication to that service to retrieve it via that you're right You're right. If it's just the general internet, I agree it's a threat vector that we have to worry about about can you say your name at the mic for the no taker thank Hi, justin richer And since my name was already brought up, thanks, sorry I figured I should clarify a point that I do think is actually germane to this discussion The point that I raised from Cozy was specifically about a detached hash which myrtle trees traditionally are not in order to validate the data structure you are calculating the hash of the nodes as you go through the problem with the detached hash is that you have the hash value sitting as a value in a field somewhere and if you just check against that value, and then don't check that value actually map to the thing that it's supposedly pointing to that's where the problems come in And this is a it largely boils down to a data structure or implementation note, not being deeply familiar with this particular draft. I don't know if that is a concern with this specific data structure. That said, it is something that generally speaking, when you're doing Hashes of Hashes signatures of hashes, blah, blah, blah, you need to point out in the security considerations that if there is an extra step, make sure you absolutely take that extra step or the security properties that you think you're getting do not actually apply. Thanks, Jess steve lasker So to the question of location, it is option"
  },
  {
    "startTime": "00:30:01",
    "text": "So it's more a matter of if you want to be a able to get it, you can. Or you might decide, I don't want to make it public. The location is basically a hint, in fact, it was called hint at one point But the idea is that I might have that content already on my machine for another scenario And you're really matching the hash to that so by all means it's we've just submitted it well, I'm sure we'll take feedback and we can consider various pieces I'll repeat the question if you want What's the, what was the failure mode if it's forged? If the U.R is forged? Well, okay, so that's a good point. It goes back to who is the issuer that is making that statement but to Justin's point, of course, at fund deployment you should always be comparing the hash those are all different steps in the workflow. I think the point he's making here is you can download a 50 gigabyte document with malware and on your system could scan it and did fault the machine because it was detected as a virus And that is definitely a concern Actually, I think you've pretty much got it at that point, like, you know, you've these resource identifiers before you start, you know, resolving them make sure you're okay, and as you're resolving them, make sure they're not too big and all your other policy considerations. But at the end of the day, you have to compute a hash from these things and actually confirm that that hash matches the signature So there were three other points there Hank didn't make. One was we kind of started off trying to get flexibility around identity and we discussed DIDs. We kind of parked that for the time being because we don't have enough confidence in the layer and we focused on X509 for the long get flexibility around identity and we discussed DIDs. We kind of parked that for the time being because we don't have enough confidence in the layer and we focused on X509 for the largest part. The spinning off of identity for companies and products"
  },
  {
    "startTime": "00:32:01",
    "text": "and so forth we've also spun into spice and now that a working group, that'll be this afternoon The third aspect of Skit that Steve didn't quite get to is in an X5 and I case, we have a set of roots that we have to to carry around in the case of browsers, that's 300 routes, and we don't want to create another 300 routes around the system so move towards something like skit ledger that's maintained it the server endpoints, and you just have to trust the ledger in this case to say, hey, if that had any validated, the other identity, I believe it Coming back to my original point, we are breaking up a principle that we defined at start that all statements are opaque. In this case, it is an disagreement there. It could be interpreted as a non-opaque statement and that is some there. It could be interpreted as a non-opaque statement and that is something we will do later with when there might be other users cases. So Skid is not done with the architecture. There will be more profiting in the receipt side and the signed statement side and then we will figure that out I don't think it's germane to this document so just learn but it is an interesting fact that this is was discussed I think that is a that was a part of the recent changes. So moving on to the next slide, because we have two minutes left. There had been a lot of editorial things happening at the hackathon. It was really a hackathon for ID in this case Hannes went into a fit I don't know. It was a amazing. So 22 new PRs and there was a lot of approval. We had we mesh them, they mesh them I think only four of them didn't make the cut Um, when I can, if I could come correctly, I would see it, but I whatever yeah there's a more right and um so um so there was one thing that's that's, that's, I was talking with the functions and the roles at the beginning and maybe nobody"
  },
  {
    "startTime": "00:34:01",
    "text": "was really understanding where I'm leading up to verify a role versus relying part role across domains is a nightmare We're done with verifier. We're not, we are doing with verifier checking and relying parties to some stuff. Amongst them, most also signature checking. Okay, we are not using verifiers, just too confusing. Everybody thinks something else and and it was just not worth worth mandering on that any anymore. We're just doing relying party at the moment. If there is a concrete and specific problem with the term terminology, please raise an issue. If not, this is done now. So and analogously, issuers and relying parties on our roles. And there was a lot of discussion if the auditor role is in scope for the skid term terminology, but this long not roles. And there was a lot of discussion if the auditor role is in scope for the skit terminology, but this long-term auditability and accountability are the fact was basically the first line when we chartered It was on every slide, so it felt wrong to exclude the specific relying part that's the auditor from the text. That's why it's still there. There are some use that will be again this small use cases, they will pick up on it, at least one of them So it is not the most vital role for the concept itself, but I think it's a very vital role for someone who wants to maintain a transparency service. That's why it's in there. It's more like I want to say, don't, don't throw stones and me, it's more a storytelling device to understand where and why this document exists. Then it's a technical necessity. So that's would you agree with that? Okay, fine, thank you. Next slide, please So, um, stabilize the diagram Unfortunately, it doesn't read well on this time screen. So next slide, please Unfortunately, this doesn't read well on this screen. So thank you, Steve"
  },
  {
    "startTime": "00:36:01",
    "text": "Next slide, please Well, it doesn't look like it. This is the same diagram. Okay, but this is hopefully readable from everybody in the room here right now the IDs are like you know this is wrong perspective. So yeah we now have still the artifact in this diagram An artifact in the first use case is to typically a software component As we are agnostic to the use cases long term, it can be a car. Okay And our certain car of scope right now, it's software or statements about software Again, sorry And the statements are derived about the software. For example, there can be a vulnerability and you could, for example, take the NVD statement about that vulnerability and register that So that is a statement about an artifact taking into account that the NVD augments CVE statements and they are really, really in the backlog, maybe not do that today. But OK, so the rest of the diagram typically is staying the same. We annotate differently. We have two annotations edges to typically all edges should be annotated but we annotated the signing and the signature check edges here to really make sure that the identity document that's called credential now is applied and its corresponding key material is applied So issues use the credential to sign sign statements, and later, if a transparency, a transparent statement has signature checked, then you also use the cozy procedure. And at the moment, we are strictly with a sign statement limited to schozy sign one to make it simple and easy. Also, the diagram now reflects that you can have a multiple transparency services and be multiple receipts from those. In this diagram, it's one receipt from each transparency service about the same"
  },
  {
    "startTime": "00:38:01",
    "text": "statement but different receipts different authorities that are keeping track of it. You can have multiple receipts from the same transparency service We cover that. They might look the same, probably they don't Again, Steve already explained if you colloquial them, they become the tree that is the transparent statement that you typically deal with so that diagram still is not perfect but it will never be perfect, but I think it's good enough for now. If you think more edges should be annotated and it's not clear what they mean, please file an issue. We don't want to over the diagram anymore, but I think this is after we are churned, there's a lot. We have to, we have to cut it off at some point. We are at the opinion good enough. File issues or come to the mic if you don't think that's the case. File issues because we have no time Yeah, OK, maybe there's no time for the mic. OK, OK, ignore the listen to the chairs, not to me. Next slide, please And that's it excellent okay thank you Thank you if I can do this So briefly putting my chair hat aside just in case I say anything untoward I'm going to do a little bit about Scrappy, so for people who don't know, Scrappy is our ID for the Rest API that allows you to actually interact with, create the wonderful things that Hank was just showing on that diagram and just as a statement of fact the current draft has this set of interfaces. So posting getting receipts, getting signed statements, and so on on And so what I wanted to do at the"
  },
  {
    "startTime": "00:40:01",
    "text": "hackathon was to make sure that scrappy kind of works and to make sure that the thing that worked accurately and faithfully implemented the architecture and then it was usable. So I thought, you know, good way of doing that would be to go through all of the open issues and knock them all off And if we managed to knock them all off and I had a work program at the end of it, that felt like a good way of doing things and when I took a look at the map of these things there were a couple of them were just sort of already done, whatever of the ones that are interesting three out of the four were concerned with the issuer work and only one of them was to do with verification so just looking to prioritize had a look at that and decided to do a hackathon hack on asynchronous issuance And if that works, then all of these issues pretty much can be closed. So it felt like a good thing to do And I'll go back to use my time so end workflow, again, there's a sort of use case version of what Hank just showed, start with an artifact might be the piece of software, it might be a Vex or an S-bomb, or it could be a PDF with one of these vendor attestation forms that we did a few ideas ago. That becomes a statement. It's somehow signed either with remote signing services which Corey and some of the DigiC crew also did in the hackathon or you can locally sign it, that's all fine That becomes a signed statement. It then goes into the transparency service and at the far end of it if everything goes well, you get a transparent statement"
  },
  {
    "startTime": "00:42:02",
    "text": "at the end. And now you've got your nice, durable, long term accountable proof of whatever this thing is that's entered yourself software supply chain And the good news is it does work. And we managed to prove a few things about the issuer work in terms of interoperability. I appreciate Pye Cozy and Go Cozy interoperating may or may not be impressive, but I do it's certainly good that they do And we also managed to prove out multiple vendors working with these libraries exchanging things, sign statements, and cozy sign one format all working and as a bonus, got a little run out for this new cozy hashed envelope as a payload type, which also seem to work and closed out the issues So, just very briefly, because we've talked about this at length now, I take my artifact, I hash it I wait for Meetecho to catch up Come on Meetako is very unhappy It's still happy. Yeah terrifying. It's the 80 gigabyte file. Let's see what's going on with this. I'm going to refresh my browser So the slides are obviously available on data track here I don't need to labor this to labor this to too badly but just to show the cozy that comes out of it, the seabull that comes out of it is all looks the right sort of shape and is coming along. So, so far so good The issue were rolled is done. I've just refreshed my screen"
  },
  {
    "startTime": "00:44:01",
    "text": "It could press buttons It might make the thing work. So the issuer workflow is fine. So where we've landed now and if people have been watching the list, roy williams also and quite a, here we go let's keep pressing, keep pressing and again next slide please there we go, one more, let's do this this So the relying party, if we assume that that goes through, workflow is now the one that needs much more attention and does definitely need attention because what we have right now is not strictly implementable So we have several resolvers. We have the optional URN which is based on the hash of statement This feels nice, but it falls foul of a few problems, so notably the class of problems where you register the same statement again multiple subjects and the issue that was brought up earlier that you might register the same statement twice in time for some reason maybe you forgot, maybe you've got multi-threaded software that doesn't talk to each other, whatever. So having a single thing based on an immutable property of the statement doesn't necessarily give us the flexibility we need in a situation that's supposed to be coding also for time and also for identity. So we need to do a bit of work there. And then we've got these resolves for finding statements, sign statements and receipts Based on that ID. So these resolvers are a good starting point but probably need to be improved a little bit. So next slide please. So rather than sort of starting there and seeing what we can do with it, let's go back to the use case and see how we solve the use case"
  },
  {
    "startTime": "00:46:01",
    "text": "So two main questions. Do the APIs work? Kind of, but really. Do they solve a problem? So what is a reasonable relying party? have in their hands when they want to check a software artifact? And what is it they want to check? Because a lot of the crypto involved here kind of assumes that you have access to things like sign statements or receipt alongside the thing you're checking And in much of our experience of building systems like this, that actually isn't the case. It's much more likely that you find something to click a button it's much more likely that you'll find something under a rock and want to check with the transparency service that it is the right thing. And going back to the earlier presentations, the right thing in what we're trying to solve for with Skit might mean yes, this was valid, but it's not the latest one. It doesn't necessarily mean that it's just a complete hack or you've got the wrong file. So this issue of hash checking and whatever is only the first part of the story Slide please. So with that question and also the question of the individual hash about the statement, the other thing I can't do with the locators as written is things like, well, okay, I've got this piece of software and I found the receipt for that, but I also need the Vex salsa conformance statements, things like that based on the payload or the subject or something, and this is the can of worms I'm about to open once we've spoken So the can of worms that John's getting to is for specific verticals Roy, can you say your name at the mic? roy williams, Microsoft. So the kind of worms that John's bringing forward here gets to a basic functionality level of what we want to do in Skit, but doesn't address, you know specific verticals will have different ways of doing this if it's software builds and materials, the SWID or the S-BOM ID,"
  },
  {
    "startTime": "00:48:01",
    "text": "will be the key for people to look up things but that's a specific instance of a vertical on top of skin So what we're talking to here is what basic functionality we think belongs in the generic layer and that the specific for specific markets. Yep absolutely. That's the thorny thing, is it's kind of easy to solve the specific problems in a specific case, but we're trying absolutely not to do that. Thank you Yeah, absolutely. There's the thorny thing, is it's kind of easy to solve the specific problems in a specific case, but we're trying absolutely not to do that. Jay, thank you. Oh, sorry, AJ I'll try to keep it quick and also write notes about myself I don't know if it's at the scope of skip and it sounds like re-subject, the more we talk about the and if we're talking about hashes, there's some amount of fuzziness around what an artifact is an assigned statement that we're talking about or the kind of sign the kind of statement we're making and i don't know if this is really area work for this area of this work group, but maybe we need to figure out a way of talking about the different options for identifying things at a confidence level but I don't think that's in the scope of this work group at all. And that's something that kind of needs to be plugable in this API. I don't know what people's perspective are on that. And I will mute and they'll try to summarize my own comment steve lasker So yeah, AJ, I mean, this is what I was referring to earlier where the subject is open for the industry right we were talking about GSW for barcodes, the first three characters are for the vendor and they own the rest. There's Swids, there VIN numbers. You know, there's every industry has a way to define their identifiers and Skip being generic, says you do with it what you want. It's up to each industry to decide. So that's really by intent is not for us to define each one it's to give them a place to put their definition of how they do identifiers"
  },
  {
    "startTime": "00:50:01",
    "text": "Great. So yes, I guess my slide has been narrated by the, by the, So how do we find? this stuff in a useful way? way? slide please there we go so the suggestion I want to come with just problems To be clear, the work that I did on that hackathon weekend does prove that verification works, but only in a very limited practice set of circumstances where you'll deliver the entire bundle of everything all at once. And again, in some cases that will be that will be the that will be the case but in many many other cases it won't be. And of course, as time passes, even if you were delivered, the entire bundle of things, your trust in that will erode and you'll need to go back and check so we need some kind of local locator So my suggestion here, this is the slide that really made me want to take my hat off but it is a suggestion, is to continue location to issue a and subject. These are things that we understand and are different in the header there has been discussion about locating by anything in the headers, which as an API guy I'm perfectly happy with, but as a designing of scalable protocol with a document that's going to finish any time this century, I'm not really in favor of to put my chair hat back on briefly to say we need to get the work finished And I think we can finish our current charter with that restriction. With one note, that I think locating by hash is also really valuable. So if we would to change the identifier for practical reasons, I'd want to put that back in. But that's it. I don't want to I don't think it's necessary to spread the scope"
  },
  {
    "startTime": "00:52:01",
    "text": "The other thing, is, what does it return? So if we send in, a map of possibly an identify, a subject, I'm suggesting it should return transparent statements This is possibly again controversial because that would rely on the optional characteristic of the architecture that some auxiliary service in the transparency service is storing the statements at all. It doesn't have to and so we could you know, take that in a couple of directions. We could either say it's all or nothing, you know, that that auxiliary service exists and this works or it doesn't and you can't call this function, that would work, that's perfectly fine um or you know we can take discussions to it issues and discussions on the list that it might return something else like just the receipt or whatever And there you go that's kind of kind of it. So if we're able to come to an agreement, or a rough consensus on what's to search by, issue and subject I think works well because if you get, if you got an an agreement or a rough consensus on what to search by, issue and subject, I think, works well because if you got an artifact in your hand and you get its receipt you now know its subject and you can search every time subject, or if you're looking for generalized statement about the vendor of your software, you've got the issuer. So you can see subject and you can search every subject. Or if you're looking for generalized statements about the vendor of your software, you've got the issuer, so you can search for everything on the issuers. So this seems to solve the practical problem in Roy's shaking his head, but seems to go far enough for me, Roy can explain why it doesn't And there we go, and then we be able to write that, test it end to end and see what happened So this is, I think, the key area. The good news is scrappy to a large degree does work. We need to formalize the polling for asynchronous registration. That's a thing that we haven't formalized, but it's trivial. There's stuff about rate limiting and access control"
  },
  {
    "startTime": "00:54:01",
    "text": "which are, I wouldn't say trivial, they're important to get right, but they're easy to solve because any practical implementation would just make obvious choices. So the one sticky thing to really go over, I think, is this And if you hit the side, I think that's the end. So yeah So if there's no no worms to be eaten in the audience, we'll move on to This is John slash Ory, but this should be Steve, I think think So, yeah, so the heck of thought was pretty active. There was several different teams, and as we were originally focused on the architecture in previous meetings, there was a lot of discussions on a document, right, with drawings and in this case it's nice to be getting to the point where we're validating things with actual code so there was and we mentioned draft seven here but with all the feedback from the homo to the point where we're validating things with actual code so there was and we mentioned draft 7 here but with all the feedback from the hannis blitz we did issue a draft eight on Monday to account for all the update that we brought in. So thank you, Hannes So then we, you know, worked on the address the scrapier. John did a really good recap of some of things that came out of that And the other part was, you know, we've had a bunch of groups working on SCIT that were part of it from the beginning. But we had this wonderful person come up in Brisbane going, Skit is really cool. And we all looked at each other like, who is that? So Thomas from Strzbo had done a bunch of work with Vecons So it was great to get an external group, although you know, granted they're at IETFer. They had didn't, weren't part of the original conversation So they were able to take a look at SCIT and implement it and make it part of ECONS So, uh, next. Oh, and then, actually,"
  },
  {
    "startTime": "00:56:01",
    "text": "what I don't know if it came through in that whole thing was the they were actually doing VCon signing with DigiCert, so there was a remote signing aspect as well So there's a number of great validations being brought in to make sure the Enden experience worked in what would be real-world scenarios I took lots of PRs for the SCIT issuer roles so that there was lots of discussions there around how do we align the terminology for common terms as people that read lots of different drafts and not have to do the context switch around what is this term need in this draft versus something else Well, I think we've been discussing all this, so I don't have to recap it anymore. We talked about the V-Con stuff so that's great Next We talked about the search stuff, so you know it's, maybe we should put the hackathon report at the beginning but anyway because what you're seeing in the presentation is a lot of what's been developing over time more QA on cozy and Cote, what was the other one on that? Sorry Yeah, and Git-Halbatcham is a thing I didn't mention. Is what? Oh, yeah, so, sorry yeah, and... Oh, did it have that to do something I didn't mention, so, oh, oh, yeah, so, uh, sorry, I was in, I was checking for that, so the John was reminded me, we have, multiple Skit GitHub Actions now too So it could be automated in your supply chain. We did one that data trails and then the digit search didn't want to well for remote signing so that really helps validate the scenarios and provide tooling for others to incorporate into their workflows we'll get those published to the marketplace so they're generally consumable, not just by knowing what the GitHub repo is So that was cool. Next cool Next. So, as I mentioned, you know, we all, some of us were more impacted by others getting here. I had the person at the border asked me, so, you know, what are you doing? in Canada, so and so forth, going to a meeting, IETF, what is IAT?"
  },
  {
    "startTime": "00:58:01",
    "text": "Internet Engineering Task Force and there's immediate response, like, oh, you guys have a lot to talk about about Yes, so when you impact the average person en masse like that it kind of brings a lot of focus. So, Ori was doing a really cool hack, which I want to make sure I give it justice, but the point is what we were talking about is, you know, who's making the decision on what to apply and what to make a decision on. So, and this one was an interesting and when I say this one, I'm referring to the the, I guess Thursday night crowd strike impact so it's interesting Thursday night going to Friday on a weekend also. So there's lots of interesting questions that come up But if I understand right, keeping up, it wasn't even necessarily software but the signature file. So it wasn't a package update that got broad in that I'm getting the latest package update. It wasn't a quote software update per se, but the signature update, all of which has the same end result Is I was trying to be latest to be secure and didn't work out so well So now the question is, well all right what is that flow and you know every got opinions on the internet around this, and it's great to see so much focus to it. But it's also a lot of the questions of like, who do you trust and for what and why? Because the opposite thing can happen here as well is I can make you think there is a security update that you should force or I can make you think there's you shouldn't update because I found an exploit in this software, but I, and I don't want you to update to the version that patches the thing that I've got exploited so it really comes down to who do you trust and can you trust the decisions being applied. There's also scenarios where the fix might be worse than the problem in the first place You know, we joked, I joke about, you know, being launching stuff into space"
  },
  {
    "startTime": "01:00:01",
    "text": "with this Acme rocket scenario I talk about Living in Seattle, there's a lot of companies that are doing space work, so it's a real world thing they are already running in very secure environments. If I apply a latest patch that could impact some other scenarios that something else goes at risk and it doesn't launch or a blow up, whatever the impact is, literally. So you really, we need to get better as an industry or about when to apply things and being with associate trust in those decisions and deploying policy that depends on that is important. And that's what Ori was basically hacking together here is, am I trying to pass? the machine with an identity? that's trustable or am I yet another? trying to apply another exploit? that gets the blue screen to come back so that my malicious code will actually run? But you really need to, we need to get better as an industry around associing identity, creating policies around who I should trust for which environment so that we can really continue to automate these workflows in a secure way. Okay, so before we go to the next one let AJ, AJ in. Yeah, but I also want to make sure I also point out in typical or a fashion this is not something he's fully tested. He put together a good idea that I think is why don't execute this code code so it's a it's an example that is definitely a hack from the hacker's on five. So AJ, go ahead yeah this is very cool and I like it I can just So, AJ, go ahead. Yeah, this is very cool and I like it. I can discuss this later on if it's not the appropriate time, but if we consider adding to the use cases using Schittgency Services, I mean, you could talk about this being a form of change management or operational. This came up in Slack once before, but this isn't really last I looked in the use cases, really refraffered it doesn't belong in the architecture. Is that something we want to add? since this seems to have beyond? just the crowd strike example? And I'm sure this will be the last one of its kind kind of situation, which is totally not"
  },
  {
    "startTime": "01:02:01",
    "text": "BS. Is that worth doing? adding it to the use cases, more generalized? I would suggest we're not fulfilling our first use case in the charter if we don't do that. Okay I can make an issue and add it. Yeah. No, it's it whether we have to add it to the use cases document, given that last time we decided the use cases document didn't need to be official That's more of a process question, but yeah, definitely this kind of use case, similar to like if you download a data file, that affects an interpreted, like a J JVM, right? Your JVM could be perfect, but the bike bytecode is broken, that's still broken software supply chain, yeah, so yeah if if AJ if you don't think this is well right represented, then that's a great catch. We should represent that I'll also just add to that AJ is, you know, one of the things I think it was Hank was suggesting is whether we bring the use case forward or not is we should probably put a summary in the architecture document that references them So if we think that is, you know, and good example of being applying updates is one that we should put in the, at least in the architecture, if not in the use cases document, I definitely say yes to that So I think that was it or was there more. But wait, there's more. Oh, yes So just highlighting the V-Con scenario so the interesting thing the other one is interesting about V-cons is this is also around redaction and the right to define how my data is being used. So with virtual conversations, there's multiple parties involved in a virtual conversation. And initially, they must be a agreeing to that conversation to be shared for whatever the training purposes or sales purposes or whatever. This is every time we've been on a call with customer service and we hear that message this call is being recorded for training purposes or whatever the use case is, you are consenting to that Whether you call, hang up or you press a button that says i don't consent to it or"
  },
  {
    "startTime": "01:04:01",
    "text": "later on, where I no longer want that to be shared for, because I didn't know it was being whatever the reasons are, I don't want to get into the thousands of reasons that it should be shared in the first place they don't want it to be shared later. There's this communication that I want to be able to state I no longer want my information to be shared in this way relying parties of that information by contract by using becons in this scenario must check are the parties still a agreeing to share. So they have to check on a regular basis if all of the parties of that VCONs still want their information to be shared. And if there's a note placed in a skit that's recorded at a certain time that's non-disputable, says, I want my information to no longer be shared, all those consuming parties must acknowledge that they've received it If they don't, they're in violation, if they've acknowledged they received it and they're redacting it and they don't they're still responsible. So I believe we still have in the architecture wording that says it does skit doesn't stop bad people from doing bad things, but it makes it transparent what they do. So skit is a native the sharing of information with Vcons and effectively the redaction of that as well. So that was a pretty cool scenario. Next um and just there's a quick overview of the arch architecture of the conservor and the transparency service interaction. So it's been a fun validation of what we've been doing with skit so that's been cool And I definitely hand off to the V-Con team which I don't want to try to take their thunder of any questions So some of them are here as well. And yes, so fun people having fun time at a hackathon on a weekend So not quite all of it. Oh, yeah, well, where was? taking the picture. At the very least, Hank. Hank was, yeah where was Hank? Hank took the picture"
  },
  {
    "startTime": "01:06:01",
    "text": "Hank was a photographer. There's So, anyway and for AJ and others that were working remotely we always appreciate the participation and the impact So thank you I think that was it. Oh, so next chairs. Yep Do you want to do the secretary? are interested if anyone wants to become secretary, so that really involves making sure the minutes get out and managing the mail list, mailing list management for this working group is really lightweight job at this point. So it's really about making sure minutes and that kind of stuff happen. So if you're interested in that, come see the chairs Yep, thank you. So beyond beyond that, obviously, hopefully everybody is enjoying the GitHub workflow that we're using and the authors are using that's largely responsible for the low volume of email list traffic So it works for the authors, it works for me as a chair. I can keep up with that and see it. But if anybody know, if anybody does have concerns or suggestions about better use of the mail list, we've taken those on board before and I think it seems to be working. But you know suggestions always welcome and we could we could adjust that and obviously a secretary would help if we were to change that in any way okay so typical next steps is what are we going to do with our documents the development of 08 is positive. As Hank says, it seems like ages, but it's not actually too bad but it does feel like it's coming time to try to draw these last couple of threads to a conclusion. So Scrappy, clearly we've identified as pretty early. There's only"
  },
  {
    "startTime": "01:08:01",
    "text": "probably one actual implementation and a hand of client implementations of that. So no need to jump on Scrappy but definitely looking for whether we're ready to move to a working group last call soon. I wouldn't say it now because there are still three issues open, but is there any concern in the room about moving forward with 08 polishing off the last bits and then feeling like we're ready to make that last call Yeah, do I have to do an election? show of hands I can do that I'd like to come to my AJ just yeah just... Yeah, go AJ My computer, do you want to, to come to the mic, AJ, just. Yeah, go, AJ. My computer, do you want, do you want to do the call and then I can, comment after? Up to you all. I've actually perfect comments first. I'd like people to go to the mic if they have any kind of comments and then after we've had the discussion to do a Yeah. I'll rejoin the queue is part of a very deep long queue I think there's been a lot of progress made I think particularly some of the feedback from michael richardson about the organization, and I know that Steve has pointed out part of it in relocating the use cases into the architecture or at least some high level concepts that was identified I still don't really understand what the story will be to go back to gaps that are really not known of how we're going to handle profiling things and this call from michael richardson around there's a distinction between architecture and protocol and just slapping a protocol section to the architecture document. I do not think will help things. I think that's a little bit more than let's polish on the last remaining issues off of OA to the architecture document. I do not think will help things. I think that's a little bit more than let's polish off the last remaining issues off of 08. I see you laughing, John. I apologize. I'm just going to call it out Sorry. There's still a lot to be done is my take. I will say the same thing if a working group last call goes. I apologize"
  },
  {
    "startTime": "01:10:07",
    "text": "I'm sure AJ wrote that note down, so noted Yeah Are you, I know, okay Does this negate the need for a show of hands? Well, I think we should still do it. Okay it Are you writing it or am I? I've done it? Yeah i i've done it oh yeah so yeah the show of hands is is up we'll give a moment. And if we'll just done it? Yeah. So yeah, the show of hands is up. We'll give a moment. I don't know if we just need to have a majority of participants registered I've noticed, by the way, on the attendees, on the attendee list on the chat, there are several duplicate people so don't be surprised when it's not actually 68 votes Numbers are really good are stop moving, so we'll call it there. I mean, I will interpret the high number of yeses as confident that people can get those issues fixed rather than saying we should necessarily do it right now But we'll take learned comments from deb cooley and Hannes Schiffling. So you can always ask for early reviews too It looks like you've done that in some cases for HTTP"
  },
  {
    "startTime": "01:12:01",
    "text": "but you can do it for sector review, early review as well. Anything you think is appropriate, you can ask for, right? So IOT, DNS, whatever whatever applies Sometimes they're useful I don't do you get second review So the, so there's obviously, there's some open. Can you say your name at the mic? That's test Hannes. Can you hear me? yeah um so the are obviously some open issues, so maybe, I don't know, maybe there's a chance to do an interim meeting after the vacation some of it vacation, and then sort of like works through those open issues and the corresponding EAS and then see how it looks like. Obviously, the document is is like my reading is very close it's good it's a good document well written so they're really sort of fine tuning so definitely definitely looks very good but i don't know if that discussion that John has been talking about what that should be covered in the document, in the architect document, I think it would probably be useful to talk a little bit about, like, how does how do entities actually look up the stuff and get the process kicked off um that type of things are probably missing Hi, this is Hank I think working group last call is an excellent tool to focus ice on this, as we are not even extremely sure we want to have the use case abstracts in there a working group call could like say, hey, this works perfectly fine Keep it at is and we would save a lot of hassle and work so i i don't think that a working group class call has to win something in the first round that gains a lot of information"
  },
  {
    "startTime": "01:14:01",
    "text": "and UI sometimes, and I think it's a valuable tool And that's why I was voting yes. Because humming I don't know I want to hum again I mean you know, as I look at the numbers, right? I mean, you know, the, I'm going to ignore the no opinions. I mean, there was 14 yes to three no. So the consensus for those who hadn't to ignore the no opinions. I mean, there was 14 yes to three no. So the consensus for those who had an opinion on, is it ready, leaned more towards we're very close than not Honest, I mean, you brought up a good point so that's something to consider I feel like something that could be taken care of in short order, but order but you want to make your point as deb approaches no no point No, no point more like typically when that question is asked one of the other poll questions is how many people have read any of the drafts are the most recent? version of the drafts that are being polled against? Yeah just the thought it doesn't hurt you do working last call. There's no limit on the number of them that you can have, right? Just do it. Right. And you'll get more reviews because you'll be in working group last call so just i mean there's there's no downside perfect good but but um absolutely right. Uh, before we do that and get loads more reviews, who has actually already read this? document before they entered this room today? That's actually a decent a decent, decent set, actually I mean you know I counted at least you know kind of eight, ten, so so"
  },
  {
    "startTime": "01:16:01",
    "text": "I've seen documents advance with less reads that the number of hands that we're up right now Perfect. So let's not jinx anything, but it feels like people are least confident And that's, that was it for those. So um, secretary calls already been made. So any, any agenda hacking? any AOB, anybody not heard earlier in the discussions who now wants to take this this time? time No, well maybe we can get some of our lives back then I don't quit that early Oh, no, no, we've got one. I got all the time in the world. I spend all, I spend all night watching all of you vancouver it's fantastic What are we going to do about profiling and protocol outside of the architect? So if we finish these other things, we have to kind of address the elephant in the room and the charter Are we gonna talk about that in the mailing list or somewhere else? Yeah, I mean, the charter stuff definitely has to be on the mailing list and it also sorts of places. I think there is a degree of feeling that we're very close to solving the first use case. We're seeing a lot of other use cases writing code and actually benefiting. So moving on with the Charter to support some of those adjacent things feels like a very possible thing but obviously we need to finish the first one first. So to your other point that maybe Hank is about to address, yeah, we obviously need to have all of the appropriate sections appropriately finished that there's not if if any impression is given, then it is not meant that that's not an issue It's just, it's a known thing that we need to get uh get eyes on and get uh get text written"
  },
  {
    "startTime": "01:18:01",
    "text": "I don't know at the moment, but yeah, let's take that to the mailing list and see who's capable and willing to to solve that problem Thank you. Yeah, this is Hank of the mic. As a contributor, so when I would think about profiling, which I assume is constraining the range of exceptions, CDL or extending it, and that's obvious that are only talking about the messages I wouldn't even know what a profiling, a protocol means in this context. So I'm not entirely sure we can add a sentence that says where there is this extension points in our structures, there's extensibility So water is wet, sure We can write that. That's not a problem. But when we want to have more than profiling what we're profiling is a meaning here that I'm unaware of, we must add that, I guess, but I don't think it's an issue So people outside of this meeting and on list ask or talk about I use PGP, how will that work? I point that out as an identifier system, sorry a signing system because that's not really supposed to X509 and notionally code signing implementations that are alluded to in one of the open issues, or maybe it was one of the ones closed, was what are, examples of discovery and identity mechanisms? There are these high-level things that we talk about in understandably high-level architecture terms if it's not profiling or another word, someone is going to have to work through, especially we want for these ambitious high level use cases, how you're going to interoperably have different signing mechanisms and different identifier mechanism and different discovery mechanisms that were going to have to work through, especially we want for these ambitious high-level use cases, how you're going to interoperably have different signing mechanisms and different identifier mechanism and different discovery mechanisms that reflect this architecture. I'm less preferential about the noun that describes that, but where is that going to occur? Because if we say mission accomplished, and I mean that most ha-ha, most high ironic sarcastic sense, just for the record, not my opinion"
  },
  {
    "startTime": "01:20:01",
    "text": "of where it came from, we're going to have to talk about how that's going to work for people who want to implement Like, I love the GitHub action prototypes, but the are fairly specific to the people who are implementing a certain thing. And then the other people in the room, I would assume, would ask, how am I going to implement? this short, medium long term to be in interoperable with many of the software system? a lot of the analysis systems, the identifier systems. Maybe that isn't meant to be done in this work group, but like I assume that there's much more expansive work that doesn't belong in the architecture for the different flavors of doing this, and it's not clear to me how that's going to work And if we don't do it, we can let implementers like me flounder. This is one of my key problems in understanding how to write my own implementations to share with people beyond a hackathon. That's it Roy williams, Microsoft To the AJ's point, in the case for software supply channel, a lot of the document formats and the behaviors are being defined by working groups working with the U.S. government the S-bombs, the VEC statements, and so forth So the interoperability at those document levels are outside of SCIT The value we're adding for notarization and identity is a building block that's generic The interoperability for documents and everything else are over and above those. So that's a dangerous thing to try and say, hey, we're going to standardize and generate interoperability on the improbolic operation level at Cozy and Seabor and countersigning is what we need to test Hi, this is Hank again So now I get the question better, I think, AJ building blocks, sign statements and received an archive which is unusual for an architecture, but it is"
  },
  {
    "startTime": "01:22:01",
    "text": "can't cook and vent that it is baked into it, so it's there that's okay to be there. If a reference a API, the R and Scrappy is not rest, it's a reference API is an example how to do a full feature set when you have nothing We start at zero where we start how we do this. X Excellent. If you have an existing solution, you cram, for example, received production into your existing solution. That's where our entire interoperability from the architecture comes from. That's the great cool thing, I think. And then there is this small, tiny thing that people want the S-bombs and do I supply my software or not thing, which we actually want to solve so there is a third level document in my mind that ties it all together that tells the story of an S S-bomb that got some CSV and then a Vex and the Vex was just a fire rule and that's a just very sad Vax, but it still makes it not a fact and now you're good so to speak right and so that story has to be solved somehow with the other two documents and that storytelling could be a guidance document done in sketch I think So that's just one option. I'm putting this out here, let it simmer but I think that would address the market problem we have. So now all these cool things that I want to look at it. So yeah, so telling how that works, not inventing the query language or anything like that that's API stuff, but the story, how to store the statements, give exemplary issue and some subjects, and how they conflict and how to decide that and make a good story, a guidance document, how to use it in the end I think would be happy Mike Burrock here. Hank is obviously tall than me, Germans No, I'm going to echo Roy quite a bit. I think we've got a lot of the building blocks we need. And if we try to push,"
  },
  {
    "startTime": "01:24:01",
    "text": "down into like the details of what's going in and some of those other items, those honestly are better served elsewhere. If we try to boil all of this in one dock, we will never wind up with interoperability We'll wind up like other working groups and other STOs like the did working group with things that look interoperable but aren't, right? And we want to avoid that problem here A.J understand what Hank said in I'm more than happy to work on a guidance document I just I think it kind of needs to happen and I don't disagree with what Roy or Mike said. I just was asking, I don't want to do that in the current documents I think the documents kind of have to point out where the line, where the circle begins or ends around the giant scope of work and the little circles inside of it where they'll go And if that's not even in this working group or only a part of it, belongs this working group, I'm fine being told that. It's just I would say it's not clear how to get more implementations of a t s and clients that are getting used beyond the very few that we know of Yep So you forced me to drag out your charter There's no guidance document in your charter, just saying You have a lot of stuff in your charter, it's a very long charter charter That doesn't shock me, actually actually 32 documents, Hank, 30 documents. Not, not here by the way so you do have a lot of stuff in the charter that you could work on So I, rather than I mean, I guess you could redo a charter if you wanted to. I don't know that I would"
  },
  {
    "startTime": "01:26:01",
    "text": "recommend that because it takes a long time and it's from I guess you could redo a charter if you wanted to. I don't know that I would recommend that because it takes a long time and it's pretty much pain and you know what So I would take a look at the Charter and see what you can pick off and do something. I would, you don't make massive documents lots of little documents are better as long as they're not all normative references of each other, like another working group we know So, or two working groups we know know Yeah, yeah, so don't do that But you have a you have plenty of work in your charter to do Good Thanks, Deb So, sounds, hopefully that was kind of conclusive. It sounded like we came to something of a way forward or set of ways forward for the concern raised So, yeah, I think are we? any other business last final call we're calling it done well thank you hang on I can thank you officially for remote members too. No, I can't because the sides. It's crashed again I don't know. There would be a slide that said thank you, so thank you And have a nice message today Thank you, Chair. Thank you, Chair Chair I think it's a few of us Thank you don't know. You're going to use the space. It's a good. I don't know it hope"
  },
  {
    "startTime": "01:28:01",
    "text": "You said something. You have a baby. Yeah confused confused"
  }
]
