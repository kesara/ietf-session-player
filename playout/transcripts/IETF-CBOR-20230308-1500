[
  {
    "startTime": "00:00:06",
    "text": "hello just in case this wasn't clear from the mailing list uh the the actual chairs I'm just a second chair for the first half hour they actually shares cannot be here uh before uh half past so we have half an hour time for General hallway discussions um and uh yeah we just should keep in mind that uh this is being recorded So the best thing we can use this time for is is doing discussions that we actually want to record so on the agenda for for the actual working meeting we have a discussion about Citi dial 2.0 and given that we only have uh half an hour and two items on the agenda or actually three together with the IDF 116. um agenda one thing we could look at is the remaining slides that I want to use for the CDL 2.0 uh discussion so everybody who thinks that's a good thing to do with the first 10 minutes or so please raise your hand so can people actually hear me"
  },
  {
    "startTime": "00:02:03",
    "text": "yes hi good so anything else we should be discussing so Marco thank you for note-taking so since nothing else has been proposed let me just quickly go through the um module structure implementation that we now have and that is described in the cddl2 draft and just as a reminder the objective um was uh to be able oh that there's a spurious line to be able to construct CDA from multiple files Within uh cddl project so if you have something complicated like Karim which is built out of several files you can essentially do an include but also very importantly the ability to use existing CDL as a library which is the import keyword and two functions"
  },
  {
    "startTime": "00:04:01",
    "text": "that both of these have is you can put included or imported CDL into a namespace so you you can use multiple libraries that may have conflicting names by by adding a namespace to them and you also can limit the import to specific names so those were the objectives that's a very small set of objectives I'm not saying that that we are done but we have done this but this these are the objectives that the current uh prototype is providing and yeah I'm going to go through a couple of examples uh here so on the left side you see a command line that is used to actually uh called The Tool and in this case two lines of actual sibo of actually cddl one is a cddl ruled that that is actually CDO one and one is an import directive which is what what we are adding here in in this video to iteration so in this case is very short it just says the start production is cozy key and apart from that we are importing uh everything we need from RFC 1952 so the the tool actually copies the start equals Cosi key and then it looks into RFC 1952 for any rules that we might want to use because of course the key apparently is not defined at this point in time in in this CDL module so"
  },
  {
    "startTime": "00:06:01",
    "text": "from the RFC 1952 module it's going to get the Cozy key rule and now that rule again has requirements for for the two rules label and values and those actually can be found in RFC 1952 so these are then um recursively copied over so um the the thing you see on the right hand side is exactly what the cdlc tool produces so this can then be processed by a city A1 tool uh like the original CDL to uh CDA code gen or whatever you are choosing so that's a similar case when we have the problem that what we are importing might be conflicting so for instance uh we might be in a piece of c-bar that has its own idea of CDA that has its own idea of what a label or what values are you can embellish the import statement was as a name so in this case we use lowercase cozy as a name I don't have a feeling what the convention should be here but this is the example I have so you can say import rc95 to as cozy and then you essentially get the same thing that we had on the previous slide except that every name is prefixed by cozy and that's why the first line of the example also is changed which now says start equals Co C dot cozy key because there is no cozy key anymore there's only cosi.cosuki so that's what the the start rule actually pulls in from RFC 1952 so these would be very typical ways of"
  },
  {
    "startTime": "00:08:02",
    "text": "of using an existing CDA model as a library pulling in parts of that not necessarily the entire thing so you have a lean result that you can push into Yesterday One tool now um you don't necessarily necessarily always want to import or include um everything that that is currently undefined in your city there you want to be very specific about what you pull and you can do this by adding a from clause which is preceded by a number of names so in the first example on this slide we would say we include label and values from RFC 1952 and then we get exactly those two rules included and of course we can do that namespaced again so if we include as cozy this is getting a bit smaller type I'm sorry we get what is on on the lower right side of the slide so the explicit names give you more control over what you actually get from from the library or from the file that that you are including in this case um yeah and explicit names also use the transitive closure mechanism no it's getting really small so if you say import cozy dot MDR serialized map from RFC 1952 as cozy then you get the below first of all the what the the one rule that also was in"
  },
  {
    "startTime": "00:10:01",
    "text": "the CDL file with my data is just copied verbatim uh are actually not quite verbum you can see that there is some processing going on here but um the the result is supposed to be equivalent and then the tool pulls empty or serialized map from the library uh prefix is that with cozy uh and then there are uh further things that needs to pull including header map generic headers label and values which are again prefixed by the name uh given so the S cozy turns MPR serialized map into cozy.mdr serialized map and so on so this is again a lot of automatics that gives you exactly what you need in a particular context and there is one more little feature which is a convenience I think we can discuss whether that's useful uh but we discussed it in the design team meeting so I implemented that as well uh this is almost the same as the previous slide except that empty or serialized map now also is aliased so the second line of the result uh essentially is an alias rule empty or serialized map is an alias for cozy dot mpo serialized map and that is also automatically generated so you can just say I want to use RFC 1952 as a library with a prefix cozy but the things that I specifically import should be in my namespace and and not just in cozy namespace so in this case they are in both namespaces and the the final"
  },
  {
    "startTime": "00:12:01",
    "text": "thing is the ability to do some of this from the command line so if you actually don't want to to write up a file that that contains the cddl uh that has the import statement then you can use Dash I for import or Dash capital I for include and cozy equals just means import RFC 19532 as cozy and you also can have automatically generated start rules so the S cozy dot cozy dot underscore key becomes the uh rule on the lower left of the slide so if you run this you get a result that is on on the right hand side of the slide and that's often really useful to be able to simply pull out one name from from a piece of CDL not just the library but also code that you're actually writing right now about your designing and just pull out that one rule and generate the the cddl all the CDL that is needed to to make this thing useful for validation okay that's a quick overview I wanted to to give um again for those coming later we are in the hallway part of the meeting because the actual chair is only going to come in at uh 15 30 UTC uh in in 16 minutes uh so we thought we might want to use the time here for for some discussion so is there any question or comment on what I have shown"
  },
  {
    "startTime": "00:14:12",
    "text": "yes thanks for all the hard workers so do you think this will be useful for you seems to have all the capabilities I'm used to be good with the various uh other tools with other languages great so it would be good to get the feedback from people who actually have tried to use this for something useful uh whether it solves their problems Chris so so I've um I've been trying to use this um and this isn't directly related to what you were talking about um but there's little enough conversation I think I'll I'll bring it up um one of the challenges I'm running into is actually very close to what's on your screen so you know you talk about you know you're defining cozy key right there and um you can imagine a scenario where you have uh lots of other uh drafts that are trying to Define new values for that cozy key and it seems like the right way to do this is with the cut um uh uh syntax right so you would say you know um right now you have optional two points to be stir right um it would be more correct to say to use the cut notification for two to be stir um but I run into composability problems"
  },
  {
    "startTime": "00:16:02",
    "text": "there where it's hard to refer to another uh uh another area uh it's not as clear as I would like to like it to be how to define new uh keys and values for an existing object um and maybe that's worth thinking about yeah yeah definitely that that is something that most of us have experienced and uh we we currently use crutches like this uh star cozy label Arrow Cosi videos um but that of course doesn't allow us to to specify what what exactly that is uh so of course it was nes is not what you want to have so composing a map out of uh different Library sources that's definitely something that that we are not supporting very well at this point yeah and and you're right this works fine as a workaround um it just feels like there might be a clearer solution at some point well the the solution that most people who are building larger things are using right now is to actually use a socket in place of cozy label error cozy values and have things add to that socket now that's something that my implementation of the cdo2 functionality doesn't fully support yet so that's the one big to do I have on my list to do a socket um the the reason I haven't shown a socket here is that I was just using RFC"
  },
  {
    "startTime": "00:18:02",
    "text": "convenient library that that everyone probably knows a little bit about so uh RC 1952 doesn't have that that socket convention in it I could have used something like current or crossword or one of the complicated specifications uh for for that so I think that that's a very good comment and and definitely something we should be working on thanks what have you specifically been trying to put together so the uh this one is actually uh work outside the uh ietf but we're working with the uh uh CT the CTA to develop a common access token and that access token is built on uh cwts and we are attempting to uh we're gonna as part of the specification we're going to Define all of the seaboor for uh all the Cozy elements um and for some of them we can just reference the other specifications that Define them um and then for other ones uh we have to Define them ourselves uh which was another thing that is a little bit odd in the specification is that there are a lot of uh there are a lot of these elements that are not already defined in cbdl but are defined in Pros um but in order to have a complete cdvl document that could be validated we effectively have to provide um cdvl um uh"
  },
  {
    "startTime": "00:20:01",
    "text": "for uh things that are defined in other documents and that feels weird but yeah it's also it's also reasonably doable uh you can stick it in an appendix and it's useful so what what uh um I've started putting together is a draft called RFC cddl models which is essentially pulling in those models from the the various rfcs that already have published cddl and it's not complete at this point in time but it's just the start and uh it kind of make them more integratable by by removing things that are examples adding things like these sockets I I have talked about so the the objective of this the draft is to essentially build a collection of referenceable models that that work better for integrating uh them with with models that use these models so that's maybe something that that we want to pay a little bit more attention uh to so if you have any any RFC based models where you're already starting to to add the the uh write connections um I would definitely be interested in getting those as uh input for this RFC for this draft certainly I'll take a look at it trying to see if on this list if you have um uh uh there's a draft out there that has that's collecting all of the uh uh"
  },
  {
    "startTime": "00:22:01",
    "text": "definitions for commonly used things that includes the Alternatives format um uh where is that in development let's dot cddl that's just C4 yeah um let me pull up the draft um it's the one with Alternatives in it well I stopped sharing my screen so you can use oh it's notable tags there we go yeah I mean just yeah uh Noble tax is an expired draft at the moment I was just wondering if the uh plan was to uh uh continue work on it definitely and I think the the idea to make sure that we have uh referenceable City day wherever that makes sense for uh one of these drafts that that's a great that's great input um the so one of the things I run in uh one of the things I have observed is odd and you could tell me to uh stop talking uh if if we have the right people uh to begin the meeting proper but one of the things I'm finding that's a little bit odd is that in seaboor we have a number of um uh registrations that register things that are defined in drafts um and it makes it confusing in terms of uh implementation uh and the ability to use those in other drafts because the"
  },
  {
    "startTime": "00:24:00",
    "text": "registration of something even in a draft suggests that you shouldn't register another thing that's almost identical right um you can if you can use the registration you should keep with that so let me just give an example how we dealt with that recently um that there has been uh tag 38 around for for almost a decade no that tells you how to provide language tag information uh with some some zero text string and that that was essentially just a GitHub repo it wasn't even an internet draft that defined that thing and recently we needed that uh in an RFC in the concise problem details uh document RFC 9290 and we found that we actually have to extend this a little bit uh because the the original work didn't address directionality so right to left left to right so we asked the the original registrant whether we could pull his registration in uh to this RFC which we have done so this is maybe the the high maintenance end of that Spectrum but that's something you can do uh of course if the original registrant has has vanished our storage cooperating that that's uh maybe a bit worse but uh yeah depending on on the license you might simply be able to copy that that thing or reference the notable tags draft but yes it's we don't really have a good way in the iotf to reference registered components as a normative part of the specification"
  },
  {
    "startTime": "00:26:03",
    "text": "and yeah to handle those as down ref type things each time we do it which is maybe the best we can do I don't know yeah like like if if it's a lot the the registry for C board is a lot lower uh friction and I think that's a good thing on average on the whole for participation um but it definitely does have uh have some other uh have some reusability impacts yeah so what what I try to start with the notable tags work and I wish I had been able to put more time into that is to have something like an on-ramp where where we continue to to make them more interesting uh more useful more reusable Tech definitions more accessible and explain for instance explain their their area of application which the original registrations often don't uh and that would be something that that we could move forward one question here is of course uh is this something the working group should control or is this something that that actually works best as an individual uh draft because you can be much more opinionated individual draft yeah it's a good question and it'll it would depend on the uh tag uh the one that I'm running into the problem with I send an email to the to the list and I'll follow up at some point the uh is the um it's the uh"
  },
  {
    "startTime": "00:28:01",
    "text": "coordinate reference system tag um [Music] have you done anything to actually find the the original registrant yeah I've sent them an email that's that's about all I've got um the I I send them an email before I send an email to the list to see if I can talk to them um but I have received no response I was hoping kind of the put the posting on the list would uh result in the original registrant uh uh popping up because it was registered originally as a draft intended to the attention of the working group so yeah so um I think I replied to that that we maybe should make a little bit more attempt to find the original registrant but if that doesn't work we can still use his work as as input for a new draft um and uh yeah the the interesting thing about the CIS thing itself is that it is pulling in a standard from an entirely different universe that has its own representation from it uh and so on oh yeah oh yeah no it one of the things that we're doing on a number of places with this uh token that I'm working on elsewhere is that the there's a ton of pulling in additional work from different groups and kind of putting it together so that nobody's Reinventing the wheel yeah that's good stuff yeah let let's try to work on the CIS uh thing uh I think it would be good to to"
  },
  {
    "startTime": "00:30:00",
    "text": "have a community of people work on this and not just the singer author but we should try to find find him first um and and only steal this work when when we have to give up on that good I think we have uh 15 30. and I see Christian yes I'm here um thanks thanks for keeping things running here so far um is there is there anything that you you know I've owned I'm still only skimming through the nose is there anything that you would like to wrap up on those topics or is or are there outcomes that we can that we can go through in in the next half hour anyway well we had some some uh useful uh feedback on on the example so I showed the examples from from these uh slides starting with slide three um but we probably should discuss the the working group view of this as well uh so I think we have recorded those feedback items uh in the notes I'm not sure we have to to revisit them well probably not so um thing things that have been discussed now are basically cddl to all basically the cdl2 roadmap yes but Chris has made several points that are kind of uh tributaries to this stream and uh I think it's good to be remembered to be reminded that we actually have to address these other issues as well um so uh for instance the the composability of maps was one of the uh items uh we discussed and the fact that we have um easy registration for"
  },
  {
    "startTime": "00:32:02",
    "text": "uh things like tags but then it's not always clear how this is further evolved yeah so both are not in the current serial 2 plan that I was going to present sounds like cdl2 is getting better I hope foreign so um basically picking picking up here in the middle um and and going through agenda items um quite quite frankly um can you just continue can you just continue where where you left off because yeah let's let's go through the agenda quickly because there is one item there time tag that I would like to quickly talk about and then we can go back to the CDL too um so the the problem with time tag is uh we we have a pretty complete document from my point of view uh we have one problem that came up in the discussion uh half an hour ago um which is that the cddl inside this document isn't as complete as it could be so the the that's half solved right now but it's only half solved but the more interesting thing we are stuck on is that uh the this is supposed to be in a cluster with a seedage uh worked and that has been submitted to to the isg uh quite a few months ago and it's not quite clear how this is moving forward um so we cannot well we can just submit"
  },
  {
    "startTime": "00:34:01",
    "text": "our work and and let the isg figured out but um maybe it's better to to actually work on this in the working group until we fully understand what will happen with sedate so that that's at least slowing me down at some point we have may have to give up on on waiting for that but uh not sure we are quite there yet are there any documents that are whose progress is blocked on on Time tag um there are several proposals for such documents so of course the next thing after a Time tag is that you want to have something like designed timestamps uh so that that's interesting for Reds for instance um but I I cannot fully answer that question it would be nice if Hank could be here but Hank and Thomas uh in some other meeting right now so um they have a standing conflict with our regular interim at a time that's maybe something we can discuss at iitf116 which means that I put time tag down on the agenda yes please for ITF 116. yes okay that's a good status as far as I'm concerned yeah I'm keeping it here won't do any harm especially if the direction forward is unclear so yeah we can we can still Advance we should still manage to advance things quickly if there if a pressing need arises yeah I mean if if nothing gets done on the sedate side we just throw"
  },
  {
    "startTime": "00:36:01",
    "text": "out the sedate extensions that are in this draft and do another draft with a sedate extensions weapon that is getting computed which would also mean that part-time timestamps could use the first draft already or do they yeah they also need properties from the data probably not initially they probably don't need to be able to indicate the design time stamp is on the Hebrew calendar okay was that the thing that you wanted to mention on on Time tag yes because if so let's continue with cgl2 yeah so we we had several interim meetings with with segments about cdl2 and to me it seems we we are converging on a pretty well defined plan what we want to achieve in this year and and maybe even in early 2024 so let me quickly talk about this plan and then then we can uh use the the old adage that no plan survives the first contact with the well enemy doesn't apply here but with the real world or something um so um in the city day 2 draft document we have a number of grammar fix some of these router fixes um some of these are genuine emissions in the original uh 38 syntax the non-literal tags are the Omission we should be addressing now because we"
  },
  {
    "startTime": "00:38:00",
    "text": "understand it and there is another very simple change which allows empty files because it's useful to be able to use empty files in the CDD I do um environment so that that could be extracted from the draft and um of course we probably need to do a little bit more checking on this but it should be easy to get this ship before ietf 117. so um in particular the non-literal tags turn out to be pretty important at this point in time and since we understand how this needs to be done um I I think it would be good to bundle this up with your router fixes and and the empty files thing so that's something that I would call CDL 1.1 because it's not not sweeping changes it's just fixes and and things we forgot to to do in the uh original cddl so uh yeah let's do them now um in parallel to that we also have this defined extension Point control operators and the more control uh draft defines a few more control operators that turned out to be useful in in various work where we are interacting with other um data representations uh so for instance being able to say that that something is encoded as a base64 text string is useful and we are right now getting feedback from people who want to use this so that's also something that is already implemented in"
  },
  {
    "startTime": "00:40:00",
    "text": "in the way that that it's in the draft but probably will get a little bit of additional feedback before we can Define this so this is um I mean everybody can Define control operations this is a registry but having a few more that are a little bit more official and uh tailored to be used in in specifications in the IHF is useful so I would uh try to get this into a bundle with grammar uh fixes uh and yeah there's precedent for that we already did 91.65 um as another set of control operators and this would just be the second uh document in that series so that that's short term and I like to call this CDA 1.1 uh because it's not really not not changing much then we have uh the of the CDI 2.0 discussion we have the modules discussion and uh at the start of the hallway part of this meeting I showed a few slides with examples uh how this module stuff looks like at the moment um so the the feedback has been generally positive although it's clear that there are things in cddl that that would benefit from more composability as well so I would expect that we will need a little bit longer to finish that uh than the the grammar fixes and control operators part but we should be done before ietf well before IDF 118 I think um again it's it's implemented we have a draft so it's we are not no longer in"
  },
  {
    "startTime": "00:42:00",
    "text": "the um finding out what we actually want to do phase we we are in the actually doing it phase so that would be the Serie A 2.0 part and then um of the various things that are left in the freezer and and the CD Electro draft document the next item uh quite obviously are annotations and ways of using annotations and that's something where we we all have wild ideas but I think we haven't really started to to bring our wide ideas together and and uh see what we can do with that and whether that's useful and so on so annotations is not a new idea of course relax and G has annotations so so um that that's kind of a minimal uh backstop uh we can have um if we we don't have any good ideas we just steal the relax NG annotations and that would be section three of the cdl2 draft and of course one of the annotations that we want to have is uh being able to put in co-occurrence constraints like schematron provides them via annotations to relax NG but uh yeah of course not for XML but for for uh Jason Siva like data and uh I mentioned that the Json path is producing something that might go into that as well so that that would flow together then so this is the the roadmap I have in mind for the main line and let me quickly show The Not So main line a part"
  },
  {
    "startTime": "00:44:02",
    "text": "um we probably want to get some interability and Tool integration and there is a section in the freezer document that shows a CDL and Json format and we probably want to agree on that I mean this is this is not not for the actual interchange of of the data that are described by Citadel but it's for interchange of CDL between tools and that is uh useful if we can agree on on the right way to do this so um cdisc already defined such a format and I think this can be improved on and uh but it's something that that will naturally fall out of the implementation work so I would expect that we will have that together with cddl 2.0 and should just decide to actually write this up and I'm putting the the letter I here for informational because it that's not really something that that we need to standardize but it's still something we want to agree on um the second item is uh collecting cddl models from rfcs uh so the the uh serial C tool comes with a collection of models from existing rfcs which isn't complete but it's a start I think some some 20 uh CDA models are in there um and uh we we probably want to make them available in a way that we actually can reference them right thank you um you know the the gang guys have this thing gang catalog.org are you familiar"
  },
  {
    "startTime": "00:46:01",
    "text": "with it yes okay so I wonder if we should be thinking about ccdl catalog.org wouldn't that provide an infrastructure for other stos as well as the iitf to provide those modules in a way that everybody can find them it's just a brainstorm well I have an answer for that but maybe other people have an opinion on that as well foreign closely cooperating with the iitf but it's really an independent organization that just does things that are extremely useful for the igf and vice versa well that's not 100 true because it's run by the iitf tools team uh and the ietf loc funded so it's not great I recognize that both statements are true correct correct so just provided the other side of the coin yeah but but still um we would probably need to think about uh how this this CDI catalog would work in in such a way that it can be as useful as the catalog.org without being entirely dominated by iitf processes"
  },
  {
    "startTime": "00:48:01",
    "text": "indeed in fact uh in fact Yang catalog went through a struggle with that uh for a little while uh but came to a place that ietf and IEEE 802 are now both comfortable in all the IPR stuff has been sorted out great so we can learn a lot there yes exactly what I was thinking yeah so I I think that that putting this on on the list is something we want to achieve is is definitely a good idea um I'm not sure that this makes the the draft I was talking about uh Superfluous because uh the the serial models draft would would essentially be referenceable in iitf and other SEO documents I'm not sure whether we would achieve that with a CDA catalog .org so there would be some work that that brings the the models that have been defined in the last six or seven years up to to a level that they are easily referenceable so it's not just saving these modules models in a a repository but it's really about making sure that we good can get a good reusability uh out of them great but that's a useful observation okay so the the two eyes here are pretty important from my point of view that there are three more items that I would think are useful but uh maybe a little bit more on the back burner uh one is the literals"
  },
  {
    "startTime": "00:50:02",
    "text": "issue application specific literals so sometimes you want to write something into a cdda document that that is a really tedious to write in in sibo diagnostic notation or in in the CDL equivalent of that and it would be nice to to have a notation for that and there is a separate draft already that has similar ideas for the extended diagnostic notation that that's part of sibo um so we probably want to bring this together um in a way and and see what what we can put there so the point here of course would be to have that in an extensible way you would be able to register a prefix for these things and uh so somebody like something like the CRI um document draft IDF call href could simply Define a way to annotate Cris that is looks better on whiteboards than than the fully rolled out uh sibo for that um so at some point cdda tool should should be able to to consume these literates um number four is an attempt to write up how a useful process how we actually deal with numbers out of number spaces that Ayana actually has to allocate during the development of drafts so if you haven't seen that document that would be great if you have a look at it and and comment on it um this doesn't even have to be published as an RFC but it's it's has already turned out to be useful to appoint other people uh to as a way of"
  },
  {
    "startTime": "00:52:02",
    "text": "of solving that problem so that an internet drafters look like it's it's squatting on on uh numbers and finally um I know that's probably not that important for ietf uh documents but there are so many things that are done in CSV and comma separated variables common separated values tables and cddl is extremely useful for those um so I wrote this up at some point and I don't know whether we we as a working group are interested in this I I would be interested in feedback whether people consider this uh useful so just for fun I took the core Sid format and defined um which is done in in Json using Ying model and I did a CSV version of that and actually provided the CDA for that CSV version and well you can put this stuff into Excel so it's it's really great to use during development is that a feature or a bug I think it's a feature more seriously um we are approaching approaching the end of it of the time um that DC board block is that something you want to spend many words on because if so will we might aren't here okay right so this is just this is merely pointers and then we'll just need a minute or two for the agenda items because I think that will be a very short one okay let me just quickly say it's really fun to look on at the YouTube presentation the YouTube presentation on DC board um I rarely look at YouTube"
  },
  {
    "startTime": "00:54:02",
    "text": "presentations that I can essentially check off almost all slides off there's one slide where I would have comments on but everything else is really nice or send this presentation to other people who are trying to understand why people are using a c boy and watch what way they are using it that's pretty good anyway so um yeah any any comments on the CSV thing foreign I have a comment but on draft numbers so I read version 0 of the draft thanks for writing it um I was wondering and there's also in the mailing list um you consider especially receiver maps to give examples and you focus on the identifiers used for the map keys but can the same approach be used also for the map values yeah so so you mean essentially what are enorms in other documents in other languages well the value of the map item can also be made up in the document and waiting for registration and that's probably more tricky to phrase in a dynamic way that can be replaced later on okay but I try to elaborate that in in the mail I sent on in the list anyway yeah so this is still on my list of drafts I want to revise once before the the cut off I look at that that's a very good point oops okay so now now I would like to to um ask uh whether the the mainline plan plus uh augmented by the information what we are not doing in the main line"
  },
  {
    "startTime": "00:56:01",
    "text": "because we are doing in these other documents um whether that that looks like a good way forward of course we can can refine this plan at any point in time but it would be good to know whether that is something we want to go forward on yeah that's a question for everyone yes IRA I wanted to ask um is cddl 2.5 really cddl 2.5 a second RFC and document or is it um work in 2024 on a cddl 2.0 that is not published until foreign well how we use these numbers uh is up to us what I wanted to say on this slide is that I think we can get the modules stuff done before we get The annotation stuff done right I may be pleasantly surprised but this is my current working assumption what I was really wondering was whether we were going to move towards an RFC at this year for cddl 2.0 yes yes okay we may not call it cd9 2.0 we've may call it a module system for CDL or something but yes people need this people are starting to use it so we should finish"
  },
  {
    "startTime": "00:58:00",
    "text": "that quickly that was my question not just for IDF work but some other in gcg and elsewhere there was a positive comment on the chat as well so yep looks like looks like a good roadmap to continue on great oh now the one of the disabled people is coming in we have 50 seconds left hello so um may have had a time zone problem there yep let's pre I suggest we briefly wrap up the things that we can kind of officially do and we can then still use the time that the room is open if people are still around to at least coordinate a bit further um on the agenda um for for the ipf 160 because that is something that we need to that we should get a good grasp on uh today uh time tag already has a good slot there um cddl2 will as I understand this roadmap need both uh some some general"
  },
  {
    "startTime": "01:00:01",
    "text": "talking time about the directions and sometimes for individual documents um custom do you have preferences which one you would like to are there something are there concrete ones that you want to prioritize in presenting yeah I think the the grammar fixes and the control operators we can do on the mailing list so unless we we run into a major discussion point there this this should probably just be just be a dissemination thing and we probably should focus on the modules part and we definitely won't have good input for the annotations yet so the the first three items on the slide we are looking at I think should go on 116. possibly with some of the next slide but the first three other ones where we really want to make progress so obviously for all three working group adoption is is uh necessary Next Step and yeah I leave it to the chairs to decide how we are going to do this I'll definitely take them in with the goal of working group adoption the the outcome will be basically um be a result of 116. good and for for the second slide yeah I think well maybe the draft numbers thing is is worth some some discussion um but I think the others are really items that can be done very well on the mailing list and in future entrance a draft number sounds like something that might that might be interesting also to a broader art"
  },
  {
    "startTime": "01:02:01",
    "text": "um yeah audience yeah maybe maybe we should make a point to emphasize that in when sending out the agenda that's good that I think we're a bit over time and done with the um with the agenda points um so I'd like to conclude the official part of the meeting um but also welcome world first joined us um did you was was there an issue with the time zones um would you um would you present um were you coming here to talk about um DC board um hello um yeah hello good morning our good morning here where I am uh yes well I don't apparently there was some miscommunication about the times or time zones um and uh I was expecting it to be at 7 30 a.m Pacific time um and I apparently didn't get the link in time as well so um you know I'm happy to either answer any questions people have if they have time and want to stick around for that uh I think we are planning on coming to the next uh IET uh general meeting at that point we're just about to publish the uh internet draft for uh our recommendations and practices for uh discernments at seabor and uh so you know I'm I'm at your service if uh if you have any initial questions I can also post the link to the uh to the editor's draft on GitHub docs if you like right now but it will be up as an internet draft on data tracker shortly given that shortly means um by by the start of next week um I think that would be a good starting"
  },
  {
    "startTime": "01:04:00",
    "text": "point um seeing that people are not leaving yet um and frankly I haven't managed to follow the discussion could you give like while people are still here just a brief intro to what you're doing and what the goals are yeah so um obviously uh well blockchain Commons I'm the lead researcher for blockchain Commons uh is a non-profit uh working in as it suggests the name suggests in the blockchain space uh we're trying to help uh um wallet developers but also other kinds of developers who work with uh either um cryptography or secure kinds of documents um uh not have to reinvent the wheel in a lot of cases um and uh the stack of Technologies we've been developing which is entirely open source uh you know we've often had the need to serialize various kinds of data and we want to do it in a very kind of stable way because when we're talking about possibly hashing uh and uh or even things like signing or encrypting um you know the actual stability of the data is very important especially if there's going to be many people who are verifying documents or in the case of our Guardian envelope standard or proposed um that uh you know even like the user can aligned parts of the document and that relies on a Merkle tree uh that's uh baked into the document and uh and so you know we uh as we're developing these things we've done a number of uh seaboar um structures that we've published on our GitHub repellent on our research repo and then when we developed recording envelope we decided that okay we need to make sure that the the binary level that we're basing this on is very stable and so we not only receivable but we started to zoom in on the uh deterministic aspect of Seymour and"
  },
  {
    "startTime": "01:06:00",
    "text": "as we started looking for um because obviously we'd like people to you know adopt these structures we wanted to make it so that and as an engineer for over 40 years I personally you know want apis and structures and so on that are inviting in easy to use and some of the Alternatives in the space like Jason LD and so on are um in you know just in my humble opinion a bit of a mess and very hard to approach in many ways and I wanted it was easier to approach both on an API level as well as uh the actual um structure that and you know so seabor was an obvious choice uh actually it took us a little research to decide that SeaWorld was throughout his choice but we landed on that and but the um deterministic specification did have a number of loose ends to it that we realized we would like to kind of tighten up and um so we actually implemented we have a rust and a swift implementation of our deterministic sea war uh and then we realized okay well we definitely need to document this and so that has become our our uh internet draft that we'll actually probably be published as a zero zero within an hour um and mostly it's about um things like uh um it's a it's both it's it's a set of requirements primarily for uh for codex uh for C War um both in terms of uh things that DC bore codex must Implement uh and also a suggested set of best practices for C uh implementers it's not actually a replacement or a different dialect of Seaboard itself and uh everything that conforms to DC board is decodable is straight Seaboard not everything that is encoded in Seaboard is validatable as DC War um for instance um you know obviously Seaboard allows out of order map Keys whereas we require map keys to be in order and we want to put as much burden on the actual codec"
  },
  {
    "startTime": "01:08:00",
    "text": "and remove as much burden as possible from the engineer working with the API so um so there's certain things that we are requiring the codec to do uh that is DC more compliant and other things that we're we are admonishing the developers to do because the codec can't do them but that's both the both of those are in the internet draft um you know with that said I'd be happy to you know answer other questions or go in other directions if you wish science that was a great quick overview I think so iPhone iPod will have to digest that in order to for raise any questions but those those around whom might who are quicker than me or might have experience okay yep yep it does encourage readings and draft yep within an hour and the YouTube videos as I said while you weren't there I mentioned that I looked at one of your YouTube videos and this must have been one of the few YouTube videos in my life that I watched and could have signed every slide except for one wow thanks thank you I'm I'm flattered um yeah the the right our blockchain Commons YouTube channel does have a number of videos up uh on both in our Technologies and the various technological choices we've been making and our motivations for those and you know and I always want to make sure that we're you know we're building on the best of of what already exists and inventing as little as possible but when we do we want to make sure our motivations for our inventions and and new proposals are clear thank you seeing no further questions being raised I think we can call it they thank you Carson and thank you thank you Marco for taking minutes especially when I was not yet here and see you all"
  },
  {
    "startTime": "01:10:01",
    "text": "either physically or remotely in Yokohama thank you bye"
  }
]
