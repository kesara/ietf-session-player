[
  {
    "startTime": "00:00:20",
    "text": "Okay. Well, welcome, everybody. It is one o'clock here in Japan. So we're gonna get started. So so reminder the session is being recorded. So if you don't want to be recorded, don't to video on and don't say anything. Ever, please note well, the note twelve, hopefully this stage in the week in this stage our it Career we understand the rules around participation here. If you don't you can go and go and read up on this. And obviously abide by the standard rules up on that. Be nice be kind be productive. And and we'll all get along just fine. So for folks online, obviously, you're already already online. So presumably achieve this already. For people in the room ideally make sure you join with the on site tool in in Mit just easier, simple bandwidth doesn't have the the video and stuff on it. If you can't for any reason join the light client in the room, please do sign the blue sheets because the way that we take attendance through the Echo record. So ideally, Please join the on tool, and everything's done for you. But if you can't do that for some reason, There's a Q code outside the door. And if you could scan that, that'd be much appreciated. And remember to wear your mask unless you are the active speaker at the front. I guess I could take mine off if I wanted but Yeah. If you're actually presenting up here,"
  },
  {
    "startTime": "00:02:01",
    "text": "They worries. But if you're in the audience, please, please do keep your mask on So got a bunch of resources for skit here at one sixteen. They take the usual form and they're available in the usual place on data tracker. But if you're not familiar with the day locations or the session, locations there's some notes here and you can pick these up from the page. So the minutes there will be available. Forever, essentially and the meeting materials, so these slides and the slides that are gonna be presented by the presenters all up on the Skip one sixteen. Meeting. Meeting site, so you can go back check these. Get them later. And if anything isn't there, we have questions, you can always email me or johannes. And we'll we'll help you out. So, yeah, prettiest slide in my deck. Han is already taking some notes it's always great to have a second collaborative note taker Do we have a volunteer the big payoff apart from great pride and prestige in being a note taker Is you do get to have cute hedgehog on your screen permanently. In the corner I say have a a second note taker to help palace. Anybody. Okay, kaye. Thank you very much, kay. And experience note I realized. Thank you. Thank you very much. Good. So quick. Updates state of the state of the Union, obviously, last we didn't have any adopted work items, so it was a very new group Now we've adopted two. So we've got the the architecture And I make the note here that includes the security model because course, one of our required deliverables from the charter exercise was to have security model included somewhere and it's included in the architecture."
  },
  {
    "startTime": "00:04:00",
    "text": "There's been a lot of work on that. And also a use case specific use cases document So starting with the initial focus on software supply chain. Which presumably will be expanded out later. But for now we've adopted just this one. To really make sure we got something out. And both of these, hopefully will break the kind of chicken and egg that we've been having those of you who've attended the Interim meetings. We had a lot of discussion about discussions and we expand a lot of words talking about words. And at some point, you've got work workout which of these discussions are actually important. And so we figure by doing the architecture first, that will at least tell us which things we need to talk about. And then what what names we give to them and stuff, we can we can then have discussion in context and know really what we're doing. So yeah, we have had a lot of terminology discussions. We have a lot of overlap for those of you who are not regulars in Skit. We have quite a lot of overlap with other groups with, you know, Cozy and Sea and various other security teams. And everybody has subtly different language that they like to understand the new. So Hopefully, we'll break that chicken egg issue. To which end, we've done a lot of work since one and fifteen, we have almost weekly interim meetings which appreciate it's quite a marathon on for some people, but it's really helpful for getting the work done. We've had on the the github on the official adopted work items not to mention the unofficial ones. Forty four issues raised and eight closed which if you're writing software, that doesn't seem like a great progress, but for for spec writing, it's pretty decent. And seventeen P on those issues of which thirteen are emerged. So good fast response. So do pay attention to the work that's been done here and the updates on the architecture, because it's quite a lot of progress."
  },
  {
    "startTime": "00:06:00",
    "text": "Since last time. And just in time Hannah says got his his hand up so I was about to finish so, yes, Hannah go ahead. Yeah. I just wanted to add that we are going to set up the dual point to check for dates of further weekly or bi weekly meetings to depending on what the group likes we had that discussion at the last conference call, which was a week ago. But I want to to also repeat this on the mailing list to see where there any changes in preference So Yeah. Yeah. Good point. I think in general we We set the expectation of reassess at each official meeting. So that... Yeah, that be good. A good thing to do. Thank. Okay. So having had no feedbacks, the mailing list on spec hacking. I'm not gonna allow any now. But if you do have Ao b's or or spec hacking topic agenda hacking topics rather. We have a decent Ao b section at the end of this. So with no further ado. Hen if you'd like to come and remind us of our context that would be found you you may. I like how we're both color coded native I'm asking. I don't know. Can you hear? No I can hear myself. So this sounds better. Hi. I'm Hank. This is no on. And... Yeah. I... I'm I'm doing a"
  },
  {
    "startTime": "00:08:03",
    "text": "quick recap introduction where we are, the current state of slides. Next slide, please. So as I think our the chest already elaborated on this redundant apparently we updated adopted should the use case document yet. Updated adopted or adopted Ids detailed, use cases will be delivered on later. There's lot of things happened and the architecture, although it is not all visible in the update we will come to that. One of the reasons is related documents you can see below. We started with a document that was very be good stick. He only thought about our ourselves. As we wanted to build solution and then we realized. What we are doing here what we are using here is not good specific, but we are actually doing cozy work for signs microchip. So or we will elaborate on that but in a nutshell I tend to steal others people topics so... And then that is. The overview of changes next slide, please. Sometimes it takes while. Yeah. So a ton of discussions happen types slides are start. The ton of discussion has happened on something that is very unusual for the Etf. We had weekly. The only thing that comes close to this is the fortnight inter leaf meetings of car and Sea. That is very interconnected. You could almost call those weekly interim. But for starters, especially as we had"
  },
  {
    "startTime": "00:10:00",
    "text": "a lot of fresh And newcomers. People here as for coming supply chain, entities supporters there was a strong inputs on having weekly get to know this meeting. And we discussed a lot of details and all slides I think I can stop my storytelling heading now. So while way are we're working on the architecture, we touch or basically created our sales and everybody new challenges. So one of them Are pretty much introduced already. Mercury proofs are not specific to skit, and it is a challenge to create a generic emergency proof format for for cozy. Sorry. And again, I will not to content from that. But there are a lot of flavors of trees and, unfortunately, this structure homo monetization is a tad bit tricky. Then we were basically the specifying two messages and sketch, which is the older issue. Sign signature, the the the signed statement that is coming from interested supply chain entity about a product and object. Or now? And then we had those skip receipts. And so they are basically also now coming to Cozy. Because these are profiles of Sorry. Of cozy headers. I'm always mixing that now because of. And no know sometimes to me now. Cozy us are frightening to people because they are so powerful and they gives you so many options and sometimes it's actually not that frightening when you'll actually specify how to use them. But there's no standardized, no guidance it's spain our best just way how to guide implement us. How to use"
  },
  {
    "startTime": "00:12:01",
    "text": "because they envelope, and that is now another challenge we brought to Cozy. We pulled but in big word, we called the cozy profile, one of the first feedback was that's a bad name. Let's find out what this actually is. It's the way how to use cozy in a convenient base with that. I don't have can't make a lot of mistakes. Wanna say that when implementing it. And finally, on this slide, There's still an Api section in the architecture. And Apis are basically for how to get at the stuff that is in a a append only log. How to get the data that is made authentic and believe we are the sc architecture and these tool cozy solutions. That's not really architecture. That is a bit of architecture, but I think we want split that out. And the operations will be fueled a by use cases. And b inspired and be influenced by the message from. Because sometimes, you must include something in a generic market to prove and you have to take into account that you want to don't know. Content negotiate that. An Api level. So there will be a cross presentation another document that we will create in the very the near future about operations? Most certainly a reference Api and maybe even to standard Api but we can say that bill. Next step, please. So you bought some numbers. Some somebody brought some numbers I'm going into into a very specific number and that is number six that it was A P r talking or trying to change terminology on the architects document before It becomes the next version. He submitted with the. There were massive one hundred and thirteen individual comments that all somehow relevance. Was a lot. There was these ended up in thirty issues"
  },
  {
    "startTime": "00:14:03",
    "text": "And I wanted to highlight that a lot of value feedback was on different parts on the architecture was very separate topics. And if you're topic of interest was lost in P r sixteen. Please look at that closed P r on Github. Again, and maybe raise a own P r about that. On the document. Or create a suggestion on an existing P the very least create an issue. Any comments you make super valuable, but is that result in a loss in translation by editors. So if you can have a specific contribution a suggestion, or A p, that is very more useful even if you might not be certain about the wording that can be ironed out. But then is there something to be actually worked on by the editors meeting. We will have editors meeting and we will take care of a good ahead a whole working group fixing everything you want to have in, We will find consensus on the list but the proposals, please look at the github, but if you're also uncomfortable to get up, mailing list, we will copy new old we can do that. Next step. Yes. So I was already elaborate on and this is my last item, I want to talk about here myself Unfortunately, so I'm I'm sometimes called a terminology and enthusiasts, and I would do it too much. This case, is necessary to do hard decisions, We had to term claim used in the architecture we are using sea then C t, a claim is something tied entirely actually confusing for someone who is not used to It documents. So that got rid. We agreed on... I let's say,"
  },
  {
    "startTime": "00:16:01",
    "text": "best consensus a alternative of face? And that's signed statement that you create from a statement. Walking through that is not necessary the architecture of it explain this tool. Other people will talk about it. The thing This the design statement ends up in. The append only log. You're calling it that. Are talking a lot of trees. I've I've only talked first trees before here. Until now, but it could be a super hardened database that you give every guarantee on the world for that it will only append never. Your implementation choice. But therefore at the moment, append only log captures basically the qualities of that attention system that's building block. Sorry. But. And then if that is in there, And you got this receipt. Probably a proof. Then you can combine those. And we call that a transparent statement if those are combined. Signed statement Market to proof the unprotected had transparent statement. I think it's very important to keep these term straight, otherwise, we never know at which point in the the no. Topic your what we're talking about, and we are always confusing our ourselves so that has been solved. Everything is about artifacts from the supply chain. We understand. That is also not a good term outside the world of software use cases, everybody not working with software use cases already says an artifact is a data document. It's not my car anymore on not my wing of an airplane. There are other things. We understand that? Keeping effect for now, this will be another. Terminal me not she's one discussion, but it does not as important right now. And then I really want to highlight that there is a that there's a long and the successful alignment of"
  },
  {
    "startTime": "00:18:03",
    "text": "terminology with the rats because that's a supporting infrastructure for sc, in order to make a sketch service, the transparency service the system you build get more trustworthy it would be fueled by re components and re rolls, and and and rest there's this thing called an endorsement. It's a signed statement that a target of variation can't make about itself. So a car can tell you a lot of telemetry, but it can tell you that it's red. Has no camera pointing at itself and it can't collect that claim. That is endorsed by an external entity that is in rats. Endorsement that is basically a current state that are not coming from the tester. And these endorsements also this time my I'll do this payload, for the statements, that and this only letters us. And at the moment, we would like to call them supply chain audit results because there's a very specific issue here. That is checking the whole append only log. That's one of the main use cases is transparency that after the fact you can have someone look through all the things and find out was it actually that way? Was it did everybody do the part. And then there's an auto result. And then actually, this auditor endorse this some parts in there. That technical is also an endorsement. So there is some overlap here again. If an auditor puts a statement into a only log, the moment, we are calling that an all result. That's also a placeholder on Please stay with us here. I know not is hard. But you have to be have a stable point, we want to move on with x solution space. And I think that's my last night. Is. You k. No hands in the queue. So k, if you can coming"
  },
  {
    "startTime": "00:20:00",
    "text": "take an earned break from your note taking. Good afternoon. Thank you so much tyler. Okay. Nice. Hi everyone. So my name is Kay Williams. I am reporting on our detailed software for supply chain use cases. These were pulled together by many people in the community. The editors for this document include Hen Records holds, Bob Martin, Dick Brooks, Y Des and also Brian and I'm forgetting his last name right now from... What's that? By night from Microsoft. And and I get to do the reporting on it because I'm I'm here in person. So and I did help contribute but many people help to contribute. As you know from previous sessions, we... As we chartered git, we said that we would skip... The architecture would be payload agnostic so that it could it could carry information about any time type of supply chain artifact that we as we mentioned earlier. And we also said we would start with looking at software supply chain use cases to help us focus. What we did in the working group is we identified quite a number of use cases. There were nine of them and I have them listed here. And there there's a link to the document. Excuse me in the slides. I'm not going to go through all of the use cases there... Again, there were quite a few some of them overlap with each other. But but what I wanna call out from this slide is just the the range of"
  },
  {
    "startTime": "00:22:01",
    "text": "use cases that we consider scenarios that we considered. We looked at software. We looked at firmware. We look to add different sort of phases in this where life cycle and where information might need to be transferred and evaluated during those phases and the phases include things like assembling components from multiple suppliers. Writing code committing to a source code repository, packaging software distributing software, We looked at different distribution scenarios we looked at cases where it might be an operating system provider gathering components and then distributing as part of an operating system. From where was another distribution scenario. We looked at different environments. Things like the word I'm looking for? Air gap environments so deployment to the sort deployment scenarios deployments to air gap environments. We looked at again, part of software life cycle. We looked at the need for being able to express information about what the contents of software are. And then also as as the software is released, but additional information comes out about it over time. So capturing things like reports of vulnerabilities, mitigation to software, updates of software. So our use cases cover you know, this this full range of scenarios. So now what I'll do is tell you we'll kind talk about what a general use case a used pattern looks like. And then describe some of the the blocks for this"
  },
  {
    "startTime": "00:24:01",
    "text": "general workflow. So again, in general, We identify... We've hank talked about statements and so we're using the terminology statement to describe a document that is shared The personas is involved the two major personas in include statement issuers. They're the ones who create statements. And then statement consumers, and they're the ones that make use of the statements for a variety of purposes. And then the statements can be about we're still working on terminology here. In this slide I'm calling it they can be about objects but they could... Where an object could be a software artifact. It but it can be other things, and I'll describe what some of those other objects will be in future slides. Next slide, please. So statement issuers, these can be essentially, they're individuals or organizations or processes, anything that it creates information about artifacts in a supply chain. Some examples of these include developers, so individual developers, but also source code management systems, build systems, ci systems, the systems that do packaging of software. Systems that release software, and then other again, individuals that might provide information post release of software. So people who first party in third party do audits of software. And analysts, for example, security analysts. So these could all be statement issuers. And some of the activities that the issuers participate in include making statements about software artifacts. But also being... Or they have need to relate statements to other statements, so make a statement that associates"
  },
  {
    "startTime": "00:26:00",
    "text": "different statements. They have a need to make statements that refer or update augment or and validate other statements. So this is a relationship from statements to other other statements. And then they have a need to distribute statements. So, you know, if if I'm in one company, I make a statement, I might want to share that with all of the consumers of if it's software I'm I'll just share that with the consumers of my software. Next slide, please. Here's some examples of statements. Statements might describe who produced the software. What is contained in it? Who distributed the software, the distributor might be someone different than the person who produced it. Statements can describe assessments that were performed on the artifact. So it might be some security testing that was confirmed maybe a security analysis you know, and a design, a review security review of the diet design. Of sim software. Other statements could be about weakness vulnerabilities found in software. Possibly statements about mitigation to those vulnerabilities. Again, statements can be about corrections, updates, augmentation. To previous statements. And then statements can describe relationships. Between previous statements or between a variety of software artifacts. Next slide. Objects again, I'm using the term object here you know, we're still working on technology, but it's the the thing that the statement is made about in the case of software, it can be about any a variety of different type sub software artifacts. So source files, source code repository commits binaries, packages, containers,"
  },
  {
    "startTime": "00:28:01",
    "text": "disk images firmware where images. Other objects could be other statements. And then also Fore, we we look at cases outside of soft where so physical artifacts oh any things like build environments is could be another object of a statement group's description of the contents of the build environment itself. For processes that were followed in building software. Next slide. Okay. And then our last persona is a statement consumer. Again, these can be individuals who our processes. And some examples include integrator, suppliers, people who procure software, you know, and and need to evaluate all of the... You know, typically this happens that I at a corporate level, so someone who's evaluating all the software that's used inside of an organization. Risk managers. These could be organization or, you know, even regulatory. Auditors, analysts, and customers. And the activities that consumers statement consumers perform include sources of statements so if I'm an organization and I want to require statements from all of the suppliers of software to my organization I need to know where I can find the statements from those suppliers. I need to be able to filter the sources of statement to those that I as the consumer trust so I might not I might trust statements that are made by some reputable organization, but maybe not by you know, at some organization that I'm I'm familiar with her doesn't have any sort of credentials. I need to be able to filter and download statements"
  },
  {
    "startTime": "00:30:00",
    "text": "I need to be able to verify the authenticity and the integrity. Of the statements. And I also need to... It's it's important because of this idea that statements can up date other statements. I need to be able... I need a way to obtain new or updated statements as they become available. And let's see. So I need to be able to aggregate statements across maybe different statement providers. Because, you know, there could be the the producer of software, but then maybe some third party analyst who make statements. I need to be able to get a single view for some software. Of statements across many organizations. And then the last thing is that I want to be able to use statements very common scenarios to be able to use statements to apply some sort of policy regarding whether I will use it, you know, in the end, you use that or allow that software to make use that software allow it to be. Ingested for my use case. So that covers our software supply chain use cases, the sort of the the detailed working through the the sausage part of the process and then also our our summary of personas and the the activities that they take. Any questions? There's no one in the queue. So No. Thank you very much. Okay. Great. Thanks. Thank you. Okay. So the next part is me I'm kind of hoping if I speak loud enough. The camera will turn around to look at me because don't wanna move. Like I'm gonna have to come no it's not doing it. Okay. But just do."
  },
  {
    "startTime": "00:32:09",
    "text": "Gonna do this anyway. So folks watching remotely, you can't see my my face, but that's no bad thing slides the important part. I'm just gonna quick readout of the sort of experience from the Hack thorn. With a couple of notes the note on the screen here that most of what actually happened at the hackers on itself, was spec hacking and talking about terminology now it's working. And and things like that. But I'm only gonna talk about the code thing because Cedric and others gonna talk about what we did with with the architecture document. The other thing to notice is that I did finish off quite a bit of code during the Heck just to prove the point, but there was a lot of pre work done as well. By a bunch of other people. So this is kind of round up of of what we were trying to achieve. Which really was to show that we could have multiple implementations of what we're current planning just to make sure we're on the right track, and we're building a good architecture and a good spec that that can be practically followed. So obviously, We have to be very careful of of what we treat as true and what we treat as potential. So with no actual specs and only a couple of adopted work items we have a lot of things that we did that are kind of furniture but What we really want to show was that the sort of eight point one point two in the the contemporary version of the spec for retrieving receipts and all of the sort of interfaces and stuff was plausible in practical. And that we could actually get this. Miracle of a portable merkel tree proof into something that looked a bit like the six point one complaint format using standard C. So this is the what we're trying to do. And very importantly, we"
  },
  {
    "startTime": "00:34:03",
    "text": "were not and for some time, I suspect are not going to do anything with interoperability the payload itself. But rather the interfaces is for getting the payload. So can I trust that I have a legitimate statement from some portable supplier of skit That's a good question to ask? Am I going to provide interoperability and semantic equivalence between an s the xs form on site dx bomb. We're not. That's not a good question to ask us right now. So in short, what do we do? We got some decent codes done So my team did one of note I wrote a bunch of the code in the open source repository three, but the implementation in the arc product was done entirely blind by some of my software team, so I just gave them the architecture to doc. They took standard cozy documentation stuff and wrote it completely blind. Before I picked it up and amazingly actually worked. So that proves something about the quality of the that do exist in this space. Trans and or have a very kind of structurally similar looking thing for dealing with claims and receipts. Totally independent implementation. And in the middle of that, we have the open source. Scale Api emulator, which was largely worked on by Mike at which kind of guides and test interoperability. And what we had in the end is this emulator in the middle, sort of defining a neutral and and stand client. And you can register claims arrange them into feeds. You can get receipts. You can verify the offline. I'm not sure if the trends meet one can technically do offline. But you can download it run yourself can they go. Yeah. So So a pretty decent result really for for what we're trying to achieve."
  },
  {
    "startTime": "00:36:02",
    "text": "It's it's thin but important. So how does that look? How did how many participated out of curiosity. That's a great question. So our table was over flowing. We ran out of seats. So what ten eleven people, I guess at our table In terms of the code here, an awful lot of Mike but I know mike Pro also has some code there, Steve I think did some work there. Me or three of my software team. So in terms of sort of contributors, I guess, we've got a total of ten ish people riding code and ten people doing expect. With some overlap in those two tens. But Yeah. That that kind number. Nobody's nobody's mirroring, so I guess it's about right. So so what the thing looks like in this this emulator has a very simple interface where anyone can create claims, submit them, retrieve them if you've lost them. I think that's a very important point For people who are asking why do we have services? Why is there arrest to interface wise isn't it just to Pk and time stamps or because in truth people already don't enjoy storing organizing, indexing search and backing up all of their Pk nonsense. And this is only gonna get worse if we did it that way. So The retrieving piece actually is a super important bit of the filtering listing, the reliability, the a in Cia that everybody always forgets about when they go too far down the security triangle. That's what that's for. And then at the end verifying the receipt, and that can go up to any number back in. So as you say, we wanna have a standard client following the architecture that could use any implementation. So There is an emulate Cc back end. My myself David. My company built a proxy for all"
  },
  {
    "startTime": "00:38:04",
    "text": "rest services. And in principle, you could just add anything else on this super super easy to add. A slice through. And what it results in in the end kind of proof of the pudding is that you flow left to right by the time you get into the quorum D in my case, Q in trans case or Cc and the emergency doesn't matter. By the time you get to the far end, the claims are written into a merkel tree the merkel tree proofs so then transmitted back and what we ended up with was a compliant, sea receipt with the mo tree proofs in. Which are verifiable offline. The the details of that obviously, maybe people do ask a lot of questions about the centralized service and and and things all of the client piece is open source and standard. All of the verification pieces open source and standards so even on the the ark back end, you'd never need to talk to it again, but use standard sea two and pi libraries and standard. From third foundation and consensus. For for validating all that stuff. So largely proved the point. In terms of experience, go and go into the details of this, You can look at it with the magnifying glass on the slides if you download them, but just to show the kind of the rest full flows mapping one thing that I thought was really important about this is that the oc product already exists. We built this thing like five years ago. And yet, the mapping of the interface flows to what in sci is really actually quite fleet, it looks like this, this is the most complicated thing for submitting a claim and it's not surprising because they can't assigned. All of the other things are basically straight through proxies. The structures work the security holds. The flows and custody of various tokens or work. So I was very pleased with with that. The one thing that"
  },
  {
    "startTime": "00:40:01",
    "text": "isn't straightforward Is the verification piece? And as hen already noted, you're having a totally standard representation format for mercury proofs. Might be difficult. So we could have done this. But I'm I wonder if it's a conversation to be had about whether the forensic location needs to be standardized in such a such a plain where. You know, the open source code exists, let's say can be done you can hand roll your own. If we really wanna go down that line, we can but I think it would constrain things a lot. If we were to force people to have a very specific signal merkel three format. Personally go with my chair hat on or off, I don't care the only products based on merkel trees so I'm perfectly happy, but I think there's a lot of scope for other companies and other implementations that don't use those structures who would otherwise be perfectly legitimate providers of skit. That would that maybe be frozen out. So I wonder if that's the thing we need to consider. So takeaways sort of successes, slightly less successes. I think it was a great the great thing. So my team did the hard work in the back end blind from me doing the fun work in the front end and it almost perfectly lined up first time, which is a a good testament to the work that's in the the architecture, and, of course, all of the existing shoulders of giant stuff from Cozy and Sea that that we're relying on that's all great. We broadly demonstrated the practicality the interface flows interestingly one of the things that was the hardest and the most uncomfortable for me in in doing the implementation was about how the client counters signs things and it turned out well in parallel the guys working on the architectures just back and the thinking also came to the same conclusion. By the time I complained I get it, it was already reverted. So that was good. There is a question mark over long running operations, clearly when you're dealing with decentralized this distributed systems"
  },
  {
    "startTime": "00:42:03",
    "text": "There are all kinds of reasons, not just the obvious kind of blockchain is slow reasons, but there all kinds of reasons why it might take a while for a properly bulletproof it proof claim or even a statement to end up in reliable storage, which is kind of the point at which it's responsible to return a receipt. And you definitely don't wanna specify synchronous for blocking interfaces as necessary we're talking about systems of the speed and the scale that we're talking about. So think maybe a a little more thinking about that. But the asynchronous model that's already suggested. Already works. So, know, maybe just a matter of pressing the delete key. Could be that simple. And the note again that we really do need to have flexibility in the tree algorithm. Now. We might start with one That's quite reasonable. But I think having options to expand that in the future would be sensible. We broadly demonstrated the denver data structures are reasonable with again, one tiny note. This was the first time that the particular guys in my team at work with Cozy and Sea. They really liked it. And to be fair, one of them has been working in crypto for twenty years. So is kind of expected, but we really like the expression for truly handling the data. When it's data, it was a bit uncomfortable when it came to passing across boundaries. And and in reality, we're gonna be passing across a lot of boundaries with code or various quality and reliability. So we opted to kind of hard in that by turning it into base sixty four and Json for the kind of big interface. Passing, and I think it's worth considering that Yeah. Otherwise, yeah. We we don't wanna make this hard to write and hard to maintain because people went it. That's a thing thought. And... Yeah. Otherwise, those were the two sort of big big issues. Otherwise, the interoperability of the interface is data structures"
  },
  {
    "startTime": "00:44:02",
    "text": "all seem to work. They're all compatible with themselves, the sea that spat out by my implementation looks the same as the stuff assumed by the trans one. Didn't have to modify the emulate client at all to to work with our implementation. So by and large, accepting that idea that we we don't want to standardized the payload themselves. I think that's impossible. We'd never get published. I think it was a a great exercise. And I think it proves that we're on a good track with the with the architecture. So all in all, pretty decent Tennis. You are in the queue. Can you say a what about the counter assigning problems that you ran into? Yeah. There were a couple. One... Yeah, a of different sorts. So There in the group, we have a lot of discussion about identity And I think when those discussions come up. It would be really useful to reset. Maybe we should have a standard s lead with a diode gram on it. With the various principal actors. Shown because invariably the discussions kind of blur multiple different identities together. And then they blur those identities with the credential that are used to represent those identities and Api flows and neither of those is a good way to resolve a technical problem. So so one of them was simply during the the blind exercise with this my guys writing stuff. We already have identities we already have relationships with identity providers, we already have oi for the of application credentials and things and stuff. You know where the claim is coming from. And so having a counter signature in the play where isn't there anymore, but at the time in the contemporary spec, also signing things that many times with a different key with a different hierarchy that you now have"
  },
  {
    "startTime": "00:46:04",
    "text": "to check actually introduces potential for error and no benefit. And so, yeah. There there were some some issues there. And then a very mundane thing, but it actually cost me the most time in in writing the emulator implementation was just a little bit of a disagreement about how to represent the the things in the C structure. So we were putting in up bit sign one envelope and the standard implementation was putting it account sign v two wrapper. And so, of course, I had marshal problems. In in there. But that as I say, by the time I thought to complain about that, gone away. So it was fine. So go, any more questions on the hack or know, we do... This is all in in Github and open and we'd be very glad for people play with it. So if you don't wanna say anything now, but you're interested, please do message me or or anybody join the Slack channel, and we'll we'll get you on board. Cool. So on to the main event then cedric. So hi I'm Silicon From. So I'm one of your thoughts of the architecture So you may your last time on. Going through the architecture. And last time you on two very important aspect of, had security expectations. And what's with. For that end up into the the architecture. The second one was"
  },
  {
    "startTime": "00:48:02",
    "text": "places where we are the policies for insurance for discussion and verification we are focusing on pretty for session. So I I don't think on to that. Again, but. I don't have merchants security What I plan to do is to the the basic of the architecture is you all directed issues that are currently considering. And also trying to discussed some of the last questions that we get about the architectural in of use scalability and functionality. To have done the the palo times. So please ask questions as we go. I I think I'm you. So for, but I'm not going to use of that so I other plenty of time for description. Next slide. So yeah the, you're also good way for her at least to me to get used to the revised, so we have three parties for the supply and producer side we have the visual well. So on the consumer side, you have the very. And let me we have those that is there to guarantee that all parties share the same completely called. Of state mounted made about the artifacts. That are going on on the supply chain. So as we the the architectural which we are claimed for saint days is meant to be generic, meaning that we don't care too much. About to add direct artifacts are. It will be software well it could be something else. And also we don't care too much about actual and need small. So as wrong as can see it as time."
  },
  {
    "startTime": "00:50:00",
    "text": "Doesn't matter too much for this guy there. What is categories that we are agree on the envelope. So and I'm going to issue those later also so that actually we know who is saying what? Along this detection. So Next slide yes. Yes. So the first product is about And the the main issue there, which we are still discussing and that at the current fleet that is not I saw architecture is the item don't. Of trials. And so we decided that this who was not about doing Pk eyes or I you don't need to in high. So although it's to for us we are they they're getting that some of s. So we are using Did. To fly long. I don't see and that's that's follow system because the transparency southeast will happen log and the issues. Meant to be ready for decades. And at that's scale, we can't expect the actual use for signing don't getting them. To have a soft. So we need this form of a good level robust. Infrastructure to at just understand then we don't want to invent something you. So we are using in case the to get there. So the main point is to pick the the payload. But as I said, we are not looking on the payload. So for hosted to in the that gets stagnant. So there is do ensure that contains the... Don't failure. Associated with the senior trial."
  },
  {
    "startTime": "00:52:01",
    "text": "That is the feeder which is aware. For the insurer to refer to the artifact. And so we had some discussion about nine and I'll just all all that is feeds for now it's still strength. So and that it's in their operation it's defined by the issue. And we may need to go beyond that we are not putting shutting there. We also have the type that's indicates payload. And finally, and that's the most open we have the session for that get those although input the that are supplied by issue and that may influence in particular input to the what discussion policy the next time. So that magic could time that might also include that to higher plans. Starting being modified data the new state answer in a being issue. Next slide. Thanks in the queue. I think it's not on Okay. So yeah. But the feet, it said it's it's... At the moment it's just string I did want to elaborate on we had side discussion all week. About the complexity of talking about products And... Yeah. We assume that currently our our working assumption becomes I think that feed is, of course, the structure identifier And maybe a very structured composite fire And how to do that? I think we become a own topic that we can really or should we soon start to discuss on the matters. Because this is how how you would talk about your the the components of your product approach product cycle, all these seats would be related."
  },
  {
    "startTime": "00:54:03",
    "text": "And that is structured through the identifier that is the feed or the topic of this case do hard that's all. That's definitely very important I guess we... It can just thing because for insurance cases, you have a format, that we may want to provide like maybe it would much in the architecture, if we said it is with a that is going to be on. Next slide. Yes. Okay. So the next step of sense, the software haul type is reggie registration. So the there that submit science that multi morphology session, so it may be particular it's quite possible that the same saying that not be so submitted multiple times are be submitted to multiple trans transparency services but they parties that's and they'll well good use cases for that. So the transparency service validates, those signs statement. Or some validation generic at, the transparency is going to trade that the issue is identified that it's at the same statement. The then there is another part policy that it depends on the under use guys. And that's main involve for example. Of the feed or with this the issue is if you talk about that. It may also involve processing policy that refer to higher claims. Play state silly. Particular transparency services and"
  },
  {
    "startTime": "00:56:01",
    "text": "as on trend explain last time it's we think there is a lot of value video in having but I stick for discussion policies because And the main argument there is that by having increasing meaningful or discussion policies we can prevent. Problems with the bad. Signs that. So by not telling them we on the problems and we don't cost confusion, we reduce the volume. So if you can that's a good thing to do. By default to otherwise you we are going to record it and you are going to order issue I couldn't the committee too so that we can blame them but but again, we don't is better than blaming if you can. The the free of that is in a skit where policy and canon do is very. So we are plenty of discussion that, but the initial goal is to first get the really join in place and then start on standardizing so. So some very good pharma for discussion policies. Like for example, and the very validation of our mode. So So So the there will be to provide support so that at least there is lot and share expectations about. Everyone you decide to use those kind of policies. We believe many important policies, possibly particularly the most interesting ones. We remain specific to particular and. Recognized my. Or, plenty of sorry please go ahead. No worries. And I think I have a microphone now. Yes. Mike Far rack here."
  },
  {
    "startTime": "00:58:01",
    "text": "It seems like opening a can of worms by saying winter registration policy should be standardized could go down a serious rat hole versus saying, how do we scribe registration policies. Maybe as a byproduct. We get a few good ones out of that. But at the minimum, we have a system, the system way of saying, you know, here are the checks, here's what they apply on, etcetera. And it could be done probably a lot more quickly in a fish recently and tested practically from an implementation side. It would also provide a way to hook in test harness actually validate interoperability around policies, which could be really important. So just thought there... Because otherwise, we could very easily go down a super rat hole of What about my weird use case, etcetera? ...Yes. So for, what we do is actually very simple. So we have this information and those parameter attached to the function that the policy and that implementation. And that's that's enough so the we can... And that's what we go to and that's when the porting does now. Yes. Exactly. Now I I think if you want to go filled out to exact not very well it's it's important that when you really fail transfer on with some audio special info you sort of know the check that most in transparency service. And so I think agreeing on the the interpretation of each of those fields at least sort simple cases, is I think something in bottom that is going to you best cloud and we are it's not something are going to close anytime. So. But I think we should keep going at the the the easy bits of those policies. I think. Yeah. Hi. This is Hank. Yeah. We there were also side discussion about cozy profile slash slash t y p plus Ct y That's a mantra. Yeah. And Having... I said are that policy languages are their own Sd seo."
  },
  {
    "startTime": "01:00:04",
    "text": "So maybe referring to them content typing them is one easy low hanging out food that that we could do. If you have to really standardized something it's like categories of what we what this is intended to do. I'm not sure they're going there. Also, what whatever I I actually raised my hand is I want to point out an interesting in the discrepancy and consistency here this box says you're sending a signed statement with the transparency service and get back a receipt And the first implementation I saw able to retrieve the signed statement. Independently. Also. So this is this is already misleading because pre roles we might need more operations than it simplified figure one. Cancel. Right? Yeah. And so that is that is why think that use cases influence operations and and effective of implementations. Yeah. Just to elaborate that. That line down there is the blocking interface that I think we shouldn't mandate. Recognize Han. Yeah a little bit similar to what hank was just seeing I think when it comes to registration policies and standardizing them, I think it would be good to make sort of, like, write something down to be a little bit clearer about we want to do here because indeed that can be quite tricky if if we want to standardized language prescribe policies and and something similar. So it would be a little bit I would postpone this to a later the phase when when we get the other stuff done. Okay. Yes for the the current, we have a general discussion of that, but pretty short. And then we have... I think three examples that space"
  },
  {
    "startTime": "01:02:04",
    "text": "So we might want to simplify that until we get a better idea of what we get want to go there. In the. Yeah. Recognized roy williams? So right, Williams. When it comes to registration policy, there's two aspects of this. We gotta kinda keep separate. One is the policy for identity providers that the ledger and it is it validating generating receipts for. And then there's the vertical configuration for each vertical itself. Like, is there an s bomb for your supply chain for physical stuff that be slightly differently. We're gonna have to deal with the first one first and have some way to carry the information to deal with future federation So we have to deal with some of the upfront. So I understand I agree with with Mike Cro, We had to come up with some some framework of how to extend it in it and carried it. I don't think we can ignore it in the short term. Okay. Slide please. Okay. So the The first step is variation and So the the main aspect I want to recall there is that although we produce seventy dollars. What, and we we make coupon that it is shared. So that definitely one is dollars. We expect very to have vastly capabilities and and willingness this to to check the details. So so in, we anticipate that most consumer all the artifact. Just going to the fatty. For to trust."
  },
  {
    "startTime": "01:04:02",
    "text": "And as long as that the once is valid. Then they like accept the artifact so genuine So some consumers in those with that the online antibiotics capabilities may check for details about in some cases and then may also apply additional local policies, which are artifact. And at the other end of the Spectrum, we have o details that are about the keep your trans transparency and so those are most loans that we cheap state and And also against the is corrected and I think something that is not regarding under the on the slide that that's became quite. Is that one class of advanced state years some ventilation cases. So if I if you have two transparency services and without that means producing constant on models. And another is regarding or depending on them. Done the flow then. It typically is an advanced one that we need to keep in a having long just if I transparent claims or check by your party is semi testing. So that's that's quite interesting. As a next at time, we We are of course, discussing takes and to access the details to to ask for claims or they should be in index so definitely be retrieved. And so far, we are been putting that as implementation specific. That of course, Having I agreeing on Apis do that is quite important on. So it's it's an active discussions so"
  },
  {
    "startTime": "01:06:00",
    "text": "have decided to very little the in the in the for that. But that's why place where we we do more use cases and of. We may want to be more explicit, what we are what we want Would Next slide. Okay. So for the rest of took a couple of themes that are coming really your funding discussions as we on good. Or has of a meeting. So one of them is scalability And of course, for that, we need good experiments and we need use cases to ready under the stronger intent. The whole discussion process is going to be that nonetheless, I wanted to summarize what we know about that today. So for, so it's not a problem goes at least follow external all that in as much as just a matter of signing and that's fully distributed. So the the the bottleneck of the architecture has to do with session. So that's where we put a lot felt trying to understand that, but button Can to minimize it. And the the way to make discussions scarce comes in pretty direction. So of them is is batch. So if you look at the details, of the format format it has been designed in such a way that you can qui you can surely sits in the batch. So you actually do not need to sign once slightly. State that you start. You can do that only if time put time in fact, some internal implementations. Only signs for one every three thousand, I ten thousand of or tons mall. So so the Bottleneck is largely if, of course, that is a head of we latency don't six. So it's that"
  },
  {
    "startTime": "01:08:04",
    "text": "long as time you signed the updated from there you can reproduce. Receipts so everything that has been already installed so far. Thank yes. Yeah. This is just a clarifying question. So when Could you give us a compelling example when this batches occur. So so that you were Want we have this letter to take into account that is okay, to have one receipt for batch. But, we you you have a receipt for allegedly saying saying state. So the seats they failed So it's the way they are produced, you can do that. In a batch. So the the poly implementation that you are using example. Does that feature and it's continue to delayed the of. Every page that you actually hiding and committing to this at which point you can. We have kept all actually that are decision to I respond to one who's waiting. Felt. So in the it's very to discussing well in fact, to issue ensure receipt soon after allowed and you have to wait a. You have professionally see twenty likely. And the time there is waiting for maybe you want a going to answer one which I think from occupation is okay but but maybe not have get details of use cases. So the second aspect of was session as a button I guess to do with volume tons. That's. So because it's, if you something you happen on log and then you lose it then it is immediately so"
  },
  {
    "startTime": "01:10:01",
    "text": "lot of there as going to making sure that we can keep the actual sign models and constant quite compact. And so the typical way to achieve that is only include the address to the actual data And so you guys giga gigabytes of, you can compute commit like shuttle five six. Then put that signal. And no you can batch thousands of segment in your single page that goes to this and you surely them at the center time. The third which promising that that we haven't explored that much yet has to do with ventilation. Being that must be proactively, don't care about the new details. Of further yet. Transparent claims fall. Software you think of a transparency, it may be that you need on claim for Ivory so that you can. By your of what is being pushed into your city as you do this, you can them and so the public replacing And in that way in multiple transparency services is that most important second what we think. It can get the sc, but but that part is easily going to be for twenty tool team is going to the aspect of the system we are building. Can we recognize he going one? In the queue? Yes, please. Yeah. Hello. International."
  },
  {
    "startTime": "01:12:00",
    "text": "Just the a single question is Normally who will be the fire? I mean, you you see in this slides the traveling party will verify the transparent claims offline. Could query you Please give it an example who will be the buyer? So the in moscow cases is the very failure will be the consumer of the artifact. So you as for the example, you receive a new driver and you verify merchandise the same way to do Signature trial. On the divert I'll be following starting it on your machine. You will verify the receipt for it before in your machine. So the... So the actual user of the artifact impact of the effects is the most common case. Google doc less very far that we are is the. Is large set of on sales to look for inconsistencies. But they on the and that'd may be few all of those. Okay. Thank you. Thank you. Micro. Yeah. Mike Parker. I was just gonna clarify that the Rp so the relying party from the verification side, it's phrase very intentionally can verify offline claims because there are a lot of those offline scenarios. There's a lot of online scenarios as well. That could be an individual. Right? That could be security researcher, it could just as well be a piece of software or multiple pieces of software, say embedded in hardware, embedded than software or a combination of boats. So there's a variety of different entities, right both virtual and physical that could be taking that role as a verify in the relying party. So yes. So. We are coming to the last aspect is the verification. And so at at sv value verification we also scale anywhere."
  },
  {
    "startTime": "01:14:00",
    "text": "As long as this are flying. So he said to repay. Mentioned that same way as you. So that's skype. Extremely anywhere. So now if you want advance or batteries. And to scenario as well offline offline moves line and things are much, and I think the main complication there is if you not want to have to have a poor audio session. But also freshness. So it's not enough to know that to drive out has been the past. You won't do that it's going driver that is recommended. But you also feel provider. And and for that, I think we need to to more probably to in states. For at least some kind of freshness with reasonably call kind of time resolution. But that's a place where if you're not get many people can verify your offline, but they will think that they need to go to the trans to check. Something well salt. And that is much worth frightening from a scalability of your product. So So freshness is definitely active ensure that we need to look into market carefully fully. Yeah. And there's let's not do Csp again. So I just wanted to make the notes as we're thinking about this in scalability, The picture here is very kind of static and linear. And we have to remember with, like, the batch and the verification and the line this in ridiculous there are basically two verification scenarios. That we need to play to at to end the scale there's an audit which happens seven years after the event you've got infinite money and infinite time to do it. End you will not go back and ask the transparency service to mark its own homework. Because you know, why would you... So offline slow manual verification receipts at that end is is good than fine. When we start talking about use cases like fed or like"
  },
  {
    "startTime": "01:16:02",
    "text": "automating the software supply chain. That verification is gonna have to happen very very quickly. Because you're making real time decisions based on verifying these things. So just a note. That we do need to support both of those at the same time. But not in invent. Schemes, multi part protocols and and and other things that benefit one and kill the other. Yep hello one and I'm Lo I'm from Huawei Technologies. And I have just one question and the call as we can see from the diagram of architecture, Is this parents that the trans transparency service is very important architecture because it can generate the receipts of the signed statement and it should be pretty fully trusted by all the stakeholders, otherwise they receipt generated cannot be trusted. Mh. And so in this case, in your design or... In the design of this drops, In what manner the trans transparency service will be organized or operated. It is in a fully manner example operated by some sand price organization. Or it is operated in a distributed manner or a federated manner. Okay. No. That's forgot question so that I Okay. I will try to give the the response that please the at least two sections in the architecture discussing that specific issue. So so in brief, they are there are two aspects there. So the designed that everyone can check what it is doing. So no detail."
  },
  {
    "startTime": "01:18:02",
    "text": "Can replay people can compare receipts. And so as soon as the transparency service. Make some mistake either because it is laptop because there is a bug. The idea is that it should be as easy as possible placebo for details and to detect that problem blame trans transparency service. So in your sense, it is a very important battery, but we minimize the cars by making it easy for everyone to verify. And to keep to keep it down. So so now her to make it trustworthy is would beside the scope of the the on architectural. But in the prototype and in the code experiment that we have there many ways to achieve that. And so when the With prototype is rely on the combination of. And the application so we'll consensus between multiple ip that duck call checking one another, and each of the Being your inside of its own. On some audio. So that's that's one way to get high confidence that is not going to, but but it's still going to Liam a missed out. So So cr about making it very easy to detect. To blame the if it starts to to Me, Alright. Okay. Thank you very much. And I think you. Agree bit so how to make the transparent service is pretty trustworthy is pretty important and maybe it just said it's it is kind out of scope of of the currents. Stand the program. Right? So I I see. So maybe we can talk about offline. Okay Thank you."
  },
  {
    "startTime": "01:20:00",
    "text": "Han point. I'll make the point, I lock the queue because we got four more slides than ten minutes. But if you have a burning desire to ask a question on this, I'll I'll open it again. I will I will post to the meeting. Okay. Okay. So I hope the next slide is less So I think that's all side of what we can you move on to the next slide? I should be able. Yeah. So in fact where we we followed a very important capability, which is ability to use of tons down two web on mountains and so we we still bit than the last address meetings and in between and so I think needs to have standard way of fell to a claim with one cell in main per. With the Ui consists of the long term identity of the transparency service where she started? Followed by your located. Local to that transparency service in that case. For for example discussion index. Into the log of that service. And last not least Mead. To the whole of the tons on same claim. So that you can use the on the location. To retrieve the full fledged constant the on lemon receipts. But then you can check that they are the one that into to. By them and comparing them to look. And there are many use cases for that and not going to delay them, but we had several examples of you won't when states want to refer to pay that or in fibrillation that becomes critical difficult to be able to do that. Security We think it's it's very important to encourage people to use as a way of sharing the information."
  },
  {
    "startTime": "01:22:01",
    "text": "Into something transparent and actually relief Know about it. So So if everyone has I fell with commitment to what has been shared. Then everyone you benefit if from when then is checking, the details of that transparent plan. If instead, you copying the including in. First however, you be fish that also so it will way advanced different batteries, Hope as hong. Of which would be the same balance statement. Next slide. So the last issue it's for that, I know it's quite confidential. So it's it's also very fresh. That's what we talk the the about the last we can. And it's the for discussion to actually produce additional. And step that information to the constant. So in the initial design, we don't do that. So because it also tells you position in the the app well. Science signal has middle difficulty, but that's it. In fact, we found many important use cases where we won't out a bit more important information that is no on yet discussion time. That I could stop all other clients. In the log and news at that time. And so we are looking for to include that data in constant. So the the next slide shows well. Yeah. Today. And so the the idea is to add this additional information that is born at was discussion time, and that is good. Discussion data something that is happened to the"
  },
  {
    "startTime": "01:24:00",
    "text": "same claim before it gets hash and so that the inclusion path covers both the initial science at plus. Do information that is selecting weapons by the balances nowadays is. And then as we before could see that covers, now that additional session data that firms a and attached to the to make it constant. Default distribution. So that's that's what I. Happy have to discuss more or. But please join discussion. Many of the issues I mentioned are being discussed as as put request to as issues as flights on list and your inputs will be super values useful. Thanks. Hank since we do have a couple of minutes, do you want to make your scalability point? I banned you from the queue for the scalability question but we have a couple minutes if you were Yeah. Okay. Fine. So thank you then thanks. And we'll go into inclusion proofs. It's incredible. Oh yeah. Han. Do you want to ask your for the list. Yep. Yeah. I think for the scalability, obviously, the the points that centric raised our our important But I'm wondering whether it's also important to think about the the distributed nature of transparency services like we discussed in the conference calls, it it may be possible that they"
  },
  {
    "startTime": "01:26:04",
    "text": "many of them out there and So if you want to verify data you obviously have to collect information from various different transparency service, but that we try also trust relationships to be in place, etcetera, etcetera. Those tend to scale not as well as For example, batch signing and sending data think that's more complicated. I found it again. Good not mine. So there was the question about trust and you were had consensus and and redundancy protocols and and and then their hot secure hardware. Secure hardware, of course, means Ihs Re w g output. And there are two interesting boxes here that that can take on roles often a tester. And the easiest, so to speak that we have on the most control is the transparency service. That can be a tester. And the funny thing is it's good store on the station results of trust. Because it's also the pen ledger. Sorry. That is nice. But in the end, I mean, every statement issue can be in the test. And and to find It's verify it could ask it's trusted transparency service. Again because they could be in done. So there's many cool ways how to combine these there's outputs from rats with boxes here. But I think we cannot demand any supply chain entity today"
  },
  {
    "startTime": "01:28:01",
    "text": "than the world will be in the test. So so that's why we're starting with our own central fee and then then we yes or. Yeah Makes sense. I couldn't help thinking when that came up as well that we should not be tempted or ask questions that try to solve ins sol social problems. And, you know, every website now has s cell on it and the ssl will verify but you still might not give them your money you don't trust the people behind it. That level of issue still still occurs here, and I recommend we not try to solve it in the group if we wanna publish something. But, yeah, as far as we can help people transparent an accountable like using reps and things. Think that is what we're gonna do in the working group Thank you, guys. So Or Cozy inclusion proofs. Awesome. So I'm more steele, and we're gonna be discussing cozy inclusion proofs. And as Hank mentioned earlier, is we're previously thought of as counter signatures, John mentioned that that was difficult to sort of wrap Well, it's difficult for everyone to understand exactly how we were gonna make that work and the receipts draft that's been withdrawn was our first attempt at that. And so what I'm gonna talk to you about today is the evolution of of that work and the parts of it that we've elevated up to be generic cozy building blocks. And how we are able to make use of these generic cozy building blocks to still get the receipt component that we need to make signed statements into transparent statements. Next slide. So we're gonna give a brief recap of, you know, what is a receipt, although at this point, I suspect you know very well what a receipt is, but a proof receipt is a proof that a sc signed statement has been successfully registered in a transparency service"
  },
  {
    "startTime": "01:30:00",
    "text": "we've talked about what registration policies are and how they can get very complex and we... There was some discussion in the in the chat about, you know, whether we should standardized registration policies and all of these details and One thing I wanna say is there's some minimal registration policy that's important to be enforced which is at minimum, we wanna verify the the issue identity. For the signed statement. Then we restore the signed statement in the append only log. Compute a merkel proof, for the signed statement And as we compute that mark proof, the structure of that penn only log may become important. In that in the construction of the Merkel route. And so you'll see more about merkel tree agility problem in the upcoming slides. But I just wanna note, you know, There are more... There's more than one a pen only log out there and there's more than one way to compute a merkel tree from any given log And so one of the the primary challenges that we've been adjusting the reason we have moved the inclusion merkel tree, the draft to Cozy is to make that generic structure valuable not just to skit. But to anyone who's having this... These issues with Mer trees. So after we have computed the the Merkel root, wanna assign the Merkel route, and include the proof to produce a receipt then we were wanna return the receipt to the submit and all of the comments about timing around that and potentially batch operations all apply here. That might be a a promise to return receipt not a synchronous return of a receipt. Next slide. So how are receipts used? Well ver verifies need only trust So there... One of the challenges is you can imagine within the"
  },
  {
    "startTime": "01:32:00",
    "text": "software supply chain ecosystem is there's a lot of different issuers. Out there. And they may be specialized issuers for just one layer very complicated software supply chain, And so if as a consumer of software you had to become aware of all of the different issuers of signed statements that could become very burdensome. So one of the benefits of receipts is that ver verifies need only trust the issue of the receipt. Not the issuers of all signed statements going into a particular artifact. And so there's a sort of a bundling of trust under a single trusted transparency service there that has some really nice scalability properties. Receipts enable offline verification, We've talked a bunch about that. And receipts are also used in federation although, I prefer not speak pretty much about that. Next slide. So this is to answer the question for anyone remaining in the room who feels that we made the wrong choice around counter signatures we had presented previously at one fifteen. I should mention I'm and I'm we're one of the authors of what has become the Cozy merkel proof draft for the cozy working group while it's not adopted about the work it's a proposal. Id But there's work that had been done before by many many folks, including Mike, who who... From Microsoft is not here, on the representations of signed statements transparent statements before in the counter for signature versions. And so there's been a lot of other contributors that have led to the place where we are today. And so I I wanna just sort of comment one more time around why did we think that counter signatures might have been the right approach originally and why is the approach that we've got today, probably a better fit as a more generic building block. So"
  },
  {
    "startTime": "01:34:03",
    "text": "get transparency services act like a kind of or electronic notary They certify the authenticity of the signed statement the issuer. And they sort of any additional registration policies that might apply to that signed statement. That's that registration info parameter. From the previous slide. On a technical level, treating it like a counter signature and metadata sort of makes sense logically allows embedding of receipts in the unprotected header. Just a sort of similar thing to counter signatures I'm leveraging the detached envelope payload forces ver verifies to compute the merkel route. So there's the structural similarities here, but Counter signatures have have a there are signatures over different content. And transparent assigned inclusion proof is a signature over Merkel root. Which in turn and ensures the integrity of all of the elements that are included in that merkel route. So what... Where is a counter signature secures a first signature. One for a signature. So that that that one to many differences is important And also it makes it we just should be careful about, you know, the how we represent the algorithm that's at play there. Because they algorithm for securing a single signature versus the algorithm for securing many signatures included in a in a log or a as a merkel tree, different algorithms and it's important that consumers and ver understand the algorithms that need to be applied in order to verify the signed inclusion proof. Next slide. So skip receipts are are cozy merkel proofs. Basically. That's that's the Tl r here. And this is a link to the draft for Cozy Merkel proofs. More cozy merkel tree proofs. This is presented to the Cozy working group yesterday,"
  },
  {
    "startTime": "01:36:04",
    "text": "And we're still refining terminology. It's very early very rough, but this is where the receipts draft has sort of gone. And it's a generic Cozy proof structure it can be used by us, but it could be used also by anyone else who has need of compact sea and Cozy compatible representations for merkel trees, merkel proof data structures and there's lots of other use cases for those scenarios. I'll talk about in a slide or two. Okay. Like recognize my. Yeah. Mike per barrack here just a quick question Or do you seek Sorry. Non Merkel you know, receipts at some point in the future or the ability to do that, like, you know, or or do you foresee that skip receipts will always be merkel tree based. That's a good question. So there was the comment about the append only log the ledger or the registry. These are all the old words that we've thrown around around this before. And the intention behind those scenarios is to have the the transparency service operator be trusted to maintain content. And merkel trees provide one crypto way of insurer that content has been maintained and providing proof that it's still being held There are other crypto structures out there like bloom filters that have been used in the certificate ecosystem space and makes me wonder, You know, are there receipt structures could use a different crypto building block. Exciting idea, but so far, we've almost mostly been focused on Merkel Tree is to seek constructions. Recognize hank."
  },
  {
    "startTime": "01:38:06",
    "text": "So the for trying to quote ras he was like, immediately asking wouldn't those proofs require vacation of the of the endpoint. That handles the tree and immediate issue your reply was But then my... Then there doesn't have to be one. There could be just the tree in its itself. In a the fire, whatever. And then then there's no service endpoint. And then Russell basically, okay. This is not a mandatory field. Apparently, Maybe it's not it's not even the standard, maybe it's the profile of that thing. And the thing is that's my point. I'm alluding to sc will profile this thing to become the received. And I think that's the point. So there will be more in a sc perceived structure then is defined in this generic one. And that is actually the point. Yep. And just one to quickly to respond to that, that was presentation to the Cozy working group And just so that you all are aware there's cases where you use a merkel tree for selective disclosure in in a you know, credential use case. Where you're in intending to prove only these claims and not choose not to do. Disclose another set of claims And then those scenarios, that those claims are not going into a database. They're not held long term. They're part of a message format. And so this draft is meant to support scenarios like that in addition to scenarios where you're using Merkel trees as part of the verifiable data system. A database system. Yes another big class of use cases where you need more than the trees. And it's where you want both integrity integrated like we do in skid. But also privacy. So they are disease where you won't"
  },
  {
    "startTime": "01:40:02",
    "text": "custom privacy properties. And so what people end up using is milk mca tree, but with more complications like on functions so It's it's essentially, like a record three except that it's could more complex structure and so privacy is a big short of complication that we have been avoiding of far. Yeah. So I had a that's a brief comment on that is, yes indeed. That's something something Else come across. Just as a sort of member of this working group asking a question of a member of the K working group. Thanks already pointed towards it. Is there any great thinking yet? Where the supportive of other things and not just of privacy preserving merkel trees, which are relatively close. So I've implemented that just by having two routes and you tie the roots together in a privacy group, and it kind works. So that's quite easy. But if we start going for tags and stuff like that. There's is just doesn't hold. So is there any thinking about whether the cozy kind of merkel proof thing or the receipt thing will be very internally to say I am a receipt and I'm this kind of proof. And then have a variable payload versus having a completely different thing. Where you have sort of Cozy miracle proof is one type of object and there's a peer object which is a dag proof and there's a peer object which is proof of moon. So I I don't... I'm not aware of specific conversations within the Cozy working group about that. And as I said, this is individual draft. That's basically a brand new and it's very you know, generic I guess the one comment would be the a signed merkel proof"
  },
  {
    "startTime": "01:42:00",
    "text": "is a signature of merkel root. And there's the protected header that's there that's also signed over. On that protected header could be used to include additional crypto material potentially. And and so there is ways to add other things there or to think of think about another envelope format that was was not Cozy sign one, but that was securing the same sea star that are gonna be that are described in the draft. So there's lots of possible ways to do that. But When you think about most of the ways that Merkel proofs are used it's usually a signature over a root and a disclosure of an inclusion proof for a given member. Or a signature over root and several members disclosed at once. And in the several members disclosed at once case you wanna make sure that there's some blinding of the leafs because there's brute force attacks on neighbors. So I think it's I think there there's there good arguments to be made that maybe you know, like, the blinding thing is is a good example of sometimes you need to add at some additional photography in order to get a new property while still using a the base Merkel Tree sort of primitives. So when I presented these this picture to, the cozy working group it was an application example, but here you've all seen lots of content about what a skip receipt is at this point, And I wanna be clear, you know, we're this... These ideas have moved to an Id idea it has not been adopted by the Cozy Working group and what I'm showing you here is sort of current. Structure that, you know, you know, John and I in our implementations during the hack on and using and it's been working, but there's lots of potential changes we could see to what a skip receipt."
  },
  {
    "startTime": "01:44:00",
    "text": "Is in the profile requirements that it might apply to assigned inclusion proof. So the the first point I wanna make is, you know, the presence of the Is field, the K field in the a field. Is a pretty standard cozy structures to folks who are familiar with Cozy sign one. The tree algorithm is the one that we're gonna spend a little bit more time talking about here I've given you a few examples of known tree algorithms And these are all three algorithms that are based mostly on that idea of, like, there is a database or a service it's maintaining these is this transparent c log or all of the signed statements that had seen. So there could also be three algorithms that are just about that message. Disclosure format. The thing that I mentioned before, but these are each services that we've seen in the wild that are used to basically produce merkel proofs that a given document is in a database, for example. And then in the unprotected header, You can see the inclusion path there's the hash, which are if you know about how merkel trees work, the hash or how you prove a leaf is included in a root. There's this extra data And that's because we're very much aware that despite how simple merkel trees are, to construct everyone who's used them has done something special with belief. And so extra data is unavoidable and extra data is tree algorithm dependent and you need to know the tree algorithm in order to know how to use the x your data to get to a leaf so that you can prove inclusion in a route. There are There's was some discussion on the cozy list when the the draft was first submitted one of the comment, Il laurie immediately thought We can make merkel trees great finally by using Cozy and sea structures in their construction"
  },
  {
    "startTime": "01:46:03",
    "text": "so perhaps we'll see in the future a tree algorithm that's specific to Cozy and see where structures and maybe extra data goes away and that one magically, or maybe extra day stays and it has some inherent cozy structure or super see more structure that's important. So then the payload section that's the Merkel route. And as as it says at the bottom, you know, we hope for this cozy Merkel proofs draft to, you know, eventually be adopted by the Cozy working group and first get to profile on... You know, on top of it. That's sort of the the the current plan of tech. Is this my last line? It is. Yeah. So it's the punch any any more comments or questions, for? Nathan thank you very much. You've actually filled out you're one minute over I started saying that you bang on time, it's fantastic. Okay. So we've reached the fun end of of the day, So if anybody knows any jokes or is a great singer. You can step up now to the open mic Otherwise, next steps from this are relatively simple As Han already said, we're going to issue a poll for appetite for all interim, I think I think it's been very beneficial to have them regularly. So, you know, a lot of work happens between meetings, which is which is the right way to do it. Also that means you need to check that regularly and have the discussions. So I think we would intend to certainly have at least bi and possibly still weekly into rooms. But the other thing to consider and vote on, of course is that"
  },
  {
    "startTime": "01:48:03",
    "text": "our current time slot is very convenient for uk in Europe, it's not greatly convenient for Asia. And so if any local delegates here or new members in the sort of Asian Asia Pacific time zone are interested in in participating, Please do make your voice is heard there, and we'll we'll look at the time zone things as well. I think both of us, both All Han have experience of running three continents three time zone. Meetings with kind of ticked up bi weekly schedules and things like that. So we're very happy to accommodate it if if there's appetite to to participate. Anything from you Does any other next steps beyond that. Of course, we would continue well, hopefully continue with the work on the architecture use case document, there are bunch of open issues in the guitar repository and I'm also would also be interested to see a show of hands for some important guest to review architecture or or use case so to actually have some interaction on the mailing list following the meeting of Let's see. Give folks a few weeks to send in some reviews That would be nice. Yeah. Certainly there's been a lot of movement and so if you're not watching, then then don't get to say afterwards. Cool. Okay. So that's good. Yeah. So in terms of work items, it's the architecture. So the use cases is they they carry on I wanted to give an opportunity as I believe is them, they may be mistaken for Roman to make any comments. No. No need. Okay. Good. So in that case, takeaways from this meeting, we said that the next steps there, I think the things to watch out for are, you know, we talk a lot about functional operations a huge amount of what goes on in the mailing list."
  },
  {
    "startTime": "01:50:02",
    "text": "In many cases, exquisite detailed descriptions of very specific scenarios. That that we want to cover. I think what's lost in that often is that we don't necessarily talk about the non functional generalized case of how quickly do we need to get what to whom which actually would cover would cover all of them. So it if you look at the the content of the things here that we all deemed to be the kind of most important things to share. An awful lot of it comes down to the performance and the scalability, the lines on the process chart, And actually, the important thing there that I think we haven't covered as well as we might do. Is to think about the non the performance expectations, the physical locations where these various roles might be taking place. And and I think yeah. We all have different experience that we can bring into that thinking and make this thing better faster to recognize roy? Thing you failed to mention, John is the interoperability between test images. We have to strike figuring out how we're gonna scale them up Yeah. So they... And that was the other thing that make sure that if you're implementing one please join the conversation of how they heck we can hook these all up and get tests so we don't do fur too much. Yeah. Yeah. For sure. Yeah. They... So the whole point of hack exercise was. And Heck. Yeah. If we if we diversion now we're gonna be gonna be in trouble. So... Yeah, I mean, I guess the the the biggest takeaway on that on that front then, is Mike queue. I don't see that anymore. Oh, okay. Yeah. So so the the biggest takeaway of all is, we are moving fast we have code based on the adopted work groups that seems to work. And obviously, we're very careful, and it's documented all over the place anything we're implementing that isn't in an official document is kind of speculative change it whatever. There's nothing concrete."
  },
  {
    "startTime": "01:52:04",
    "text": "No. There's nothing being set in concrete. But we don't make progress on things like this, any faster than actually trying it out. So if you have interest in building one of these or even just interested being a consumer and seeing how reasonably your software tools or your process tools, or document handling tools actually can assumed this stuff. Please do... Yeah, We've got Slack channels. We've got the Github repo. Please do get involved and hook up your code to the various implementations that we've got got available. Sean I wonder whether it's whether we could find maybe three persons three volunteers is to do a review of the architecture documents I think that would be used for it because specifically, if we could find someone who hasn't been in the in those weekly meetings, publicly, extremely helpful feedback to to see whether the documents are heading in the right direction with where they are gaps, whether we understand but on. Definitely. And and it's not too scary. Because I say, I I gave it blind to two software engineers and it worked. So I think it is in a good state to do that. Do we have any volunteers in the room, but we do. I have I have a question around that for volunteering Who avoids the weekly meetings just due working too much is there appetite to break or consider breaking apart some of the architecture docs, like to take the architecture doc to a little bit of a higher level identifying course sections and identify where sections of the current architecture doc maybe deserved their own draft. Because right now it is pretty un based on my last reading before this. And if if so cool, I'll jump"
  },
  {
    "startTime": "01:54:02",
    "text": "and suggestions. Otherwise, I I'm get a stay away from it. Recognize roman. High to follow on that I just want say is a processing charter does not constrain how many documents necessarily so I am flexible and what kind of if we wanna breaking it up. I would just encourage us if we do that that that does not inhibit progress on the protocol kind of specs. And then we can... In fact ensure ourselves if we breaking up that this is parallel and we're not gonna end up having the same set of people working now in many documents. And with that we've only. Yeah. They they the content is all related. So if if we did they would deal to Roy and Cedric, they're actually working on the thing. But they would have to maintain their connections, but could have separate lives, I think. The balance between that and the threat models if we break it up is a little bit of a concern. So we had to play a little bit of a dance in here. Because otherwise, it's gonna be too really. Yeah. True. We got we got two, I think Yep. Very kind gentleman at the back he's volunteered. So who who is the second person I see thomas Thank you. Who who was the second person? Okay. Yeah. Perfect. Great. Well, that sounds that sounds good. So I think Mike answer your question, there's appetite for conversation. We need to be careful. I think that seemed to be the conclusion. Good. Okay. So that's everything then. So I guess, unless anybody else wants to take the mic, we are free to go. Thank you very much. Thank you."
  }
]
