[
  {
    "startTime": "00:00:06",
    "text": "yeah and I'll we'll say that in the intro uh although uh we didn't synchronize that with Kent so we should do that even though it's time to start so we'll start and I'll interrupt cat CH let's begin Kent oh I'm gonna be I'm sorry I was thinking uh you were presenting um it is time to start the session I am uh Lou Burger Kent uh Watson is my co-chair he is uh remote and uh so you'll see a little bit more exposed to how we work things because we're not sitting next to each other um uh you'll notice that we have some changes in our working group structure or management the first is uh Joel jegley is uh has been has moved on as chair we really appreciate his service to the group uh recognize that thank him uh and equally we appreciate Jason who's sitting here uh with me who's volunteered to be act as our secretary and is already helping out yes okay uh thanks to both of you I really appreciate it um with that next slide so this is our note well uh we're the second day of the ietf maybe you're familiar with it hopefully you are if you're not take a look at the link on the bottom or go to the ietf page and uh look at uh make sure you're familiar with this it governs how we operate and contribute at the ietf and basically everything you say here or on the list becomes per part of our permanent record"
  },
  {
    "startTime": "00:02:02",
    "text": "group next we also uh would like to remind everyone that we have a code of conduct that governs how we interact with each other and basically be respectful be professional it's okay to have a good technical discussion but uh remember that you know to work in an appropriate way with your peers and there's a BCP on that of course next uh for those that are in person we ask you two things and they're both highlighted on the slides on the on the left the screen on the left first please scan in um that covers blue sheet it also allows you to participate in any polling that we do and we will be doing that we're not doing hums or hands because we want to be fair to those who are online and so we'll be using the the tool so it's very important that you scan in the other is uh the policy of the ietf and of this meeting is you are to wear a mask if you are not at the front speaking so we uh remind you that you are asked to wear a mask fully and properly and if you need a mask they're at the front uh for those of you that are remote um uh you figured out where you are because you're you're online so that's great uh the only other thing is please keep yourself muted uh if you're not speaking uh next uh we will be using the uh meat Echo for Q control both remote and local uh that's to be Equitable to those who are uh to remote um we also ask that you join us for joint minute taking the link is in the the meet Echo chat uh it's also on the uh every one of our materials pages"
  },
  {
    "startTime": "00:04:01",
    "text": "uh really helps to make sure that your comments are appropriately captured so if you make a comment please go take a look at the the notes and make sure we've got uh what you meant down um next uh we have uh some good discussion time available to us today on the uh the Hot Topic that we've been working on for a while on versioning that's the bulk that's the biggest session and there's uh three uh there's actually going to be three different uh speakers during that slot we are going to move that a little bit later in the session because our ID has to step out for about 10-15 minutes so when when he goes um uh we're gonna wait for him to come back to hit that very important discussion so uh uh chiffon uh uh and Oscar I don't know if you're both in the room hopefully you're both in the room um see Oscar oh perfect thank you so you might go a little early so just be prepared uh thank you thank you for that uh next so where do we stand on documents um I'm not sure I want to read through all of these we have uh uh I'll highlight the post last call ones um the first one is actually on the agenda which is great to see it's been stuck for a little while so that's awesome we need to still work out on how to get the second one unstuck um and I don't know if you want to say anything uh Rob or or not don't if you think it's good okay so uh Robertson so I'm to blame for these and I'd like to thank both uh Scott uh and Don Fussell to helping out"
  },
  {
    "startTime": "00:06:00",
    "text": "pick up and they'll edit but I think the planner said in both of these documents and the plan is to try and do the first one first and then once that one's out of the way um we're lost well then the second one won't go through uh so I think there is a plan it's just sort of getting that together so it's still a strong desire to get these done okay great that's awesome um the next document we're going to talk about a little bit more I believe on the next slide if I remember the slides right and um uh the other two we've been uh we're actually gonna are on the agenda also so we're not gonna have to go with that and um so on the syslog uh model there's been an update and the question to the authors or what's left hi Joe Clark uh Cisco um good to see you there Jason um and thanks Joel the uh what's left so uh we think just open up a new last call um where we know there's some pending things to do but we're uh they're minor um and we're just holding off to get some last call comments um so I think I thought Kent you were going to uh open this up I I don't think there's anything pending on a Mahesh or my side but that's where we stand right now uh cancer sorry just quickly Joe um I saw a comment from Rashad regarding the feasibility of the solution was there any thoughts to what we should do with that comment um so the oh man I need more coffee um the we were talking about um ah we were talking about bringing in um more of the the kind of the the overall TCP structure um or or like bringing in things like proxy uh the the authors spoke the consensus seem to be that that might be Overkill uh for what we want to do with syslog there didn't seem to be a need for that but that's"
  },
  {
    "startTime": "00:08:01",
    "text": "something I think for to bring up in in the last call what does what does the working group think um as it stands right now we weren't going to make that change yet we were just going to leave things where they were where we just have a uh a destination and a port okay thank you all right great thank you um similarly we'd like to ask if there's any authors online or in the room to give us a update on node tags and answer what what they think is left yeah for this one actually we I'm sorry I didn't hear your name and I can't hear you very well either can you hear me okay yeah for No Tag actually we already have walking group law school I think we adjust all the comments from uh from from the issue raised by the yugun actually we also think is nothing left we want to move forward but for the change we proposed actually uh maybe we need to Solitude see this some feedback from uh you can again haven't got a feedback yet yeah but the form our side icing is ready to move forward all right thank you very much all right uh uh let's move on Kent do you want to speak to this or you want me to um you're in the room but we work on this slide together okay that's all right so um there is a open issue uh on uh uh on the 69.91 this the uh Kent sent mail on this you can go look at the link archive"
  },
  {
    "startTime": "00:10:00",
    "text": "that's a little hard to type in I believe that was in September um basically there were a few points open we think this slide captures uh uh what's left and we have a proposal on how to move forward and not if we don't hear objections our intent is to move forward so now is your opportunity to object if you uh have an issue with what's on the slides uh the first is is on the with regard to the address no Zone discussion um we're going to add uh I'm not sure why there's a question mark there on that number two um we're going to add an IP address with Zone and deprecate IP address so right now IP address has a Zone in it that's caused huge amounts of confusion um we think the right answer is that one should go away and it should be replaced with uh with Zone yeah sorry with a name that's more explicit with a name that's more explicit so yes instead of being an implicit becomes explicit but we deprecate the Legacy one so it's not uh we don't break backwards compatibility um similarly we would like to do the same thing uh with date and time so we have some consistency there um between the different types and uh there was a discussion about a language tag and the conclusion was there wasn't really consensus in the working group and because there's no consensus we think we're going to leave if we recommend leaving it as is if you disagree or have uh any objections we would love to hear it now but we'd also like to hear it on the list um so you know people may not have time have had time today to think about it and react you don't have to react right"
  },
  {
    "startTime": "00:12:00",
    "text": "now but if you have a reaction please feel free to join the queue that's the type of reaction we like because we're going to keep moving forward with this and we'll coordinate with uh Jorgen to get an update uh Kent you want to say anything else before we move on oh great no no that's great uh well I mean other than uh I mean you said but give people time to think about it but as you mentioned uh that I did send an email on September 13th so it's been out there I think now for a couple months and plenty of time for people to think about it yes let's move on to the next slide so we had an incoming liaison from uh Oran we actually talked about it a little bit at the last meeting and then we never completed the action on it um and so uh uh there was a uh a proposal sent to the list I think Jason can you send it or you commented on it but we're going to continue to work to uh to get this out to get a response out and if you'd like to um uh contribute to it feel free to send a message to the list or to the chairs uh Alias next to Joanna Jason started I could just comment on that so that the authors group is actively discussing what we think is reasonable timeline for that so we are we are working to try to figure out a an estimate on that this is our usual slide about you know we've been working remote for quite a while we continue to do that we have resources available virtual meetings um WebEx is open open informal meetings uh just want everyone to be aware that those continue to go on and if you would like to participate you're always welcome and if you have a topic that you would like to start a new discussion on uh that's all the the working group"
  },
  {
    "startTime": "00:14:01",
    "text": "resources are available to you just contact the uh the uh chairs Alias and one of us will will help you out and with that I think I've hit the last slide next yes and so we're going to move on to Scott Mansfield uh are we are we doing that now or is Rob still in the room no we're going we're going to Scott and then we're going to skip versioning okay and Scott I passed through control okay now I just have to figure out how to do that uh right keypad button oh okay well that's what thanks very much I assume that uh you can hear me because I'm mumbling so thank you very much for providing me with a few minutes of agenda time for this topic uh hopefully it will be very quick the um this is about both of the drafts the interface extensions Yang and the sub interface VLAN yang so I click this button I go to the next slide look at that so both of these drafts expired in January of 2021 and I provided the links to the data tracker on the previous page was the links to the GitHub these are the links to the expired drafts and then so last ietf there was a desire to progress these so Rob talked to Don and I about taking this up so what we've done so far is we've progressed the work on the common interface extension Yang there's a few things that that I need support on um uh one is I need to hear from the existing authors and Rob has reply to an"
  },
  {
    "startTime": "00:16:00",
    "text": "email on this already but I would like to contact the existing authors that are on the draft and find out if they want to remain on the draft and then uh Don and I would be editors because we didn't really create the content necessarily we're just modifying it and then I also need to talk to someone about how we how we can get access to the repository and the C Camp working group I'm I'm using GitHub and I can think directly in uh but I don't have access to do that to these uh to the GitHub for these net mod drafts so anyone that has an idea how to do that uh please I'll take care of it and hopefully have it done before you're done speaking excellent that would be fabulous and so the next thing is uh they're in the common interface extension draft we're trying to use get the way it was meant to be used so we have issues um written down there are six open issues I've put them all here and provided notes on on the ones that we've accepted the ones we haven't accepted I have created a new draft but it's in my local my local clone and once I have access I can push it up and then I can um uh create a new version of that draft and send it out and so um please take a look at if you're interested in this draft please take a look at the resolutions here once I get it pushed up you'll be able to read the draft and see the changes that we've made there's a couple of things here that there's like we need some more description on something so looking for the experts to provide a little more input on that next slide is on the sub interface VLAN we have I think there's also six issues on this one we haven't progressed any work on that I want to finish the work like Rob said finish the work on the one"
  },
  {
    "startTime": "00:18:00",
    "text": "and then contact the authors and get permission so that's the same thing for that draft as well so our plan is to progress the drafts communicate with the authors and and hopefully have great news to report in iitf 116. that's all I had thanks uh that's awesome thank you uh please type at me your GitHub ID and uh I'll take care of that um administrative action with that we are going to skip over versioning and uh chiffon I think you are going to be next so Kent number four perfect and if I mispronounced your name I would apologize so hello everyone and this is Susan from Huawei and this presentation is about the young station and mental annotations or immutable flag uh yeah so to give a very brief recap the use cases we are focusing on this work is about their uh two kinds of use cases the first one that there are some conflict true data nodes which are immutable and I said in immutable I mean that is not not allowed to be created deleted or updated and is independent of how it is how is instantiated and the Second Use case is that when some data nodes they exist in multiple instances in the data tree for example is a list or leave list that is not while some of their instances are read only While others are not so our objective is"
  },
  {
    "startTime": "00:20:00",
    "text": "reading about the documentation availability so we'd like to define a standard magnetum to allow the server over to document their existing immutable configuration data so provide more readability about their immutable ability characteristic but we need to emphasize that this work is doesn't mean that we are encouraging such adding the immutable flag behavior for thorough implementation so next slide please yeah before we are trying to get into the solution and I like to mention that there is a definition about the immutable here and I said immutable we mean that there is a schema or instance node property indicating that the configuration data is not allowed to be created deleted or updated I know that it might be a little different from our understanding of this immutable world so the question for the working group is that can we do better about this terminology so the solution we have we have defined a immutable Young's tension and immune for Magneton notation and for the young extension there is an argument statement named exceptions which is defined to indicate that specific operations are permitted and the operations I mean create update and delete for example if a configuration data it can only created a be creative and deleted and and modification is not allowed so you can say that immutable and create and delete it and for the immutablement data annotation currently will Define this annotation as a type of Boolean and is indicate that"
  },
  {
    "startTime": "00:22:03",
    "text": "once a particular instance data node is created then the client cannot update or delete it and we have restricted that this this annotation is only applied to the leave a list or leave list entries or instance inside a particular entries okay next slide please okay so about the document updates according to the comments we received in last ITF meeting so we had met several updates for example we refreshed the document and avoid using some statement like servers must reject which seems like we are adding some more restrictions just trying to clarify that this document aims to provide more visibility into their server exist immutable Behavior and the second one is that clarifying explicitly in the draft that the decision to an immutable node in running which is instantiated in system and copied into running should always be allowed because from the device perspective it even it is deleted from running and can still prevent it in system and present in operationality in use so there is nowhere to actually delete the configuration in system so that's okay for a clients to delete that in running and we also clarify that right access restriction due to the general young rules has no need to be marked as immutable for example okay live in a list you cannot modify it or dedicate if the instance by the instance is created but there's no need to remark as immutable and also clarify that how the immute"
  },
  {
    "startTime": "00:24:01",
    "text": "both lag interacts with the neck magnetome if a specified data node for instance is marked as immutable we think that neck cannot override it to create the delete or update access yeah so next slide please yeah and another app that is that we have add a new section to discuss the inheritance of immutability so the draft teacher said that only unless otherwise specified through the immutability in the hierarchy just is inherited downwards towards the leaf or the list of terminal notes but you need to mention that if a node has a child element then the non-modification to that node just means that is any child elements is not allowed to be created update or deleted uh however there might be a desire to override the immutability of a particular descendant node so we do allow it to be overrated if this container node would have a different immutability with its access to node so for example it's a list definition and with immutable youngstation which means that this list instance is not allowed to be created updated or deleted by the client but there is only if an important number it has a immutable with the exceptions for create updated deleted so in this case the part number instance is allowed to be created updated in the list entry so this is about it override okay just in the queue oh yeah um just a question if um if it's inherited is The annotation"
  },
  {
    "startTime": "00:26:00",
    "text": "when you fetch the data is The annotation then um not the extension but The annotation on the data is it's inherited as well would it only be shown at the top or is it would be shown for every sub element uh yeah currently we are thinking that these inheritance are only applied to the the youngstation mode defined in the young module and because it might be a too strict way if we just if we just defined as a metadata annotation and there's no way to override this limitability of this descendant node so just well right now we are only considered applied to the youngstation about this inheritance sorry I wasn't I wasn't talking about the um the override it was more um if if an object in the schema if at the list entry it's immutable and you read the data are you going to see The annotation against every leaf in the list or just when you read the data are you going to see The annotation against every item in the list every leaf in the list or just against the list entry at the top and this entry at the top just the top yeah yeah so next slide please yeah so uh for the next step of this work the authors think that this work has been cooked for a little while and we and there is a real word and common issues about this work so we'd like to request to the working group for adoption okay so next slide please go ahead and gun thank you but maybe I should wait today and I thought they was getting close to that I wait for for a minute yeah I I think this is my last"
  },
  {
    "startTime": "00:28:00",
    "text": "all right yeah go ahead so I mean it's always nice to see that we are documenting the behavior of service and all that so that's I mean the basic stance here this is not ideal but we want to describe to the world how things work let's let's go to but uh I'm I have concerned that this is getting closer to the SNMP world where there are lots of special rules and tricks and stuff you have to I mean you can't write an SNMP client that can manage a device uh automatically you have to have hand-coded sort of as an MP5 script that knows about all the restrictions and constraints and the impossibilities so okay immutable eyes I think that's fine but when you say that something can might be possible to create but not delete or delete but not create I don't believe you there is no such thing that can if you create it it can never be deleted it's just that you have to jump some through some other Hoops oh in that case you have to delete the entire list or you have to do something else to actually get back to the factory state but you can if you have created something you can in fact delete it in some way not just the north direct way so if we are to have annotations like this in the model to say that oh this one cannot be deleted uh we have to tell the controller so how what do I need to do in order to actually delete it and should I go to the top level list or should I go to factory reset what is it I need to do because if we are leaving this as a sort of English description somewhere I don't think we are talking about netconf anymore than we are talking about as an MP or nothing else so I want this interface to be clear what can how does every case how does it manager get from one configuration state to another in every case I mean there needs to be a programmatic way to figure it out do you understand what I mean yeah thank you so blush do you want to I have one spot for it because you said something was immutable but okay let's say if somebody wants to do a replace of the entire data store is that invalid sorry pardon if you do a replays for the"
  },
  {
    "startTime": "00:30:02",
    "text": "entire data store including those things that were immutable can I can I do that yeah about so you can configure things create things as long as they are the same as they were always there yeah yeah first of all I think by documenting this existing Behavior that's why what allows systems to work in a model driven way instead of doing separate scripts and separate Hoops for every special bit of data the other thing is also as a participant in 3gp psa5 which has I don't know some hundred or well around 100 yank models now this is existing behavior for the last I don't know 20 years their question is about this can we document this in a standard way or do we have to do it in a 3gpp way so there are very strong use cases for this already back to your question it is stated in the draft that if you already have a value immutable unchangeable value let's say five you can set it to five again while Rob is coming up I'm going to start a poll on adoption and we actually have three states here you can raise your hands you can answer and lower your hands or you cannot answer and so we've asked um so if you raise your hand you think it means it's time to adopt you do not raise your hand it means you don't if you don't participate you don't have an opinion so please uh go online and uh start thinking about your response uh Rob please uh so robots since this guy speaking as a participant so I'm concerned with this same sort of concern"
  },
  {
    "startTime": "00:32:00",
    "text": "that Yang Yan has in terms of I wonder the sort of fundamentally changing the contract between a client and a device in terms of what you're allowed to configure and the fact you're controlling that configuration um at the same time I also understand where bellage is coming from saying real systems are doing this today they're already blocking this configuration so in some senses pretending it's not happening um is also not putting us in a in a better place so I don't know how how you really balance those two things to say this is like this is maybe documentation but perhaps it's a matter of saying in the draft that this is not a recommended way of managing the configuration it's like we don't we don't recommend this but if you are doing this this is the way you document it I I don't know I'm conflicted on this one uh Andy please go ahead all right I was probably the only one who said not to adopt but uh I think this is just a special case of a deviation really and it's about the implementation so it's appropriate to use a deviation I don't see where a standard module or any kind of published module would have this this um extension in it to to predict it this way um I guess it also could be done with nakum just more knocking rules but it's it has some some uses I agree but it's it's also got some issues that were just mentioned that I also agree with so that's it okay thanks Andy I'll note that uh Kent has uh had a supporting comment to Balaji in the chat okay"
  },
  {
    "startTime": "00:34:00",
    "text": "I don't think.com is the good place for this big first of all not come can be switched off this is more a property of the data model what you can and cannot do with this Anakin is about allowing things in some cases not allowing it in other cases but also nakum can be switched off so I uh no you say that you can't imagine published models there are published models in 3gpp but I think in other places so it's not whether we imagine it or not they exist already in not in not one but many okay thank you uh Andy are you still in queue I'm gonna remove you from the queue if you want to come back in and just read oh I think uh I should have just clicked it off sorry uh so so Rob Wilson Cisco so um just think about a little bit more I know in open config at the moment they're having a suggestion that devices don't um validate Leaf riffs for example so they're sort of changing the behavior of Yang in a slightly different way to say it's a slight different variation of yan and it feels the same thing sort of happening with hit with this is it's like another variation of network management or Yang and it's changing for where we are to different variants and I wonder whether that helps or in the standardization so I I'll definitely have to speak with Kent uh offline we usually like whisper things up here but we can't it's a little difficult uh my read and again I haven't consulted with Kent on this is that it's pretty split you know you have people that are interested but not a lot a lot more than think that this isn't ready uh based on the comments perhaps you could put more in the draft about what is not possible what you can do with existing mechanisms and why you"
  },
  {
    "startTime": "00:36:01",
    "text": "think a new mechanism is needed and that might help uh those who have said no to understand why you think we have to do an exception or addition sorry thank you oh so we were going to do versioning but I see Rob is now leaving the room so we're not going to do versioning sorry about that um instead we're going to go on to Oscar I think Oscar is still here now he's stepped out for a moment so we're going to try to go on to the second Access Control uh chin woo so we're really going out of order here thank you for everyone's flexibility we'll give moment um so uh we're gonna move on to the draft ma yeah you got it thanks again good morning everyone my name is so I want to introduce this idea the policy based Nano access control so this is Ops a WT uh zero zero routine chapter the reason we come here because the basically the Pacer model is developed in another mode a working group or we also have ACL extension proposed by Oscar admander so we want to you know sort of feedback for this one yeah next foreign so what is the problem statement actually usually in the Enterprise or campus Network scenarios we actually use Access Control list to you know provide network access control especially for the fixed device user and at the uh sometimes these kind of Acer actually has some limitation it is usually it's a IP address based network access control or Mac address based access control so for"
  },
  {
    "startTime": "00:38:01",
    "text": "Summer mobile device users they may move from one location to another location so so use Acer actually has its limitation in some other scenario actually we really want to install more uh you know flexible security policy actually one example we have the attribute based access control so we really want to you know apply the access control policy to a set of the user under the different circumstance you could be based on user location or user row or it could be based on the time of day or type of the network device to be used next so we really want to solve this limitation of the network access control so what do we propose actually to provide you know a more fine granularity Access Control policy based on the user group identity so here we give a some example you may need to restrict some of uh user or a group of uh user in a specific you know department for the financial department to uh to restrict access to the service or resource uh for a specific time period so you can uh you know uh you need to design uh the access control policy to you know to uh meet these requirements so the user approval here could be the you know a set of grouper user from financial department or from IMD Department actually they will represent a connective identity of the proofer user so this user can uh you know uh can have commonly you can access the network or consume specific network"
  },
  {
    "startTime": "00:40:02",
    "text": "service or resource next so here is our model design overview actually you can see actually we really extend a0 based model and to introduce additional uh attribute you know uh you can see the Red Dot uh uh rectangle diagram and you we can support actually Four type of access control for example we can provide a user group to use a group access or we can provide access from One Source app here to as a prefix to the destination RP prefix address we also can support you know User Group to RP prefix access or the other way around RP prefix to the YouTube group access so we give the example of the user group based ACL example you can see uh you know we allow you know uh different set of grouper user for example from cell group or they can you know communicate with the Financial Group within uh in the destination uh youth group and in addition we actually can restrict a set of users at the four specific time period so we introduce time range type we can support a periodic range or absolutely ranji so so you can name it a Google user you know for a specific time period in the Working Day comments question um I you submitted this to opsog and I I was looking at it then and and the biggest question I have is what is a user group so so you have a string user group name and it was just I was just scratching my head how does this resolve like like what what do I do"
  },
  {
    "startTime": "00:42:02",
    "text": "with this I mean conceptually I get it um Cisco was not allowed to talk to wallet let's say he's an example of user groups but how does that actually resolve to something that the network understands yeah there didn't seem to be a lot of prescription in there around that I actually have a slice the obviously as well actually to expand where you really want to establish the mapping between the group of ID with the IP address so you use this mapping so you can install these policies so these need to you know translate like a user group ID into a set of the uh IP address or prefix but but shouldn't there be more um structure around the the user group like like keying and and like it's a string um which feels to me kind of arbitrary shouldn't there be some more referential um mapping to to really understand that this user group means something um and maybe I just need to see more more implementation on uh but but that was a little of my confusion it just seemed kind of arbitrary and and it it was tough to really wrap my head around how I would actually implement this yeah I think one of the requirements from the Acer extension job they really wanted for Acer are not tied to a specific interface over the device so they won't even apply to settle the device so these are you know it's tension really targeted to solve this so I also have a next slide to explain how this how it works oh okay okay yeah move to the neck so this is actually provided you know how we you know resolve these actually we this kind of HCL is it seems you know not a diff it's kind of different from the a0 based model actually you introduce these kind of group IDs so so we really want to you know uh establish the mapping between the group ID and RP address so how we"
  },
  {
    "startTime": "00:44:00",
    "text": "can do this actually for user it can be the fixed device the user can be mobile uh device user so uh during the network access actually you need to you know involve some uh Triple A maximum to provide network access authorization after authorization you can establish the mapping between the group ID and the IP address so with this uh mapping you can really can control uh the provided restrict access to the mobile user or maybe BYOD device user so uh so you so here we just show you example for this uh the the the mapping table what a mapping table looks like you can see we have the group ID or we have RP address and then we also had some other attributes so these are really targeted to the actual build-based access control so so you can provide more fine granularity and Nano upside control for for the user so we actually have two use cases so uh the the the in the left actually we uh assume actually you know policy enforcement Point actually will co-locate with Chevrolet device in the network node actually so you can easily to establish this kind of mapping when you pass through this kind of network access authorization but for second Noah you may separate a policy enforcement point from the you know geography client the Chevrolet client can be in the network node so you uh the Chevrolet client can establish that can imagine they can you know uh you know uh export is kind of map into the controller or controller can retrieve this kind of mapping from Triple A server from some kind of you know repository so the policy enforcement component can you know grab the the mapping from the controller so you can you know easily to pass or interpret this kind of uh network access policy so this is a basic"
  },
  {
    "startTime": "00:46:03",
    "text": "idea we show high level for more detail you can see see the draft so I'm not sure I answer joke last question kind of I I I'll I'll dig a Little Deeper it seems like okay so I log in and at the time the device would resolve my user ID to AAA um group ID and then I still where did where does my IP come from um because I I cannot I can't imagine that every packet I generate is going to do that whole dance so it's unlike flow establishment you resolved to my IP and then the ACL works at that level yeah that's good question actually usually in the Enterprise and then oh campus nanoid scenario you may have policy server you may actually already have uh do some planning actually to uh you know you you have financial department you have ID department and these need to you know set a specific rules so these so they can actually establish this kind of policy in and install in the policy server or can be co-located with the Chevrolet server so some other scenario actually maybe for the BYOD user this kind of device you know unload to the network actually but you can have this kind of pre-configure uh the the access control rules so you can you know restrict the access to this unknown device this is maybe attack you know so this is ideally we have okay I'll I'll read more before okay thank you just as a heads up for your over time but we have a little slop in the schedule so we've given you until two and a half more minutes but then we really need to move on after that okay thank you hi uh Bill Fenner Arista networks uh can you go back to slide"
  },
  {
    "startTime": "00:48:01",
    "text": "four I want to comment on the periodic time um this is a very simplistic view of time um you might want to look at the work that the calendaring working group has done on uh repeating rules uh the recurrence rules that are called and um they can express all sorts of things like the first Tuesday of every month Etc and once you give something like this people are going to want something like that so look into what the I calendar work has done on recurrence rules okay thank you maybe send a link to us that way we can see thank you oh that's it okay so last slide yeah so uh we note that this is uh listed as an Ops area working group document so thank you for letting us know about it and we'll look for the work to proceed there unless the working group chairs like Joe who may or may not be listening uh decide that they need they want to send it back here but until it's sent back here you know the general uh rule is you come to that mod only when there's nothing no other working group can work on the end okay thank you all right thank you yeah uh we're gonna do the other ACL uh document hello Oscar what are these for before no worries I have to present them we have a lot of juggling and reflecting working groups which is why we're shifting our schedule so just first of um there's a little bit of context reminder so we presented a few itfs ago a some some extensions to the model so just to recap the hfc 8519 defines the"
  },
  {
    "startTime": "00:50:03",
    "text": "access control list and model so there you can configure which is the forwarding behavior of the device and they find entries matches and actions okay so in some three ideas ago we presented which were their problems that we detected so it was based on operational experiences of protein ACLS in in production that was was used in in our Network and there we wanted to see what was the the best approach if if we have a new version of the HL model or do augmentations on existing models okay and try to remain the other one and touch so yeah so we picked a choice to move forward so we can the feedback was okay do some jump code and and present it and see see how we're going and we started working with augmentation so don't touch existing RFC and they are work on that so here these were all the all the problems were when analyzed and here we are going to go one by one of those that are covered by by the current proportion okay so we didn't cover 100 of them in the in this let's go to the next slide and then we can start so first of all there was one problem that we detected in terms of manageability of the of the access control list matches at a we required in many cases a much against uh some set of prefixes of set of ports okay so in current model you could not add those those lists okay so the idea is to maintain these these sets is the same thing that you have in the in the routing okay so in the routing policies you already have a list of prefix ranges and here in the years to"
  },
  {
    "startTime": "00:52:02",
    "text": "that in this model we also have prefix sets protocol sets for number sets icmp sets and well these are the sets that we came came upon but you could have more so the so we proposed to have at the top level of the ACL have a placeholder and Define set to their list all the or create and manage all these sets so then these sets can be reused across a multiple multiple ACLS also and multiple entries so the the good thing there is that they can be managed separately so for us in our case in telefonica we have our security department that just updates these the specifics list for example and they updated periodically or or daily and it's so here this is documentation proposed okay so next next slide so here in we can we can show the how the full tree would look like so we have the based on the feedback that we had separated ipv4 and ipv and IPv6 prefixes so we are just playing lists ports protocols on the icmp base field okay so with with all of the forces are reusable for both the TCP and USB all and any protocol that would use new sports and we could also consider other ports for example we could also consider matching a mpls labels for example that is a also one there are some at least some Hardware that is able to do the machine against mpls label so you could also create those those sets Okay so next slide please or participants in the cube Jason please yeah unless he wants to take it at the end do you want to take it at the end no no we can okay you can do you mind going"
  },
  {
    "startTime": "00:54:01",
    "text": "back one slide please Jason Stern um on the first augmentation uh from what it's showing there it looks like it's inside the ACL list so are these only intended to be shared within rules of one ACL or is this supposed to be shared across different ACLS no it is at the top level of ACLS okay so it's I meant to be shared across all uh all ACLS that you define okay so it's okay I think I think maybe it should be at the container then not not inside the list one of the precisely one of the questions that we have at the end is what is the best place to position the Define sets or even uh we have the question at the end even if if we put it at a completely new container outside HCL okay so this is a an open question I just I think maybe maybe you meant to put it in the acl's container but we can talk more detail yeah okay okay and Mahesh Mahesh Arcus Networks so I'm I was actually going to wait for my question to laugh it was done with the presentation you can wait till the end there's no problem right but the to Jason's comment I do agree with him that I think if you're going to add um sort of Define sets you want to do it inside the ACLS complete okay so a couple of slides more yeah so then another of the problems that we had is the the handling of TCP flux right now you could Define just one bit and match against that bit so the proposal here is to add the capability"
  },
  {
    "startTime": "00:56:01",
    "text": "to define a bit mask and an operation over that business and that bitmask then you are way more flexible and you can support all the bdp flow spec matching operations okay it is it is good to be consistent across IDF Technologies so here is the example of how it would look like so next slide please another thing is we needed a better way to to handle fragments okay so this is why with the uh we Define the a fragment container for both ipv4 and an IPv6 and to be able to match for example it just if there is if there is a fragment or if it's the first fragment it is the last fragment so for example you could create a rule to discard all incoming fragments okay so that is also a common common operation so next one please a another thing is that in current ACLS oracles you had the accept dropped and reject the actions okay so you accept it or you when you drop it you notify or not be honest images but uh we saw that it is also common that in some cases when you detect you don't want to fully drop so you you might want extra policy so for example a a red limiting policy so uh we propose that it is interesting to add also um that you can in addition to accepting the have a an action in the forwarding Behavior to have another forwarding behavior that is limiting the regulation so for example in this case you you could limit the rate of 20 20 okay so next slide and then we can have some time for for discussion"
  },
  {
    "startTime": "00:58:03",
    "text": "yeah so here so first is should we maintain this augmentation approach as we are having here or we incorporate them into a into this version of the of the Apple model this augmentation but the structure is easier to parasitia to to do the but we need to do some it's a little bit sometimes challenging when creating those augmentations and sometimes we are finding some limitations okay and sometimes what if you go to this approach we could be more clean and even maybe some some things could be fit together in the same structure instead of having to replicate the structures and the second question I think that was related also to your your comments that that we had is where to position the defined sets Okay so they Define sets uh the thing is then they are references in the matches okay so it it has a it has impact especially if other modules import the packet fields for example and and they want to to or they import for example the packet match in another place should it happen I don't know if it happens in in many places but if someone Imports it and it is referencing to the Apple okay so we it could be a standalone in a new model so in any model just have a separate module for the for the prefix sets or for the sets and you just reference and finally question is okay this is the right place to work on it the net mode is oops we didn't know which was the best place but as ACL model was done here we thought it was here so so I'm going to start with the easy one uh which working group you know as you said this is built on top of ACL so it seems like the right place to do it uh"
  },
  {
    "startTime": "01:00:00",
    "text": "Kent isn't here you know for me to whisper again so if he disagrees he was the shepherd on that document so of course if he disagrees I actually will refer to him uh but to me this seems like the right place and um uh in in terms of uh this or augmentation I think it goes more to uh what's going to be the common use if the common use is you're going to be doing the full set my personal preference not his chair but my personal preference would be this um if it's uh if a common usage could be either then I would go for the augmentation uh again this is just my personal preference trying to give people something to think about uh to express their offer you're in queue and I thought you might have been left over but it looks like you want to say something all right because Smith looks um as the original author of The ACL young model I am glad to see that there's some work going on and trying to see where it was on the gaps that we missed in the first version so absolutely uh let the work group decide whether they want to do it as an augmentation not a best we can a little group decide that uh specifically my question is actually a couple of slides back on the rate action if we could go back I think it's the slide before this yes great limit actions I would suggest that this is not the right Yang model for rate limit action I would suggest that you look at the qos Yang model because the moment you put any kind of a rate limit you also need to have some metering capability in the same module It generally is not the case so if you're looking for Q I have some kind of metering look at the model I think the Curious model already addresses this in terms of ability to drop packets when it exceeds a certain amount of rate so that's one suggestion Joe"
  },
  {
    "startTime": "01:02:02",
    "text": "collect Cisco real quick on the last question um so I I would say it would be nice to have this in a standalone container because I can see thinking of some implementations that might use this there's other things I could see these um groupings being used for and besides just ACLS so I think it would make it easier to import into that other work okay so this has been talked about a couple of times now uh the last time was a little bit ago wasn't the last meeting but we thought it would be good to ask the same question we asked for the previous one so same sort of guidelines and um you know for some they may not be aware of the document so this might by a hard ask uh and you know we just like the previous one it doesn't mean uh no doesn't mean never we won't discuss it again uh uh but if you have an opinion um it'd be good to voice it we'll just pause for a minute Mahesh and we're gonna just so you know we have about a minute left before we have to move to the next yeah so this is more a response to Joe um the idea of I like the idea of grouping but I notice you can have the grouping and still be part of the model where it can be used by other ones but I'm putting just a grouping leaving the instance both in this model and in other models okay um I'm gonna uh close that session I'll note that a few people you know a a"
  },
  {
    "startTime": "01:04:03",
    "text": "small percentage of the people in the room uh participated but everyone who participated was supportive of adopting so I think this one that's a pretty good indication that there's you're headed in the right direction people are interested in this uh but it's still new to them so I'll talk with Kent afterwards and we may see a poll we may want to wait another meeting it'll be based on offline discussion thank you so now we're going to move to versioning okay um yeah go to slide two please okay so there's actually three parts to this presentation uh so first I'll just be doing a bit of an overview because there's a set of five drafts we're working on related to Yang versioning work um then I'm going to present on kind of the base fundamental draft which is module versioning and Joe is going to present on the Yang sember draft um for anyone who just wants to ramp up again on what this work is fundamentally about you can always flip to the last four slides of this presentation I'm presenting now that gives you a very quick overview of what the work is about with a few nice pictures and things I'm not going to go over those today though okay next slide please so we're working on kind of a broad set of proposals to deal with uh some Evolution and yang versioning um there's five separate drafts uh I'm not going to walk through all of these at the moment but a big Focus has been on number one and number two here to try to get those uh standardized now as"
  },
  {
    "startTime": "01:06:00",
    "text": "quickly as we can we've uh been seeing increased demand to wrap that work up but we do plan on bringing all of this work to RFC uh in a phase manner okay next slide uh this this is just for reference for so you have easy links to the drafts next slide so um a fair bit of this work is happening on a weekly call uh Tuesday Mornings everybody's welcome to join those at any time and don't feel bad if you're not fully ramped up or not in the middle of discussions with some people who just come and go occasionally it's great to get other opinions on this work uh so please feel free to join it's important we get a big cross-section of people and we're always really trying to especially get more users and operators in these meetings it's pretty heavily vendor focused it is a broad set of people though so it's a it's a good cross-section but we can always use more opinions more inputs on this work there's a lot of kind of issues to try to decide uh currently it's every Tuesday morning at nine Eastern uh to UK time and I send out minutes for that Weekly with links to the to the meetings so please feel free to join in next slide okay so what have we done since last ITF uh time is kind of high and uh we're never quite getting as much done as we kind of originally hoped but um so a really big Focus was uh something that was brought up on the list as part of the last working group Last Call on this Dock and that was looking at kind of an alternative to our top level uh version and non-backwards compatible markings and that was looking at per node markings I don't know what happened to our lights here interesting all right I don't know if a spotlight's about to come on but there's no dancing about to happen all right um"
  },
  {
    "startTime": "01:08:00",
    "text": "so we d uh we discussed this in a lot of detail it pretty much uh it was really the focus of all our time since the last meeting so we have gone and defined these per node annotations you can Mark individual nodes as okay this one was non-backwards compatible in this release Etc but we have decided not to include it as part of the base draft so uh there's more details on that coming up in the next presentation but uh it's not going to be part of the base draft or at least that's our proposal um the second thing that uh really was a focus is there's quite a bit of feedback from the last call in these first two documents a lot of issues raised a lot of good discussions a lot of Gray Zone decisions we had debate about in the weekly calls we think we're pretty much done that now uh every issue was tracked in the GitHub um we kind of debated them all down to an answer amongst the weekly call group and authors and we've replied back to a list about pretty much every one of those so we feel that that is pretty much done we've made some updates to the drafts and we're going to there's still a few updates left to go but we think we've closed most of the process from the first working group last call um we really did not get to looking at schema comparison packages or version selection drafts since last ITF next slide okay so next steps at the high level here are we want to finish the remaining updates to our first two drafts module versioning and the Ang sember with a few issues still to wrap up um mainly about just trying to get the right text for them so we've got a set of people helping out on our calls um then the plan is to submit those two drafts to uh a on second and what we're thinking is hopefully final working group last call and the intention is to try to move those forward to RFC so"
  },
  {
    "startTime": "01:10:02",
    "text": "we're not going to wait for the last three drafts we're going to try to drive forward to completion on these two um the work's been taking a long time to converge I apologize but trust me there's a lot of hours I've gone into this it's not because we're sitting around and not getting to it um Oram specifically asked to have these two completed and we've heard the same message informally from a lot of other people who are interested in this work and then we'll phase work on the remaining documents after that the schema comparison packages and version selection and there's still a lot of uh work to be done on those as well okay next slide okay so we'll skip these and Kent if you don't mind I'll go to the next deck please okay so now this presentation is just about the very first fundamental base draft of the versioning work called module uh module versioning module versioning draft next slide okay here's a little bit of a summary based on working group last call and some updated text these are some of the changes we've made to the draft so we released version seven we reworked the introduction from some of the feedback we included a summary of the five drafts right in the introduction there it helps reduce dependency on the uh on another kind of overview informational draft that we had so that's more contained just in this first draft um as part of the work where we created the per node backwards compatible tags we rename the top level one just to make it really clear that it's different so it's that new top level tag is now called non-backwards compatible revision just be really explicit that applies to the entire revision of the module um we removed the bullet in section 311"
  },
  {
    "startTime": "01:12:03",
    "text": "which is the list where we take we took 79.50 and all the rules in 79.50 about what is compatible and what's non-compatible and we've made a very small number of updates to that one of the updates was that we were originally going to allow reordering of Yang's statements outside of input and output sections but we decided against that in the end so as part of this work we're not going to open the door to reordering we're going to keep reordering as a non-backage compatible change as per 79.50 everywhere there's a number of places we had to make we made decisions like this where there's things we could kind of optimize and change but overall in the end we've tried to kind of minimize them and just stick with most of 79.50 other than try to fix the really the big problems there's lots of other little optimizations we could make to things that maybe are kind of backwards compatible maybe we could allow in the future but uh that's that was slowing down the work wasn't critical and if something could be rediscussed in a Yang 2.0 or future work um we also as part of this kind of Simplicity and getting the work done we also decided that changes to import statements are going to be classified as backwards compatible so if you change for example in an import which version you're importing the idea is we're not going to kind of carry through changes that that might mean into the current module we're just going to call that backwards compatible so if different modules import each other a server and client can know about changes by looking at each individual module and saying has that module changed as the flag the indicator that something in the data model has changed um we clarified some things around the file"
  },
  {
    "startTime": "01:14:00",
    "text": "name format so as many of you know there's a current a current format kind of recommended in the guidelines that has the the at symbol and a date but what we're saying is that if you're using labeling we're recommending that instead you start using a hash and the label okay if the label is available and then we also clarified some text on what it means to reduce the value set of a leaf so a little more clear around that saying that um as long as all the values that were previously accepted are still accepted then you're not reducing value space so those are the main changes let me skip to the next slide please so as I mentioned a big part of the work we did since the last ITF was to fully invest in defining these per node compatibility indicators we weren't sure three months ago for sure whether we were going to include these as part of module versioning or not uh but we want to do the work to Define them in either case so we've gone through and defined them um there's basically three indicators and they're all optional so the key is at the top level of the module it's kind of mandatory if you've made a non-backwards compatible change somewhere in the module and you want to document that for the users of the module so you have to mark the module overall the revision as non-backwards compatible optionally if you wish you can Mark what what this work says is you can Mark individual nodes saying well it was actually this node that changed and you can keep a whole history if you would like in the right in the details of the API um there's pros and cons of that um but it is an optional marker it's particularly useful when a tool or even"
  },
  {
    "startTime": "01:16:00",
    "text": "a user might assume that A Change Is would be classified in a different way than you might expect so for example um a pattern change is often very hard to interpret depending how complex the pattern is the regex so this allows an author to say I know this looks like a change but you could tag it saying this is actually backwards compatible I've just reformatted reformulated my regex uh another use case is you might reduce a range in a configuration Leaf which normally is non-backwards compatible but if you're for example a vendor and your implementation never accepted some of the values that you had in your range you're just doing a bug fix to fix your module so it more correctly documents the constraints that always were there so if you had a range 100 whoops my implementation only accepts 1 to 50. the server never would have accepted the value 75 so you fix the module officially that's a non-backage compatible change but you could mark it here that specific one no that was backwards compatible so there's a few use cases for this um but in the end it is still there's a number of reasons we don't want to include it in the base draft um so one one thing is at the module level the top level we need that no matter what it's kind of the fundamental marker just to indicate an NBC change has occurred that's the one that has broad interest we're already seeing it actually used in the industry with open config I think some vendors are actually already kind of using proprietary versions of it so we know that one is simple well understood and there's already has interest in adoption the per node ones are useful they are more complex so you can look in the schema comparison draft for the text sounds very simple but when you start looking at some Corner cases what happens when something's removed"
  },
  {
    "startTime": "01:18:02",
    "text": "it does get a little bit more complicated so we really felt that is is an optional extension to this work not part of the base work it also the per node markers we definitely found fit better with the schema comparison discussions and the tooling topic so we think there's a good fit there with the schema comparison draft um and we also felt that um at least within the weekly call group we kind of like the idea that the body the module is really just the API it's not a whole bunch it's not littered with a whole bunch of history about how the API has changed over time it's just here's my version three of the module the body of it describes the API and it sometimes maybe it's better to leave all the history annotation to the top separate so those are some of the reasons we decided that uh we don't want to include it as part of the of the base module version and graph okay go on to the next slide okay so what are the outstanding issues for this draft we're really trying to drive this to completion um there is still one fairly significant one and that is we're debating what to do with the revision or derive the import by revision or drive so we've got some comments on the list um we're looking at maybe making it less strict as a hint instead of a absolute strict rule um and I do have a slide on that moment there's about a half dozen more minor updates required based on the working group previous working group last call we have the captured in GitHub issues and we're just trying to make fix the text for those and I already talked about the third bullet the the per no compatibility extensions next slide Okay so softening of revision or drive so"
  },
  {
    "startTime": "01:20:02",
    "text": "we uh as part of the module versioning work we are trying to improve how imports are described so a Yang module can can import another Yang module in 7950 you can do that by saying I want to import a very specific version but there's definitely been consensus in the working group that that importing by specific reversion aversion doesn't really work it Bri it's too brittle and as soon as you churn the imported module you got to go find all the importing modules and go update those to say oh actually I want the new version now so it doesn't really work very well um so we've introduced this concept which is uh it's not perfect either but it's what we believe is the best uh way forward to solve the kind of worst of the problems and that is to allow Yang module to say hey I want to import at least this version okay and it could be this version or anything after it because I know at least I have the new definitions of this grouping or I have a 6991 bits I need this new whatever one of the new things that we're putting in the 6591 is um and you can say I want that version onwards um where we're struggling a little bit and still a bit of an open issue is how strict we want to be about that so um today uh today the language in the draft is somewhat strict it says You must import a version that is at least this version or is a descendant of it we're looking at maybe softening that and it's a little bit to do with trying to be um more compatible with current tools and the way current tool current tools will work which allows more flexibility in"
  },
  {
    "startTime": "01:22:02",
    "text": "what version is used so if you don't specify a specific version um a tool or a client is allowed to kind of it's a bit inconsistent in the standards right now some places say you have to grab the latest some say it's kind of undefined um so what we want to do is a la allow that to maintain um allow that behavior to be maintained so it's more we're looking up to be a suggestion saying hey if this version or derived version is around we'd recommend you pick it up um but if you don't have that version available to you you're allowed to make a decision like the current 7950 rules allow you to make as in pick up whatever arbitrary version is available or pick up the latest um part of the part of the thing we're scratching our heads about as well is when you have a an import statement by by version in a Yang module how is that used what users or tools actually use that when you picture a server and a server advertises to you in Yang Library here's the modules and the versions I support well those are the versions it supports so if whatever the constraint says on the import statement the server is telling you what it's supporting so unless there's ambiguity and what the server is reporting if the server is reporting multiple versions which is only allowed for import only modules it's only allowed to implement one module one version of a module so um I mean the client at that point knows what the server is telling it is to be used so we're also in the middle of debating uh exactly how is this import by version used like what uses it it"
  },
  {
    "startTime": "01:24:00",
    "text": "especially given a server is going to advertise what what versions it's using so apologize if that isn't clear we're still actually trying to hit our heads around what we should do on this one and uh it's a little bit of a complex one any feedback here if people have thoughts is great but also uh please join the weekly calls if you have some ideas or thoughts around how this import should or could work okay we'll go to the next slide uh no okay so that's it for this presentation I'm gonna hand over to Joe then to talk about uh Yang's number thanks for keeping us up to date on where the document stands uh clearly this is uh getting a lot of interest from uh the community and from uh users and implementers if you haven't been tracking uh it's a good time to go read the document we are closing on just a few more issues and then uh expect to do a second last call I look like Rob looks confused I sure hope not everyone I'm Joe Clark I'll be presenting Yang simver and uh I I had to laugh because on the um Jason's slide it had capital S capital V after Yang and as you'll see in a a minute we we were very prescriptive in how we write things and it shouldn't have been with the capital V anyway um next slide please so what happened between last time and this time we released a REV uh 0.0008 um which finalizes the working group last call comments from way back when uh from uh Jurgen and Andy or we think we hope uh we we finalized it"
  },
  {
    "startTime": "01:26:01",
    "text": "um let me talk about that um sember thing so in our in in the draft it talks about the December 2.0 and if you go to December 2.0.0 and if you go to semver.org you will see that the way they write it is capital S capital V we wanted to disambiguate ourselves as much as possible so that this draft describes a revision labeling scheme that we call Yang simver as a proper noun and we Define that in our terminology section uh we differentiate between capital S capital V sember December 2.0.0 which we reference in that document that said there is a relationship between the two we augment so to speak or we extend the base rules of simver 2.0.0 with our own semantics but our our scheme can be backwards compatible or or if you do not use our modifiers that we have you end up with something that obeys the simver 2.0.0 rules so we clarified some of that with additional text within the document we also defined what is meant by an editorial change there was some text in there already but we kind of pulled it out and made it a little bit clearer um there was a discussion in working group last call about when one should uh as you're doing like pre-release you're doing module or draft development with a Yang module in it when should you if you're going to use the Yang Simba rules and uh we and the I we think is the as the people on the call that we should push for uh Yang simvar to be used as a revision label scheme for ietf modules so when you're doing that ietf module development when do you have to bump that uh that uh semver uh or the the revision label"
  },
  {
    "startTime": "01:28:01",
    "text": "um so we clarified when that happens and in fact because we did make some changes to the Yang module that's in this document this is a time where we did bump that so the current revision label for the module within this document now does match 08. and then there were some ID knit problems some long lines and whatnot so we got things kind of Tidy for that second working group last call next slide please one of the things that came up both in working group last call there's been some discussion about it and we kind of raised it I don't remember who first raised it on on the Tuesday call was what about these things that might be considered bad trees or bad version lineages we might need additional text to cover what is allowed and what isn't allowed so some of the things that have been said on list and that we've talked about and Jason mentioned this whole idea of lineage in his presentation that the revision label is kind of like an alias it's a reference it says given this revision label it points to a revision and once we know the revision we can work our way up and we can find where this where our current module where it descended from who was its its its parent or grandparent and so on and so forth and that's all well and good that's I have the Alias I can find my revision I can work my way back in the history uh and I know whether or not I was derived from this other module but there are implied rules with semver that the human brain just latches on to that says that if I have something that is 3.5 dot two let's say and I have something that's 3.5.1 or let's do something better if I have something 3.7 and I have something that's 3.6 I might assume that 3.7 uh is backwards compatible with 3.6 just"
  },
  {
    "startTime": "01:30:01",
    "text": "because that's how my brain thinks about simver but what we realized was there was no text in the document that really said that that was the case that you could that you we wanted 3.7 to be backwards compatible with 3.6 so we started to explore what is starting on the next slide please what are good and and bad lineages or good and bad trees so here is the bad tree and this is the text that we added um around this I'm not going to read the whole text there it's up on the slide it's in the draft but let's say you had a 3.5.0 and you went and added a 3.6.0 where you added a leaf called Foo to 3.6.0 but then you decided to create a 3.20.0 later on and you added a leaf bar but instead of descending from 3.6.0 you descend it again from 3.5.0 well if you just look at this from the whole a sem a yang symbol is a revision label which is an alias to a revision you would look up the revision and you could find that 3.20 did in fact not descend from 3.6 great so it it obeys Yang versioning what Jason described but from a Yang simmer standpoint this is kind of weird right you would assume that 3.20.0 and 3.6.0 would have a relationship that there would be some backwards compatibility there but if you were a user of Lee Fu and you went the 3.20.0 assuming that well it's just a minor revision Leaf Fu should be there you might be surprised that it's not and that there is no backwards compatibility this type of revision this type of changes from a revision standpoint it's perfectly legal"
  },
  {
    "startTime": "01:32:00",
    "text": "we're not saying that it isn't the text that we added however says that if you're going to do something like this you can't use Yang Simba as a revision label scheme Yang simber has some additional implications that says you need to follow those rules the human brain should look at this and say yep 3.20.0 naturally it's backwards compatible with 3.6.0 so in this case I wouldn't be able to use Yang simver if this is the the kind of branching that I have uh not supported in this revision label scheme next slide please this naturally um precipitated other questions so are these so so Jason brought up um because he he does this everything seems like okay we've got it where we need it to be he's like well what about this so what about these other trees are they allowed um in this case an A in the A1 case uh we have a 3.5.0 and we move to a 3.51 compatible and we did that because it was a an editorial or patch change where we added a leaf food so we have to use um our modifier compatible and later on we added a 3.20.0 that added Leaf bar in this case we think yes this is allowed because as you read the text uh with those modifiers uh compatible not not compatible all bets are off when you start adding compatible that when you start adding those modifiers all bets are off and we think this is more of a corner case because we think in general a lot of development would not necessarily use the modifiers and then he created an A2 which is like A1 but with additional um qualification for time but still we think that both A1 and A1 Prime are A2 those would be allowed uh next slide please"
  },
  {
    "startTime": "01:34:03",
    "text": "so A3 is this allowed so in this case we have a patch or editorial change 2.3.5 and we created a new 2.3.6 maybe we fixed the spelling of the word registered which I did in our draft because I forgot an e and then later on we create a 2.3.20 again a patch revision or editorial descendant from 2.3.5 we think this is also legal because in this case there is backwards compatibility because of the definition of what those patch without a modifier what those patch revision changes mean anyone using 2.3.20 will not be surprised if that e is is somehow missing from a description next slide please oh God I love this one um A4 this one is actually generating some uh more discussion on list I think Rob has some opinions on this um it's an A so we there are some of us who think this isn't a loud thing um but really what's Happening Here is you're uh with in time you're you're creating this this 10 uh major revision 10 that goes to Major revision 11 and then you have a new mate a new major revision 20 which descends from 10 not 11 and then a 30 from 20. I think this is allowed personally because once you get to Major revision changes we document the human brain thinks uh Here Comes Rob to tell me I'm wrong um that that these are not backwards compatible 10 and 11 aren't backwards compatible 20 and 11 aren't backwards compatible 20 and 10 aren't backwards compatible and there are other development things that we feel would fit into this so we I think the consensus is this isn't a loud tree but"
  },
  {
    "startTime": "01:36:02",
    "text": "Rob please uh robots and Cisco as a contributed to this work so I I think this probably is allowed I think sort of against in my mind against the spirit of what what semba tries to achieve which is you're trying to always update the head of the the main development branch and that's where you update the number so um so I don't think we should disallow this it just feels to me I would suggest that people shouldn't not not in the documents they shouldn't do this I don't feel that if I was implementing I would steer people away from doing this but I don't think they should be disallowed but actually I'd like to back a slide vote please I'll back a slide please so so this one though I do have more concerns with I don't think this should be allowed because the two three 2.3.20 also should be backwards compatible to 2.3.6 so depending on what changes have gone into that and maybe if it's if it's a patch change maybe it's nothing significant and it doesn't matter I don't know uh but again back the same things with Simba I expect these things are always uh sort of mainly adding to the head of the branch and we have the the sort of non-compatible and compatible extensions to try and have that limited branching but I I do also admit that Simba itself is not brilliantly specified as exactly what the rules are which doesn't really help but we can be tighter I I this isn't the hill I'm willing to die on I and I agree with you and I think it in in software where this might be a bug fix like hey I stopped I I fixed this off by one error or pointer arithmetic problem I would agree with you so uh but Jason you're in the queue yeah um so for this one here um I'm on the fence and not don't care too much either but one thing to point out is I think this one probably is okay because don't forget the minor digit hasn't changed here so they're still compatible it's only editorial fixes that are the difference between these so"
  },
  {
    "startTime": "01:38:00",
    "text": "I don't know if we want to restrict this and say it's not allowed versus the other variant to this that Joe started the presentation with were the minor digit changes it can actually cause compatibility problems so yeah I I think for me the thing that I'm thinking about the whole thing is is the level of complexity complexity that we have and that we're introducing and where we can try and minimize that complexity I think that is worth it even if we potentially disallow some of these cases it feels to me that we should be trying to drive complexity down because otherwise I I think people are going to struggle to understand what the rules are we should try and simplify it there might be a few things we rule out but that's okay that's the right compromise to make so I agree with you I and I I'm wondering though are you saying we should or should not add text either direction on this or we just have something that says I don't even know if I want to add anything that says you should obey the rules of some of our um what are you suggesting what might I need to check the document again I I thought actually there was enough technology here that says this is the rule to how you move along and this is Jason Jason's give me an indication he thinks more clarity might be required but I think we I can check the document again I'll fly to C but I'm not sure I need more text or text change I'm just saying in terms of this if somebody that I like well that's not great I think the problem is when we say we don't want this or especially A4 I don't know if you had a slide after A4 that showed the alternative if you don't support A4 and if someone needs to describe this branching scenario the alternative for what they put may look worse so that's something we should consider uh when we're because it's not just don't do this it's okay and I think I had I showed an alternative to this A4 in the email thread that show us how you would do it if you don't do it this way and I"
  },
  {
    "startTime": "01:40:01",
    "text": "think it's a lot worse so we should talk about what it means to drive complexity out it may actually be harder to use if we don't allow this so and to be clear I'm not trying to say the document should specify you can't do this I'm just I I think it's more I shouldn't encourage it so it should be maybe left ambiguous that's horrible but not right so my mother has any with swisscom I have a bit more fundamental question here so here this is the reflection of the development history of the version right this is not about the versioning itself uh you know whatever telling you clearly if you have measure upgrade measure revision you have a new version and they're not that good compatible so whether I don't understand what's the point here to keep track of the history if you have any way non-compatible are virgins you can do for version 20 you can do the diff against 10 or 11. it doesn't matter so this is the nature development history which should be different than a software that deciding whether I can understand this version operate on it or not yeah the the fundamental reason for somewhere here or or having this is a revision label scheme is to give that consumer the user a a hint to say okay now I downloaded or this device is now supporting this version of the module oh I'm currently using 10 and now this device wants to use 20. I need to do more work because this is likely going to impact the way I the tooling that I have and how that tooling interacts with this device exactly but they're going to do the difference 10 or 20 uh 20 or 11 in this case it doesn't exactly and so this is like the history yeah of the software which is complicated right and we try to codify it which is pretty hard and and I I I totally agree I think we would a lot this might be the the not the best development practice to do but we should not limit ourselves the"
  },
  {
    "startTime": "01:42:01",
    "text": "the user's still going to get what they want out of out of it next slide please looks like I've got a few more left I don't think I have your alternative now I move into illegal bad trees try not to use the word illegal in the draft I don't think I did um but X1 is um here you have major versions uh 20 uh or two to four to six and then descendant off of um uh two you have three and five I this is one where I I kind of uh disagree with the college they they say illegal or bad not allowed uh I say it's major versions so it's to ahmed's point uh major versions uh I I'm still going to assume non-backwards compatible anyway um and and two um Rob's point I would rather not add more example text of what's illegal I think the one case we called out where your brain assumes backwards compatibility and it's not there that makes sense to call out um here maybe bad development practice but I don't think it's necessarily something we need to call out which is why I have the question mark the question marks here are do we need to add text for either allowing or disallowing these things uh next slide please oh ken Kent as a contributor um so as others have said I think it's technically okay to for those kinds of trees I agree it's bad bad form and probably wouldn't occur in practice but technically should be allowed thanks uh next slide please while I've got you uh okay uh another illegal tree again I think okay um if you want to go from 2.0 to 10.0"
  },
  {
    "startTime": "01:44:00",
    "text": "back to 8.0 maybe your cotton reverse causal loop I don't know um but uh it's not the best practice but because it's major version numbers I don't want to add I wouldn't my preference would be not to add text to disallow this it just feels it just feels like it's bad practice but Rob's clicking so maybe he's joining the queue oh Kent is and I'm Rob is as well Kent yes Kent is a contributor again and I beat Rob by click oh I think this should be not allowed because software is going to want to do um comparisons um you know integer comparisons much greater than less than I don't know how software would be able to reason through this if we if we don't um enforce monotonically increasing numbers or okay sorry take back the word monoponically just simply use increasing numbers Robert's participant they agree with Kent I I'm not sure we need text to disallow this but but don't do this yeah don't do that I think we should do this if somebody comes does this well that's their choice effectively but I think the doctor needs to say don't do it I think it should be obvious to me yes I can't imagine why one would um okay next slide please um and this one is again an interesting one because we're using modifiers now and we say that 3.5.1 descent compatible uh which means that a something was added let's say uh Leaf Foo was added to 3.5 to 1 compatible and then we created a 3.5.2 compatible from uh descendant from 3.5.0 which adds Leaf bar let's say um so 3.5.2 compatible is not backwards compatible with 3.5.1 compatible um in in a human's brain that might be counter-intuitive but with these"
  },
  {
    "startTime": "01:46:01",
    "text": "modifiers bets are off we we document that that these are are sticky and and they um it's the support that that wacky set of branching um so here I'm I'm conflicted whether or not we need to add text whether or not this should be allowed I I would say don't do this um just like we've said on some of the other X's but I I don't know if we need to call this out as a counter example or something not to do or that we would not allow with with Yang Simba might as well just uh build a house I thought Mike and Rob uh Robertson is assistant same answer as before so don't do this I think but I don't think you need text thanks and last slide please great oh sorry sorry again yeah I'm part of the Tuesday groups I'm all quite often but uh maybe the word compatible actually in this case is a bit of a problem where people may be learned to believe that just by saying 351 compatible followed by 3.2 compatible we are suggesting that something is compatible while it isn't so I mean we could just look for a different word I I don't hate to bring this up this time in the process but maybe something else branched or something like that 351 Branch 352 Branch doesn't quite as well suggest that they are compatible thank you it's something we I mean we we went back and forth a lot on these modifiers as you know so maybe something to discuss uh I I don't know that we want to change it now but we we've um it can certainly be brought up and and bannered around on the list last slide please which is really a anti-climatic um we think the next steps are to to conduct that second uh last call to to really bring out the the next round of"
  },
  {
    "startTime": "01:48:02",
    "text": "uh comments um and we think irrespective of what we've discussed here uh it's ready for that um it passes all ID nits and yang validations for the most part um there's some pending Yang stuff uh but we we don't think there's any major substantive changes yet to come so we just went over two documents we start out by saying we're going to try to last call both of them again and move them forward together do you and you said this one's ready but the prior one is not so what do you want to do I think we have to bring them together I I would say that we bring them both together I think we're ready on both Jason I think our intention is to bring them together it's just some results we converged on it a little a little bit faster than the other one so so when they're both ready authors please send a message to the list I think I heard you two disagree just now but that's okay just be explicit on the list we're ready to go okay thanks all right great uh thanks I'm amazed that we're after all this time we're like a minute ahead of schedule so with that we're going to go to uh the last slot and I should say to the versioning team and all the authors uh thank you so much for some excellent work it's it's super important work and we know it's really tough and it's taken a lot of effort so uh thank you and so I'm Nigel Davis Sienna thanks the opportunity to present us um I'm going to look at um modeling and some challenges we've had in certain areas of modeling and suggestions that I'm going to suggest that we may need to extend um meta models extend techniques and methodologies and so on so that's what I'm aiming for here I'll go to the first if you know the first slides I'll move on thanks next slide"
  },
  {
    "startTime": "01:50:01",
    "text": "next one so um uh it's there's a I've got an idea and I've put in so there's the references in here I'm going to go through this very briefly um terminology is a challenge in this area so we've come up with a new term which I'll talk about um which tries to tries to help us discuss the thing I've been grappling in this for a long time um and it's I keep running into the same problem so a number of us agree there's there's potentially an issue here so we thought we'd present next slide thanks so um this gives us sort of an overview of where the the challenge appears to lie so as we look at Advanced um uh Solutions we we come across a number of things intent capability expression uh where we're looking at the capability of the underlying um devices and so on uh challenges partial visibility where we there may be a noisy environment and we can't we can't actually um see the full view of the detector all the time or something of this sort so maybe I don't know the precise value um in policy those constraints uh present so these are all constraint or range statement things in the negotiation where I I might start with a very vague expression of something and gradually narrow down to a point where I have a more precise expression so these these all appear to as I said on the second board it'll appear to be um requires some kind of development through a recursive or Progressive narrowing of things so with my ss7 negotiation I start with a very vague expression of something I gradually narrowed down to a more precise one there's no specific number of steps I might take here so we you might think of um a process of metamodel model instance but no there's no number of specific steps we go through here and I just stop at the right level for the Viewpoint so maybe I get right down to a set of very"
  },
  {
    "startTime": "01:52:02",
    "text": "specific values it maybe I get to just a set of constraints depending upon where I'm trying and that I stop and that's my expression so um we coined this term occurrence because we couldn't find any other words I've tried to use various other terms for this but each one of these narrowings it comes up with an occurrence of something the occurrence is a mixture always of of statements of of um what look like specification of type with ranges and so on and also statements of precise value so the the the process we seem to be going through often is to tighten towards this instance whether even the instance may have expressions of range in it because I'm dealing with an instance in a control plan environment where the device below is able to deal with the range input so whereas in a normal instance statement I might have a value as an integer where I see a single value what actually might happen is instead of the single value although it's an integer field I want to be able to say between and normally say between seven and nine and of course eight is between so I'll try harder between 7 and 13 or something where there's a range of possible values that that entity can take and I've got a little example of that so um and if I look at this process when I'm building a a system I assemble um different occurrences the same original thing into an assembly and I'll try I'll try and describe that in a few minutes as well so um if you go on to the next slide actually I'll end up running out of time on it so the the um just to re-emphasize the modeling approach appears to be one of recursive narrowing that we seem to need to get to where um any model of the thing can be considered as being An Occurrence at that level even if I get down to an instance That's Just An Occurrence so everything appears to be occurrences and everything appears to be a progression towards this narrow and narrower thing"
  },
  {
    "startTime": "01:54:00",
    "text": "um and the the properties are defined in terms of constraints even a single value you know the integer is five it's still just a constraint on that integer it's just a very very very tight one and um the the method then requires an expression that mixes types and in instance values together and conventional modeling techniques don't appear to do this for us so we then struggle inventing things in the middle somewhere and hence this suggestion that there may be a methodology and a meta model requirement but looking at Yang with I've played around in the in the back of the draft with some in an appendix with some variant of Yang it appears I could potentially use Yang if I in a particular way to be able to do this it looks like Yang might be extensible to this although the thing I do is very strange to do it so let's get on the next slide please thanks so uh just to emphasize these things so the things I was talking about obviously in the idea use um expectation intention uh because I like to look at intentions being a two-sided thing where one of the client expects and the provider intends to do something but um that's the desired outcome in terms of constraints capabilities opportunity for Behavior exhibitive which again is a set of constraints on a limited bounded thing and the partial partial visibility thing is I'm expressing that I can only see something within some kind of precise range I can't tell you exactly what the temperature is somewhere between 30 and 50 but I can't say precisely or I might not know or I might you know be um currently unsure but you know eventually short so it Narrows and broadens you can go to the next slide please that'd be great thanks okay so here's a sort of an example of some narrowing I start off with a standard where I'm expressing something as a in in a as a constraint is boundless it's an integer it's randomly chosen um uh uh bit rate for example and then"
  },
  {
    "startTime": "01:56:00",
    "text": "in a particular event the solution this there's a specification to this where that many solutions able to operate between 10 and 10 and 100 gigs another same vendor another solution they've got where there's a piece of Hardware may be constrained by pricing and technology is able to operate between 5 and 50 gigs and then I have an application a where the requirements between 10 and 50 so clearly both those things will work but because I can see the subset of the specification then at some particular Point 30 50 some other specific time at some particular Point 50 gigs only so these things are different statements of range on that particular property when I want to be able to express those ranges the final one being in that list a single value and then I might have some fruitful concept where I convert it to a numeration I only have have uh three particular values and then a particular case within that proof of concept was only one and so on and then even the instance at the end there the intent instance because I'm applying this to some control plane I've got a range of values whereas the final one it's an absolute value you can do the next slide but so um I'll I'll skim this because I think I've only got just over two minutes left but uh here I might uh this is saying that when I'm assembling a system I might have a set of what I might consider as um uh classes piece Parts I'm going to assemble but each particular application of those parts that a particular part is subtly different it's a different it's a different it minimally is a different instance what I think about some memory and building a memory chip I've got the same cell repeated over and over and over again but they're not identically placed clearly because then they'd be the same thing or sell and they're not they're not the same instance so I've got this subtle variety across this set of same things when I'm building a system I have to I seem to have to reuse Parts but where each part is subtly different from the pre another usage and that's that same level and of course they may have a mod this may be a module"
  },
  {
    "startTime": "01:58:01",
    "text": "that I then install another system and again I've got the same Parts being reused with again subtle Variety in them the particular picture here is a it's taken from some INF work we're doing where we're looking at some defining a a management hierarchy in talking about View mappings and so on but uh it shows there we're finding it we find it in all of the other um specs of system assemblies we're trying to do and clearly they're not instances because it's not a real running thing can you go to the next slide please thanks and this uh just the the work we're looking at seems to overlap severely with the compatibility and also versioning so um I think it plays well into what you're doing in that area I'm not going to describe this like it's kind of the the actual descriptions and the and the ID but I see I've got almost no time left so I'll have the question so I'll go into the next next slide which I think is the final one too uh so so what we we're looking at here um it seems there isn't any readily available terminology to deal with the notion of the currents other than this word we've now used ourselves um and but but it it it may be that there is and so hence I'm looking across the I presented this on um on the um an MRG yesterday again and I'm also we're looking for assistance to identify an existing set of techniques or terminology that might fit with us I'll take the question at the end if that's what we've done you know why so um improving terminology trying to homing on on other areas where this has been just determined and used um it seems to be no good language to describe this so um as I said it maybe we can take Yang and refine it in certain areas to help us do this solve this particular problem and and hence bringing this here maybe we could work together to evolve young to be able to deal more with these um specifications and these definitions of in town where we have this sort of constraint problem okay so that's what I wanted to say I've got I can see everyone question"
  },
  {
    "startTime": "02:00:00",
    "text": "uh Robles and Cisco um no hats on so thank you for bringing this work here I think I think it's really interesting what you're doing here so it's interesting I do I do wonder I'm not sure I've found the the example use case to you that compelling in terms of why you wouldn't just like use Like A Min and Max for those two values to solve them so I'm struggling to see it's it's it was severely simplified to allow me to describe it during the presentations for 10 minutes unfortunately so that's all I had done and I thought bringing a very simple example might just give the idea of the range and that's all but you're right it's it's actually a lot deeper than us on a lot more challenging in many areas where I've got into related properties which I wanted to describe the interrelationship as as I narrow them they don't just simply narrow I mean the the the example I've seen which is probably a simple one again is temperance humidity Behavior where the humidity acceptable humidity varies with temperature and so as you you sort of get an area described so although temperature and humidity you initially finders in individual isolated values and they seem to be independent nice big broad range than any any particular application they don't play separately they play together and I don't want to be able to describe that sort of restriction so you can actually see even that within yanuku there's like a grouping to tie those things together so I think it's a question whether you're trying to model a given value in the tree is having this range or whether you expose those ranges I'm not saying it's right or wrong but yeah it's the sort of um because I think trying to explain more the exact problems you're trying to solve would be helpful for the working group to understand is is this too complex this is it you know out of scope or not uh and I've lost my other suggestions I've gonna say anyway so that's great nice thanks yeah I can I can work through more there's a few more things in the idea and I can work through some of my myself obviously follow up with that as well thanks for the guidance Bernard class and I'm going to be very quick because I see new eyes that you have to cut the line so thanks Angel for bringing this this work this has been on my mind for quite some time I I see those problems from multiple angles from intent from config from personal data"
  },
  {
    "startTime": "02:02:00",
    "text": "there is no perfect answer but we need to continue working on this because I see all of these problems thanks okay great thank you yeah thank you very much for this interesting work look forward to hearing more as it matures uh definitely uh interesting um with that we're actually a few minutes over time and thank you all for participating in a I think a very good session and look forward to seeing you the rest of the week and thank you all to those who participated remotely"
  }
]
