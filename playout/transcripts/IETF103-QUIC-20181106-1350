[
  {
    "startTime": "00:01:20",
    "text": "this is an aspirational photograph for the working group wouldn\u0027t you be rather doing this than working on quick still let\u0027s get it done sorry that is the neighbor I would highly recommend it yeah although he found a place last night that sorry there\u0027s ice in a neighbor nicer than the neighbor yeah there is ice in that drink in as a no ice right no you said neighbor that\u0027s the neighbor mine didn\u0027t mind had asked him it mine did not know they go maybe they just poured gin in the glass for me you\u0027re perfectly happy with that so this is the quick working group if you have come for a different working group you\u0027re likely to be disappointed but you may still be engaged I haven\u0027t pre-arranged scribes do we have any volunteers I won\u0027t pick on Sean Turner because we picked on him too many times in the past I don\u0027t how much faith that echo would do it Jonah no okay I\u0027m just arranging it to be evenly Patrick McManus is a hero wait Jonah\u0027s gonna do it it\u0027s a fastly production fantastic both of you do it together good on you and can someone hopefully near the microphone volunteer to be jabbar relay if in fact thank you Eric fantastic this is the note well I hope you\u0027re familiar with it by now but if you\u0027re not these are the terms under which you participate in the ITF regarding things like code of conduct and intellectual property please have a read and you can find more information on the ITF website that\u0027s not no we\u0027re not using that we have the blue sheets check we have a scribe check you have a really a check we\u0027re ready to go so our agenda for today we\u0027re gonna have a hackathon report briefly from Lars and then updates from the editors including updates on the operation drives which we need to start paying more attention to then we\u0027re going to discuss a few brief issues the theatres have identified I "
  },
  {
    "startTime": "00:04:24",
    "text": "think one of those may have been superseded overcome by events Martin yeah yeah so the version negotiation wound is not gonna be addressed in this room based on the discussions I\u0027ve been having with people unfortunately I do want to still introduce the problem so people are sure of what\u0027s going on the Barents thing has already been addressed but I think Martin seaman has some other material to discuss regarding the handshake that\u0027s kind of the same corner cases that are exactly ideal ok I think that\u0027s all the to change is there crane and then after that we\u0027ll have a quick discussion of the human right to review document that came across the doorstep and as time permits talk about making a quick to play ball from me quickly bouncing from Martin Duke and finally a quick unreliable datagram Sir Thomas folly we have another session tomorrow and that session is almost entirely devoted to the spin bit so if you\u0027ve come here expecting the fireworks you have to wait a little bit longer at the end of tomorrow we\u0027ll also do some some housekeeping in terms of looking at our Charter our milestones reminding people of the upcoming interim and that sort of thing after there\u0027s been bit discussion any bashing on the agenda okay I guess you\u0027re putting this at me for the interrupt report so I don\u0027t have any slides anything else oh did the last few stickers are in the back you want to grab them they\u0027ll soon be worth a lot on eBay right so so as Mark said tomorrow we\u0027re gonna do the housekeeping spoiler alert right it seems highly unlikely we\u0027re going to ship something today is G this month yeah sorry Spencer you had to you had to find out this way tomorrow well tell you when but that\u0027ll be one big part of that discussion so we\u0027re not quite done yet but that\u0027ll happen tomorrow um in terms of interrupts we had as usual during the hackathon a table we actually had two tables this time or with people that are implementing quick and it pays we\u0027ll be testing the current implementation drafts I think we had like around ten implementations participate in some form it\u0027s looking better in terms of getting back to at least basic interoperability in terms of version negotiation handshake data exchange and closing um there was a big sort of disruption when we redid the stream zero thing and we\u0027re still sort of seeing the after-effects of that that there\u0027s a bunch of augmentations that haven\u0027t moved to one of the new versions that have to refactor stream zero but so if we hear "
  },
  {
    "startTime": "00:07:24",
    "text": "that that\u0027s it\u0027s happening soon we don\u0027t have a whole lot of experience or a whole lot of Interop with some okay I\u0027m gonna call it advanced features but it\u0027s actually pretty basic functionality such as the key update or connection migration there\u0027s very few stacks that are doing it and I think there\u0027s very few sex specifically that I would call like you know the ones that are going for a large-scale deployment that are currently doing it that\u0027s a bit concerning it\u0027s one of the reasons why that the milestones are probably unlikely but it is the the spreadsheet and greener is better of basically darker green earth better more letters are better clients are down vertically servers are cross horizontally so you can see there\u0027s some white just I try to move the implementations that haven\u0027t shown up sort of to the right so to concentrate the information a little bit there but there\u0027s and there\u0027s still some white and some very light green and that\u0027s not super good um but it\u0027s it\u0027s looking better and I think the trajectory is there we\u0027re gonna do another interim meeting with an interrupt event before it in January hopefully it\u0027s going to look a lot better then and then by Prague so definitely we\u0027re Park we should be interrupting around - 17 probably already in Japan but I really hope that on - 17 we\u0027re gonna see a lot of more Turkey I know Alan wanted to say something specifically about interrupts around HQ I don\u0027t know if you\u0027re in the room or remotely or if somebody else wants to say something in his stead I don\u0027t feel qualified to summarize where we are with that but I think we were somewhere Jenna Jenna I don\u0027t know this is a bug and the I don\u0027t know if this is a mistake but a I\u0027m just curious to understand how does that 80\u0027s manages to have fewer features with itself then it does with others don\u0027t ask me all right Alan friend Alan jabber would like to say that cue pack had three implementations it didn\u0027t rob those three interrupts I have an implementation that disagrees with them so we have some issues without so the good the good side is right there\u0027s a lot of activity and I think it\u0027s even increasing right there\u0027s there\u0027s more and more lines and columns on the spreadsheet although some of them have remain wide for a while now but but we are still feeling the after-effects of the street zero refactoring plus the editors are really good at changing other stuff and so I think the goal is to have - 17 which is the one that\u0027s currently open for a surgery be the last one where we\u0027re gonna do large changes that are not motivated by strong interoperability problems so if the hope is that really - seventeen will be the thing that we\u0027re gonna let sit and simmer for a while and let the "
  },
  {
    "startTime": "00:10:25",
    "text": "implementations actually catch up and do some much wider scale inter up with with the caveat and I just said isn\u0027t easy p.m. so but which on the recovery draft specifically I think we are still trying to get more help from the TCP guys to make the quick recovery as compatible and comparable to what TCP is doing as possible and so I think for recovery we are probably gonna see some changes that are not necessarily only going to be driven by Interop however the recovery is complex but it\u0027s not actually a whole lot of code that needs to change for it so hopefully changes to recovery will not cause but they shouldn\u0027t cause interoperability issues to begin with but they also hopefully don\u0027t disrupt the implementations too much christian in christianism our loss when I look at these metrics please leave it on when I look at the metrics as you say there\u0027s a bunch of advanced features that are not tested at all like we have two academic or prototype implementation that do migrations right and pretty much nobody else does and that the test nisman we should seriously consider at which point do we decide that okay the reason but nobody does it is probably because the spec is too hard or something and just cut it for v1 we should on my feeling I put it this way is that we haven\u0027t seen a lot of inner up around that because the rate of change to everything else is so high that you gonna spend a lot of cycles as an implementation team basically on you know keeping up with everything else that lift gives you basic interrupts that people just haven\u0027t gotten to that yet if it remains the case that people aren\u0027t getting to that yet in the next couple of weeks and months I think we should definitely have a discussion on what to do with those features and I\u0027m gonna point out that we seem to be migrating from a discussion of the inter up results to the planning of our future and how we handle our schedule so it\u0027s just it\u0027s what I was just reading the data and the data tells me something I\u0027m looking at the queue behind you the data tells you you should help other people with our implementations which is closed now um so I mean feel free to tell me I\u0027m um I\u0027m not a hoarder and that you want to raise another point but um the one when I notice about this graph and also about generally my experience and I\u0027ve written this first before is that things that are easy to test get tested and things that are hard to test you\u0027re not could test it even if actually might be implemented um and I\u0027m particularly I live in particular fear of recovery um but um but even like you know like my experience has been like I mean there\u0027s "
  },
  {
    "startTime": "00:13:25",
    "text": "there\u0027s basically no difference between 14 and 15 and I like updated it to 15 like in like five minutes and like was just too lazy they\u0027re like sit around like try dinner out for everybody and so um you know and that\u0027s like easy so um I I guess I would be up for and I know large deny bookends middle work individually trying to figure out like some set of arrangements that would make it easier for you to test things um and I guess only we\u0027re gonna let\u0027s us recovery so um so like you know they would like my ideal would be I could just tape my implementation put in a docker image and drop it into test harness and we come back with this matrix on May that\u0027s too fancy but on so I think like if other people are like minded about this maybe we could you could have some sort of small like discussion about what to build in collaborative evil tool chain for this cuz I just don\u0027t see like like literally we could spend the first day in the interim like with even with Asians that actually all work pretty well just getting this matrix fall down I\u0027ll just note that this is not a complete set of all the features of quick so of course no I know I\u0027m just wanting to I think I should have started with that I\u0027m responding to questions point we are nowhere near the point where we are deciding or even thinking about what to cut out of this stuff so I I don\u0027t I don\u0027t think we should be going down the path of discussing that right now so I give it a credit so it\u0027s a good topic for how to automate some of this and and some of us have some automation for their particular stack but there\u0027s nothing that generates that whole matrix and that would be that would be very useful the other thing that would be not so so getting something like a packet drills suite it\u0027s difficult for quick what because it\u0027s encrypted but but that would be very useful so there\u0027s some discussion that maybe we should have around one of the interrupts events about what we can do I guess I would think before then because a little as will spend the around prevent writing that test furnace so you know again I be um I\u0027m gonna raise my hand if there\u0027s someone you know people be interested in like working on this like come find me or lose your hands now or something and we\u0027ll try to like get together do something I\u0027m really super flexible at what we do but I like to have something happen because like I say it\u0027s just incredibly expensive and and I\u0027m really quite worried about like they\u0027re I mean there\u0027s got to be like nine thousand recovery cases we have to test and like every single one of them is getting testing and like I don\u0027t see how our pawsome we do that manually if your professor has master students it\u0027s not really a PhD topic but it\u0027s certainly a master thesis topic you know that would you know eternal fame Jen Iyengar on this topic there was a test suite that was written by some folks they had showed up in London have we heard anything from those people do you mean quick tracker they said I don\u0027t know I don\u0027t remember what it was all Olivier student is working on that but that is more like a conformance test it could lead to this but I look it up "
  },
  {
    "startTime": "00:16:27",
    "text": "in it yeah yeah thanks and there if you need a repo for that or something just ask so mr. Thompson yeah don\u0027t be on the front take the whole room is a pink box interesting mucking around here alright so what happened in 15 this is since the last time we met as a working group in clip that at the interim 15 has quite a number of changes here there are a few other minor ones that are not in this list but these are the ones I think are not-- even the first ones not really a change i think we changed some packer numbers as a result but we took the two frame types immersed and into one so whenever we talk about act now we\u0027re talking about an act that may or may not have ACN counters in it we litigated the design of a head at some length and decided that it wasn\u0027t worth changing we have some signaling around the the act delays we now insist on validating the presence of the retry and having a server prove that it was the one that saw it that\u0027s new what it\u0027s also new is that there\u0027s only one of them obviously that design doesn\u0027t work particularly well if there are there would be multiple rate rise and though there was a number of other reasons we got roof retries we have the design team come back with some recommendations about how to deal with connection ids in their ongoing management and added a frame to deal with that there\u0027s also some changes in there to prevent deadlocks i think none siemens talk goes further into that and other consequences of having that that design so we\u0027re likely to see a little bit more change in 17 around that one maybe HTTP and kupack had have you it\u0027s kind of major changes settings and our pirates and this is the one that I hate our largest reference is encoded modulo back sentries I think I lost that one that\u0027s awkward and then we have a new static table but I don\u0027t think anyone\u0027s really all that happy with but it\u0027s it\u0027s there and the next slide has all the changes in 16 right you\u0027ll notice the dish I\u0027ve got the table contents in the next slide which is probably the more interesting one so the transport document we decided to flip on its head and shuffle everything around so notice that there\u0027s a lot of text moved there\u0027s a lot of new text around all of it as well and we\u0027re "
  },
  {
    "startTime": "00:19:29",
    "text": "continuing this work in upcoming versions as well but the idea is that we\u0027re going to talk about the things that people care about most first and then talk about the stuff that implementers care about most last let\u0027s go HTTP got a new structure as well I\u0027m not sure that\u0027s all that that different to how it was before but this is this is what it looks like it was it was cleaned up a little bit and worked for reflow a few Packers having a similar rework done but that hasn\u0027t landed yet I don\u0027t think we\u0027ll see that in 17 or along with 17 this is what that looks like at the moment it may shift around a little bit as that PA if I was I think Alan\u0027s almost finished with that one so we should see that relatively said next ok 17 fun things so we are going to change the layout of the first octet in both short and long header forms that those changes have been held based on a number of things so we had the great Google quick migration event occur so that allowed us to reclaim a couple of the bits that we were sort of holding in fixed positions during that transition that seems to have been successful based on the reports that I heard from the end so we we have our fingers crossed and we\u0027re gonna continue along this path we\u0027re going to we\u0027re going to take those bits back and we\u0027re gonna assign them to things like spin bits if that\u0027s the outcome of that it\u0027s discussion with tomorrow some people noticed some interesting problems with the way that we were doing stream limits and how then interacted with blocked and then we went back and looked at it and thought that probably the best thing to do is completely restructure the way that we allocate we grant new streams to appear and so we\u0027re doing that based on counters rather than the maximum identifier which makes them much more like the flow control than they were previously it just means that we have more frames now it also means that we don\u0027t have crazy situations where frames can have values that are completely invalid in them so I think that that cleans things up a little bit : you had a question hi yeah it just takes me a little while to get the mic : Perkins for the first octet changes it was a multiplexing discussion in apt core this morning yeah I\u0027m gonna go over that bring her a little bit more I\u0027m gonna separate deck on that one okay I\u0027ll go through that change afterwards I\u0027ve got the conclusions to the discussion on the on those slides and I\u0027ll just walk through them in a little bit more detail Irie numbered everything which which Lars was super happy about I also put ease in reset stream for all "
  },
  {
    "startTime": "00:22:31",
    "text": "those people who have been irritated by that and there\u0027s a bunch of other other things that we\u0027re going to be talking about here that might get me to 17 but as Lars said 17 well it is our vain hope that 17 is the last one we ever have to make real changes in and so there was one more that Kazu hope prompted us to make as well which is we reshuffled the order of the fields and a new connection idea frame because they\u0027re a little bit weird so things like that now\u0027s your opportunity of about two weeks to get your pet hates addressed and merged and and looked at but the bar is going to go up pretty significantly after that till I think yeah I mean my my ass was gonna be a little more time than that a month since a little more appropriate given the time of year that would be basically I want to have given them in over 20 changes I won\u0027t have time to read the spectra ferpa finish and make make sure like I feel good I can make sure I have my head think I\u0027m all the way about right what would you object to that to us doing say two iterations if issues we\u0027re kind of came out so it\u0027d have an 18 I\u0027m asking yes I\u0027m just asking like don\u0027t freeze just yet yeah that\u0027s I give people time like pull their heads up and just they get the whole thing in front of finish that that\u0027s fair and so the point here is this this is your warning we\u0027re gonna start that process now I don\u0027t think it\u0027s gonna be hard punished to the other end of it it\u0027s it\u0027s just that we want to make sure that come some reasonable time before we made again in Tokyo things are stable and we can start to talk about things like deployment general just to respond to what occurred said to be clear also this isn\u0027t this is it this doesn\u0027t mean that if there are actually egregious errors in there we won\u0027t address them right of course we want to do that I think I\u0027d expressed it is the working group agrees I hope that we need a period of stability to let it be let us catch up and see how this goes and I want to avoid egregious changes after some point but but because request is perfectly reasonable all I\u0027m trying to get at is that like um you know did because we only these partial implementations and because we have and because every time we do an implementation you find in Felicity\u0027s um you know like I don\u0027t want to put us in a position where there are things like the futures better than the past and where things that like just suck but like aren\u0027t actually death like are things that we say oh we can\u0027t fix because like we like to read to Frieza that\u0027s like right yeah that\u0027s not the agreement we\u0027re making and of course our right bugs will continue to get fixed you have another one on the next one I think you have one more yeah the idea is that at some point very very soon we\u0027ll have a protocol this we need pretty strong justification to make changes to things that will affect interoperability my "
  },
  {
    "startTime": "00:25:32",
    "text": "suggestion is that when we that that if we get issues open that a sort of speculative or suggest improvements we\u0027re going to be a little bit more aggressive about closing those sorts of things politely but if people do want to work with new design issues because they\u0027ve found bugs I definitely want to see those those raised and it but if you if you\u0027re not sure whether this has been discussed or what not maybe maybe discussing with the list before your your open issues then then that might be the best way to do things of course editorial stuff we take any day especially in PR for I mean it\u0027s all have can you go to the next deck yeah unless anyone wants to talk about this topic a little bit more yeah that the packet okay zero are people reasonably clear on that it\u0027s not that we\u0027re saying we\u0027re gonna shut it down and not take any more changes but I mean we need a period of stability to get some assessment from the implementations in an ideal world we will prove that what we have written down is a great specification and then we can move forward if we find problems then we\u0027ll deal with that yeah but then one of the one of the sentiments I heard expressed was that because things have changed quite a lot quite often it\u0027s been very hard to get to the point we\u0027ve where you\u0027ve got an implementation that is good for deployment and one thing that we\u0027re kind of lacking is the experience in deployment exam I don\u0027t want to ship this thing as RC without considerable experience in deployment and so we need to get that process started pretty soon right and and so you know change is asking for well remembering or aesthetic changes or whatever are not gonna be helping us get to that yep and so that that might mean that some things will suck in you know indefinitely we\u0027re sorry so octet zero place because I think this is this this goes to Colin\u0027s point and I think this is probably the best one to to do yeah yeah all right so this is the outcome of the discussion in New York with colors and letters so the the long header packet will look like the first one so we have the first bit saying that it\u0027s long we have what I\u0027m dubbing the quick bit in the next one we have to type bits that allow us to distinguish between the four different types of long headers that that we have and then the rest of physic this is encrypted so the orange here is we\u0027re using the packet number protection scheme the short Heller we have the short head a bit the quick bit we might have a spin bit and everything that\u0027s not those things is encrypted and under encryption in both of them we have a packet number the short header will have a key face bit and that means that the packet number encryption key won\u0027t rotate as the keys rotate and key "
  },
  {
    "startTime": "00:28:33",
    "text": "updates thanks kazoo next so the common part as I said there\u0027s not a lot of new things there next this is just for the record I guess I have a straw man here for the allocation of code points to the various types of long header packets that\u0027s negotiable but one of the desires expressed was that people could use some combination of bits in the long header to identify things that have client selected or potentially client selected connection IDs in them so they can be hived off in terms of the load balancers and routers and things like that so I\u0027ll try to preserve that as much as possible the other thing is that the spare bits we\u0027re going to when I say they need to be 0 and maybe you can negotiate their use afterwards but 0 will be the defaults and probably in the long header that means that 0 will be the values we\u0027re encrypting them so they\u0027ll look random on the wire okay this must be zero I must ignore or must be zero much jack must be zero must check okay that\u0027s my that\u0027s my put I mean I\u0027ll take it I\u0027ll take anything else but this is this is really just a storm and if people have an argument for anything else I\u0027ll take that okay um I\u0027m sorry yeah gives you two more bits of integer um so sure I anticipate a 30% chance of needing to have one more take bit at some point in the very near future but you know yeah I don\u0027t have a reason for that I\u0027m just saying like like every other time with like stats already the entire space we would like actually the idea but we have space yeah we have spare bits we can take them back I think if we really need them you there David\u0027s cognizing Google um this makes me uneasy one of the first one was what occur was saying that like the type what is like kind of a registry where today we only have four values in there but it was kind of nice to have it extensible but with two bits we\u0027re not gonna be able to fit a lot more give me one example that\u0027s the point of extensibility is that we can\u0027t think of it yeah yeah if we do that all the time we have all these extension points hanging off its and then why do all you have with rain types that are VA lies we could only like limit it to five frame types you know anyway so we have example frame types okay so first point second one I feel like we\u0027re burning two bits on the packet number lengths that are already encoded in the packet number itself guess this is moving them from the packet number I see but that doesn\u0027t really allow us to "
  },
  {
    "startTime": "00:31:33",
    "text": "encode that many more values right because I can\u0027t hide this meeting sorry okay fair enough yeah I can see that thank you so yeah at the point that I can mate off mic was that the the 8 bit Packer number is much closer to plausible 6 oh it was seven but yeah that\u0027s not much more plausible janek\u0027s how much of this is going in invariant anomaly this is just an quickly - this is I don\u0027t know who\u0027s doing quickly - if I know I don\u0027t know I\u0027d no idea you know you got rid of that no yeah yeah so that all of all of this stuff that we\u0027re talking about here is entirely under our control so the next version of quick whatever that\u0027s called can change everything we decide so none of this is invariant no no this is a very look the the only thing that\u0027s invariant here is that first bit okay no I think have another one as well so particularly the second bit your quick bit is not the quick bit is not really a quick bit I mean it\u0027s a joke but in what in this version of quick that that bit will be set okay I think we have another slide I think and it\u0027s the same as I described before so we\u0027ll encrypt that will encrypt the spin bit here if we decide not to do spinning but otherwise the rules are the same I think that\u0027s all I\u0027ve got on this slide is it only unless not worry about this one for right now yep thank you all right thank you so that takes us running to the mic yep stick around that mic maybe this room is really big and it takes a while to get to the mic there\u0027s closer to the mic : so from a very quick look while you\u0027re giving that talk this looks to avoid the obvious solutions where things like RTP and stun please do coordinate with a bt car because they have a draft on this demultiplexing so just just just to make sure everyone is happy with that I think it would be really useful if we could get the multiplexing with stun as an invariant from the bit patterns for that the appropriate bit pattern so we can always do that d-max it\u0027s something we have discussed before in this group July anger are you trying to put that in this so that we don\u0027t have to litigate that again in a future was not quick I mean that\u0027s that\u0027s a reasonable argument but I not should I buy it for Lee but I think we\u0027re going "
  },
  {
    "startTime": "00:34:35",
    "text": "to want to do Pittsburgh quick which means we\u0027re going to need NAT traversal which means we even need to have an invariant that we can deem axe or stun or we need to reinvent that functionality and quick I think it\u0027s much easier to have an invariant that we can dmax just based on the first bits which which we have if if we stick with those first two bits I I want to I want to say that good just the the whole notion of invariance of things that we were choosing to keep fixed so that we wouldn\u0027t ever change them and and that\u0027s it\u0027s a minimal set there are things that can naturally become invariant just because that\u0027s our deployment works sometimes and I\u0027m fine with Stan de-multiplexing one of those I don\u0027t think we need to codify it but my feeling is it\u0027s likely to be extremely important and we\u0027re basically making it very into bits the first two bits of the patent the packet and that\u0027s it yeah I don\u0027t think I\u0027m in favor of that um for several reasons first of all that there going to be an enormous percentage of the correct connections the world you should never need to be much was done like all the ones between we have clients and wind surfers basically um um so that\u0027s point one point two is the primary need for demultiplexing is the endpoints of gene multi blocks and the primary different variances people are not part of the connection to be able to do things with do things or not do things with the wave packets and so the endpoints are perfectly capable of arranging like to only do versions are quick which not the new Ghost is done um and so I don\u0027t think the purpose of invariance is not like nailed down design decisions in perpetuity is that instruct people who are not part of the connection how to manage the packets I would expect that if we want peer-to-peer to work it\u0027s one thing which the firewalls and middleboxes will need to understand we talk allow through and there\u0027s already a lot of infrastructure that understands time so I think this may be something where we we care about the unpassed devices okay so now we have Miriah presenting about the up straps and not Bryan yeah hi I\u0027m Amelia so we updated both of these it\u0027s not both of these drafts and we can go to the next slide so the manageability we updated them Philip based on issues we had and github so the manageability get one new section we added some illustrations some ASCII art for the quick handshake and we added some Texas it\u0027s good use considerations but there are no open issues in github on this document anymore of course we have to update the document to align us with the protocol specification at the very end but this is in pretty good shape next there was a couple of more open issues "
  },
  {
    "startTime": "00:37:35",
    "text": "on the applicable ax t and we did a lot more work we have three new new sections which got written and reviewed and merged into this version there was a little bit of editorial work on information exposure and connection ID based on the changes that had happened on the protocol since then and we have two pending PRS for the next version Thank You Martin which are also ready to be merged I think yeah the first one there will need to be held I think because that\u0027s conditional on that made some assumptions based on in-flight stuff that will not necessarily made so that\u0027ll need a little bit of work I mean as I said we have to rework a couple of things anyway when the trends our transport draft changes so we can merge it and change it later we can hold it I don\u0027t know it doesn\u0027t really matter that much okay next slide unfortunately we have some open issues and we need a little bit of help there some of these things are just questions about what to do and if you want to do it at all and some of these things we need actually people writing text because we might not have the best expertise for that so there\u0027s issue 11 and 29 which are still talking about giving more guidance about how to create your connection ID because you can encode information in the connection idea for the network there was a proposal or like a report like a proposal to make a recommendation that you should include a mech in the connection ID so on past device can also check that those informations are kind of correct that has a question mark because there was some discussion and it was not T if there\u0027s something you want to recommend or is needed or whatever so more input is definitely needed here and we addressed issue 29 to some extent but there\u0027s another question if we need more guidance there is an issue open that\u0027s issue number 14 asking if we need more guidance about application visible errors like what should applications do with those errors I don\u0027t think there are many errors many different errors visible anymore but it would be nice to give some guidance doesn\u0027t have to be much guidance but we would need some input here like from HTTP people or other draft authors there is a question if we want to explain the idea of the heck maybe that you can send if you have a message based application protocol you could send one message per stream and then you can cancel the sending if you don\u0027t need this message anymore which would like enable some kind of partial reliability so I mean this is the way how to use the quic protocol and it\u0027s it\u0027s heck to get some partial liability and the question is to want to spell it out or is it something we don\u0027t want to recommend and I see people come into the mic no please do not recommend this this is not a good not recommend but I mean "
  },
  {
    "startTime": "00:40:35",
    "text": "it\u0027s so you don\u0027t want to even talk about it I heard about it like I had to like duct tape my head back together so no people can\u0027t do it still right generally I think it\u0027s completely reasonable to do for what it\u0027s worth I don\u0027t think we need to recommend this I don\u0027t think we need to say anything about it I mean people who want to do partial to laboratory know exactly what it implies and I think they will do it I don\u0027t think anything please by the way when we do this I don\u0027t think anything breaks we want to give some more recommendation about when it makes sense to cancel streams or like on a more general level without having the specific use case in mind I didn\u0027t look at the text but um I think like like like I get I get that the working group is decided not to take on partial reliability as a as a work item just yet but like we like know how to do it we have drafts like let us not like document things which we know we know how better ways to do know but I mean this is documenting the way to use the current quick protocol right you can use it that way if you want so I don\u0027t so to be clear this is not I don\u0027t I don\u0027t I don\u0027t think we should we should really get in the business of trying to figure out what applications should not do especially on things like this API use is always something that we figure out how our application used later but I if somebody thinks has a problem in doing this I think that would be good to document so actually yes if you think that it\u0027s not recommended then we should well I guess I\u0027m certainly I mean if you\u0027re you engage me here are gonna have to do that I guess I will but like um like I guess what I\u0027m saying is that these documents how force like this document has force um even moral force or instructional for educational force then it ought not to do things that like we know are like not not advisable and like and the fact that like I think every think they\u0027re like a bunch of people here I\u0027ve been working on something which obviously is better it\u0027s just this is not supervisor pool so like I\u0027d be happy to say we have intrude but it\u0027s not gonna be removed like then yes I\u0027m happy to like sprite like some screed about why it\u0027s bad I just said one thing I\u0027m gonna walk back to the I think it\u0027s important to say why not just what another one will litigate this right now but I know that people are doing this the people who are doing the quick API for the web are doing exactly this inadvisable or not so actually if you have real concerns about it if you can give me arguments why this is bad we should that\u0027s what we should document like I think that\u0027s that\u0027s all you need to do right now okay Spencer Tolkien says the outgoing transporter II director responsible for quick partial "
  },
  {
    "startTime": "00:43:35",
    "text": "liability and FEC and stuff like that are still out of the explicitly out of scope for quick as that is chartered today so that probably has a great deal to do why do with why the working group stopped working right very much which is good hopefully we should talk but but that\u0027s the mystery of why it\u0027s not being or started a quick working group is because it was explicitly excluded in the current Charter I believe yeah you ain\u0027t sweatin Google I want to add that I think it\u0027s fine to to say nothing in this regard especially given Spencer\u0027s comment I think that\u0027s totally acceptable I also want to argue that this totally works like you can deploy this in a fairly large application use like a million streams and make them all unidirectional and make them unreliable and like it like totally works you can run a VPN over it you can do a whole bunch of other stuff over it so I think arguing that it\u0027s like completely non viable is a little bit facetious okay okay can you add your arguments to the issue just like get some comments there and describe what your concerns are I mean one argument would be that it\u0027d be we are gonna I think in quick version to well and in the next version of the ITF will work partial reliability specifically been proposed as one thing to work on so it seems kind of weird to have a nob strafes give a way to do it and then have another way to do it in the future version of the protocol the point is we\u0027re not giving them a way to do it the way to do it is already there the question is should we talk about it but personally I think no because would you would you rather have people do it this way or would you rather have people do it a the way that that the future protocol will offer I mean this section could say you know you can do it this way but like hold on we will do it in the next version that what that\u0027s what the section could say or could say nothing and so like absent consensus to say something it says nothing generating that I\u0027ll agree with that I think there\u0027s a problem here the problem is that when we talk about partial reliability as a noun it\u0027s not clear what one is talking about and ever end up having to describe that and that\u0027s the problem even when we talk about something that was excluded from the Charter that is quite different from what thatis both of them are partial reliability and that\u0027s where your problem lies so instead of walking into that mess it\u0027s good to stay out of it and all our applications to do what they do best use stuff and we learn something from that Tommy Polly Apple so I\u0027m going to agree with everyone what everyone\u0027s saying that we shouldn\u0027t be mentioning the partial viability hack in here partly because we want to move on to other things partly because you like adding that kind "
  },
  {
    "startTime": "00:46:35",
    "text": "of sets a precedence for if we include this could we include all the other wacky things you could do with the protocol it could be essentially an unending list now - on the flip side I think like things like how do we handle errors in how should applications deal with those are things that applications must face and they must have some behavior with so I think adding text around that things that are part of this is important so let\u0027s focus on the bits that we do need to give guidance on that are really current concerns okay let me ask you another question does it make sense to give more guidance on like because you can cancel a stream of transmission right giving more guidance on that bit because that\u0027s what does it is exposed by some interfaces so I think actually to that point giving guidance around when a given side closes a certain side of the stream like do you send your stop sending at the same time you send your reset stream or do you do them asymmetrically talking about the strategies of why you may do those things would be useful and that kind of addresses this without getting into the topic of partial reliability the cue is claiming you help with writing some yeah I\u0027ll give a PR for that no it\u0027s closed had a lot less room I must say that I\u0027m profoundly unimpressed by this discussion okay we know for certain that this stuff that is up on the screen and described in draft is going to shape in product before the quick RFC\u0027s actually make it out the door we don\u0027t have a choice the only choice we have is whether we want to provide a forum for discussion of this topic at this time or not if we do not provide such a forum we have no influence we as the IDF over how that discussion forms and how the consensus forms that we will have to live with the consequences of that consensus so Harold nobody is trying to shut down the discussion on what shape our shit will rely really sure taking quick it\u0027s specifically about this document I understand what you are saying I am saying that we have a minimal chance of influencing what is happening and making it sound like you\u0027re trying to push away the discussion reduces the chances that you have of an influence in the discussion I don\u0027t think that\u0027s what the discussion is about it was question is whether a an archival RFC that is gonna live for a long time should should mention what what much people consider a hack when there\u0027s some other version to "
  },
  {
    "startTime": "00:49:36",
    "text": "do things whether this shifts or not is it almost doesn\u0027t matter right our clientele RFC\u0027s we have a ton of RFC\u0027s that we we have RFC\u0027s for st4 I mean IP version 5 the amount of junk in our FCC is is large and that\u0027s a positive thing we should worry about how we shape the discussion and how we shape the community more than we worry about getting yet another piece of operational advice into the RFC serious thank you so expensive Arkansas responseware director talking about what I am curious about and my curiosity does not have to be satisfied here is if people are already going to be doing partial reliability with one message with prestream this way whether there is what the what the incentive for doing partial liability some other way might be and like I say that may be that may be a conversation you all can have with me after the plenary but you know I mean like or anytime doesn\u0027t get doesn\u0027t care don\u0027t want to spend working group travel all right but as the guy who at least theoretically would be doing publication would quit yeah prepares they only publication requests for stuff like this at least through March you say I\u0027m kind of curious it may be that the person who takes my place in March would also be curious so said we closed the cues awhile back that was an exemption for Spencer but if you can make it brief go ahead Saturday doe at an architectural comment actually and that is the way the Charter describes how these things will be done as is a series of extensions and so there is an architectural decision embedded in the way the Charter is describing partial reliability and certain other things as presumed to occur as extensions and I think there\u0027s a question then that\u0027s about this document scope of whether it is describing the applicability of cork wick or whether it is also describing the extensions whether they have currently been specified as standards track or whether they are available on the wire because we know that this is happening and I suggest that one way of getting yourself out of being wrapped around the axle on this is to put in "
  },
  {
    "startTime": "00:52:36",
    "text": "this document that the considerations which derive from these extensions will be treated separately and to create a new document which can then handle that in other words limit the scope of our current ops drafts to the current set of quick-like the current set of quick art seats well so simply I put it the other way listen create another document that is for the extensions of quick and the operations and manageability considerations for the extensions and then make a forward pointer that says go there right there give your PRS there when you have extensions because I think the other thing that you end up risking and the point that I think Spencer was making is that if you don\u0027t do it that way you end up losing partial reliability fitting into this system architectural II as an extension it becomes something that an operational practice rather than a protocol extension and those are distinguishable and probably not as good so that any sort of manageability draft it\u0027s very clear that we\u0027re only discussing the specific version of quick because you know we don\u0027t know what other words will look like and maybe we can be more explicit about this and the applicability but I think the same applies because like there are things we discuss which are not invariant they are very version specific so we can only discuss the specific version I mean like yeah I mean like if there are big changes it just means that you have to also all new applicability statement or it would maybe just be applicability section in a new document whatever I don\u0027t think we can avoid that okay the last point on this slide is there is an issue describing the problem that even if you have configured your system to not expose a connection ID it could still be possible that your connection that your transmission sends a connection ID for example if you do pass into u discovery so should we mention this and explain this to the user that this can happen ok so Martin Thompson if someone provides you with the text and that text is not bad take the text yeah I think it\u0027s not a lot of texture it should be possible so but we need some input on the first two issues here yeah I was just gonna say that I was gonna put Martin Duke on the spot here a little bit but saying that he\u0027s been doing some thinking on the first one a fair bit of thinking on the first one in terms of its interactions with load balancers and various other things and it might be valuable to sort of figure out not right now but as that draft progresses has that effort progress is it that doctor it\u0027s already some text in "
  },
  {
    "startTime": "00:55:37",
    "text": "there the question is if we\u0027re missing yeah so month also know having a back channel would tell me about this the second point here my assertion here is that if we don\u0027t specify error handling for the application level errors in the application the whole protocol we have failed and so we\u0027re having them in this document would be redundant I would rather have them properly specified in in those documents so Tommy asks whether the transport level errors would elicit reactions from the application protocol as well and that\u0027s an API question I\u0027m not or if it\u0027s quite I\u0027m not sure if I care about that but if I if I were to care about that I would expect the application level protocol to to precisely specify what actions that expected endpoints to take in the event of receiving particular errors so I would like to disagree to it but on your first point and so far the HTTP mapping yes you have to discuss those things in the HTTP document but it\u0027s a general-purpose protocol and I don\u0027t think we will specify a mapping document for every single application we find out there so giving some more general guidance might be helpful as well all right we may disagree on that point okay let\u0027s take this offline moreover over time we need to be more active on these drafts on the list so Gauri first path MTU discovery problem what is it no it\u0027s it\u0027s an interface question should we because it can happen that even so you configured your connection ID to not show up in the packet that you might still have it in the packet for for example path MTU to carry purposes and it should we want the application about that this can happen I will think on this but now I\u0027ll go to the path MTU discussion next door in six month okay we have some moral issues I put them on a separate slide because those open issues are more about like you know what interface what things should be exposed over an interface and can we give any guidance and as we don\u0027t have an actual abstract interface document it\u0027s like not clear what we should do about these questions for example the first one is in theory it\u0027s possible that if you send it\u0027s your RTT data and the sender the receiver doesn\u0027t support your oddity and tells you one round-trip time later you actually could make a decision to not send the same data anymore again because they are outdated in sent new data instead should that be exposed as an interface of the application and if that\u0027s exposed what guidance should we give the application missionary Tamar Mia I see a pattern there because you\u0027re worried about trying to make general discussion of things that really belong in the application mapping yeah I can easily see different application making different decisions "
  },
  {
    "startTime": "00:58:37",
    "text": "there and I think that it does not belong in a generic to have it be longer if you want the purpose of what we do is to ensure Interop sir this interim will open at the application layer so if the if the application mapping doesn\u0027t describe what to do we don\u0027t get application interrupt so trying to get application into without having the application specified that sums we have a very stretch that that\u0027s I mean that\u0027s the whole question if if there is no general recommendation you can give it doesn\u0027t make sense if you can say this class of application should do this and this class of application should do this it make sense to give some guidance here and I think like for the first point it clearly is right if you are an application that might have if you for example if you send a request and you might be in a situation that like this request might not be up to date anymore and you want to send a new request then you don\u0027t have to retransmit the data you can send you data there\u0027s a general class of applications that can do that I really believe that this is application specific yeah I mean this this is a question I have yeah I think this one at least I\u0027m not taking a general position is application specific the within in TLS we concluded that you had to write a new mapping document fraud I handle 0tt for like every single application so I think probably this case issue a should here as well for quick because quick eyes like approximately the same like RDG like properties as like you know um as other applications I know they\u0027re worse actually because like there\u0027s like to pile of ways or did you keep objected but like like one way Sergey congestion is like a OPN mismatch right at which point you certainly have to do something that is not just retransmit so I think like this is probably an awesome thing you can make it generic guidance on I mean we put like to say like TLS case assembler we punted it suppose anger like to Icarus point as well that is one application might choose to do both behaviors as well for instance if the AL pn nacho is after rejection it might want to automatically retransmit however the ALP end is not matched that it might want to do another thing so an HTTP application might want to do something if it\u0027s supports do different ilbm types I mean this is totally this is totally understood the question I have is if you have this interface you have to have a quick application right you have a library they provide to this interface is it so obvious what you do what you can do is its interface that we don\u0027t have to recommend anything because everybody will understand this or is there something we need to tell people how to use this interface correctly for whatever application they have I mean a more valuable thing would be the considerations of an interface between an application and the quick transport see like these are the options you might need to provide and depending on the other aspects of what the interface provides they can choose to express this "
  },
  {
    "startTime": "01:01:37",
    "text": "now where they want for instance like use different words for this or something like that like Apple might have requests idempotency another thing might have some other concept which maps cleanly to these properties but one might be better is like the general considerations of like oh you do this and this might happen these are the you might choose one of these things it\u0027s what I\u0027m talking yeah I think it\u0027d be useful yeah so I we really do need to finish this one up unfortunately but Martin really quickly love Thompson I was actually going to make that point I was gonna say all these issues we have not had any discussion on the list so we\u0027re not really prepared to have a good discussion here thanks to Miriah for actually putting them up on the slide so we can see them but I\u0027d rather not discuss any of them yeah today and the question I have for the folks in the room is put your hand up if you\u0027ve read one of the last two revisions of these drafts okay you know we need to have people take a look at these more seriously so I have one more general question here because we\u0027ve been talking about having a separate document that actually discusses an interface or an abstract interface or whatever and I like yeah you have you have a mapping there but like I\u0027m actually talking about like these kind of configuration knobs or whatever that could be described somewhere and I don\u0027t see this coming up so that that\u0027s why this is like all classic slide because I\u0027m not sure what to do with this I don\u0027t think we I don\u0027t I will not wait for this document anymore because I don\u0027t think it\u0027s showing up suddenly so I guess the approach would be rather to you know a zoo more and make a recommendation if you have this interface you can do it right that\u0027s makes sense I think that\u0027s kind of what I\u0027m just said so okay thank you okay so let\u0027s go to the issues Martin do you want to do this feet okay this presentation yeah okay so I\u0027m not gonna take any questions or comments on this one I think I just want to make clarifying questions are only basically we\u0027ve had a lot of discussions about this one the slides here are rotten but they do contain some interesting things that allow us me to describe the problem that we\u0027re talking about so the problem here is that we have the potential for a server to be in two different states over time so when you deploy a new version of a protocol or roll one back there\u0027s this period of time where you can have connection attempts span that change and you think you can roll out a cluster of servers and you upgrade some of them and have some of them still on the old version you might find that clients hit one so server instance and get a version negotiation back and then "
  },
  {
    "startTime": "01:04:37",
    "text": "they hit another server instance and that server instance is expected to be able to produce exactly the same answer and we\u0027ve kind of rely on that for the the validation process that we do because the server\u0027s handshake message the service transport parameters contain essentially a copy of the version negotiation packet and in the case where you\u0027re deploying a new version you don\u0027t so you just give forward a slide or two slides even the problem here is that the client will fail version negotiation because the the two don\u0027t match so that\u0027s that\u0027s problem number one let\u0027s skip over the fix here because that that\u0027s not necessary fixed necessarily skip more now there we go there we go back one so the problem here the problem here is that we have an incentive arrangement with the current version negotiation scheme that that says that the clients pick the lowest possible version that they support all the most widely deployed version and so during the introduction of a new version of the protocol the clients still remain incentive to provide a an initial packet in the old version because if they guess wrong they\u0027ll get a version negotiation roundtrip and that\u0027s you know round trips and money and so you picked the most widely deployed version and you ultimately leaving the server with them with a choice well you end up stuck with the old version and you can sort of get around this by remembering things that if you talk to the server and it supported a particular version last time well maybe you\u0027ll try the newer version next time it\u0027s a little more complicated you end up in some sort of suboptimal arrangements people thought it of course that all service helps where you have it but that\u0027s not not a guarantee and so we\u0027re exploring a couple of options around solving these problems and these slides covered one of the options that we discussed I don\u0027t think we\u0027re done with that discussion yet there\u0027s I think I\u0027ve heard about four or five new ways of sort of approaching this problem part of part of the problem that we wanted with one of the solutions was do nothing even for the first one which is kind of a little bit odd but if you think it through it makes a bit of sense so just wanted to make sure that people understood that we\u0027re we\u0027re we\u0027re grappling with this one at the moment it\u0027s likely to take a little while before we sorted out but this one\u0027s pretty high priority for those of us involved if you have a idea that you\u0027d like to add to the pile I have a I have a pile already and we\u0027ll be sending a note to the list with with the list of the things we\u0027re considered in the reasons why each one of them "
  },
  {
    "startTime": "01:07:38",
    "text": "might maybe good or bad Eck has already started a list which is a pretty useful thing so expect something very very soon I hope to solve this in 17 but we\u0027ll see how that goes one of the chain one that several of the proposals change the invariance so I\u0027m a little leery about those that\u0027s it thank you go for it markku f5 so when we when a client gets a version negotiation packet it is supposed to respond the new initial is supposed to have the same destination connection ID correct okay so I think in the general case that will be routed to the same server and so we won\u0027t have this problem so that the problem is that if you think about the way this this is arranged if that server is upgraded and it still remains you know the same five tuples same same destination connection ID the routing remains the same you could still have a situation where you flip the flag that that enables the new version in between the time where you sent the version negotiation and then when you continue the handshake and the server doesn\u0027t maintain state between those two points and so from the point that it sends out the version negotiation and the point that it sends out its flight of handshake messages it can change its mind about which versions it supports and of course you can do things I take the server out of rotation and all sorts of other things like that those are some of the ideas that people have discussed but but ultimately you do end up in that situation okay cuz of Hawker my point would be there or the destination connection ninety might change because it\u0027s not in invariant that the destination connection ID must be hey doctors it\u0027s a V one specific thing okay so the variants of transport parameters we were going to skip correct [Music] so to mutton do you have this do you have mutton same in slide deck for the arm I can look it up one moment yes I know yeah but five minutes before the meeting started if I recall correctly I thought you\u0027d got them to an earlier I\u0027m sorry mark I thought I\u0027d yep that\u0027s terrible here a tear will probably have HTTP issues we can discuss in the meantime well how about chair so let\u0027s give it a second I I\u0027m almost there I think if it\u0027s where I think it is "
  },
  {
    "startTime": "01:10:41",
    "text": "although the network is being really slow yeah okay well well that\u0027s loading let\u0027s do the HTTP issues Mike plod so when I go back and compare what the notable changes have been it basically boils down to everything we agreed last time we were going to do is now in the draft so go back and look at last times presentation and that explains the changes next so a couple smaller issues that have come up since the interim in terms of exactly how we want to handle things at HTTP we have this nice spectrum where how do we get the two settings frames from client and server and what\u0027s the relationship between them right now when you send when you set up a connection the first frame on the control stream in each direction has to be settings frame the client is not supposed to interpret any of the server\u0027s responses until it\u0027s seen the server settings frame the server is not supposed to send anything on a response stream until it\u0027s in the client settings right so in the one RTT case the server sends first as the the half-heart et data and the 0tt case you remember what the settings were from the last connection client since the settings frame in response to that and then server will update it along with its responses so in the declaration style you send the settings frame as a statement of your own capabilities and that\u0027s it Kazuko had reached the possibility that we don\u0027t actually have noticeably more head-of-line blocking if we make this a full negotiation where you have to see the other side settings frame whoever speaks first you have to see their settings frame before you can generate yours which gives us the advantage that you can have the full offer select negotiation but it departs more from the HTTP style on the other extreme if you go to pure defaults then there and we eliminate the head-of-line blocking the currently exists slot so we can get out of the head of unblocking box but that has the drawback which is true of the current system that when you have that "
  },
  {
    "startTime": "01:13:42",
    "text": "second settings frame there\u0027s no clear marker as to when that takes effect so you have some level of well this has always been true but maybe I didn\u0027t know it was true slot so basically where we stand is we\u0027re using the h2 style which kind of has both of these drawbacks and if we choose to step in one direction or the other we could get rid of one of them I don\u0027t know how pressing that is my personal inclination is let\u0027s stick with what we\u0027ve got but both of these have come up and they have certain advantages so mutton Thompson I\u0027m gonna speak out against the two changes although not too strongly against the defaults one I noticed the full negotiation one you have this situation where one side makes the offer the other one makes the answer depending on whether you\u0027re doing 0 RCT or not and whether you\u0027ve accepted it which gets a little weird no client must no server settings before generating settings for him which is zero fut it remembers the previous size so you say the server always goes first right apply it always responds correct yeah that\u0027s a little weird from from the perspective of the arrangement that we have mm-hmm so I very much prefer not to have that one I\u0027m somewhat okay with having defaults for the purposes of alleviating the head-of-line blocking for things as long as those defaults are really really simple yeah so no header table use for instance would be an it would be an obvious one but we have some some settings that are that are not conducive to that like the header block size so that leaves me back to the middle again and I think that the head of line blocking is tolerable and with one walking behind the handshake anyway so let\u0027s just live with it yeah I hesitate with the defaults because the default would have to be you can\u0027t use the queue pack dynamic table at all which is rather a drawback and having a sufficiently small request sighs Jen Iyengar I think I\u0027m basically exactly what Martin said I don\u0027t think that we have given that the handshake packets are already head of line blocking this is just one more packet after that and I think it\u0027s completely reasonable I leave with one question do we have a use case for the full of a negotiation full offer select negotiation that is pressing enough to sort of try and push it this way I know kaswell\u0027s gonna come up and say something to that so I\u0027m asking the question and I walk out there\u0027s an actual use case hopeful negotiation and that is that the peer can wait for the other oh I\u0027m the endpoint can\u0027t wait for pierce signal about two particular sites "
  },
  {
    "startTime": "01:16:43",
    "text": "for example and decide not to create Cuba can hold a stream or two called to pack Dakota stream and that helps memory constrained devices and my argument uh-huh and my augment fall through negotiation is that in the current form we already have the head of line blocking for the streams that sends requests so having full negotiation just moves that lock to when you send sittings so it doesn\u0027t cause any practical difference between the implementations nor about how much we see the heddle client booking so that\u0027s my reason I prefer negotiation super diner I\u0027m kind of worried about given the current state of as I\u0027ve definitely opposed to offer select offer offer select semantics but it\u0027s and kind of also concerned about the current state of affairs where you have to wait for the settings frame then I know there\u0027s a lot of discussions happen a lot of like considerations around this I must prefer the defaults mode because the settings frames we\u0027ve said that it has head of line blocking we have no idea for instance right now because you have to send it requires you to send like coolest packets in point five RPG which is more complex to do and some of the whole nations might do it some the limitations much is not to do it but by default you won\u0027t get the foreign scene and then HTP do you have this kind of defaults mode right now where the client speaks first before seeing the settings frame so you know that kind of works in this reasonable performance the other point I wanted to make is that having defaults might also unlock the ability to have to use the defaults in 0rq T as well currently when we\u0027re looking at implementing the API to store transfer parameters or sorry cube back parameters and other settings frame parameters in 0rq do something it is kind of painful to do it is doable but it\u0027s definitely not for every not for the faint-hearted so in that sense it might make it simpler for people who are who want to use defaults and who have not seen settings for him to see like I will get a reasonable amount of performance but I won\u0027t get the extra performance I get by caching the settings frame in case that they are bigger than the default values Alan and Dimitri on jabber would like to say that in both implementations they\u0027ve decided to default the queue pack table size to zero if they need to send a response before settings have arrived and as Erik Kinnear myself there is some attraction to getting rid of the head of line blocking and doing stuff with the defaults but again if that puts us into an awkward case where you know yes you\u0027ve gotten rid of the head of line blocking but you\u0027re now effectively head of line block "
  },
  {
    "startTime": "01:19:44",
    "text": "doing anything useful anyway does that really help so I could also see a world where we go half way that we allow the server to respond in case it hasn\u0027t seen the client settings frame but we can be pretty reliable that the client has seen the server settings frame before before it sends you requests so until 7:00 I\u0027m hearing a lot of people saying defaults are okay but I just don\u0027t know how to implement it so if we if we could see how that would be implemented then that would be great but I don\u0027t know how to do a default for header block size for instance because I know that someone\u0027s gonna want something smaller than whatever default we pick and zero is the only safe default we can pick and that means don\u0027t send requests which is a bit weird that that\u0027s not really all that useful at that point so that\u0027s the your back to end of line blocking at that point so I don\u0027t know how to solve that problem so Eric can hear yeah yeah con that sorry different rules for different settings which is scary but not totally insane to to Martin\u0027s point about if if you have things that you can set reasonable defaults for that brings you back to head of line blocking does that mean that for cases where you didn\u0027t need any of those values or or that wouldn\u0027t have hampered you there is some percentage of the population that is now unblocked and everybody else is just in the current status quo because that may be worth the complexity of doing it it may not be super nine Eric doesn\u0027t zero mean that you don\u0027t compress headers not that you can\u0027t send any others no yeah so that\u0027s a block size is measured by the number by the size of the headers in it and so that means you can\u0027t put any headers sudo headers the works on the wire so it\u0027s kind of awkward right yeah so if I can interject to remind folks in h2 we have defaults that previously exist but then one so you get the settings frame you could discover reality is lower than the defaults and so you have to be able to deal with any setting reneging on itself and there are cases where that gets really ugly so one of the changes that we decided to take early on was to say you can never reduce a setting and consequently you have to wait to see the settings frame to find out what it is prior to the settings frame it\u0027s simply unset yes one of the reasons who I HTTP "
  },
  {
    "startTime": "01:22:50",
    "text": "to behaves the way Matt described because is because it depends on the TS version two which endpoints speaks start speaking first because in tears I\u0027m going to the circuit the client speaks facts and in one by three the server speaks first but in case of quick we know when the waiter that the client speaks first or the server speaks first so that gives us the possibility of having full negotiation and I\u0027d like to also note that quick transport actually uses that feature to do a better negotiation so the current way of using the declarations form is actually contract contract contradicting from what the transporters and to me it seems to to me that our I mean how we negotiate to what the transport does would be a simplification transport parameters a declarative to this this is this is currently aligned to what the transport does for example tears are meters are just to clarify you mean in TLS not in quick right because quick transfer parameters are declarative all right yes a bit what what about what I tried to point Hal was the transport parameters I exchanging of quick is absolutely exchanged in a request response way because it\u0027s a part of the earth project but we have we have consistently avoided having either side Sheen formulate their transport parameters based on the other side\u0027s transport parameters yeah so it\u0027s a wild the transport mechanism for the transport parameters is as you say the semantics of the transport parameters themselves are not of a an office elect kind okay I agree with that but on the other hand that doesn\u0027t sound like a reason to not have a full negotiation especially when you could have made opening quick keep up the co2 stream for example so offhand I\u0027m not hearing convergence on this so discussion continues on the list Allen which is one question outside of the cubic negotiation is there any other feature that could use office elect among the set of things that we know about the set of things that are in the draft now I think the to me the primary use case of this would be mutually exclusive extensions so I support three different varieties of priority scheme here are my three now you pick one before you start "
  },
  {
    "startTime": "01:25:50",
    "text": "sending me priorities so clearly we would not have that in the draft to begin with I\u0027m sure we can find another way to deal with that yeah with the hardscape yeah if you have like a preferential if you have a particular way of ordering things then you could deal with that in declarative way too right so then it boils down to basically is the cubic question compelling enough for us to move in this direction and be inclined to say no but do we want to hum ready I think we\u0027ve got the three-way split on this one have a week I feel like it needs a little more discussion I think we could take a home now and go in the wrong direction I\u0027m I\u0027m with you on that one cuz I\u0027ve heard people arguing for defaults but we don\u0027t know what that would look like yeah okay Kazuo arguing for negotiation but I don\u0027t know what that looks like not really sorry I think I\u0027d like to see slightly more fleshed out yeah yes the list we can compare well in the spirit of the speed-dating thing perhaps we we have something more fleshed out I don\u0027t care whether it\u0027s a PR or a simply an email outlining all of the design but if we have something more fleshed out in a well certain time that would be very nice all indications are the spin bit stuffs can take about 15 minutes tomorrow so I\u0027d like to check that back for version negotiation and hopefully solve that but we\u0027ll see janae anger for what it\u0027s worth I don\u0027t I\u0027m not sensing a lot of love for the for the defaults one so mighty does it\u0027s a two-way split but I think we\u0027re on the weeds at this point okay let\u0027s move on for now but continue on a list and flushed out of it yeah thanks alright so next one all right so we\u0027ve also had it raised that we because we have the length at the beginning of each HUP frame there are cases where the server application is going to be generating data without a defined you know size to end to payload but at the same time having to write the header with each chunk that comes out when the chunks are potentially small in Kherson overhead and there was a proposal to have some way to mark that this is going to be the end this is the header of the last frame on the stream and everything else on the screen is probably data there may be a use for this in hetero spit data is the most compelling so next slide we can have a "
  },
  {
    "startTime": "01:28:53",
    "text": "spectrum that right now you length prefix everything and the argument for that is this is fairly late this is not critical you know it\u0027s a it\u0027s a nice performance win but it\u0027s not going to change the world if we do something data frames are the place where this gets you the most impact but it\u0027s kind of weird that data is the special blest frame or we could do something entirely new in framing initially I was thinking length 0 means runs to the end of the stream for all frames for some implementations that\u0027s challenging I\u0027ve also heard the proposal to have a new frame type that says okay we\u0027re done framing and everything else is just body well I want apologize Mike but could you go back one slide cause I think I just kind of like lost the plot for a moment here okay so basically the issue is you\u0027ve got some application above HTTP that\u0027s dynamically generating content Sharpe and handing it back to you in chunks as it produces it and you don\u0027t know how long that ultimate payload will be so you can\u0027t just say you know payload length type as data and start writing but you have to take each chunk as its handed to you length prefix it and put it on the wire when right yes I\u0027m with you here but the stream frames do have to have their length of L length right yes but this is inside a stream frame okay that\u0027s awesome because they send yeah sure the apply thing so you\u0027re talking about the interior length here what you\u0027re so this is saying instead of having two wrappings that both have length prefixed let\u0027s just let the stream frame be sufficient yes by Google yeah so I\u0027m I\u0027m a very large fan of doing something here the reason is I spent like the rash last year trying to make quick actually kind of fast and adding layers of framing inside framing make it much more difficult to make large content serving fast I\u0027m not saying I can\u0027t do it but the the API is the more layers of framing and lengths inside framing and lengths you have like it just becomes increasingly difficult on both sides to get this right and get all the abstractions right and and so mostly from application performance perspective like not having something here makes me sad I think the consistent rule is the most obvious one to go with as it clearly as a use case personally I\u0027ll also point out that zero is currently defined as invalid right now we\u0027re not stealing a "
  },
  {
    "startTime": "01:31:54",
    "text": "value or something we\u0027re defining something that currently if you receive a zero you are supposed to close the connection so we\u0027re actually defining something that\u0027s currently undefined yeah this wouldn\u0027t be massively valuable for it to us I mean it\u0027s nice to save the bytes but it\u0027s mainly I think it\u0027s gonna make a lot of implementations of quick a lot faster and that was a big complaint of h2 over and over is that it\u0027s hard to make a fast implementation and now that I\u0027ve looked at ours I know why yeah I mean I guess know that I thought about it I have some sympathy for this the yeah I guess I I sort of feel like the fact that we\u0027re having discussion needs were wrong somewhere in the design earlier when we already like had like this mechanism for having frames and chunks and then instead of like having these things which you wanted to be Nandi machst I\u0027m the door on a different like thing they\u0027re like going together and some long sequence of bytes which it have to be MUX well so the history for that is Google quick puts the entire body on a separate stream so you don\u0027t have this problem but for covering the full flexibility of h2 you have to be able to put a push promise in the middle of the body and have consistent would ring and the only way you get that and quickest to have it on the same stream so you have to have frames for the body as well as I say I have some sympathy for this fish me I don\u0027t think we weren\u0027t wrong somewhere like earlier but perhaps this last thing is the right answer given where we are the design cycle I think I couldn\u0027t go at one point right we went wrong somewhere in I blame push as I think I think it is the the idea of what special frame is very appealing to me personally it\u0027s purely additive for people who care about it in terms of feet turning is of course but it\u0027s more code and so on but I think that it\u0027s a it\u0027s a it\u0027s a nice way to handle the special case where you really don\u0027t care for all the frame if you so we just imagine a beautiful perfect future world where there is no push you don\u0027t really need you you could just use all of your bodies could just be this right unless you have to reverse yeah fuck you us too but language problem yeah don\u0027t take my trailers yeah sorry about that if fair enough that but but even then the common case is that you\u0027re going to have just body on these on these streams and I I think it\u0027s worth spending just a little bit of time thinking about how to optimize for the common case and if you can if you can do the same thing which is you know the the previous slide does the length and I suggest that he use a length of zero and a type of zero for this new frame type thing it basically I think size of zero is currently is currently at the data frame right so so "
  },
  {
    "startTime": "01:34:54",
    "text": "this then becomes the length of zero for the radar frame but anyways that\u0027s that\u0027s that\u0027s that\u0027s encoding treating this specially is I think valuable to do because I expect that to be the common case when you\u0027re looking at bytes on the wire the other place we\u0027re having it supported in other frame types may be valuable was that do you can do the headers client requests typically do not have a body and so you just put a headers length of 0 and then right to kupack yeah so looking at the time I\u0027m gonna cut the cue from Jabbar Dimitri says to Ian that you\u0027d still have to support piers that frame data which means that the complexity argument is moot unless you advocate dropping size 2 HQ frames cuz the hope I just wanted to point out that server timings as a trailer is there pretty much pretty useful use case for trailers and I hope that many service was supported here again full Sun concrete proposal more more pleasure data to diversity okay right now alright one more issue that\u0027s been brought up again something that we have somewhat lost in the transition from H 2 and H 2 you have the priority information embedded in the header screen and then you can use priority frames subsequently to change it we can\u0027t do that with quick because you don\u0027t have a defined ordering between things and so priorities have to be on a stream that gives you a consistent ordering of all the changes to the priority tree now the issue that that creates is until that priority frame arrives you don\u0027t know what priority the request should have and it\u0027s possible that a request is comes in gets processed and start streaming back before you ever discover where if it\u0027s entirely tree so I don\u0027t really have a proposal here because everything that I have been able to come up with is still subject to ordering Ken screw something up and so I think here the question is how upset are we about that and if we are upset about it does anyone have any bright ideas that they\u0027d like to [Music] so Martin Thompson I wanted to add to the piles about ask the question so what\u0027s the default priority and in h2 the default priority is you\u0027re attached to stream 0 because stream 0 is the control stream yeah rule of three whoops and so there is that problem root "
  },
  {
    "startTime": "01:37:56",
    "text": "of the tree is that is the answer we have a default and I think we just have to accept the fact that we have a gap and live with it because ultimately I\u0027ll use the f-word in conjunction with priority just like Jonah did with push yeah yeah fun so I think we just have to accept it and move on ok yep does anyone feel strongly in the other direction or shall I close the issue okay next is it worth adding a little text maybe yeah definitely one thing that we need to mention right now we point to 7540 for the priority scheme including the default priority of request when they are first issued we should probably at least clarify that you\u0027re not actually a child of stream 0 you a child at the root of the tree but also talk about the gap maybe right yeah ok ok so next slide last question around the HPP draft is about naming and I\u0027m kind of full so I\u0027m going to pull from a children\u0027s story that my cousin introduced me to last week Hicks lied where mrs. McKay has 23 kids all of them named dave and she\u0027s really regretting that choice and coming up with all sorts of names that she wishes she has given them but they\u0027re already named and it\u0027s too late well quick is not yet in the situation we\u0027d be--we\u0027d really you\u0027re saying we should name this Zanzibar buck buck McFate I second that but quickie make quick face so in terms of what we call HTTP over quick which does not exactly roll off the tongue and doesn\u0027t have an obvious relationship to HTTP 1.1 - please stop calling that hb2 over quick it has changed dramatically it\u0027s really not that it\u0027s not really quick because quick is the transport and when we discussed in Montreal several of the changes that we\u0027ve made in HQ and whether we want to bring them this extension stage should be to the decision was no we don\u0027t because quick is the future assuming all "
  },
  {
    "startTime": "01:40:58",
    "text": "this works out and we should keep moving forward so that suggests perhaps a name that does have a relationship to h1 and h2 indicating that we\u0027re continuing to move forward into the future first let me see those eyes scare the pants off me I\u0027m talking pure about you know a pair of pale green pants with nobody inside them I mean I\u0027m not gonna lie down the road over this but I think it sucks you know it gives the impression that like nobody\u0027s like that like HTTP was deprecated which it is not um it gives the impression that like if we ever want to extend HTTP - we\u0027re not going to and I mean fundamentally what this is it\u0027s a fork with one fork getting longer and one for not getting very long very fast that\u0027s what operationally is happening um and maybe we decided not to do a lot of maintenance on CB - maybe we omit maybe we don\u0027t but like this sort of like it\u0027s just over your brand name twice but I\u0027ve said my piece I\u0027m overruled then also the forgot okay if I can just respond to that real quick h2 didn\u0027t deprecated h1 so I\u0027m not sure where you\u0027re getting those implications and TLS 1.3 is not deprecated what - I absolutely did it\u0027s in its precise it was in the header yeah well h2 did not obsolete h1 we go around telling people they really ought to use h2 like if you are we gonna go around telling people to use quick I did I don\u0027t think I think that like yeah like I think I\u0027m telling people like you want like ought not to use h2 you ought to use quick like universally know um so again like you know I\u0027m not gonna like light on the river this but like I I don\u0027t think it\u0027s great idea and I\u0027d like to see a homily tell people the same thing that we actually do tell them about h2 which is you should use h2 unless there\u0027s a reason you can\u0027t in which case h1 is there and gen Iyengar so many thoughts first that totally looks like a sense above the screen oh come on it\u0027s it\u0027s gotten my creative juices flowing this is lovely and ironically you said quick is the future and this is ironical because it depends on which quick you are talking about right that is a quick which is the "
  },
  {
    "startTime": "01:44:00",
    "text": "present and that points us to a problem here we already have a Google quick and an IETF quick and we have trouble keeping them apart so I think it\u0027s very useful to have a new name first second I\u0027ll agree with a girl that there is a little bit of signalling issue here it\u0027d be nice to have an itch to prime but we can\u0027t maybe we can it is asking a presentable can we do h2 Prime the chairs are staring at me and given given that everything else is a rat hole I think HTTP 3 is the best idea that makes sense but yeah I mean I can get behind htv3 given that we might have to make sure that the signaling is meaningful around that sure and so I want to emphasize when when I sent the email out that instigated this I pointed out we do not want a rat hole on this or not we do not want to spend a tremendous amount of time we want to see if we can get to consensus on this proposal so let\u0027s let\u0027s not throw other names out please quite yeah and I will emphasize one other thing from the email which is that to call it it\u0027s gp3 I think we wanted the HTTP working groups input anyway but to continue their naming sequence we probably want their okay on the name change as well so we\u0027ll be not probably yeah so we\u0027ll be discussing that in the HTTP working group tomorrow yes yes set her T and it was actually getting up to ask a scoping question right so there are places where this string will appear in protocols and there are places where you intend for this string to be in the signaling you\u0027re giving to the larger community do you think those two actually have to match because in the strings I can certainly see a reason for doing HDB qv1 right hhq one as an indication in the protocol string of where we are this is HTTP over quick the first version of saying that\u0027s different from HTTP three but in a in a protocol version reasoning it may be the right thing to do I wouldn\u0027t go signaling to people with HQ one because they\u0027re gonna get confused with Amazon and HQ two it\u0027s not it\u0027s not good marketing but it may be good protocol and I think you should be very clear here which scope it is you\u0027re trying to solve here because otherwise the rest of these rats in the line and I\u0027m counting myself as the first rat in it are gonna be trying to brush different colors on the shed without knowing which shit it is they\u0027re trying to paint so I will bring up an email to answer that question and I believe it states hopefully fairly clear "
  },
  {
    "startTime": "01:47:05",
    "text": "to go here we are we rename our hourly HTTP document the hp3 and using the finally appealant a OPN took an h3 and just to respond to Ted there quickly personally I think that having divergence between the token and the name that we use for the protocol is not gonna help solve any confusion that has worked really well for a TLS 3.4 yeah Colin Colin fucking so I don\u0027t really care but why don\u0027t we just call HQ since everyone\u0027s gonna call it that anyway that\u0027s okay Pat McManus I\u0027m I\u0027d like to emphasize that this more we will talk about this in hte bits on Thursday yeah as that the previous slide had talked about this really is sort of an outcome of HP misses previous discussion in Montreal and sort of underline some like questions people people ask like is h3 a successor to h2 that we would recommend I mean the answer to that would be yes I mean we really do without deprecating and but we are saying that we believe this is superior and that\u0027s why we\u0027re pursuing this work and similarly you know it\u0027s going to maintain the backwards-compatible semantics promises of HTTP which are being better stated with HDTV core right now but I\u0027ve always existed and that that is compatible which is much more obvious to phrase to b3 than it would be for quick right because that\u0027s all so yeah this is this is obvious and the discussion we had about back loading features underlines the fact that you know the HP working group is willing to take on maintenance of this and view this as the place where new extensions and things should really be focused please PLEASE call it HTTP three because many logging systems only accept expected version number to change and please please don\u0027t call it version 2.1 because we\u0027ve already said that button to we don\u0027t have a mine unfortunate number and that\u0027s how people expect spencer dawkins probably for the second for the for this moment special honorary director just as just as a thought for the chairs and walk as the ops area director who became the yang area director had a proposal for semantic versioning versioning and stuff like that for yang models and things like that that would be moving very quickly it might be taking worth taking a look at that and seeing if that was something you wanted to come even close to touch and I don\u0027t mean clicked close to using I mean close to touching but you know there are the places in the ITF that are wrestling with version numbers that are with versioning for things that are moving pretty darn fast "
  },
  {
    "startTime": "01:50:06",
    "text": "and so just there\u0027s a personal observation so speaking as an individual I spent enough time hanging around transport when transport changes usually meant operating system upgrades on a good day to where the you know the idea that a version of something could change as quickly as quick versions could change if the working group agreed on it quickly you know agreed to move quickly the underlying for quick the underlying transport yeah well hopefully rather quickly but this is the HTTP binding which hopefully won\u0027t okay okay cool so like I say it\u0027s convenient it\u0027s convenient that they are see my title a couple together back to speaking as an area director I\u0027ll sit down whatever you guys decide as an act of love and devotion please make any needed charter changes before the new guy shows up because I think I think the new person may hate me for other reasons but I would like for him or her to like or it might be because why is if you believe that we need to make a charter change to change the name of our deliverables we should probably have a chat to make sure we understand each other way into that of one and I\u0027m just looking at the line it says beginning with HTTP two so like I say I think it\u0027s all arranged running the Charter or yeah and you know having a chat is not a threat anymore than having it discuss or the document is a threat so you please let\u0027s chat I\u0027m here all week okay I\u0027m gonna insert myself in the queue virtually as me so imagine I\u0027m standing over there from my personal standpoint the the naming of HTTP needs to stay within the control of the HTTP community and so I would personally I think that this needs to be driven from them logically it\u0027s our deliverable here so we need to have the conversation here - HTTP is defined by a core set of semantics that is not version dependent and in my opinion calling the deliverable anything but htv-3 sends a confusing message about the lineage of HTTP and how its forked you know it looks like a fork if we don\u0027t call it HTTP three so I actually I\u0027m 180 degrees from Eckler on that and so I\u0027d ask folks to keep that in mind that you know we\u0027re not naming quick here we\u0027re naming an HTTP version and we should follow the conventions of HTTP versioning and let that community make the decision so London Thomson I agree with that apart from the point where you said that it looks like a fork which I agree with but the implied thing was that that was bad but it is a fork well no a fork at the semantic layer because while little "
  },
  {
    "startTime": "01:53:07",
    "text": "people in this room are concerned about implementing what happens in the wire 99% of the people who deal with HTTP or dealing from the other side of using it as an application protocol sure and we don\u0027t want to confuse them yeah as long as it says I should you pay in the name I think I\u0027m Pepe all right so this is my so are we ready to hum on that then to get a sense of how people feel about renaming that document with that proposal on the on the screen okay so I\u0027ll do - hums if you support renaming to this and then if you do not support renaming to this make sense okay so please hum now if you support this rename - HTTP 3 and please hum now if you do not support Renate this renaming I will let my co-chair to characterize the hum it\u0027s pretty strongly in favor from where I\u0027m sitting but there was some some nonzero objections so I would say like 70/30 something like that maybe okay so normally with this sort of thing I think we\u0027d say take it to the list I\u0027m a little wary of doing that I heard people get up and say that they didn\u0027t like it but they wouldn\u0027t lie down in the road is there anyone who feels that this would be an issue that they would be incredibly unhappy about you could have been do you want to hum if people are okay to let the HTTP group decide that\u0027s a great question thank you I\u0027ll do again a yes I\u0027m gonna no home yes if you support that taking it to the HTTP working group does anyone disagree with this well I hope not but let\u0027s find out because I could just come to them I can say okay well the point of harming is is that you can express the opinion without you know putting yourself through the drama like I know it\u0027s easy for you you do it a lot so if you support letting the HIV working group decide this hum and if you do not please hum that was nice and straight cool okay thank you for that we\u0027re running low on yeah we got five minutes I did a quick agenda refresh to make it clear that the if time permits stuff we might not get to add to all of it or or any of it today will extend into the overflow time tomorrow where hopefully since the spin the discussion apparently takes 15 minutes we\u0027re gonna have lots of time um but if any of those presentations can anybody make useful use of those five minutes you can Martin okay come here optimistically and we\u0027ll "
  },
  {
    "startTime": "01:56:12",
    "text": "see so I was talking about initial packets with Christian at the hackathon next slide and we always talk about the injection attack that yeah and on path attacker can can disrupt the hinge can disrupt the connection during the handshake but not afterwards and it turns out that as things currently stand this is not quite correct so what an attacker can do is he can send a spoofed initial packet for example containing a connection close frame or containing a malformed packet containing a malformed frame there endless possibilities how how he can cause a protocol error that would close the connection and what what we currently do is we say that every endpoint accepts initial packets accepts and processes initial packets at least three are TOS after all initial data has been received and act and since at that point of the we don\u0027t have a good RTG estimate we RTOS might be as much as 600 milliseconds even on fast connections so this would be after the handshake long after the handshake actually completes if you look at the if you look at the the diagram we only need initial packets in the in the first flight until the more precisely until the client has received the server hello when the client has received the server hello its which is to handshake keys and it won\u0027t need the initial keys anymore and for the server as soon as it receives the handshake packet it knows that that the server hello was received and doesn\u0027t need to be retransmitted so it doesn\u0027t need to accept any initial packets after after receiving the first handshake packet so what we have here is basically a three-way handshake and only during this we where handshake are we can an attacker disrupt you disrupt us if we stop processing initial packets next slide so the proposal here is to treat initial as the specialist no flag that it is we we should stop accepting and retransmitting initials at the at the points that I just described which are different for client at server this has a few implications for how we do loss recovery because stopping to process initial packets also means that we might not receive an AK for a packet that we "
  },
  {
    "startTime": "01:59:13",
    "text": "that we send for example the server might never receive an act for the server hello that it\u0027s end so we need to we need to make that might have some text about that that the server should actually stop retransmitting this over hello even if it didn\u0027t get the act and there are some some implications for congestion as well because we want we need to tell the congestion controller to remove those those bytes in flight this is something we need to do we need to do anyway it\u0027s just make very very pressing with this issue if we actually stop aking yes thank you for using this issue PR 1819 was my attempt to deal with this by basically allowing receivers to drop initial packets if they if they disrupt the connection in exactly surfacing as you described that PR has died for a lack of enthusiasm I guess I\u0027m not sure what the process is to resurrect it if people want or as a wreck fit or if the people who killed that wanted to explain why that\u0027s fine too but I think the issue was that you use with your PR you would still need the AK right so you can\u0027t just stop processing initial packets so so another we just ran out of time and and one suggestion would be that since there are people that I\u0027m like be really quick and then also catch Martin and maybe you guys can chat and tell us what we\u0027re gonna do with this tomorrow briefly but but going where\u0027s the other blue Shh anyone thank you as a whole we\u0027ve repeatedly had these up to this discussion since May where we change the contract design and I\u0027m not against having this information in the security considerations but I would oppose to changing this at a later moment why this is living my vision no it\u0027s not it\u0027s closing an attack service that we are merging against attacks yes which is different from shaving of by it\u0027s alright so this is the end we got the blue sheets thank you all come back tomorrow we hopefully we\u0027ll get to more of the if time permits things tomorrow including a QA on them maybe twenty minutes in the spin bit [Music] [Music] "
  },
  {
    "startTime": "02:02:22",
    "text": "[Music] "
  }
]