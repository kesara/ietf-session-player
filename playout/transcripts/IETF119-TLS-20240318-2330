[
  {
    "startTime": "00:00:10",
    "text": "Alright. Well, it's 9:30. Here local time, and it's time for us to start. So Thank you for showing up on time. Staying up late. Getting up early, whatever it is. Come to the TLS working group. Welcome. This is the note. Well, it's Tuesday. So you may or may not have seen it. Basically, if we're participating here at the IETF, you're gonna follow the rules and seizures, and that covers everything from IPR to code of conduct. Here's a bunch of rules about them. If you have any questions, you can ask us area directors, other people that have been around for a long time. The the, I guess, the gist of the IPR policies, if you know something you gotta say something, and the code of conduct is to treat everybody with respect. Note really well. This is the virtual meetings, mailing stuff. And, again, this is back for professional collaboration kind of stuff. Should start to look pretty familiar because it's the template slides. Meeting tips. Please make sure to log in with the on-site tool to make sure that we get our appropriately sized room This room is massive. And we're about a quarter full. So, know what that means, but, we should we're all come Yeah. Yeah. So, 10 10% on being corrected. we're very comfortable nobody has the rub elbows if they don't want to, and that's all great. But it's also the way we're gonna manage the queue to allow people because we have a bunch of people we know that are remote so that's how we're gonna we're gonna manage the queue. So make sure you use the on-site tool so you can didn't get out of the queue. Yeah, make sure your video is off and maybe wearing headphones if you're in a noisy, noisier place. And if you are presenting, we'll offer to, share the slides"
  },
  {
    "startTime": "00:02:00",
    "text": "but if you wanna do that, you can do that as well. Some more resources that I'll let you read at your leisure. And then here's our agenda. Which we publish. So we're gonna do some working group updates, talk about some of the drafts that are around. You may not get updates on some of them, but, we thought we'd at least try to go through them. And then we're gonna get to nonworking drafts, which are looking for some kind of input, maybe, maybe adoption, maybe not, but we'll go from there. And that's it. And that's it. I guess we should have done some introductions that My name is Sean Turner. I'm Joe Saloway. And In the, on virtually, we have Dierry. Wanna say hi. I'm also here, I'm Judith Connolly. Awesome. Cool. Thanks. Again, thanks for getting up early. Alright. So without further ado, let's get to the 86 8446 biz and 8447 biz. Sean? Yes. I ask you to speak more into the mic? We're really far on this side. We have trouble Yeah. Okay. Can do. I can eat it. It tastes so good. for April 46 BIS, So, The document is has been through, like, you know, IETF last call, it basically needs to We had a bunch of changes. The thing that's holding it right now is me, unfortunately. There are 38 reported a RADA on 8 446 biz that we have to do something with I think before we give it to the ISG. Because if I was on the ISG, I'd be like, what are you doing with those? And the ones that we've looked at, a full quarter of them, maybe a third are completely addressed to There are a couple that got adopted but tweaked, and so we have to figure out how we're gonna answer those. And there's a couple of other ones that, I don't know what we're gonna do with. So gonna try to dispatch those before we move them forward. And then 8447 disks, Joe and I are authors, and so we're getting Deirdre to run the working group"
  },
  {
    "startTime": "00:04:00",
    "text": "last call, and that's gonna kick off, but not too distant future. That's really it unless anybody has any questions. I like Eric's Eric suggest for the for the IRADA select all hit close. That might that might be some some of them because Some people use the IRADA process as a way to comment on the draft, and that's not really what you're supposed to So but we'll we'll get that fixed. The EC up ECH update is it's in last call. So that's really it. The discussion has been, would argue robust. And the authors have been well engaged. So I think we're progressing forward. And so it's gonna end, the working group last call and at the And at this month, I believe, and then we're basically gonna try to progress it forward. Unless we have anything crazy that comes up and Yeah. Certainly not here to present anything crazy. I just I went to the thesis list and, the comments, etcetera. I don't see anything that I don't see anything on the mailing list or any issues that looks like a problem to handle. So assuming nothing comes up, I think we should be fine. Yeah. I mean, so to be clear, right, most of the most of the the the nudges I've been getting is why is this taking so long, but you've been kind of all over this this last call. So, I think it's mostly about you know, timely responses, and that's been great this time. So, unless, again, unless something crazy comes up, we're gonna proceed forward and be giving this off to, Paul for IETF last call. Alright. Or Deb. I think it's I Think it's gonna keep me in Paul. I'm not sure. I don't think they even tell us. David. Okay. So the next person up is Rich Saltz. We wanna do this because we have designated experts As you know, we lowered the bar to get code points on many of our registries"
  },
  {
    "startTime": "00:06:01",
    "text": "and, sometimes things pop in there that you might be surprised So we thought it might be needs to have them come and give us an up a quick update about what's been registered since the last time just so you're kind of aware. Alright. Let me find the slides. See, I did that graciously, so you all can to look better than me trying to claim. Yeah. Okay. Sorry. Alright. Yeah, so this is an update since the last time, which was just in the minutes. Sabrina Tanamal is Basically, they are in a person who Nudges us when we don't respond quickly, and so I say, hey. Happened since last time when I get this diff change log diff? So credit to her. Next slide. The experts, me, Nick. It's here. Yep. There's Nick. And y'all were near the rules say 2 out of 3. There we go. We still have not rejected anything. Interestingly, people know not to ask for bad things. I guess. The change to 8447bis will require this I think we're working around the language, that the TLS working group knows about something somebody doing things to define a cryptoprotocol or consensus or or algorithms Not sure what the requirement will be I don't think it's fully Well written down yet, but still an open issue. But the intent is things that are open to the public like ALPN, exported labels and stuff. Those are you know, anybody can still do Next, one of those. so the chain, extensions Hi. Yeah. Ecker. So maybe I misunderstood the intending back to the previous slide, I didn't think that the I thought that intention here was only that things shouldn't be"
  },
  {
    "startTime": "00:08:05",
    "text": "like, concurrently up for standardization somewhere in IETF and we don't sign off. Like, out of the idea was if I wanted to do my, you know, if I have minutes of notice to curve and I just wanna get the code point and I'm not doing anything on IETF that I don't, you know, I don't need working a percent, but that what we shouldn't have is it being in, like, a CFRG or an ipsec. Something like that, That Could well be rated? The wording is needs to be fixed to make Okay. Okay. Let me take a look because that was certainly not the intent that, like, that, like, when I when I was explaining about this, that was not my intent. So I'll take her with the draft. Thank you. Alright. Thanks. Somewhere oh, so the, hackers intent The intent is If it's standardized in the IETF, it should go through, you know, the TLS working group should at least know about it. If it's an IRTF or somebody else wants to say, oh, here's my new fancy band fancy, green poolpluspluscurve That should be allowed. So I think the fact that he and I disagree on what the words mean means that the words gotta of it. Martin? Yeah. So my understanding aligns with what like I said, which is you're bringing something the TLS working group. And asking for a code point, That's not cool. The TLS working group should be making the call. At that point, I think it's still okay for other working groups to produce TLS related things like LPNs and and and exporters and those sorts of things. Again, the same rule I would expect should apply there if you're taking it to an an eye working group or something or other because they need something then talk to that working group as well. But, I mean, this is just guidance at that point. Agreed. So the wording needs to be fixed a bit. No surprise. Yeah. Extensions. So last time we had said, oh, we're about to issue this extension and then, like,"
  },
  {
    "startTime": "00:10:04",
    "text": "various other STO chairs got involved and it was premature. So it was withdrawn. Rejected. It was withdrawn DTLS has returned ratability checks. There's a extension, and then there's a e c ECH has, It's 2 other identifiers for, you know, the encrypted client hello in or an outer message. Hello. Message. I guess I can add that, this is Sean Turner I can note that I guess I talked with, Haunas, and he's save them from getting up is there's now multiple implementations ready to go. We kind of paused moving that document forward. So once I get confirmation that there's 2 interoperable implementations, we are gonna release that document so that it could go often it's merry way. Okay. Know where to find us. Yep. Next. Nobody registered any cyber sweet signatures, groups, etcetera. ALPN. So there's one that's actually not in progress. The co app ALPN identifier was clarified to be cohap over TLS because they have co op over DTLS, and so that's CO the AP got lost in transit, and there's no new crypto exporters. It was kind of boring quarter. I guess. Next. And that's it. That's it. Okay. Chip. There you go, Michael. Okay. Scott, did you send us slides? Great. Extremely quick update on the TLS a hybrid, draft. It is mostly unchanged. The only thing we Okay. you. Sorry. Oh, yes. Thank It is mostly unchanged. We reduced the number of of groups down the to, mlchem768plus x22519 and saying with, P26"
  },
  {
    "startTime": "00:12:01",
    "text": "the only two issues that I'm, is concerned with is a waiting for the final strat, fits, l to select ml chemist officials. We can't really release that until it's there. It's there. In addition, the the ongoing controversial controversy about do we actually combine the, shared secrets? TLS has a very robust, key derivation logic So we just we figured that concatenation is good enough. Other groups, want to do something more robust We would just like a decision. Thank you. Deirdre. Is my camera? There I am. For the 2 Cypress suites that both rely on what we use be called Kyber, I'm not sure if they've both updated their definitions to explicitly say mlchem yet. They both seem to be named Kyber and and things like that. Can you confirm I do not rec recall at the moment. At the moment. We could, update it to, say, ML chem draft. Okay. For on your second point, It doesn't matter for TLS 13 because TLS 13 key schedule is beautiful and deserves, you know, ponies and rainbows and puppies. TLS 13 can get away with just concatenating these 2 shared secrets and we're basically done. We we are blessed in that regard. So all the other things, including the thing that a coauthor on, x wing, that kinda generic Hybridchems, basically TLS103 can afford them. We can get away with the extra computational work that's happening inside them. But because TLS 13 is already hashing in all the public information as part of the comes either way. It's not strictly necessary for TLS"
  },
  {
    "startTime": "00:14:04",
    "text": "to also consider them. We can basically consider them because we're We are happy and generous and can get away with it. So that's kinda my opinion. Okay. Ag agreed with that. Alright. We got a queue. Got Martin and the necker. Yeah. Martin Thompson. For the reasons that Diedrich just pointed out, I'd prefer not to wait on the controversy. If if if if the FIP certification comes in from MLCAM and we get a a a final approved thing. We can ship. And if the controversy has resolved at that point, then, of course, we we may wanna have a discussion about that, but don't have to wait for them. Ecker. Yeah. I think I I I largely agree that Martin just I think there's, you know, people wanna get this deployed. I guess I'd like to hear from perhaps deceased even in the room, maybe from, maybe from Dennis if he's around, like, what people's plans are for deployment now understand Chrome's already doing something. Like, what code point are you using? What is Firefox plan to use? It'd be nice to if if there's people already using, if these are already using a code point for this spectrum, we're already we're already affected. We have whatever else we do. So I think, you know, getting this out the door is a feature and the only question is, like, at what point do you feel do you feel like they're ready to start shipping Alright. And right after you, Dennis. One comment about that. If if this does make a final change from between the final the draft and the final version, we're gonna have to change code points anyways. Yeah. Yeah. We just we just solved the code point. So that's not I don't think there's a problem. Hey. Yeah, just a quick update on the implementation side. So I think Chrome announced today that they're going to release, after a recent life experimentation, with the existing code point and the existing mechanism."
  },
  {
    "startTime": "00:16:01",
    "text": "In Firefox, we're shipping it in nightly currently, and we're looking to do it in Please. You know, fairly soon, but no no concrete timeline at this moment. Planned. Okay. That's it for the queue. Thank you. Alright. So you're up. Alright. So now we're gonna switch over to talk about a draft that's been around for a bit. Firm loss selection. Aerial, aerial, Alright. So this is for, The obsolete key exchange, draft. Next slide. Let's see. We've, completed working group last call. Were kinda stalled on Chair actions because, we're also working at 8447 BIS At the same time, which adds this new state for the registrations, which is, discouraged d. So We need to make sure that, that that the current key exchange, obsolete, draft, aligns with that. Work. So next slide, there's a couple of, things, like, put some proposals here in that, Looking at what the draft currently says, what the Kia key exchange obsolete draft says, for example, for RSA, it's a must not, in TLS 12 doesn't apply in 13, so that sounds like it would map to a discouraged same thing for a finite field FFDH. Then with ECDH, we have should not. And in that case, I thought that might be an an n or a not recommended, which is"
  },
  {
    "startTime": "00:18:00",
    "text": "perhaps a little bit less, of a of a deprecation there. And then for FFDHE, Also, this was little mix because in TLS 12, we say it's a must not. And then for 13, we say it's a May, thought that would map to a deprecate or, sorry, discourage but that that seems to me to be one that we probably need to discuss a bit more because We're saying it's okay in 13. So maybe it it's not recommended or recommended with, some note. I don't know if anybody has any comments on these now. If not, this all go to the list at some point. Martin is getting to the microphone. Yeah. I think because we put ffDhe in TLS 13. I'm probably leaning more towards the the inside rather than the than the flat out don't do that, but ECDH, we should just say no. Static key CDAH is just not good practice. So when you say no, you think it should be d. T. Yeah. Bye. Do not. Okay. Thanks. Rich, It's the long walk. Edmond Joaquin. Yeah. I think it's kinda not a good look if we say deprecate for something No. Just came out. It's currently the most recent version. Maybe Change it with 8446bis? For the, FSDHE? You know, in in in 446 biz, you can on the other hand, they're probably gonna be tied together. Right? Well, I I think, yeah, so you're saying we should"
  },
  {
    "startTime": "00:20:01",
    "text": "either change it to an 8446 biz to be not recommended there, Yeah. Or or Leave it as as, n here. And and because right now, I I I think, yeah, looking at this, it it doesn't make too much sense the way I have it written here. So it should probably go to either energy, I mean, just to it should map to what happens in in 446 biz. The 2 should be aligned because they're gonna be published at the same time and we should have non not conflicting advice. And I don't have any opinion as to whether it's an entity. Okay. Perfect. Quinn? Hi. Thank you. Queen Dang at NES. I think the, They must not follow the FFDHE is a little too strong. It depends on the group size that we are talking about. If you do, you know, so it depends on the grip size. And in generally, say must not, that means must not for all is is a little too strong. As long as in classical security, if you have the big enough group size and ff The SE is fine. It it just it just slow on the computation compared to ECC, but That's all. Okay? So so, Martin Thompson. FFT achieve TLS 1.2 is kind of busted which is why the must not exist. In TLS 1.3, we specify it. End, it's, we have named groups and, and that sort of thing. And they're, they're all of a reasonable size. And, It's probably okay. To use. Modulo, the the computation cost. So, there's a bit of a difficulty here with this being in a table. I would say"
  },
  {
    "startTime": "00:22:01",
    "text": "in TLS 12, we should be discouraging it, but in TLS 13, we should be simply not recommending it. Yeah. Right. That's at all possible. Right now, I don't we don't differentiate in that. I am a 3 between 1, 2, and 1, 3, and this column and Right. you. have to. Yeah. I don't think we I don't know that we want to do that for Okay. Thank you. I think Alright. Ecker or David Benjamin? So many no home lines. K? It's me and me and then go ahead, David. No. No. No. It's okay. Our our Oh, I guess it locked took myself. Why don't you go? That way, excuse excuse me. Sorry. I got very confused by the queue for a moment. The On the being the same as in the registry, the FFVHE and TLS 12 is just called plain DHT. They're like different Cypress suites altogether. So we actually don't need to do any work to differentiate them. We just like say that it DH E Cypress suites are bad. Because of all the reasons Martin mentioned. And then the FFTHE groups in TLS 13, we can, you know, say whatever we like with them, and they're Pretty disjoint. Up. You. That actually solves the problem, but I was concerned without having to, like, split the make another column. So I think that seems like a good solution. My My impression is we like Yeah. Yeah. Thank you. Okay. I think we're Good there. Alright. The the next thing is one thing that's not mentioned in the draft because it's maybe not strictly key exchange, but it does impact the key exchange when you're doing static, Dippy Hellman, And we currently, have these marked as, And is not recommended question is for for these certificates that contain static IP helmet parameters that you would use in one of key exchange schemes to do static, static, DH, which I think we don't really want to do"
  },
  {
    "startTime": "00:24:00",
    "text": "should we be deprecating these or it should be discouraging these or just leave this out of this draft. If anybody has a thought there, It seems to me that we should should probably discourage these. I saw at least one thumb up. Okay. Alright. I think we're gonna try to put it in the draft and Yeah. Yeah. I think think we'll we'll move forward on that and take it to the list. Thanks. Alrighty. What's next? Okay, Deirdre. You're up. You wanna run the slides, or do you want me to do it? Give me the slides. Alright. Please. Don't see the button that I was available last time, maybe, because I'm a chair. See, Share slides? Yep. I can stop sharing mine and you can do Oh, okay. Hold on. Where are they? How are they? In there. I'm a better friend. They're not over here or over here. Please some be fun. Let's see. Alright. This is formal analysis. Right? Yes. Alright."
  },
  {
    "startTime": "00:26:00",
    "text": "Just this Something's coming up. There we go. How's that look? Good. Alright. So This is a proposal of trying to slightly formalize how we Gets. Or get some sort of triage for formal analysis, for changes to especially TLS 1.3. I say especially TLS 1.3 because we have the 3 has had a lot of compared to previous versions of TLS, and we basically don't want to degrade the beautiful shiny thing that we have inherited, over time because The only, protocols that don't change are the ones that aren't used by anyone. So this is slightly motivated because of the changes, included in 8773 BIS, which went to a working group last call But there were kind of concerns that it hadn't received formal analysis, and then the working group last call finished. And it still hadn't gone required analysis, and then we're kinda left twiddling our thumbs about, like, so what are what are we doing about that, and we're all just kind of looking at each other and just kind of shrugging. And so I had brought up the changes in this document in, in its discussion about some completely other matter with Douglas Kabila. And basically, he kind of off handedly was like, Oh, That changes a lot of the fundamental security assumptions of several pieces of formal analysis that were done on TELUS 13. And I was like, oh, I would not have seen that just by looking at these small changes of including the pre shared key off, and certificate based off, which is basically the the meat of the changes. And so that basically brings me to the suggestion of a triage panel."
  },
  {
    "startTime": "00:28:00",
    "text": "Not a formal methods strike team, I guess. I wrote this up on the list, but to summarize, I think a We can get some meat out of Doing something a little more formally and a little bit more explicitly and a little bit more kind of coded to our regular TLSWG processes of When we have something new, We kinda run it by a group of experts, who have expert, who have experienced analyzing TLS or things like TLS, who may or may not have had experience with them in their research of analyzing it with formal methods, tools, like Tamarin or Proveraif or EZCrip or or whatever else. But not necessarily, and basically ask them, As a document approaches a adoption call, do you think this needs formal analysis, updated formal analysis. Do you think this needs What do you think? What's your smell test? And including their feedback. As part of the adoption call. So the chairs would have our little list or little mailing list of people I've gotten some tacit, you know, buy into the idea from a couple of people. And we would run it by them, and then we would collect their feedback and bring it to the list. As part of the discussion of some of the things that we make it out of them is Yeah. This is fine. I don't think it needs any analysis. I don't think we need anything new. Which is Great. Makes everyone's lives easier and makes this feel more confident. It may include this is very in line with previous kinds of analysis It may involve the tamarind model. It may involve a Proverick model. It may involve something with meat, behind it, an artifact behind it that they can build on. And they can give a recommendation of how to proceed and a scope of work. And then that can be part of the adoption call discussion."
  },
  {
    "startTime": "00:30:01",
    "text": "They may come back with, Oh, this changes things fundamentally. This changed to TLS, would input imply a significant new chunk of analysis work. This is gonna be big. This changes a lot of assumptions. This is gonna be piece of meat to to bite off in terms of understanding own security properties even if the specific changes in, like, the protocol document or, you know, the specific changes recommended may be small, which is kind of what the one I mentioned earlier kinda looked like. So all of that is part of the output of kind of the 1st phase, the actual triage. That we would solicit, and then we bring it to the adoption call. So working group as part of the the adoption call could say Do we need this? This is a ton of work to actually look at, or This is an this is an easy win. Like, this does not require a lot of analysis. This seems like big win. Let's just go for it. Like, that can be all part of the discussion of the analysis. And then at this little this line back here is basically We may adopt something, And then in the process of it kind of evolving as part of the working group, it's about to come up for last call, and it's changed significantly from when we first discussed it and say it we said, oh, this is fine. We don't need any formal analysis. But by the time it comes to the last call, we might take a set well, last chance look at it and be like, Is this still the thing approximately? That we said However, many months ago, that did not require formal analysis. So this is sort of the last chance for us to go back and just be like, do do we think this is this has changed significantly skewed? Just in case, because for example, I worked on Frost for immediately between the thing that was adopted and the thing that was actually, went to the RFC editors, that CFRG, but still that thing those things happen. And then so this is part of working group"
  },
  {
    "startTime": "00:32:02",
    "text": "taking in this feedback and deciding what to do with it. My suggestion would be If we adopt a a document, With the understanding that formal analysis should be part of this work as per recommendations from this triage panel. It would be blocked. From going to a last call until that formal analysis is completed. If we don't if we say, no, we don't need formal analysis for this. Then we don't, but we still have that last call. Just to double check that we didn't change at significantly in me time. And then for who is part of this expert panel, I we can do regular refreshers at will, we can do it with a regular kinda check-in at every IETIET meeting or so, you know, I'm up for suggestions. But but but but but but You know, I have a a short list of people that names you all know, and they've tacitly said, like, sure, like, why not? Like, and I basically lowered them with the will give you and your students some free re research ideas if you, you know, kinda help us out. So I think this would not be too difficult to get some people in who would be willing to participate And then, what is the formal analysis that we care about? I think a lot of people when thinking about formal analysis for things like TLS, they think Tameron. They think of Provera. If they think of you know, symbolic model analysis using formal methods tooling. But that's not necessarily all we care about. We really care about kind of like a Expert eye from a cryptographic eye from a cryptographer. To just give, like, their smell test of, like, oh, this changes your assumptions of your security This changes your assumptions of, you know, if you have a game based proof or, you know, this port Nothing changes. This is completely in line with all of this literature that we're aware of, of formal analysis of various types of TLS and specifically TLS103 or the components that are going into these changes. So"
  },
  {
    "startTime": "00:34:00",
    "text": "the recommendations from this triage panel may involve updating a tamarind model or doing a new model with a different kind of computer aided cryptography tool. Or it may involve pen and paper proofs. Or, it may involve nothing at all. It may involve a line that says, you know, these people looked at this and said, This is fine and does not require anything new. So That's kinda why I'm being very specific that this does not necessarily mean we're using formal methods tools. We may. Recommendations from a panel of experts. And I think That's it. That the goal is to maintain our high level of assurance. And and and and and and and and This is one suggestion. I won't forget. We got a 6 or 7 d q. Can you see the q and manage it? Let's see. I will try Scott Fuller. Yes. Scott Fluor Sysco Systems. Occurs to me that it may not be sufficient just to make sure that that new additions haven't broken things, but, whether or not those, actually achieve additional goals. The a thing I'm gonna think immediately comes to mind is the standard key update. It's the way it's implemented is almost certainly not going to break existing security because keys has already been generated and everything. And, and whatever new keys are generated will probably be secure. However, that's not the only that the whole point of it is to generate some sort of PFS perfect court secrecy, and it would occur to me that make sure that you have that that we require new analysis so Is that is that on the table? Oh, yeah. Like, it's definitely a Here is a change or a new suggestion. We want to maintain the security properties we have already established in Alliance. And check that new assumptions do not need to be included. Or if they do, we do analysis, new analysis, including those new assumptions in scope. And if we're trying to add"
  },
  {
    "startTime": "00:36:02",
    "text": "some new notion or trying to establish some new notion via new mechanism. That that is actually being held up. So I think that's totally in scope. Yeah. Yeah. Eric? Yeah. This is a great idea. I I I I think it's absolutely fantastic. I think we should obviously have, like, straight team jackets, and it should definitely be called a straight team. And I I I think his points, I I agree he's got point Scott just made about, about, about, like, verifying things do what they say. They say in the 10, that was obviously important as well. You know, we were pretty confident that ETA wasn't gonna break anything because we designed it. But, but, like, we're not all sure it would do what it stands in. In fact, that, in fact, you may recall, so I didn't really know I didn't do what it said in the To get tent. to to to get ahead of something. I I think Steven's gonna say later. I am perfectly fine with having work blocked on, on someone's students. The bottom line is we shouldn't do we shouldn't do things that we don't have confidence in like, round up anybody who's willing to review it, then that that means, but it can't really I I suppose it's not very important. And, and and to that end, I think, if I if I if I if I make one small change, this was just one, I think that, like, the working group should make an explicit decision on whether or not things need nephroanalysis, at the beginning of working receptors, while take taking the triage panel, you know, obviously in just integration or consideration, what I mean by that is, like, the sheriff's panel says we don't need it. I think there's still an open question whether we still need on traditional since we do need it, we really shouldn't be overriding them a lot of very good Yep. I agree. It's not Finding, it is a input to the working group's decision. Thank you for recommending. This is a great idea. I'm gonna go ahead and lock the queue. Jonathan? Trunkton, Newlands, cloud player. I'm one of the people who did the tamor analysis. I'm I'm gonna disagree with Scott. I actually think it does"
  },
  {
    "startTime": "00:38:02",
    "text": "break the key extended key update thing. I think it does break up. Well, at least breaks the tam roofs. in a way that's not Not quite easily fixable, but it it does break the current first. Mhmm. Want to ask a really annoying question, which is what counts as done? So Several times I have done an analysis And then try and get it published and it gets rejected because it's you you found it was all good. We thought it was all good already. Like, And then no one will publish it because it's not novel enough. So that's like, That that that could end up blocking stuff if we say it has to be published in a period of your journal. Or Oh, interesting. that's Okay. And then So this this leads me on nicely to plug my research group which is your FM RG, The usable form methods research group is hopefully going to be a place where we gather the kind of people who would be on this kind of panel So we should at least work with them, like, or, like, you can do it with them, whatever. Do I have other things on my Oh, yeah. And, like, list? blocking on students is, students are a bit slow. Yeah. They are. So There's kind of the 2 phases that that I had in mind, which is one, the triage, which I think is valuable period, even if we kinda have to draw the rest of the owl of, like, how we actually get the formal analysis. Eve even the chairs, but on its own, they'll be valuable. The second bit is leveraging the triage panel, and anybody else. To say Okay. Is this a big scope of work or a large scope of work? Do you have someone Do you know someone? Uh-oh. That Sorry. We lost you for a minute there. 1 Are you back are you back?"
  },
  {
    "startTime": "00:40:01",
    "text": "Yeah. Come. Alright. Well, let's, let's see we can know what, David. Do you mind, if We'll see what happens if can get back on. We just wanna at least get your input, David. Thanks. David Skinazi, Security enthusiasts, I guess. Some days. So I think there there are two parts to this. A first part is about oh, Deirdre's backs. Keep going. I'll I'll make my point afterwards. Okay. Thank you. I blame Meadeko. The part about trying to find out who will do this formal analysis and, like, pin a timeline to them and say like, hey. You promise this thing for us and like, this is blocking, IETF work, until you get this to us. That is kind of Left us to us, the working group of chairs, and the panel to try and be like, okay. Can you recommend them to get this done in a reasonable time frame, and we can figure out what a reasonable time frame looks like. That that that that may involve a little bit of growing pains, but, like, mentioning these sort of, like, caret of, like, here, if you wanna train up your grad student, on how to use Tamirn or how to use Proverif. And it's literally like a a tweak to an existing, well known protocol. I think that we could find some, some decent, useful. word. Yes. Insinergy. That's a better Useful grad students to do this for us. And then, a different thing that, I think Jonathan mentioned was Do we require publishing these results? And I say no,"
  },
  {
    "startTime": "00:42:03",
    "text": "mostly because we find value in in eprints that never get published anywhere. We find a lot of value in just things thrown up on eprint. And maybe they got published in a, a venue, like, a, you know, a conference or a journal or something like that, and maybe they don't. That's not necessarily the value that We are looking for. If it's peer reviewed, Even better, even better. But for us, it's trying to leverage the skill set of people, beyond our skill set to look at these things that we're proposing and say, like, can you give us a due diligence either with just like pen and paper formal analysis or using more, you know, heavy duty tools like formal methods, to give us more confidence that we're not breaking the world and the things that we're trying to do aren't just completely based in nothing burgers. So So, yeah, my, my final comment is I think this is actually a good idea in general. So Let's do Cool. David? David. It's Kenazi. So the to two points. So first half, I think part of this is outreach. This is, you know, in a way using the name of the IETF and the TLS working group to lead researchers to do research because they could get some recognition. So that 100% supporting, supportive of I think, you know, we should do more of that at the ATF Do it. The flip side where and and not everyone, I think, agrees on that. That part is How does this fit into our process? And in what ways does it become blocking? And so think I If we have researchers, working on something, and they tell us, we're we're almost there. Or even more specifically, you know, if, let's say, they come up with a bug Oh, like, let's discuss that. Let's definitely look at it. What I fear is the"
  },
  {
    "startTime": "00:44:00",
    "text": "The propensity for deadlock. And so in particular, Like, I I can't really see how blocking something like this would be a good idea. And even how it would be somewhat allowable by ATF process. Like, if I were to walk up and say, I'm looking into your protocol. Please wait 4 months And, will let you know if I'm okay with it. You're gonna tell me that's cool, David. Go somewhere else. I And That researcher, myself, they're definitely way more qualified say that than I am, but we're on an equal footing here at ITS. And so I think bringing them here, getting them to do the work is absolutely amazing. But I would really caution against anything blocking because like we said, if a student gets distracted, we don't want the work to stop. And similarly, from a process perspective, I don't see a way where we can make that work in the way the IETF operates. One suggestion being, you know, we The working group. Will decide if they want to basically adapt something and block it on formal analysis. But also, I think there's an obligation of the document authors and kind probably the chairs less so than the working group to basically, like, keep, on it, within conference with the people who are working on the formal analysis because In the ideal world, they will go off and try to start modeling it, either pen and paper or with a tool or whatever. Over. And then they would come back and have questions. Like, what about this assumption? Did you answer this and then the authors would say, you know, didn't think about that. Pick something. It's gonna be a back and forth between the people analyzing and the people, the actual authors. In an ideal world. Actually, in an ideal world, it's easy peasy and no one needs talk much about anything, but in a In a case where you're actually doing a meat and potatoes analysis, it would be a back and forth. It should not be"
  },
  {
    "startTime": "00:46:03",
    "text": "a throw it over the wall. We'll see you in 6 months. And then you give us a result. I don't think that's the way it should work. And if any of these sort of, if any of these kind of procedures going trend in that direction, I think we will kind of have to jump on them, and it's probably going to be responsibility chairs to basically be, you know, like, Hey, like, This is a Team Sport. We're working together on this protocol, including the analysis and design and the specification. What's going on? And if, like, we have 3 meetings a year so that we can check-in on the progress of how is the formal analysis of this thing that we, the working group said, is important to progress of this document when we adopted it. Great. Then that sounds great. Thank you. Hi, Steven Farrell. So I think it's a good idea. I'd echo what Jonathan said. Step, so the other co chair of the UFM research group that trying to figure a way to get these, you know, to get some benefit in both places would be really good. Yeah. I think it's entirely feasible that for some piece of work, the working group might have consensus that, yes, we should block on formal analysis. That's we've done it before. It's fine to do that again. I don't think that's okay if it's just on the wherewithal of the Triya's group decide that because, somebody could easily decide, okay, known as sponsor a student, to not actually produce anything for 2 years. People do game systems, and they would that possibility exists. There's also the possibility for people appealing there's appeal processes. I don't think you want to try and change those. In order to introduce this. What I'd suggest is Doing this. You're killing what? So the IETF has appeals processes. Anything can be appealed."
  },
  {
    "startTime": "00:48:04",
    "text": "If if somebody is told, your work is not proceeding because a student has turned up, they can appeal that, and that that appeal can go all the way up through the various kind of appeal processes. Don't want to try and change those processes to take account of So I I don't I don't think we are, actually. I think we're No. And this this would actually be appealing the working group deciding to adopt something on the condition that it would undergo formal analysis of some kind. So if the worker who has consensus to to to wait on formal analysis, that's fine. We out before, and that's nothing new. The new thing would be is if the triage group wants to make that decision. Not the working group. Nope. That the triage group gives their opinion, and the working group would use that opinion and estimate of the scope of work to decide whether to adopt and whether to bind adoption whether that document would proceed to a last call Blocked by formal analysis. Okay. I'm getting a bit confused. Anyway, so I, as a suggestion, I think I would Encourage going ahead and doing this. Don't worry about blocking until we've seen a cases where the thing has been run and been successful and then figure out what's the right kind of criteria for having various wait times or whatever. So I'd say, yes, go ahead and do this. Don't worry too much about blocking. I'll And definitely don't try and change IETF process because then that that's a way for nothing to happen. Yeah. I'm not trying to do that. Yeah. I'm basically trying to put something in place that would actually affect what people wanted to happen with 8773bis. We said we wanted formal analysis. It went to last call. We still don't have formal analysis, and now we're kind of Not sure what we're doing. So this is trying to vary closely Address that."
  },
  {
    "startTime": "00:50:02",
    "text": "Are are non? Hi. I'm from Broadcom. So simply, I'm I'm not a crypto guy, so I'm not going to discuss the content of it, but, it's more about the intention. I really like it. I find it really refreshing I have to transform another SDU as well so I know how hard it is. I can see already that there are some caution that is expressed by previous interventions, and and that's, of course. So I imagine that on the way, you would find some difficulties, but frankly speaking persists it's it's it's really worth it because I I I have the intuition that's going to have more and other benefits as introducing this. Right? And I I I can imagine the transformative, longer term benefit that is going to happen. So simply student encouragement and and is persist and in the difficulties, you will find difficulties just Stay on your line. Thank you. Chris Button. Yeah. I I think yeah. I also is a this is a slam dunk idea. I'm also somewhat concerned about, changing. I our TLS working group processes too much. I think what we wanna try to do is set the bar initially around the same level that it has been especially, during standardization of 1.3. I think options. Hopefully involves, like, a lot of different people with very different perspectives. And each one analysis is going to be a bit of a one off right? We're we're not gonna have like a a fully standardized approach methodology for all for all things that TLS wants to do So I would just, like, I think we should try to be"
  },
  {
    "startTime": "00:52:02",
    "text": "have just just tap the gas. Don't don't don't don't put too much in. Kind of as a motivating example, I think that, like, you know, prioritizing not negatively impacting TLS 1.3. Say when we're changing it or if we're, like, adding an extension, we need the highest priority is making sure that extension doesn't negatively impact security of TLS 1.3. I think it's far less important personally that the extension meets its desired goal. TLS 1.3 should be secure enough to, like, should be robust in the presence of kind of bad ideas. That's that's I just yeah. I I think there's kind of 22 goals to establish there. No. That's right. That's Absolutely. Agree. Agree. I also would love it. Love to see, people who are doing these analyses involved in the in the design process. So there shouldn't be like a bunch of protocol nerds come up with an idea and build it and turn it into an implementation. They're like, we're ready for security review. Security reviewers should be looped in as early as possible like you. Ideally. And it's also a good way to get grad students involved who, like, want to make an impact go design a thing that TLS needs Yep. Yep. Very agree, and that's kind of why I want to get the first eyes on something around adoption time, not late in the process when it's been kind of percolating in the working group for months or years. I do want them early on. You never know what amazing ideas or insights or, you know, complete game overs you'll get from a different set of eyes. From experts like that. Thank you so much. Alright. Hey. So, take the chair prerogative here. Somebody who got on a lot of planes and flew all over the world for, like, 3 years with to develop 1.3. This is just continuing the pact."
  },
  {
    "startTime": "00:54:00",
    "text": "We have with the security researchers. We're not really trying to do anything crazy and new. So I think, you know, if we say TLS 1.3 was provably secure, and we had an extension, we should be able to keep that statement. So Let's go ahead. Alright, John. Take care. Bye. As usual pictures so this is a presentation about large record sizes in TLS and DTS. It's a draft by me, Hammes, and Michael Texan. Next slide. So first, why. So TLS is increasingly used in a lot of interface use cases in critical infrastructure. For example, telecommunication networks, and in some of these use cases, the due to power of 14 bites, plain text, limitation, leads to more frequent fragmentation, and increase CPU and memory consumption in some cases, increasing this 222 power of 16, would eliminate the additional fragmentation. One example that to We have Ericsson as in one of the interfaces here is where we want to transfer 24 kilobytes datagrams over DTLS, and then you you obviously had to do the you have just picked it up. And then you have the choice. So so Yeah. And in some cases, you have the choice to maybe you even need to have some sim layer in between to do the fragmentation."
  },
  {
    "startTime": "00:56:04",
    "text": "Another use case is RFC6083. Where this course, this is a limitation you cannot transfer user messages, larger than this. And there is agreement in the TSB TSB VG, DTLS for SATP design team, that lot record sizes for TLS would increased performance in several of the proposed solutions. I also talked to Lucas Purdue, Yeah. Sorry. Also talk to Luca's Purdue yesterday, it also had said this would Kris performance in one of his use cases. So I think This is not for everyone where I think there's a lot of use cases where this increase performance. It doesn't increase performance super much, but it increased performance enough so that people definitely want to do this. And there's a lot of use cases for next slide. So this slide is how? As you all know, the length field in the TLS records is a Juwa in 16. So you can potentially transfer, records of size 2 to power of 16 -1 by were 65 kilobytes, RFC 8449. The record size limit extension allow endpoints to Negotiate a maximum plain text record size that is less than 2 to 14. This drove the large requisites for"
  },
  {
    "startTime": "00:58:01",
    "text": "TLS, defines a flag extension called large record size. That can be used to get there with the record size limit extension. To negotiate a maximum size all the way up to to to power of 16. -257. Bites. TLS 103 as an expansion of maximum expansion of 256 bite. So this is the maximum plain text you can have. An earlier version had some error about the, the ciphertext links instead. That was just a error and has been corrected. Are you from Benjamin Caddock discussed whether flag extensions is the right choice, I don't know. An alternative solution would be to have a completely different extension, That are details of LinkedIn important thing is to to allow people that wants to have gained this extra performance to do it him, And If ever in marketing, I would say look a single bit improve makes RFC 84494 times better. It's amazing. In I did study, but So summary, new proposed flag extension used in combination with the record size limit extension allows negotiation of plain text record size up to 2 through 60 minuteers to 57. This improves imporments performance in certain use cases of TLS. I think there's pretty there are quite many of these use cases is my understanding, but it's definitely not for everybody."
  },
  {
    "startTime": "01:00:00",
    "text": "I would like it to be adopted. Peter, So I I've heard this draft. I think this is, I think that is a a worthy goal. A little uncertain with the spelling of it. David Ben would say, whether it be best to have whether whether it's best to have a flag are they best to have some other extension. I'm sure you're not hard to run that one way or the other. I think we find to adopt it as is and then try to sort out what the best spelling was. And I'm not saying this flag is bad. I just haven't really thought it through enough it it it makes you feel a little twitchy, but that doesn't mean that instance is right. I think I think we should adopt it. I think it seems like a work quality. 666 Thanks. K. Just speaking as another, I think, fairly large user of TLS inside data center networks. I think this is useful work. Think there's any kind of situations where it makes a massive, you know, some magnitude difference, but, time you can get more performance is helpful. So I do think we should adopt this. Far as the details, like, I think at first glance, I'd, go on the side of the separate extension, but that's something I can figure out. Later. Alex. Hi, Alex Shrinhovsky, Google. I was wondering if you actually had some of the performance metrics that you say are improved. Because I just went and logged in to my workstation and ran open SSL speed EVPAS 128 GCM and looked at the block sizes, and there's diminishing turns after one k. 16 k and 8 k got the same result. So I'm a little bit confused as to why we should adopt this on the performance grounds if we don't have performance data. Thank you. Steven."
  },
  {
    "startTime": "01:02:02",
    "text": "I seem yeah. I I guess I also wonder what it would, you know, What it would break if somebody implements this badly. I mean, I think, yeah, getting some more experience with it. I also wonder is have you thought about, how, how, would this have any impact on traffic analysis for the kinds of applications that you think it would be used for. Just wondering, like, if if if people are making bigger packets that better match the application there does that make traffic analysis easier? Might be a concern. Yeah. I hadn't thought about that. Typically, like, 5gcore interfaces. I don't think traffic analysis is a big thing. Other use cases of this, might, of course, be somebody might want to do traffic analysis of I haven't talked about the implications for that. But, yes, there are any difference, of course, makes, affect traffic analysis. Yeah. And but just to be clear, I'm not opposing adoption. Martin? Mond Thompson. I've got serious concern about the, spelling of this one. I think I could said similar things. I also share Alex's concern about the performance thing. I know that when we did HTTP 2, there were a number of people who were concerned about our 16, sorry, 2 to the 16 limit. At the time and showed evidence that having a larger Frame size would be more efficient for their application. Which was which was interesting at the time. You might be able to go through the archives to find some of those things. But to Alex's point, it's it's diminishing returns over time. So, there is that. I did did make a suggestion. In chat that it, I think, is semi serious. That, If you're gonna do this,"
  },
  {
    "startTime": "01:04:01",
    "text": "a four times increase in size is pretty marginal in terms of the benefit should probably look for something that will allow you to get to larger sizes even still one megabyte would be kinda crazy in some senses, but, if that's what the sort of performance gain you're looking for, it's possible. With a small extension, but not a flag. Okay. So this CSM would be then an extension that extends the length field in in the record. If I understand you, correctly to know my My my suggestion was to have a a, record size scaling premita. So you can scale the size of the record size field shifting it left by finding any number of bits. Yes. that's got And Ah, yeah. Like, finding that disgusting. But but that's the the sort of thing that would be possible here. And, of course, blowing the top off off the limit the 2 to the 14 limit. At, at the same time, would be be acceptable as well. Okay. Yeah. And answered. Stacks, A echo? Martin, go sit down. So in your in your world, if you had something that was not an even say you shifted by 1 by one. If you guys and it wasn't uneven, you have the pad to make that work. You have to keep padding until you have an even block size. Yeah. That's right. Okay. And and to our Steven's point, you get better traffic analysis, properties out of that. Uh-uh. I just wanna make sure we we had a clear idea for you, Rosa. had a I I think I agree with the point that if we're gonna do this, we should make it so you can go further and just like, a step size of like 2xor4xbigger. One other thing that this can make possible is, more, like, in place encryption of a large buffer without having to constantly splice in the, tax, tax, tax,"
  },
  {
    "startTime": "01:06:02",
    "text": "Thanks. Alright. So what I think we're gonna do is it looks like we have some interest in solving problem that's got some shape. With some reservations about the motivations, etcetera, but there seems to be a way we can do this. So we we'll work with the authors to figure out what should go in the draft that can be adopted. With the understanding from the working group that it may radically change. First gets dropped. Alright? So we're actually gonna work on it and go from there and see what happens. There is also no guarantee that we're actually gonna publish it out of the working group. So just So everybody's on the same page so we can get something adopted as opposed to having the fight before we adopted and then just having no discussion in the working group. Does that sound like a plan? Sounds great to meet. Latney, you were gonna say that. Anybody else? Okay. Great. Next. Okey dokey. Who we got? Flags Jonathan Thanks to your comms. People for coming through. Might Hi, everyone. These slides are almost identical to the slides I entered last time. But the last one's different. I promise. Next slide, please. So, basically, the problem I'm trying to solve here is is It's very, very hard. For us to be able to distinguish web crawlers specifically. So bots that are not accessing dedicated endpoint spots that are accessing Ipal websites, usually do it through user agent and IP block. And that's really bad. It doesn't work very well in practice. Next slide, please. But, yeah, so setting using user agent and, like, public cloud as your thing, means it's quite easy to forge and Bots generally can."
  },
  {
    "startTime": "01:08:02",
    "text": "Pretend to be other bots. Next slide, please. We'd like to use certificates because certificates work well. But If you send certificates to eyeballs, they have no idea what to do because They're gonna show us the certificate. And there's no, like, anything in the browser telling me what to do. Oh, yeah. The the other options add an extra RTT. So Yeah. Yeah. Next slide, please. Oh, sorry. I just said this next slide, please. Yes. So proposal. Set a single bit in your client hello that says, I have a certificate configured. Doesn't say anything, doesn't say you have to ask me for it. It just says, I have a certificate configured. If you wanna ask for it, I'll send it. So I think this is the cheapest and easiest and, like, simplest possible solution. Next slide, please. Does anyone have any questions? I have 2 working, interoperable implementations, 1 in C, 1 in Go, I just open sourced the Go 1, like, 4 seconds ago. You can find it on my GitHub. I will put a link and chat the C1 is still pending. There's a demo server. If you happen to have a client say the one from my GitHub you will be able to ping the TLS flags, dot research.craftline.com. And if you set flag 80, it will ask you for a certificate. Can we adopt this? So last time we had some interest, but there were some questions that abounded. And so we approached Jonathan and said, hey. Do you wanna give it another shot? Trying to maybe narrow the scope a little bit, which is I think you've done that. So I guess I'm curious to know if there's any rapid objections. To trying to have an adoption call for this particular draft. And I should say I should note that with multiple interop"
  },
  {
    "startTime": "01:10:02",
    "text": "implementations, the, TLS flags draft itself can be released and move on its merry way, but it'll probably move at the same rate as any actual flag that gets shipped with it. So Alright. seeing anybody get to the microphone. I'm not Oh, hold on. There there was, couple on the queue. Alright. Alright. Yeah. I don't really have a strong plan at this document either way. I would like to see more than rampant objections to an adoption call, obviously, enthusiasm for the document. Know, we have a we have a process of registering code points that does not require their current RC. So, like, like like like like We shouldn't we have we have plenty of work. We shouldn't take on work unless people wanna actually wanna do I'm not saying we should Okay. Well, again, I'm gonna take it to the mailing list and we'll see what kind of response we get. And if we get crickets, then we know the answer. So I guess there's the other question is How do we select the code point? Cause I selected flag 80, which means I sent 11 bites. Obviously, a lot of lag is better, but It depends how common it is. We could figure that out later. Yeah. Yeah. Yeah. Oh, you mean I get 1? Yes. Alright? Okay. So, again, I'll for the summary for the notes, I'll take that to the list. You, Rich, for taking over for Hanas as he presents. Testest. Okay. Yeah. I've received some advertisement from pre in previous presentations already. So Thank you. Yeah. So, I'm going to talk about the the extended key update. Which some of you have seen a 00 draft version being published Right after Christmas. And immediately, we have gotten some response. Thanks for for spending your your Christmas vacation reading my, the documents That's excellent. So a little bit of history"
  },
  {
    "startTime": "01:12:02",
    "text": "So when, the DLS 1.3 specification was developed what the protocol was developed there were a couple of features removed, others added And one of the features that was, removed was, renegotiation. And which in particular had an impact on on 2 aspects. 1 was the the ability to do key update. And also the second one was post hand shake authentication. D post handshake authentication, is available in TLS 1 or 3 beef from the server to the client, and was later added by Nick in post directions using the exported authenticators. And I will mention that because I will get back to this specific design in the next slides. The key update is also, as you know, available in lsone.3. And It just, it rolls keys. It doesn't provide any forward secrecy. Next slide. So as John mentioned, there are some use cases where long live connections 50 LS are are common. Obviously, not the web use case. And, here are two examples that assigned team has been mentioned in the the ESV WG which was about securing telco traffic in other, scenario is industrial IoT where you have things like power systems, where you have these long lift connections, And also, increasingly, we see some of the TLS sort of secure traffic or, ipsec secured traffic being replaced by TLS. However, that requires, these 2 extensions to post handshake authentication, which is already available. So that's great. Hey, man. But also a key update which uses forward secrecy"
  },
  {
    "startTime": "01:14:02",
    "text": "to force an attacker to do dynamic key expertration, Next slide. So We published the 0001 draft. Got feedback. Totally changed the design based on a feedback. So I'm going to talk about the 1 version, which I submitted in time for the deadline. Thanks to all of those who provided feedback So it has 3 Sort of, sort of dis so that the science space is surprisingly has a couple of options or it's larger. And, in this specific design, It it has 3 principles. The first one is it follows the key update message with just one short message, from the TLS 1.3 design, which triggers the the key update to regular post handshake authentication message. For the forward secrecy, we decided to reuse HBKE as a as a Kim which also gives us the possibility to use or to benefit from some of the work that, Scott has been talking about, early in this meeting the hybrid exchange and if the combiner which was also something that was brought up on a mailing list was not something we we focused on in the design team work. And then, it borrow. So, why it's inspired by the design from in the exported authenticators, which uses, if you remember at quite interesting design were the payloads actually exchanged at the application layer and then, made available to the TLS stack. Or the outcome of it. And As a consequence of that design, d The HPKey payloads and the public keys that I, exchange, they need to be exchanged at the application layer. So that's simply what the"
  },
  {
    "startTime": "01:16:02",
    "text": "export it or syndicate the status and what this then inherits as a consequence. Okay. So nice diagrams in the in the in the document, but, The they ask my ass to the group is To provide feedback regarding the use case do you think that that this is a use used for use case to have, forward tick receive if A key update. Whether you have specific or more opinions about the solution design specifically about the use of the application layer design what it was indicated as which we switched to after we got the feedback that it Obviously, the message is required. Changes or additions to the state machine. And Yeah. On then we obviously are seeking to do this work in the TLS working group and Sort of with, with the feedback from the group. Scott, was he? Oh, Okay. 2 comments. My initial opinion is that, do you it'd be nicer if This will be done entirely within the TLS, applique, protocol level. And And and unless I'm misunderstanding your use of application layer, if you really don't want the application layer to actually get involved other than possibly say, oh, go go Ricky yourself. Okay. Another, since I'm up here, another comment I had is it appears that you're designed either the client or the server could ask for a rekey. One of the things you have to careful about is if both happened to ask for it at the same time,"
  },
  {
    "startTime": "01:18:01",
    "text": "something saying happens. As I say, they don't get out of sync or anything. I didn't see that called out anywhere in the in your draft. Okay. On the on the first point, Yeah. So that's actually I I think why I want to bring this to the TLS work group. So it's not just purely at mic discretion to change the design path forwards and backwards. In the serial serial document, we actually did the design TLS messages. And then the feedback was why do you do it that the TLS message, when it I don't want to make any changes to a TLS state machine. And so that kind of, inspired this work Also, because we need the bundle of the 2 features, the key update plus the ex the post handshake authentication Which happens at the application layer? So it kind of we have to do something at the application layer already anyway because prior work in the in the TLS working group. So this is not my construction. It's essentially work that the group has already done so far Which, It's what it is. Okay. But but, point taken, the On on the second aspect, Yeah. Happy, like, it's a it's, in some sense, for that design, it's a serial version it's not complete. It's It's a it's a proposal, but so definitely definitely have to cover that to agree. Thank you. And thanks for that initial quick feedback, Hi, Hans. So I only saw the second quite, late last night, your time. And I have some just some general concerns about the changes you've made between 00andand01. So in 1. I think it was also present in in 00. When you're talking about forward secrecy, I think what you're"
  },
  {
    "startTime": "01:20:04",
    "text": "What you mean is, like, postcom for my security, because the key update that's currently in TLS 13. Already has, forward secrecy. So when, like, you do a ratcheting of keys forwards, and you delete the old key, you get security against compromise in the future. I think what you want is kind of the opposite, which is where if I get compromised now, I would like the attacker to be kicked out in the future. And for that, you want post compromise security. That's like the the public key rekeying. Secondly, like, in the draft, I think the way you've described it know, it's quite generic as to what could happen in the application layer, but the draft suggests using, like, an ephemeral static, Diffie Hellman exchange or an ephemeral static cam. Where the static cam comes from. The service certificate. And in general, that won't provide either PFS or PCS. Because in that situation, the attacker will have compromised it at some point, And then either later or future, they'll have access to that private key, and they'll be able to go back and crypt those key exchanges to access all the past keys. Will break that. That property. And, like, similarly with Scott's kinda concerned about mixing at the TLS and application layers. Thing that came to mind that might go wrong there is that you might have a situation where there's a middle between your two peers that want to do this kind of reeking. And at the application layer, that middle box is potentially transparent only at the TLS layer that that middle box is going to show up. So in that circumstance, the applications aren't necessarily gonna realize that they're not in the same TLS session with each other. Gonna be a middle box that doesn't have access to that application layer key material. And so the re keying can't happen in that circumstance. So I think for that and other reasons. This is really the kind of thing that if you to do. You would want to do entirely within TLS. And and to my mind, your 00 draft was quite"
  },
  {
    "startTime": "01:22:01",
    "text": "Neehan, maybe not I'm I'm not sure about whether overall it it's complexity justified the end goal, but it it did seem to me, like, if you're going to do this thing, this might not that might be a better way to do it than some of the changes that have been made Okay. Yeah. Thanks. Thanks for the feedback. Sean, I think you jumped up when it came to the forward forward secrecy topic. Is that correct, or did you your queue for the market? I'm next in queue. Okay. So you brought up a couple of points. That's great. So the the The forward secrecy Initially, we used it on perfect forward secrecy, but, that terminology changed with some other RFC, which number I forgot, It What we want to do is, kind of, at if he Hellman in a And so the ellipticraft, if you help him for elliptic, you know, elliptic curve, the cryptography. So that this is obviously more then what the TLS 1.3 ROC does in terms of in terms of features d the key, the recipient key that we use in HP key is not from the long term certificate. It's actually the pub a public key that was exchanged on the existing handshake. So so in that sense, I think that's that's kind of different, than what you than what described. you reason why the switch The from the, the regular, sort of diff Diffie Hellman, was, actually had a couple of reasons first one was the problem that in the exchange, we then kind of stalled, the transmission of further date until the completion of the exchange, which people didn't like And so we wanted a one shot message, which required us to"
  },
  {
    "startTime": "01:24:02",
    "text": "to use a construction like, HBK, semi static, Diffie Hillman, So So that's something We have to make on on your point and your preference for the for using the TLS message is, I think, I take that point. It's Like, Apparently, there are different references. Yeah. So sorry. So just to come in there and clarify maybe, It if you're trying so I think I think the thing you want is is post compromise security. Rather than perfect. Forward secrecy or forward secrecy that the TLS 13 key update already achieves forward secrecy. I agree that you want something different to that, but I think the thing you're for us is post come from my security. And then Yeah. In in in the draft, you to achieve that, you need to go and generate a fresh key on both sides and then have them both use it and then you get PCS from that point forwards. If you've got any kind of static key that you're catching say from earlier in the connection, You can't get PCS. Past that point. Because the the the attacker can go back to compromise you at any point up to the last time you generated that fresh key, So I think you know, in that sense, there's always gonna have to be some kind of interactive handshake or or key change change. To trigger a new round of of of PSS. Yeah. Thanks. Yeah. Definitely. I can change the terminology. I I try to stay in line with, with what I question 2 has been using because it has the same feature oh, it's not the same, but, a similar feature but I'm happy to change that to to to Whatever. Thanks for the feedback. John Mattson, Ericsson. I'm supportive of the use case. I think There might be several situations where doing frequent resumption is problematic."
  },
  {
    "startTime": "01:26:03",
    "text": "I thought this 00 draft was a very good start. I think this year, one draft goes in the wrong direction in several ways. First, using application layer authentication key exchange is very different. I think using an application layer here's ads complexity. I would not like my keys to be shared with the application layer and also this requires that you can make changes in your application layer, which I think is not at all always possible. If it's nothing, this needs to go back to the PLF player. Then second as Mhmm. By then it's, now you're doing static FM. I think you need to go back to doing FMero ephemeral. Change. Okay, I would, yeah, I'm actually doing It's just, unfortunate wording because the that. it's the semi static here. The static is just from the name the way how the mechanism is proposed, but since I make changing the public key in the exchange in the message beforehand. It's kind of ephemeral oh, The connection could be In my use cases, the connection can be longer than the certificate lifetime. But it's not I'm not using the long term certificate as the static key, that's important. I'm I'm actually changing and the femoral public key up front, which I then use the recipient cents the firmware public key, which I then use to it's it's a thermal if you use it ones. I I I'm using it only once. I'm only using it once. But, that was if you do that, then it's fine. I did. I would like to API do rekeying and then TLS do the rekeying. For me. Then a minor thing is HP key. I I"
  },
  {
    "startTime": "01:28:01",
    "text": "don't really understand the change to that. Like Camps, PCC, Camps in TLS or reducing the already, like, code points and already deployed are using the key share it feels to me that going to HPKey would head burden on the implementation, you had to add a lot of code, but that's, I can live with if it's done on the TLS, slave. Yeah, on the on the first point on, sort of switching sort of switching the style to the application layer, least I I under interpreted the feedback I initially gotten that that would be the preferred approach, but apparently, misinterpreted that signal. So so Yeah. Have to go back to where it came from. Damn it. Jonathan Oden Cloudflare. So the reason I actually do like the application layer, style, is because Well, I think both of them actually break the security proofs from Tamara, at least. Which like, it's a lot of work to redo those proofs. It's doable, but, like, It takes forever. This is very similar in shape to the extended key schedule draft. I proposed pre pandemic, like a long time ago, but the entire point of the shape of that draft was It doesn't invalidate the tamarind proofs. And I think it achieves the same effect. Yes. The other thing I wanted to say is So the way this is implemented is it just modifies the application traffic secret. But doesn't modify the resumption or exported key secrets. Should should should should And so the security guarantees of those get out of sync with the application security keys"
  },
  {
    "startTime": "01:30:00",
    "text": "guounties, which just like requires a whole new model for understanding. I I don't think so. Because They are they get out of sync already with TLS 1.3 as what? They have the same guarantee because they they don't do a they don't do it. It's just like a hash iteration, and so they have the same property. I'm not sure because, because I think that was one of the change that, asked that question on the mailing list. I think it was David Benjamin who who responded to that. It was kind of the I I kind of a side effect that if they export a mechanism that barely anyone noticed, I guess, that, the key update changes the key and the what it was initially negotiated So I I'm not sure that was really So I I I would double check the the the proofs again, what it, I was really taking into account, So so so imagine the this, like, scenario. So you get some new extra security property from your location traffic secret. I don't want you to have that. So I just, like, kill the connection, force you to do a resumption. You don't get any security benefit. Because the resumption hasn't had that increase of Puffer Ford secrecy or p, PCS, whatever the guarantee you want is. Right. So what I've guarantee you can I want a Well, I didn't want to provide that property? I want to keep it simple and then it when you when you go back to resumption, you go back to what you the key you originally had you're not going to So the flight do something else. So you have to I think you have to live with that. At least in my design, but, Right. That's what I'm saying. design, In in your in your Of course, you may not like that design, but, in your design, This only gives you security benefits if you're not under attack. So it's the seat belt that only works when you don't crash."
  },
  {
    "startTime": "01:32:04",
    "text": "Like that. no. I don't agree with I think Yeah. We we need to discuss that. Yeah. For sure. It takes the list. David Benjamin. So okay. The reason you don't wanna update the secret and friends is that you cannot have both. You have I you we either have to sacrifice transparent re keying where the application protocol doesn't know what's going on. Like, where it's like transparent application protocol. Or we have to leave the exporter secret alone because otherwise the application protocol, like, Otherwise, the application protocol won't know, like, when the export secret has changed. As to this draft. I think this is kind of overkill. Like, the use of HBK could just be key shares. The export authenticator stuff I suspect that might be a misinterpretation of something I said that that was not this here. the intended direct, like, export authenticators doesn't make sense The the problem with the original draft was there was a sync there was a a pro there was an issue with, like, The order of the messages and, like, if they flowed while application data was of flying. There was some sketch of a solution on the list with three messages rather than 2 messages, which would have completely solved this problem. I don't think we should do something export to authenticator. Like, that like it would just make everything annoying. Well, I I like the idea of the exported authentication because I have to use that already anyway. And so it would be one style of design. I like that sort of uniform design in that sense. I don't know why people are now so so much against the export authenticate and approach given that it has been done in the in this working group. But, I'd I'd but I'm happy if people say, oh, don't we we actually don't like that assign and fall back to the other one. I'm I'm actually not married to this specific design, but I I'm interpreted the feedback that"
  },
  {
    "startTime": "01:34:01",
    "text": "this is something that is desirable, but maybe not. So can be I done. Think it's a question of whether This is so, In the old TELUS 1 to a renegotiation mechanism, renegotiation was, like, half of this, but it was originally like, like, it's generally implemented as transparent, but it's not really, and that caused a problem. So until this one 3 key update, it's not something driven by the application. Sometimes you have APIs to trigger it, But the, like, at any point TLS can just know how do they decide to send a key update and the application protocol doesn't have to know. If you want But it's not it's not, like, you still to So you still may want to have the application to trigger a key update sort of like there's nothing in the specification that says Only the TLS tech is allowed to do that. Or drives only the it. application The application is allowed to drive it, but the question is whether it is required to be in the loop like, whether it is an error to ever trigger key update without the application knowing. And it is currently not an error to do that. Which is a good thing, I think, because it means the TLS layer can just sort of have automatic re keying, and we don't need to patch every single application protocol 1 by 1. Reason export authenticators make sense and this doesn't apply there is the authentication is inherently application dependent. Like, if I suddenly add a new client to an HTTP 2 connection, like, what in the world? I need HTTP 2 to know about it I can't even know what that means. But HP 2 doesn't really care. About, about, about, about, about the encryption protocol, it's just like TLS, you solve this for me. And if we on the and if TLS thinks so, it's useful to, you know, post compromise security for long lived connections by swizzling new secrets, then, oh, like, yeah, that's cool. We can do that. But if we wanna build something like that, then we can't use an export design because an exporter design assumes the application is in the loop. If you wanna build something with the applications in the loop, we can do that too, but I'd don't think it's necessary here. And so if we can avoid them being in the loop, it seems simpler for everyone."
  },
  {
    "startTime": "01:36:02",
    "text": "Maybe. Yeah. Like, I I think the exported authentication was very much trimmed by web the web environment and and maybe the some of the machine to machine communication is is different. But, I feel the mix, sort of like now in a solution to fulfill that fulfills the requirements. I now need to have posts. And need to have something an extension that uses the exported authenticators plus something, for example, the key update at the at the TLS layer. I mean, because because I have for I have no alternative for the if I want to have Mutual authentication, in a posthandshake style I can't just stay at the TLS layer today. Right. I mean, because authentication is inherently application visible. I probably spending too much time on the next day, we can do this offline, but but thanks for the feedback. K. I I think, the the the problem here makes a lot of sense. I'm pretty concerned about the amount of complexity we'd be add, adding by trying to do is set the application layer. I I think, We should look at other options that utilize the existing resumption mechanisms. So you can imagine this situation where we have like a defined close your alert that says close the TLS connection and immediately start a resumption PSK handshake on the same connection. That would vastly simplify we wouldn't have to worry about, like, exporter secrets getting out of sync with, property security properties. And we wouldn't really be cryptographically changing. Much of anything at the TLS layer. So I think unless it's a really wrong reason why a person like that wouldn't work. That would make a lot more sense to me. Yeah. So I in the meanwhile, I got the point that"
  },
  {
    "startTime": "01:38:00",
    "text": "nobody seems to like the application layer style. I think that was pretty clear. If there's one thing I'd take away there and start one. On the on alternatives to science, definitely. So if we could avoid, having interaction of the of the communication, that would be good if that would be a way, that would, make that possible And at the same time, having a simpler design, I'm all in for Thanks for the solicitation. Alright. So we'll see a revised version of the draft. It goes back and gets changed So, Thanks. Alright, Ginger. You're up. I'll unlock the queue and let you Take over. Alright. There we go. Court. We're in my document. There's my document. 20 Awesome. Of attention. Alright. So this is maybe a little spicier than, 5 formal analysis triage panel, but this is a pretty simple proposal, which is adding pure mlchem as a new named group for TLS 1.3. Not in hybrid mode. But as, just a standalone, MO cam. And in the document. I only have MOCM 768 and MOCAM 1024. Just because, but I'm I'm not married to that. So Honestly, this kind of fell out of looking very closely at, the hybrid design that was, discussed by Scott for earlier. And what it specifies is that you can have your traditional, Cyprus named group, such as, you know, you know, p56 or X in a hybrid So"
  },
  {
    "startTime": "01:40:01",
    "text": "Uh-oh. You were bouncing in and out there. So and we lost her. Yeah. Let's get him back. Let's see. Am I back? Yep. Hear back. K. It explicitly names specific hybrid combinations. The only things the only things we have listed right now are what was Kyber at the time, and we'll eventually turn into mlchem. With PT56, with the X Two Five 509. The design kind of implies that you should be able to do the other side of the hybrid, which is mlchem. I think it's 768 for both of them. By itself. And so that's what this does. It writes down ML chem 7 68 and mlchem 1024 as their own named groups. In a very similar fashion. This is also partly motivated because, this will be, according to all the all the kind of draft indications from US government about their security standards for their, CNSA 20, compliant vendors and and communities that they serve, the mlchem 1024 by itself will be, a fully supported, key agreement not in hybrid mode, but by itself, And there's been a lot of signaling that even, parties that are supporting protocols that are in hybrid mode for They might get an exception. They might only have that solution. Will be to move to pure PKQ only by 2030, 2035, depending on the application. So if that's the kind of direction that at least a non trivial segment of TLS users are heading in."
  },
  {
    "startTime": "01:42:01",
    "text": "By compliance and regulatory issues, I wanted to just write it down. So I've written it down. This is basically the meat of it. Just write downs the new named group I picked some numbers because they They seem seem nice. I'm not married to them. And this is just repeating a lot of what is in hybrid design, the way that chem's work hybrid design with the with this sort of key exchange is the clients doesn't an ephemeral, chem, key pair generation, shares its encapsulation key as part of the client Hello. Sends it over to the server, the server, you know, if it supports this, will Generate the you can call it the seed of the shared secret. And encapsulates that to the clients of femoral key pair and sends that ciphertext back in its server. Hello. And then both of them on both sides will decaps the server has access to the, drive share secret. Through the KDF of of mlchem, ready. It has a chewed secret, and then the client will receive the ciphertext as part of the server. Hello. And to to encapsulate that to its copy of the shared secret. And then this is how we shove it into our lovely TLS 1.3. Key schedule And it just goes right in there. Instead of the elliptic curbed, if he held in shared secret, it's the shared secret that comes out the back. Of mlcam. And you're done. And we you don't even have to think about if people are in the CFRG talk, earlier. Don't even have to worry about any of these binding properties I talked about in there because TLS 1.3 you know, is is all sunshine and rainbows, all the the cipher and the encapsulation keys, and everything is already cashed into the transcript. Up above and so we can do we can do whatever we want with, with this cam shared secret and not think about anything else about it. And that's that's kind of the meat of it. Some this was discussed on the list. So"
  },
  {
    "startTime": "01:44:00",
    "text": "Some frequently asked questions. Should this be recommended equals yes? I don't think so. To start it is kind of fresh and new. I thought it should be available Do I think it should be recommended? Maybe not yet? I'm not strongly strongly, holding strong to that someone asked, what about we also do signatures at the same time in the same document. I'm like, We we don't have to bite off the whole thing in one go. But also, just slotting in MLCAM for key agreement is is easy and clean. We don't have to worry about sizes and and, you know, all this sort of stuff and, like, the fact that there's, like, 7, PQ signatures, and it's modern tealasone03hand shake up with all the there's the PKI and there's, you know, certificate trans there's a whole bunch of signatures in We don't have to touch that yet. We can do that in a separate document. So that's my opinion on that. I've heard I've heard a lot of commentary about Isn't this too early to have a a PQ only, option? And I would basically say no, and I'll kinda talk a little bit more about this in the next two points. Some people say, well, we have hybrid. And, like, we're we're going to ship hybrid, and Firefox is shipping it all nightly, and Chrome is about to ship it. So so why? And I was like, well, There are nontrivial number of parties in the world that use TLS that may never use hybrid. And they may only have enough in them to do one PQ transition. And there's a non trivial number of of that set that will be required to go to PQ only very soon, like, within 6 or 7 years. So I'm trying to look squarely in the face of that world and just sort of, like, treat it as if it's real as opposed to just sort of a femorality out in the world. Somewhere in the future. And not relying on the fact that we have hybrid"
  },
  {
    "startTime": "01:46:00",
    "text": "because there are some people can't rely on Harvard. And then a lot of, I don't trust Pete crypto. It's too young to rely on it by itself, and I wanted to go look at the timelines of, say, elliptic curve adoption to sort of compared to where we've been. Elliptic curves were introduced in the literature, in using cryptography in 1985. They were, there was a Serticom curves that were published, and I think 1998, there was proposal to be used in TLS in the working group and it was adopted by the working group in 1998 And then the mist curves were published in 1999, and that, that document for for using TLS became an RFC in 2006. He'll us 1.3 making a femoral elliptic curve to be in home, and the the only solution for key agreement really pushed the numbers up into the high 90s for, you know, who is using a lift to curb with the home and for key agreement. But it was being it took Sometime. But not. Too much time to go from a NIST standard to fully supported and recommended, I think, in TLS. It took about 7 years. We'll been over 7 years. Crystal's Kyber was published 7 years ago. This nest draft is about to be a a real Fipps a real boy. It's gonna be Fipps 203, probably in the summertime. And so if the this document were adopted now, it's about in line to the latency that elliptic curved at the home and had respective to its other standards, at the time. But also, We don't live in the same world where Lyft occurs. We're adopted in TLS. We know a lot more. We have a lot more kind of analysis, I guess, about this stuff, and this is not"
  },
  {
    "startTime": "01:48:00",
    "text": "like, lattice cryptography period. This is, you know, one specific scheme yadayadayada. I think This is not being too aggressive. But it also, I think we could be afford to be a little bit more aggressive, and I'm not suggesting that we are. So, so, that's kind of my pitch and all these questions. Rich, Alright. Alright, guys. Just, I got 12 minutes. So, I'm actually a little concerned with first. As token would say, do not go to the IETF for answers. They will both say hybrid and PQ only. And so, like, that's kind of what we're doing. Right? Everywhere else in the IETF, we're doing hybrid And supposedly, there's some There's some lamps proposals that are not hybrid. Yeah. Okay. I I'm just concerned that we're not you know, We all are kind of scared about this brand new thing. I I remember Dan Bernstein posted a timeline of all the finalists and how they've been broken the past. I just I'm a little Don't shake your head. No at me. I'm No. I'm not thinking my head are you. I shaking my head at DJB. At any rate. It's, you know, item. I'm not saying it's too fast, but, saying it's not fully consistent, and I bothers me a little Alright. I'm closing the queue. There's, like, twelve people in it. We have John? Yeah. Thank you. I'm supportive of this work. We're planning to offer hybrid as the default in our all our product, but we would like to offer mlchem only to customers that want that. I think TLS should just register all the variants that needs standardizes,"
  },
  {
    "startTime": "01:50:01",
    "text": "I think all the three ml cam and then by core you see your classic, Michael, is whatever comes next. Them and let the market wants what it I think this is super simple. There's no changes. There's not much I think he has to register the code point, register them as recommended equals no. I don't think any RFC is needed. This is just a code point registration for new groups. Yep. Eric. Me, I think. Yes. Yeah, I think I'm sort of largely, in agreement with John. That's something about the about the outcome, which is, like, just a quick point based on the draft. I don't think we need an RC. The, I guess I'm sort of, I do wanna make sure it's 2 more substantive points. One is, Like, My sense, there's, like, the issue issue you raised and sort of reuse of the Diffie Home And Shares in the hybrid draft. Like, I'm not sure. I think that's a great idea. Frankly, but it will say one thing about it is it's not required on the other side to notice So it's really only complexity of people, which is to bear it. So that that makes me feel somewhat better about it, even though I think probably it's a bad idea. Second, I guess I'm, like, super unmoved by what CSNA 2.0 says. You know, like, you know, they they can say what they want, but we should make decisions that we think are alright decisions, and if people who, you know, and given the code point can be registered, if you want that, they can have it. But I think the idea sourcing that are that we think are good. So, I don't re I I guess I don't feel qualified to really have strong opinion about, like, what's good and what's not, probably a little less bullish about than you are. But, but but I think that, again, we we should be positioned based on what we think Yeah. On on that previous one, I made some suggestions, I think, to the know if they've been pushing data tracker for hybrid design, that made it very explicit that, like,"
  },
  {
    "startTime": "01:52:01",
    "text": "you can do the key gen, the ephemeral key gen for a hybrid that is sharing offerings into key share in exactly two ways. You generate one thing once for your lift occurred to be helmet and your your chem. And you share it, or you have them completely independent. You can have, like and basically made it very explicit how you can, but you're not required to share gens. So you only have to do 1 key generation or whatever. But if you want to, you can just generate everything on the fly, Willy Nilly, and not do any sharing, if you wanna eat that cost, which may be significant depending on your setting. That was a bit smushy from the from the initial thing that I looked at, but, yeah, that's in there. And then, yeah, this is, Not necessarily like a oh, we want to comply with CNSA 2.0, for me, it was very much a, oh, they They trust it that much. I trust it. I trust it in the time I I've been, like, up to my neck in NLCAM for for months months now. Like, I trusted enough to make it an option. Not necessarily recommended because, I think he care, mentioned that on the mailing list. I think it should be an an option, and I figure we we gotta start somewhere. So Scott. Scott Flores Sysco Systems. I strongly support this work even though I'm my co author of the hybrid draft. As for, having us supporting only hybrid, I would agree that, we'd, with the previous stockers at, just because the risk of the, IETF is going towards hybrid. Doesn't mean that we are mandated to. As for not trusting to mlchem, well, there's nothing that says you have to use this draft. If you don't trust it, don't use it. Thank you."
  },
  {
    "startTime": "01:54:04",
    "text": "Hi, Steven Farrell. And and and the opposite hand, I think this is a terrible idea. Having, you know, optional things that you, you say exist, but people shouldn't or, you know, don't have to use. I think tends to turn out badly for interoperability and for possibly for security in general cases. So I think this the best solution here, I think, would be to add a a note to the abstracts of this draft saying never do this. But if you ever did, here's how you come, I think you can get a code point that's according to the policies. But again, I think having that code point would not make the Internet better. I think it might make it a little bit worse. So I think, I'd encourage you to to to to decide not to do this. Okay. Hey, I'm Quinn Dang at Nest. On the official level, we And I personally myself, We are fine with hybrid and a stand alone, post quantum And I do like the word that we've been using In this talk, it would cost We're not talking about crypto analysis, the latest results, and how What is the security of? Ml cam based on And we're not talking about that here. We just The only thing coming from this is about trust, about your own feeling. Your own feeling. So so so the feeling My birth of a feeling should not force on everybody else what to do or not to do. It just should be me. So, if you don't feel happy or feel good about it. Then just don't use it. But if other people, they feel strongly confident about it, then don't don't don't try to hurt them or force them. Just let them Left with the trust. So I I support both."
  },
  {
    "startTime": "01:56:00",
    "text": "Well, thank you. Martin? I won't be long. This is a distraction. I'd rather see this goes an individual draft than continuous in this working group. For all the aforementioned reasons, not quite as strong as Stevens, but, more in line, with those expressed by by Edgar and John. David's Ganazi. I think on the FAQ slide, one point that perked my ears up was the, adoption takes time, so we should, start now. The adoption takes time don't start the clock when the RFC's published. We start the clock when people start caring. And so I wouldn't use that as an argument to publish this sooner. From my perspective, it sounds like there are people in the room who want this, so definitely get a code point, but we don't need an RFC for that. So I would plus one to what MT said. We should get the code point, have a draft that doesn't need to be published to have it so people can use it. Then if at some point we decide we wanna recommend this, then we should publish it as RC. Okay. We surprisingly drained the queue in time for the end of the session. Joe and I will confer and we'll get back to y'all about what to do. But, yeah, it does seem clear, like, there was a way forward to actually get a good point. So his and I've seen a couple things fly by in the in the chat about you know, could we do rot 13? And if you want, you just put a d next to it. So, I mean, everything can get registered. The bar is low. So or high dependent upon Hago, because I I look at this as the the 10 24 variant is the people who like to protect against aliens. So and and I'm not a cryptographer. So Yeah. But, thanks again, everybody, for lively session."
  },
  {
    "startTime": "01:58:00",
    "text": "And, again, thanks for taking notes, Haunas and Rich. And, we'll see you all next time. No. Hi. Thank you. Alright. 15 minutes to get lunch. Yeah. Yeah. But, I mean, at the end of the day, Yeah. Yeah. Literally because we we know the people Did you find some other place that had your lunch No."
  }
]
