[
  {
    "startTime": "00:00:28",
    "text": "Alright. I think we're gonna get started. Can you guys hear me? Or us? Can you hear us? Yeah. Uh-uh. We we we have love playing here. So I'll turn that off. I Yes. Thanks for reminding me. I'm gonna go call my kids. was wondering what that was. Yep. Bed time on East Coast. So, I will probably have to step out for some point. To actually get the bedtime done. But, anyway, welcome to Mimi, session 2, of the week, I'm assuming we can get started. I can't see too much in the room. It's just a sparsely populated room. Okay. So this is the note will. Hopefully, you've seen it. Please remind yourself of ITF's policies for IPR and conduct and a variety of other things they govern. This session. Is somebody willing to take notes for us today? Who was that? Thomas. Thank you. Thank you very much. Really appreciate it. Yeah. Okay. So we're on session 2 today. We're gonna start with an update on the content format draft from Rowan and then the entirety of the rest of the time is Richard, first presenting the architecture document, and then the protocol dot 20 Would anybody like to bash the agenda?"
  },
  {
    "startTime": "00:02:03",
    "text": "Not Okay. So, as was mentioned the other day, we're trying to schedule an interim, after this meeting. So that we can continue the discovery discussion, I'm just waiting to get availability. We have a couple of our, discovery authors who are traveling the next few weeks, and I'm trying to get some information from them about time slots before I update the doodle. So, not fill out the doodle yet. We will update the doodle as soon as we can, and then I'll send another message to the left. And, yeah, as the slide says, if, at the end of today, we think we want more interims, maybe to about things that aren't discovery, but things that we're talking about today, we can definitely do that too. So, let us know or, send send email to the chairs, please. And that's it. We can switch to Rowan. Hello. Hello. Good morning, everyone. Next slide, please. Can I can I do No? I can't control it from here. I can try to hand it off to you, Roan, or it's e if it's easier, I can just do it from here. Okay. Yeah. Next slide, please. Okay. So what's new in the 2 version of maybe content format. So the main change is that there is instead of an explicit message ID and timestamp, in the Content format, It says that the message ID is calculated as the hash. Of the ciphertexts. And, the"
  },
  {
    "startTime": "00:04:03",
    "text": "the Mimi protocol document that's Richard is going to propose is going to describe and discuss. It contains a The the time that the hub accepts in a message. And that timestamp is available at least to any of the providers. And whether that Whether it makes that time stamp available to clients or not, that that's not really in the purview of Mimi, but if the client does receive it, it can use the it can use that timestamp. So this was this is the big change. This was discussed in a lunch meeting with a bunch of the a bunch of the people who had spoken up spoken out about about message IDs and timestamps, and Is everybody okay with this? Does anyone wanna speak against this Okay. Alright. So That's gonna stay on the draft then. And I also want to, you know, we we had sort of an abbreviated discussion in Prague about this document. So there's some of the changes from the previous version, the one version that I want to to cover here. So next slide, please. So regarding Attachment Hang on a second. Yep. We have a mark I think we have Martin in the queue. Martin, do you wanna speak to the previous slide? Barker,"
  },
  {
    "startTime": "00:06:00",
    "text": "Okay. I think we're gonna have to assume that, that was an accidental queue entrance, Okay. Yeah. So any in case, except at some point, we can, can always go back to whatever slide he wants to comment about. Okay. So in attachments via external content, I described a a message format for this and the one comment that, that came up around this was from, from, Daniel, go more about the The the the the web bug where you can and do someone to go and visit an arbitrary website, therefore, revealing privacy know, private information about the fact that you saw this message and that you saw it at a particular time, view, IP address information, etcetera, etcetera. So What, what has changed here there's nothing changed in the content format document it does describe in the security considerations a bit of this problem, but Going forward, there is I I expect that there's very likely to be a bunch of additional pieces of room policy. And one of the pieces of room policy that is quite common in enterprise messaging systems is Whether you can send attachments? And if so, what kinds of attachments whether they're rendered in line, whether you do pre whether you do preview or, images and all sorts of things like that. Today, Messaging systems largely use the sender's provider's domain. To store mess to store attachments, with a handful of exceptions that use would be the equivalent of the hubs Domains. Domains. So that could also be a room policy"
  },
  {
    "startTime": "00:08:03",
    "text": "And so that, that provides you with an ability to restrict the set of domains or URLs that you that you accept showing up in external content. And in addition, there is a PR on the Mimi protocol proposal, period number 75. If anyone cares to see that, which also gives some further control to prevent the wet bug. Echo. Yeah. So, I think I, I think I raised this point, in progress, but maybe you got lost is that this is not secure. Because it does not tightly bind the content of the message kind of the extension to the to to the to the this message yourself. And the way to fix that is to put a hash of the intercontinent message or, actually, I guess, to actually add her kind of the message as well. In, in in in here. What message are you The the the thing that is the thing that is allegedly being the thing the thing that is allegedly at the other end of this URL Got it. Yes. So, Yeah. I think that's actually in there. And, it. I'm seeing But, you know, oh, okay. Anyway, That should be fairly straightforward to fix. I agree. Great. Okay. DKG MGP. I'm trying to I think I think it probably should be a hashless ciphertext, and that's the right answer on the second I'm a second confused with. Although these are all, god, they aren't key committing. Are they No. But they're they're not key committing. Richard, we need we need we need we need to hash the plain text. Yeah. Good question."
  },
  {
    "startTime": "00:10:00",
    "text": "For a commitment I hope that answered you for that too. Yeah. I mean, it seems like you're if you said you have some plain techs in the text. Yeah. Know. Yeah. We we use all these problems, but it may not be as easy as I Like, let's just email photographs and Julia in, and we'll get an immediate day. Sounds good. Okay. DKG. All good. That can be what I I mean, I I said in the chat that it's could conceivably put the AAD tag here. So the tag doesn't ship with the object, and that seems like that would do the same thing. But I could be wrong. And if people are gonna ask elsewhere, they should do that not a photographer. Okay. Alright. So it sounds like there are no objections to the to the the concept here that we have we have some mechanisms to prevent the web web bug. And for these the specific crypto We have, fortunately, people who know what that what the right things to do are to to that need to be added to this to make it to make it work appropriately. Richard. Richard. I'm just really coming from Martin Juice. He he wasn't able to get his, audio working. He he says He wanted to ask about the deprecate on slide 2. He says we're still working on this why we have to deprecate something that we had never used. There's something that was in the previous version, and we're not going know, maybe you deprecate was an unfortunate choice of word, but It's gone from the current the current version of the document. So If somebody wants if somebody wants it back, please speak. No. Okay. 2 slides forward, please."
  },
  {
    "startTime": "00:12:02",
    "text": "Okay. So the last IETF, we had strong consensus render the sort order, is an important feature of Mimi. So currently, the draft has this last seen header with, the message ID of the last message that that sender had seen if multiple messages arrive with the same last seen header, the receiver list multiple messages. This is a common pattern, the, there's still plenty of you know, plenty of things that can that can go wrong, but these are already mentioned in the general, general hygiene section of the security considerations section section 8.1. If this header is is manipulated maliciously. And the if the timestamp that the hub accepts the message is indeed available to the client, it can also use that as additional information to more precisely organize the order of the messages. So I think this is about as good as we're gonna be able to get. Given the fact that we don't that we're not specifying a protocol from the last provider to the client. That has to do this rendering And if somebody thinks that there is a better way to do this, then please speak up. K. Next slide, please. Okay. Mentions. So there were some comments about how we could represent mentions differently than the way that they are in the document. So I wanna separate two things here. One is that"
  },
  {
    "startTime": "00:14:01",
    "text": "There we we could come up with some news and tax for representing mentions And then there is is the are the security considerations and the, you know, the specific comments about what, what a client should do Are they sufficient given this specific syntax? So I haven't heard a concrete proposal for doing something different. But there is there's a, you know, serve two paragraphs and some examples, about this problem. In section 8.4 of the content format draft. And if If that is insufficient, to do what we think clients should do. Then please tell me what what you think is insufficient. And if you have another idea about something that we could do instead, then please speak up. Think Travis is about to do just that. Please go ahead, Travis. Yeah. Just question around, like, are we going to be adopting, I guess, the the Mimi, identifier format from protocol for this in said when that is a little bit less notional, or are we gonna stick to I'm for contact format? Yeah. I I think that the that The content format will rent will we'll use whatever URL, format, or formats. The rest of Mimi decides are appropriate. Good. Good. And if anyone cares to see, slide 10 has a reproduction of the specific Security considerations, text. So, Ecker."
  },
  {
    "startTime": "00:16:04",
    "text": "Maybe this point has been made, but I'm a little sad about the fact This seems like a pro sorry. Let me take a step back. I don't know how this emblem in other systems, but I would reserve this as possible here to have I am alicemithexample.com and the assign Ronnie. And that seems a little unfortunate. Maybe maybe every system already has this property, in which case we can suck it but, like, I wonder if it's I wonder if we should not design it that way. Could we go to slide 10, please? Oh, fantastic. Okay. So there's a there's a list of examples here. So it says the receiver should use local policy to decide if the hint an acceptable local representation of the user represented by the link itself. If the hint is not an acceptable representation, the client should instead display its canonical representation for the user. That's exactly what I imagine would happen if someone put bracket, Rowan, and then put Alice's URL. Yeah. I mean, I think I I guess I guess This is not how I'd probably design it, and then I'd probably try to make it impossible to make this mistake, but I guess I if if nobody else is jazzed about this, I'm not gonna I'm not gonna, like, lay down the road. Okay. Alright. Let's go back to wherever we were, maybe slide 6 7 There we go. Okay. So time for the fireworks. So we have a a, we have a sort of vague abstract c plus plus like syntax that is used in the document right now. At some point for people to implement this, we're actually gonna need to come up with a concrete encoding, a kind of concrete binary encoding. So what do we wanna use? Well, I think our requirements are that this format should be fast to parse and to encroach"
  },
  {
    "startTime": "00:18:02",
    "text": "that there shouldn't be many ways of encoding the same thing. That the format should be extensible and that we should have a stable reference to whatever it is that we What whatever whatever language or or encoding format we decide to use. In addition, we We don't want to require a schema in I don't think we need to require a schema for extensions, but I think we definitely We definitely have, you know, It would improve things if we have some type of schema for the required or the, you know, the the header, the the The objects which are defined in this document. So what are our options? Well, we could use the TLS presentation language that MLS uses. It's got very frankly weird syntax. It wasn't really intended to be used generically. And in some cases, there's some for some languages, the parsers are really available. So, for example, JavaScript and TypeScript, to my knowledge, they don't have any there's no library available to do this, and it's like, like, Because it's it involves bit manipulations, In particular ways, this is, like, not really a super straightforward thing to do and in that language. We have seaborne. So Seabor has an emphasis on small rather than fast, It does have a choice of both schema schema full and schema less representations, It can be a little bit challenging to to work with, if you don't have some kind of,"
  },
  {
    "startTime": "00:20:02",
    "text": "like, active, decoder encoder, for the purposes of debugging. So, like, when I was trying a version of this. I had seaborne playgrounds basically open the tire time that I was doing anything. But it is a it's an I test an I test standard and it is designed to be used for things like this. We could roll our own tag link value style encoding, However, we should be aware that if we did this, we would have to have a very good reason when we get to the why we were inventing a new thing instead of using things that already exist. Maybe somebody has a very good reason. But but but in the absence of a very good reason. I have a couple of good reasons, but no very good reasons. And then, of course, they're they're non IETF protocols, like protoboff, the traditional problem with protobuff is that the wire format is not a 100 consistent, and it's not the reference was notoriously not stable. Netnetnet the The owner who shall remain nameless promised that it would remain stable and then made changes. That we're in backward. Yeah. Incompatible. There's also a message pack which is actually quite close to Seabor in some ways, but it's not widely implemented. So we have sort of bunch of, like, not very appealing choices here. As much as I don't really wanna wanna write Grafton Seabor. It seems like the sort of least bad of these options. Would anyone like to speak Either in favor or"
  },
  {
    "startTime": "00:22:02",
    "text": "of any of these options or oppose any of these options. Richard, I mean, I I share your sense of resignation. I I expect that, you know, I think your your requirements about right here. I think to get the sort of extensibility, we're gonna want to schema this as probably gonna be the right trade off. Which among the available options sort of points towards seaborne. So Yeah. Let's just let's just do it. K. Ecker. On surprise, you can propose our stun till we send tax run. I mean, I think, like, I think all out of this list only TLS and Z Bo are even remotely viable. Right? You know, running our TLs, TOT encoding is, like, not as an and and and what is on the other 2. We got end up having to specify these other 2, which I don't wanna I think only seaborne and sales protocol are are viable, don't love either of those options, particularly, you know, I hate, I I think probably, you know, if I were forced to choose, you know, I'm, like, 5248 and for the chill in terms of jealous protocol because we're doing we're doing it for, already for MLS. But, like, as I said, 5248, I don't know. Well, that's not much love seaboard. So, but I think that's the only 2 we all like reposable options. So I think that, you know, we should I feel like, run through the queue and then take a home and call it a day. For him wants to defend his other 2. There are 3, like, you know, then we should probably have a longer discussion. Okay. Tim, assuming you're speaking as an individual here, I am. Yeah. So as an individual, we've been using the TLS presentation syntax over in the the distributed aggregation protocol in PPM, and it's fine. Like, it works nicely. And it has not been that horrible or painful to implement, message parsers or encoders"
  },
  {
    "startTime": "00:24:00",
    "text": "both in Rust or in TypeScript. So I would I would vote for that. The other observation I have though is that I notice I know that the, mini protocol document that Richard is going to present to us later already explicitly uses TLS presentations and tax. So, of course, that's still open for chain to change, presumably. It for would make sense to me Like, all of me need to use the same binary encoding? Unless for us, some strong argument for it to differ at the, transport protocol layer versus the, client encoding layer. Okay. I will point out that, as Richard is likely to say in his presentation, the use of TLS presentation language and even HTTP for the naming protocol is extremely notional. So It was a it was a starting point. It was a thing, a specific concrete thing that people could understand, but It's not that we have decided that it was just that there were a lot of MLS objects that we needed that we wanted to reuse or to reference and that made the most sense for that document that's fair. I but then it's if we end up deciding to use CBAR for this message encoding, I would, vote for then making the protocol layer, like, consistent with that. Yep. Okay, Thomas. Yeah. I just had I just had two points. The first was, I I have just worked a bit on Seabor myself, and you're right. I always had it. It's a little bit of a pain, but it Well, well, well, well, well, well, well, well, well, well, well, well, well, and we've made that decision. I think Second point is nothing else here. Requires a kind of defense. If you pick anything else, you have to defend it. Seaboard requires less defense. So for the worst option. Okay. Thanks, Thomas. Richard. Yeah. Just to be clear, I was"
  },
  {
    "startTime": "00:26:00",
    "text": "kind of if if that car was 5248 TLS, I was kind of in the same ratio towards CBAR. And I think Tim was right that we should be consistent between this and protocol document. And honestly, the only thing that really tipped me towards seabor was the the extensibility is slightly easier. You don't have to be quite as deliberate about where you your extension points. But that's honestly a pretty minor, thing. So, like, if we like TLS syntax for the upper layers, like, let's let's for the lower layers. Let's do it here. Yeah. No strong preference. Okay. I would be interested in taking a poll to get the current temperature of the of the The room and remote attendees. Think we're far from being able to. Make this decision today, but it would I think this would inform things. So, Tim or Alyssa, if you wanna pop up a poll, please. So I'm assuming with talk about what the choices should be. How about TLS CBOR or something else? Yes. Okay. Does that sound Good. Does anybody want to litigate the choices before we write them down. I cannot hear you if you're not at the mic. Richard said, yes, Edgar is in the queue. Go ahead, Edgar. Yeah. I mean, I mean, I mean, nobody nobody has spoken for anything that wasn't Zebra TLS I think we should I think unless someone's gonna get the microphone now, we should just, like, limited to this too. I mean, I I I think that leaving something else in allows someone to say, I don't like either of these choices, and we expect the number to be to be small, maybe 0. So I hold on. They should get up right now and tell us why it's my point because all that's gonna happen is that, you know, but, okay, I don't really care. Okay. TKG? I just recommend the poll, we do one show of hands poll, and we say that yes means"
  },
  {
    "startTime": "00:28:02",
    "text": "Vote for yes for TLS presentation language, vote no for seaborne and vote unknown for anything else. Since that's god. Do My we still do we I have the ability to actually film at the other things. I'm not I'm not goals. That's right. In work, the 2020 for But is unknown something you can select? Just don't do not raise hands. It is. It is. No. There is a there is a there is unsure unknown option. a, a I guess we're still studying. If you're actually unsure, don't click anything. Alright. Clearly, we're into the weeds a little bit, but, Martin, Can you hear me? Yes. Okay. I think you should do the poll. I asking who would be Okay. Not really totally happy, but, okay, if you used TLS who reviewed KvFC BAR. And who would be be okay with somebody something else. So not not A binary decision, but just see who is okay with how many people would be okay with each of the choices. Just a little concerned about that because we heard from so many people who are indifferent. Alrighty. So I would actually rather force people to choose since that's what we have to do in the end. K. Brendan. Hey. So, admittedly, I have not had experience with Seaboard before. So I wanted to ask if you could expand on that one note for Seaboard that it is small rather than fast, like, is seaborne known for being particularly slow? It isn't, it it's generally pretty fast. But the, the emphasis is on is a 100% on compactness, which means, for example, the first byte, the first octet is always a combination of a combination of the You know, what is what is the thing that follows?"
  },
  {
    "startTime": "00:30:00",
    "text": "And if it's small, the length, So it there's there's lots of There's lots of, like, squishing things together so that you you use one octet for more than one thing. This is Richard so I I said in Dominican, I didn't have a strong opinion, but I actually do have a strong opinion for TLS or Seaboard. 1 of those 2, And, like, other stuff seems really, really, really like, a bad idea. So, like, the poll I think might be useful is to see if people agree that assertion TLS or SIVOR And then it seems like, you know, Rowan and protocol designers can can can experiment and, like, make hypotheses where we can do some more polling figure out between those 2. Okay. Alyssa. Ball's in your court. Yeah. I like, we need to come to a decision, and I'd rather limit limit the choices. And I don't really hear anybody strongly in favor of having the extra choices. So I'm gonna paste in the 2 choices. Into one question. Let's hope this works. Comfortably. Okay. So it's no longer I used to say raised hand, and now it says yes and no. Do people understand the polls Is the pole actually running? Yes. Okay. There's there's hand. There's participants coming in. Just to clear Fi is no for seaborne or is no opinion for seaborne? No is for seabor."
  },
  {
    "startTime": "00:32:01",
    "text": "And no opinion means Actually, no opinion or no opinion means I want something other than these 2. No opinion. 1 ASN1. That's what it means. Sacrelage. No means that you don't care which one of TLS presentation language where Seabor is used. Is that right? That's what no opinion means. No opinion means you have no opinion. It's now. like, we, yeah, we need, like, a a a card decoding this thing New I it's, like, your your mission is new IP member listed to fix this for us. And your all the power is invested in you. People keep changing their votes in all in all three cases, the numbers of gone up and then down. Oh, man. Look at that. So now people are gaming the on purpose. Okay. We have or the clock is counting down 15 and then we're closing this. 5 seconds left. Nice. Okay. The nose have it. Well, We're obviously quite split. I guess, if we went purely based on the number, we would be in seaborland but now is the time when people can come to the mic and get in the queue Richard"
  },
  {
    "startTime": "00:34:02",
    "text": "even the level non committalness here, I was gonna suggest that since we of already written a bunch of TLS syntax stuff in the protocol doc. We go ahead and try this in we can reencode it and see board later if we data. So, actually, I'll I'll make a make, I'll make a sort of an add on to that, which is I can put the content format I can use in the body of the content format, I can TLS presentation language, and I can write an appendix that shows the examples in seaborne. How does it really does does anyone propose that I do something different for this document. Good plan. Okay. Alright. Let's see. Next Next slide then. And it looks like I'm gonna finish on time. Okay. Last question. So I got one issue, one person on the mailing list to ask for, basically the equivalent of a subject header And this is used in I think r RCS, MMS, and Microsoft Teams. In some cases, it's a little bit buried in the user interface, but it does exist. So do we want do we want to add this? So we have know, we have a thing which are in common among among a bunch of messaging services in this document But just because some messaging services offer this doesn't need that we doesn't mean that we need to include it. It's not currently in the draft. But If we wanna include it, it's really trivial, and I'm happy to add it. I unless they unless we think that there needs to be a discussion, we could also do a quick for this one, Quick poll include subject. Don't include subject. Is that alright? I think well, given that we're kind of out of time and we didn't really even get to discuss this"
  },
  {
    "startTime": "00:36:03",
    "text": "I don't know. I I feel like this one might take a little longer. I'm not sure that we are ready to pull Okay. Okay. A what? I I was gonna express it up opinion on this, but, like, we're not gonna discuss it. I'm fine with that too. If not, I think I'll have it different. I can remember my opinion later. Is is the the gist of your opinion, thumbs up, or thumbs down for including subject. I think thumbs down the way it's written. I think, of these teams that that the the the subject is like quite a complicated kind of construct. It's not just like a subject. So, so I I think I think it it it to figure out what this actually would mean rather than just trying to just adding k. TKG. I was also gonna thumbs down the idea having subject as metadata as message metadata An email has been in this feature for decades, and we don't need to replicate that. And the the idea that different messaging services might have concept and subject makes it even messier So, yeah, thumbs down for me too. Okay. Alright. I'm going to, That that is my last my last non backup slide. So I am going to thank everyone for your participation, and Just just one quick thing still on subject. Does that mean if there is that information in the protocol? You're in an up just kind of incorporating that into the message somehow at the beginning of the message or something. Is that while discarding it. Well, this this is the not sure discarding it necessarily as the right behavior for some of these things, so I mean, I suppose we we we can be relatively silent about this because it really is an old thing probably didn't message service platform, but, like, it might make sense to offer some guidance about what you do So, this is an extensible format. So, if somebody wants to add extensions, they they can, but that if it's it would not be included in the In the base mini content document, format and somebody implemented who that and saw that they would ignore the subject."
  },
  {
    "startTime": "00:38:05",
    "text": "I think another thing to keep in mind here is this content department is n so it's got here another gateway translating Right? So, so, I mean, if you were doing this in the claim, you just not render the UI populated if you're in one of these Mimi conversations and it's not supported. Okay. I'll go after Richard instead of before him then. Was gonna point out that if the message itself has is like text HTML. As we saw in our earlier example, lower tax markdown, there are ways to put subjects I mean, HTML has a high, title tag in the head element. Like, there are already places that would be natural fits for subject if you know what kind of content type you're dealing with. Doesn't mean we need to put it outside the the content itself. Great. Okay. Alright. I will the floor to my distinguished colleague, Martin Thompson, and the American version. Thank you, Rome. Good day. Alright. I am Richard Barnes. I will be, your presenter for the rest of the morning. Can't So we got an architecture doc and a protocol doc. The arc Dock we discussed a little while ago at the last IETF, at least, in on an interim, and it hasn't really changed much. I don't know if there's a Tim, can you hit or Melissa can hit next slide? I'm not sure he's driving here. I'm driving. Although I'm not sure if this is the most recent version of your deck. There's only 30 two slides in this one. Okay. mean, if we get to the the part that's I on oh, Here it is. I just have to scroll down. There we go. Alright. Sorry. So I do take it away. Great. Yeah. We we added some slides to deal with Edgar's late comments, this morning."
  },
  {
    "startTime": "00:40:00",
    "text": "So this is just recapping some stuff that we talked about, oh, way back in San Francisco last summer are classic clients to server to server to server to client architecture. Where Mimi, the working group is focused on these server to server interactions. You know, the unit of functionality here is a room the conversation, which things happen, and then there's events that happen inside that group. So next slide, please. Yeah. So so in in this in the communications model we're gonna build here, The, room is hosted at a hub. This is so each room is has a single service that is responsible for it. And everything routes via that hub. So even when, you know, I'm on some non hub server, I'm on server a, and I wanna woman server b who's not also not the hub. I send the request to get their key material through through the hub server. See how that manifests later. But the idea here is that we might not have fully connected mission might be might be some, you know, hearing relationships you know, and it but if the room is gonna work at all, then the followers have to appear at the hub. And so we'll we'll use those patterns for for all the interactions. Next slide, please. Yeah. So as I said, the university is a room. Room has a state which has a variety of components to that state. There's policy. There's a list of user level participants, and then there's an MLS group attached which has a bunch of device level So there's that hierarchy there of users being participants and then at at the, at the root at the policy level, and then clients or devices being participants at the MLS level members DMLOS level. As we were discussing this this hierarchy, a little, you know, a couple rounds ago, we had this question of, can and even if they have no devices joined, and we came up with this terminology active versus inactive for people who, you know, you're active if you have devices joined, you're inactive if you don't. Next slide, please. Brandon."
  },
  {
    "startTime": "00:42:03",
    "text": "Hi. Yeah. I just wanted to ask, for reading the draft, I had a hard time understanding what the purpose of the active inactive separation is. So could you explain that? I think, Because, Rowan, do you have an opinion here? I think it was mainly that, Yeah. Ron. Go ahead, Yeah. So one of the use cases for inactive was that somebody was added to the participation list and temporarily didn't have any clients like that their clients were deleted, and they were in the process of adding of you know, replacing, like, basically in the In the moment when I fire up a new client. Because my old clients were compromised, that if I am removing my old clients and, you know, causing them to be destroyed, because my phone was, you know, dropped in the sea or was stolen or is lost. The fact that I'm allowed to join the group because I'm a because I was allowed to be a user of that group, remains, but my, like, for a brief moment. Don't have any devices there. There are also some other use cases where that You could be an inactive participant for a longer period of time, but that is that is one where There's a particularly, like, narrow window where you don't want to cease being a participant in rejoin as a participant. Because of the, you know, you would need someone else to go, someone else who is in the group to go in you to do that. I I think the the historical context here is that one way you could You could treat the participant list as you could derive it from the MLS membership. In theory. Right? You could look at the MLS membership and see which users have have clients joined, and that's the participant list. I think the thing we're articulating here is that we are not doing that We're having a separate participant list that's that you you can be a participant irrespective of your MLS membership."
  },
  {
    "startTime": "00:44:01",
    "text": "And so the that distinction between active and active is just a consequence of that that one of these participants who is a member, or as a participant at the user level, but doesn't have any devices joined. There's still a participant. They still have it can still have an existence in the room even though they can't read any messages. So is it correct to say that at the MLS level, an inactive participant is someone who's not in the MLS state, but has permission to, like, externally join example, yeah. Let's see. Someone else. Thank you, Rowan. I think I assume that's old row. Next slide, please. This is all existing stuff. So, yeah, this is just a picture of that. Next slide, please. There's two, concepts that come out of this, you know, independent existence of the MLS group and the participant list. One is that there's there's a strict hierarchy here. So the authorization policy controls the participant list The participant list controls what's allowed to happen in MLS. So you can only have a client in the m a user can only have a client in the group, if they are a participant in the on the participant list, and, you know, a user can only be added to the room if they're they're authorized by the authorization policy. So next slide, please. There's also this kind of confirmation that we we, kind of route back here. So, things, and this is hard to illustrate, but the the point is that we wanna take the state of everything else and confirm it in the MLS group. So the policy, the participant list, they get fed into the MLS grew, key schedules so that the group, the MLS operations confirm that all of the purchase, all of the clients participating in the group have the same state. So this is, yeah, so we we exploit the the group agreement properties of MOS to make sure that we agree on all these application learn things as well. Could you?"
  },
  {
    "startTime": "00:46:03",
    "text": "Yeah. Thanks for this. I'm just trying to clarify the room state is visible to the servers in the CSSSC model. Right? Correct. Yeah. Including the full MLS group state, including the identification of the different clients? That is the current model. Yes. I believe that some some folks are trying to work out more private models, but That that's where we are right now. And the This is Rowan. I can if you want me to comment at DKG 3rd. Sure, please. So, for example, The The MLS group state that would be visible, would be the ephemeral public keys of the clients. Involved? So those are supposed to be different for each for each MLS Group. And therefore, free trim. And then if your users used pseudonyms in their credentials, then that's what would be visible. If they chose to not use pseudonyms, then presumably, they would have a real username in their in their MLS credentials and their leaf nodes. Okay, sir. If they use sutonyms, Then I don't see how you matched the student into the participant list. If I have, if I'm using pseudonyms, but I have 2 different devices then I would still use the same pseudonym for the 2 devices if I wanted them to be correlated in the But I I think the overall point is that you need, I think DKG is accurate that, like, if given the architecture we have here where we are relying on the servers as policy enforcement points to the hub server in particular. That requires the the membership to be to be visible the server so that the server can enforce, things like like membership policies. Now it may be possible using some soon and schemes like like Roan proposes to obscure some of that, but you know, the the the"
  },
  {
    "startTime": "00:48:04",
    "text": "The the server's job as a policy enforcer requires us to see certain information. Also at the in addition to that policy enforcement thing, things like doing enabling external joins to add new devices asynchronously, like the server also needs hold on some some data there. Again, there there are privacy approaches there. That that could be applied, but they're not not worked out. Becker. Yeah. I just wanna make sure we state the properties here, which I'm not objecting to necessarily. Which is the server learns the our names that every person in the group and And it also learns which devices the user, has joined This is the cardinality of them and some key material associated with them. So, like, it knows if I'm, like, unless unless you're doing the thing where you show the keys between the devices. It's like it knows my phone and my top remote drive. Right? That is that correct? Yeah. Correct. K. And that's the hub server, That knows all of this information. Every server. Mean, this is participating. This is participating, not like, you know, random other servers. Sure. But so in the in the CSSC model, there's 3 s's. Every one of those servers knows the identity of every one of the participants, in the group. Even the participants in the other servers Yeah. The that information is a v visible in transit. So non hub servers, but the hub has to keep has store it, as in support of enforcing policy. Rowan Mae again. So In the case where you're using student names, something which is discussed but hasn't been, but isn't in any of the documents at the moment, was that You could share among the members of the MLS group. A correlation between a pseudonym and a real identity"
  },
  {
    "startTime": "00:50:02",
    "text": "and using the model such as privacy pass, that you could you could you could you know, gain access to a number of pseudonyms while still maintaining the ability to prevent spam, and abuse. But otherwise, to be to not be not have a strong correlation to your real identity for this information that, DKG is obviously and rightfully concerned about. Dip, dip, dip, dip, Let's see. I can't see who's on the queue there. Conrad. Hello. Yeah. Sorry. Just wanted to speak to the little pseudonym idea. Originally, we have this, and I want to still have to be medias. Drafts. There was also a version where we have had this kind of student and enabled mode or we took that out for simplicity because we wanted to settle on a kind of basic mode for the beginning. And just to note here, if we want to use synonyms, it gives gets a little more complex because then you have to worry about servers who issue key packages and those could just travel by other servers, and then you can track those key packages and recognize who it's coming from, and then you have to around how to do discoverability, based on, well, quote unquote real usernames but then you get key packages, which have student loans, and So, yeah, it gets a bit gnarly, but we've thought through it, and we think we have a system that works, once we've settled on the basic kind of mimimechanics which hopefully is today, I guess, we'll try to, we try to, write this up in an in an ID and and, bring it to the Amy working group Thanks, Connor. Listen, a question for Conrad or Ron, Alright. Going back to what Rowan said,"
  },
  {
    "startTime": "00:52:03",
    "text": "In the case where the user is using a pseudonym, is the only place where the mapping is stored is is within the MLS clients. Or is it also the mapping between the pseudonym and and the real name if there is one. Or is it also stored in the user's home server? Just to be clear, I don't think the suit and scheme is documented anywhere right now. I I know, but I just mean, like, conceptually, I know that Conrad has thought a lot about And so it's just useful to understand. But we think is possible once it is documented. Conrad, do you wanna take that one? Oh, sorry. Yeah. I'm muting to the market for a second. So, yeah, ideally, the, the mapping the pseudonym and the user would only live on the, on the client. So it would be an end to end thing. But then you also run into trouble, and you have to figure out I'll do, we want to hide. I'll do, we want to deal with network based metadata. So how do we do the fan out? How do we retrieve messages without leaking? Pseudonyms that you use across groups and that kind of stuff. So, again, it gets a bit more complicated, but you might be able to leaks, metadata on your own hub as our on your own server, but not on the various hubs you're active on. And, yeah, is is this trade offs at that point. Okay. Thanks. Alright. So I think we should probably move on here. For o overarching point, it's like, yes, we would love to do better with privacy, but we're we're in a state right now where the server can see a bunch of stuff. So next slide, please. Yes. So so this this combination of these two properties means that you need"
  },
  {
    "startTime": "00:54:00",
    "text": "MLS operations to be sequenced properly together with the, changes to the the room state. So because, you know, you need to be authorized before you, add clients, a user needs to be on the participant list before their clients join and the reverse when someone leaves. So all of the clients need to be removed. Before someone leaves the participant list. And it'll be up to the the protocol to assure this all together as one of the things the hub will help assure is that all this is done in the right order. Next slide, please. Alright. This is this is the new content. Behold the new content since the last draft. We fixed the layering. We made it one dock. So last time we did this adoption call, we had, like, 3 or 4 separate doc you had to kind of read it all together and piece together in your head. We have one document now. Which is the next presentation. And it has this pretty dramatically simplified, layering. So We've got a transport based on HTTP, you know, simple use HTTP and, acknowledge the transport a bad word for for that, but it it gets the messages around physically delivers them. We've got an ETE security layer based on MLS. Which, you know, provides, you know, sender authentication and confidentiality from just got, of course, the application stuff that manages the group state that actually sends the messages content, things like that. The the reason there's this little hanging down a bit in the application is because we also need some stuff to set up the end to end security. So we need a a protocol by which you request key material. So and that, of course, can't be protected by the EDD security layer. It has to go directly over work. So that that's that's the hanging down y bit. So, yeah, we have this this much, much simpler architecture on the left. It's all in one document. And I think we can go, talk about that document now. Next slide, please. Skip that. Yep. Well, keep going. Alright. So the protocol document. You may have, seen a draft or Austin meeting protocol last time. We've kinda done the top to bottom rewrite on it. Focused on"
  },
  {
    "startTime": "00:56:04",
    "text": "getting something that's adoptable. So we are not trying to present the whole answer here. As as Edgar's comments, this morning, pointing out there's, like, big holes that needed need to be filled in. There's a couple of important decisions to be made. There's a bunch of stuff very nominal in there. But the thing you should have in mind today, like, is Whether we have here, like, something that we we claim that something is gonna work for a couple of basic cases that those basic cases seem plausible. And do they point a direction towards something that could solve the whole problem here. So I've tried to indicate, like, with these little construction signs and things that, like, it really, really you uncertain here. But, really, all this is know, is is notional. We're just trying to indicate direction and indicate a starting point that the working group can adopt and hopefully have a framework within which to have some discussions. Right? Next slide, please. Alright. So I mentioned we have this layering model, like before, And so just to add that next level of concreteness, working from the bottom up, you know, All the transport, all the physical delivery of stuff here is over HTTPS. Mutual TLS used in a for for a server to server authentication. Use NOL. I'll talk about in just a second. The end to end security layer as as I mentioned a moment ago is MLS plus, you know, the bits that you need to ship and lost messages around. And then we have policy and messaging stuff, stuff to manage the participant list, stuff to manage off and stuff to actually ship the messages around that application. And then they're hanging down, but it was how you get consent to set things up and how you kind of educate keys. Next slide. I'm I'm just gonna kinda be talking through the how how the whole thing works. If you've read the document, you can kinda tune out for a second. Or if you got questions, feel free to jump so, like, overall, the overall picture here is that, you know, as things happen out, you things happen at the followers. They submit things to the hub. Obviously, there's users of the hub service they can I'm not maybe a mechanism to say, you know, Advob"
  },
  {
    "startTime": "00:58:02",
    "text": "and then as things get submitted to endpoints on the hub, the hub sends out notifications to the other followers to keep everyone in Right? Then the the the actual clients, the actual people with, you know, thumbs on phones, are around the outside here, and the presumption is that the followers in the hub are are brokering things out to to the end clients. The little stack of proposals here is something that is is important with for this ordering stuff, because sometimes, a client wants to do something that they can't commit immediately. As we talked about with this commitment thing, we're gonna make changes to the state of the of the room. We wanna reflect that in the MLS state. But sometimes a client wants to make a change to the state of the room that they can't can't commit they can. They can. They can. They can. They can. Adds to make the corresponding change to the MLS State. The canonical example here is leaving a room. When I leave a room, I want to remove all my devices and cause, you know, remove my user from the participant list, but once I've removed my devices, I can't commit anything. And so I can't commit my own removing myself from the participant list. And so in it's a patch that over. We have the hub cash up a queue of proposals. That are are pending and and have the hub then require this to be committed at the appropriate moment. So we've got, some some more, more detailed picture of that in a couple slides. But this is kind of the overall picture. Next slide, please. Richard, I actually had a question. Yeah. Was it clear to me from specification how you how the help required you to do those things? Sorry. Was it just there to me how the club required you to commit those. It just errors if you don't. It tells you you better. Like, what what what happens? Yeah. I I think the the purpose is, like, that you would pass some the the hub. Alright. Every action has to be authorized by the hub. Like, the hub nothing takes effect until the hub accepts it and and incorporates into state. And so the Hubble can reject, you know,"
  },
  {
    "startTime": "01:00:00",
    "text": "future commits if they don't include the the right proposals. Yeah. Yeah. Right. So I get, I guess, that might work I guess I'm a little concerned about, like, you know, do you have situations where someone pick some of them and tries to commit them and, like, you know, And now you're, like, constantly, at least constantly unsure about what's been committed. Know that Epic already has kind of these problems, but I'm just like, like, like, I think I guess I guess I like to see some some, like, some, like, that were done a little more detail at some point. I I'm not super worried about the record. Keeping because, as we, we, as, as Dijin pointed out, all this stuff is visible to the hub. The hub can look at the commits that come through and hub see I'm sure I'm I'm sure the I'm sure the hub can remember. I'm just trying to figure out, like, you know, you know, are well, the endpoints speak well, the endpoints can be this constant loop where they're like, Well, what about this? What about this? What about this? And I'll project them each time. Right? Can you get can you come and dev lock dates? So I don't know for sure, but I just wanted to like, you know, And this is different from from and the last where it was possible to do partial commits. I mean, out there. Partial commits on my I mean, my point is you can ask some proposals And and someone can someone can accept only some of them. Right? Right now. Right. Yes. Basically, version of this, where, like, there's there's some right, actually impossible for anything and never make any progress, right, you know, where one keeps any proposals and every, and and and and they're like, and and the hub is and the hub is always saying, well, no, actually, you you missed the proposal in m+1, now you missed n+3. You missed n+3. Right? So them, anyway, I, again, I I just say I think that actually worked out me a little more. No. I I I agree. Like, this is something we're gonna keep an eye on in terms of, like, actually, avoiding racism, like you're saying. And Yeah. Yeah. Yeah. Yep. But, you know, it's some we this we need to have something in character if we're gonna have the confirmation because know, you you you it's not possible to make all the changes you want all at once. I agree. Yeah. Okay. Cool. Next slide, please. Alright. So there's basically two parts of the dock right now. We have a walk through of some base scenarios and how we envision the protocol addressing those basic scenarios, and then there's some protocol details. So that's"
  },
  {
    "startTime": "01:02:01",
    "text": "what we're gonna go through here. Next slide, please. So step 1, remember we're, you know, our unit of functionality here is a room. So step 1 is to create a room. And, you know, there's actually no protocol, for this. Right? Creating a room, you you Mimi only talks about interactions between providers. Creating a room is a provider local interaction right, because, you know, if if Alice creates it just with herself, it's you know, just Alice on one provider. You could also imagine, you know, a provider Adding interoperability to a room that exists. So they've got a a room full of, you know, the the the the provider a users, and then we wanna add someone from provider b. In that point, we that the room emerges from provider a into the in the broader eco mini ecosystem. The thing we need to capture here though is What state does that room need to have in order to be a Mimi room? What what does Mimi the protocol need to know about that room in order for it to be part protocol. So these are kind of the the four things that that, you know, what your numeracy or given the previous slides, you might not find it surprising. So, right, we need to have an MLS group set up that contains the participant, you know, devices in their room, in the room when it emerges into the Mimi ecosystem. Them. We need to have an identifier for the room by which we'll refer to it in in MeetMe interactions. And, of course, we need to have the policy and participant lists that are gonna govern how the room is managed in, in its media life cycle. So yeah, no protocol interaction here. It just appears, and it merges and start, you know, comes into the protocol. Next slide, please. Alright. So first active actual protocol interactions. The first thing so in in MLS, if I'm going to add John Peterson's who a room I need to get key material for his devices so that I can send some secrets to his devices and welcome him into the room. So the first step, in in adding, Bob here to the room is that Alice sends"
  },
  {
    "startTime": "01:04:01",
    "text": "a request for key material to Bob's provider. So there's this key material HTTP request that that Alice's server sense to Bob's server, presuming that Bob is Bob's devices distorts some key packages there, and they get delivered back in the 200. Okay. Now there's this sort of bread crumb thing because in in MLS, we we have these welcome that need to go back to the devices that are being added. And so part part of the reason that things get routed through the hub is so that the hub can remember which key packages have been you know, are going to be added to this group and thus route the welcome to the appropriate devices. So the you know, as the key packages come through server a, server a remembers them, and then the next slide, Next slide, please. We'll deliver the welcome So this notify message includes a commit for any other purchase a welcome that adds Bob's devices and then, you know, some ancillary data that get delivered to to the new clients. Right. So the what this what, server a does, is kind of split that, you know, bundle of stuff that client a one provides. The commit doesn't go anywhere because there's no nobody else in the room to notify, but the welcome message a rec server a recognizes belongs to Bob's devices that are being added now. Forwards that welcome message and the ratchet tree over to server b. Server be provides that information to the clients. Clients initialize their state, up they are. The other thing to note here is this AppSync Theory. Thing. I'll talk about the details of AppSync in a minute, but this application synchronization thing is the, the tool we're gonna use to make changes to the room state that ultimately get reflected in MLS So AppSync is a new proposal, you know, for you know, MLSia proposals and commits proposals get included in the met in the MLS transcript, which gets included in the key schedule, which you can then used to confirm agreement. So we have this app sync proposal is gonna make a change to the participant list to add Bob the user"
  },
  {
    "startTime": "01:06:02",
    "text": "in addition to adding his devices. And you'll note that the there's order here that the absent comes is is done before devices are added to ensure that preemption properties that you have someone on the participant list before the device is Okay. Okay. So that's adding the first user. Yeah, Ecker. Sorry. To be clear, when you say or what what what do you mean when you say Order. Like, you have to execute an order, or they're in some like, there are forcibly orderings and message, or, like, what do you actually mean I think what I mean is that the policy that the hub would apply is that an ad for one of Bob's devices is only allowed if Bob is on the participant list before the commit or added in the same commit. Okay. Okay. Yeah. I I think that that's the detail we may not have may have to elaborate a little bit. It more closely, but the you kinda get the overall idea. Yeah. Okay. Next slide, please. Alright. So we have 2 users. Let's let's do 3. So one thing we short circuited in the last one was that Alice was a user of the hub provider. So when Alice, added Bob, her request for key packages and whatnot didn't have to transit any extra servers. Now when Bob takes an action, Bob is on a non hub server on follower server. And so Bob's interactions get indirectly. Through the hub. So that request for key material gets passed from Bob's server to the to the hub to now Kathy's server. In order to get that key material and and and in in in in saying in the reverse direction. And that same sort of bread crumb thing applies here, but now at both the hub, and Cathy's server. So, Cathy server and the hub, remember what key packages were delivered so the welcome can be delivered. To the appropriate clients."
  },
  {
    "startTime": "01:08:00",
    "text": "Next slide, please. Yeah. And then the the actual ad is goes in in the opposite direction. So, Bob, sends that commits and and proposals, you know, a proposal an AppSync proposal adding Cassie to the participant list and then add proposals. Adding Cathy's devices that goes, you know, that gets sent into the hub, the hub, accepts it, and notifies Cathy notifies Cathy's server that Cathy's device has been added and they can join. Extra thing here that we didn't see before of course is that the commit is also going somewhere. Alice is, you know, another user in this, who's neither the joiner, nor the one doing the commit. And so Alice needs to find out about this she finds out through the commit, So that's addition think we're gonna about to get into more interesting cases here next. Next slide, please. Yeah. So as I mentioned before, remove is a challenging case. Here with MLS. I mean, leaving the room is something you really can't do in MLS. You need the extra stuff that Mimi provides. To make sure that your, proposals get applied. The way the thing Bob has to do to leave is submit proposals. Bob can't commit his own departure. So instead Bob proposed and some proposals to the hub, that says, please remove all my devices and then take me off the participant list. Again, as as as before the ordering here, you know, it could be that you know, I can't remove myself from the participant list unless there are no devices. Those can happen in the same message as well. Ordering within one message doesn't matter that much. The difference from from the ad case, though, is that there's no commit in that message that Bob sends to the hub, these these con these proposals that Bob has sent go on to that queue like we discussed on that overview slide, and await someone else trying to do something here. So I think how exactly we do this as accurate point is something we're gonna need iterate on probably. On this slide, we show something a little proactive"
  },
  {
    "startTime": "01:10:03",
    "text": "where the hub sends out those proposals to to serve our seat and Cathy gets them proactively. In in this slide, you know, Kathy gets them proactively. She knows that when she when she next commits, she needs to include those proposals. So so effectively, there's a request for a commit here coming from the hub out to out to Cathy's devices. But anyway, that's Cathy ends up here now for committing Bob's set of proposals that remove Bob first from, remove first remove Bob's devices from the group. And then remove Bob from the participant list. Of course, that goes those notifications go out to Bob's server so that they can confirm to Bob that he's been removed. And then to Alice's server. As Good. So, yeah, the the this would not work in bare MOS. We actually need that that cash in the rologic, for Munich. Next slide, please. The other interesting case is asynchronously adding devices. Right? When you join MLS, you need someone to welcome you, typically, or you need to do one of these internal join things. To do an external join, you need this group info object. And you may have noticed in the earlier up, you know, earlier commit bundle messages. There were group info messages being uploaded for every new epoch as well. And that's to support this use case. So Kathy gets a new device client C3. When that device shows up, you know, Cathy's already in the participant list, so this thing is allowed to join. So it request the group info for the group so her a verifies that user for this device is on the participant list and allowed to join. And delivers that group info to to the client. And at that point, the client can make create 1 of these MLS external commit messages adding itself to the group, send it up as a as part of the same commit flow we we saw before. And all of the device that are already in the in the group. Getting notified about this new device. One thing from from a an application point of view is that this this would this gives client C3 access to all the future keys"
  },
  {
    "startTime": "01:12:01",
    "text": "in their room so that they can now exchange messages with everyone in the future. It doesn't give access to any historical content. So if if we want that to be a, you know, a user experience that's supportive will need some extra mechanisms to provide historical keys. But this at least creates that, you know, I've got a new device can at least participate in the room going forward. K. Those are all the scenarios. Next slide, please. Yeah. Alright. That seemed like a useful set of basic stuff. Like, so we can envision some plausible stuff working. I didn't actually I'm always surprised we spent all this time setting things up, and then we never I actually talk about messages But messages work like exactly how you think, like, you submit the message to the hub, hub fans it out. Easy peasy. Easy peasy. So, like, once all the hard work's done, you can just you can just do messages. No big deal. So let's talk about a few details about how we actually do this. Next slide, please. So identifiers, it's always a fun topic of discussion. We need to identify a few things here. We need to talk about providers when you talk about who you're going to send, things to. I mean, which which servers you're gonna talk to. We need to identify users within the scope of a provider. These are the SSIs you've been, paying attention to the discovery discussion, We'll need to perhaps identify clients within a group Right? Specific devices, if you know, we might need to have device directed messages later perhaps I think there's some matrix systems up like that. Now, of course, we'll need to identify rooms, you know, so that we know which things we're directing, protocol interactions toward may may need to, label MLS scripts, although they're in one to one with rooms. So We have an identifier here than for them here, but I've don't think we actually use it in protocol right now. Anyway, so this is this is just kind of a notional URI scheme. I think the important thing is is this kind of two pieces of data. Providers are always identified by domain name, Right. So, you know, the the the provider, URI, such as it is. It's just that you are asking been in"
  },
  {
    "startTime": "01:14:04",
    "text": "That's all you care about conveying. And then everything else is sort of a type and a provider specific identifier, basically everything to the right of that one character type is opaque and and unintelligible only to the provider. John, is he gonna keep Uh-uh note note, please, the the construction This is like super notional just kinda get to give you an idea. I expect the the working group will iterate a whole bunch on this. I'm sure. What does the kids say these days? I'm John Peterson and I make telephone number based identity and enthusiast. Yes. So, yeah, I mean, obviously, I'm super interested in the relationship between the identifiers being shown here and the ways that we expect user to be enrolled into these systems credentialing that's associated with and especially that, case of for the service independent identifiers And, I mean, I can certainly understand because of the way that you are embedding these things into the posts into the, you know, the actual URLs that you're you're band banding around here, kind of why this format where you aren't using a standard user at host format for user identities might be attractive, but I am, like, deeply, of course, interested in really what the distinction is between user and client and some of these instances the fact that there may be multiple instances, right, of particular SII's that are are servicing the same user that are platforms, everything else, and everything we're just showing about the lovely ways that you add people to groups for example, the interaction between SII's and VAC and whether you need This has SSI for user to be able to add them into that. Right? Or whether in fact, you know, we we basically, we're just if there is indeed discovery. Factors into the message flows that you were just showing for adding and removing users, and especially particular devices of users."
  },
  {
    "startTime": "01:16:01",
    "text": "Because I can certainly imagine use cases in which, like, the same telephone number is actually on completely different platforms that users are utilizing and that they may switch between them and things like that. So make a long story short, I mean, I do think having abstraction, like you show in the bottom 2 here, have, like, the clubhouse m MLS group and indeed the provider, even makes some sense to have a specific mini URI for that because I'm less convinced for those for the second and third for user and client, that this format is ultimately gonna be the long term direction. But I think this will be, as you said, a broader conversation. Yeah. It's 6 just to to to to way I think about a person, I don't think we've discussed this real deeply in the design team. I kind of think of the SII sort of identifiers that you seem to have in mind as basically the u user interface affordance. Means like we'll need them as an entry point to figure out to say I would like to talk to this SII and need to through discovery map them. To the, you know, IP address ish things we're talking about here that protocol go. And at the end of the day, we'll want to authenticate them so that we can say you are actually connected to this person now. So this this meaningful identity. But in the middle, in terms of how the protocol thinks and and, you know, arranges things I think that's where I envisioned these identifiers. Happening happening, So, yeah, the there's this this end in particular where we authenticate things, is not really flushed out in this. There's there's some immunogen identity talk about that more, but we'll, like, we'll need to figure out, like, how do we authenticate the right sort of We'll definitely need to authenticate whatever, like, IP address ish identifier. We talk about, but also some human meaningful identifier probably their own I'm gonna I'm gonna offered a swap with Edgar. K? Ecker. Okay. But we're not gonna just send an identifier. So"
  },
  {
    "startTime": "01:18:02",
    "text": "I do, I I I guess I highly suggest that perhaps, it cramming everything into into, a memeie, you are you are ice cream. And and having the paths to distinguish what kind of thing things are may not be advisable. You know, in particular, I guess I would observe. I don't think we need an an an anifier for the provider. I'm just called a main name. And it's what you have. User and client are of a different category than Room And Malsgroup, And, So I I guess I I would suggest that perhaps, we would cross our provider here, Ruman, I'm with Allscripts I'd be happy with. And user and client perhaps used back to using I'm colon. And if we need to have, if we need to have a way to identify, clients at all, then we do a jig style. Right? I mean, I can't verify I'm cool and does it already. But, I think that would be my my my my my my first of all, I think I think you're actually trying to, like, Yeah. I I understand kinda like the rest kinda like, you know, vibe. You're you're you're you're you're putting down here, but I I think probably it's not the right 5 in this case. Actually, I think we pulled this because I think Matrix has a a scheme kind of like this. That was where we grabbed this from. Fair enough. Whatever it's worth. But, yeah, I I think that's the reasonable set of proposals. Yeah. Right. Rowan Maine. So I would like us to focus less on the syntax. Of this URI scheme and more on what the functionality is. And in particular, I've heard multiple people say, we don't need this for users. We don't need this for clients. But what we do need is the ability to distinguish when I have a thing that's a user and a thing that's a client that the protocol can tell the difference between the two. So this offers that property. We are open to other URI schemes or other Other formulations of a similar or different scheme that offer this property. But we need the property."
  },
  {
    "startTime": "01:20:00",
    "text": "Thanks. Yeah. Back to John. I mean, I I view that kind of as the difference. If we can put this in, SIP ish terms that go back 20 both of us between your address of record and your contact address. Yes. Right? Mean, that that is the distinction, I think, between the user and the client, and it's a super interesting one. Just came in and say, one one of the things that motivated you stand up was in the previous Ron's when we was talking about how you refer. To other people. Right, in the context of this. And indeed, that identity should be an identity that is you know, again, the testable by credentials that are associated with something more like your address of record. Right? And, like, you know, I do believe, in fact, that it should be meaningful to, like, click on that and have the resolution of that happen and you reach that person and like that, but or all the properties I think we get out of discovery and all of these things feeding into it. So Ecker's proposal sounded great to me. That would be it. Hi. So I just wanted to say that I think for the user URI, it would be a good idea to encode the type of identifier that that is, whether it's a username or a phone number or Seminos. I mean, if in well, I'm starting to think, like, maybe we actually have a three tier hierarchy here. There's, like, clients which is, like, the specific physical device. There's Provider specific users, My WhatsApp installation. And then there is users. Me. In some provider independent sense. Yep. My phone number. Right. So there there may be yet another layer of hierarchy here. Yeah. It's deliberately not included SII's here because they had they have their own to Texas. Alright. Let's let's keep rolling. So next slide here. Oh, Edgar, you're back in queue. Oh, wait. We have Econ John in on this. I I fear I am in in Surajon and Alyssa, so I'm not getting all so easy. Right. To go, I think, to Rowan's taxonomic question,"
  },
  {
    "startTime": "01:22:02",
    "text": "Why do we need, I did a fire for an ops group? Aren't MLS groups one to one with rooms? Yeah. I'm not sure we do. Okay. So in in fact, we We need to We need to talk in the in the protocol document. About Which group is associated with a particular room? So the policy document, for example, although this is this is not shown in the document at the moment, but It will there all of the information about your room will include moment that Mueller's group associated with that room is, has this particular particular address or this particular, you know, group ID in the context of this the UGG provider. I think what Hector's saying is, like, why not just use the room ID for that if they're in 1 to 1 correspondence? They're the room and the group are not in necessarily in a one on 1 to 1 correspondence. Oh, god. I don't wanna hear about it. If you re if you reen if you reen it, Then the group changes. Right. It's something that happens rarely, but it's something that can't happen. And so we don't want to we don't wanna prevent that from happening. Okay. So I guess I guess if it it it So if we are to, like, say that, I think the way to handle this is not to do exactly this, but to have actually something underneath subordinated to room that indicates that. Sure. Yeah. And and I wanna point out that we don't wanna sign this now. But we wanna capture those ideas and likes to come on the list and talk about them. Yeah. So, so yeah, because, I guess, I did Right? Great. Yeah. I mean, because my thesis is this restructure should mirror the, like, logical hierarchy, which is the same reason why like, user and client should be parallel. But in fact, user client should be subordinate to user"
  },
  {
    "startTime": "01:24:01",
    "text": "Yeah. Yeah. Sounds And John Peterson instead of saying what it's going to say, I think we should move on. To the next slide and, like, have a little design team call or something about the specific topic I am looking forward to going through the notes from this meeting and make filing a bunch of issues. Also, Sorry. I I just wanted to see if I understand. I don't understand. So I wanted to ask for clarification on the last two things. First of all, Richard, you said that they're do you think they're gonna need to have some concept of user the user. And then you said, like, but that's not SII. Sorry. I meant that that is SII. I Okay. Good. Okay. I was like, that's a 4th kind of user. Okay. And then, for the non MLS experts I also did not understand why you end up with multiple different MLS groups that are ass associated to a single room ID. Yeah. Let me let me try and answer that. For going from what Rowan said. If you wanna say, change the cipher suite that an MOS group uses. You need to reinitialize the group. Does that remind me? Does that require changing the group ID? Yes. Yes. Okay. So unless requires you change the group ID when you reinitialize. And so you could have a sequence of MLS groups associated to a room I see. you're doing these reinitializations. If But not 2 at once. Correct. One time. at a Okay. Yeah. So you could you could have room slash sequence number or something. Says version 53. Yeah. Alright. Let us move on. As John suggests, It's numbers. Okay. So let's actually move some messages around. So I mentioned the the transport was HTTP. Mutual TLS, as those who've dealt certificates will know, certificates present you a bucket of identifiers."
  },
  {
    "startTime": "01:26:04",
    "text": "Not a single one. And when you're in the application layer, you need to know which of these identifiers where I'm am I talking to? And so I I I always like to refer to RFC 6125, which is orientatory HTTPS, but it has a nice nice philosophy here RC 6125 talks about presented identifiers and reference identifiers. Presented identifiers is the ones that presented in the certificates. Reference identifier is the actual thing person you believe you're talking to in the application layer protocol that you're gonna compare to the presented identifiers. So here, the presented identifier, you know, server authentication works the way you you expect it to you for Server presents a certificate, gives you some identifiers, and then the host header has to be, one of those identifiers. We had to kind of invent a little bit to get the client side right. You know, obviously, in the client side, the client cert's gonna give you a bunch of identifiers and we looked through the list of existing HTTP headers and picked this from header is, like, obviously the wrong answer, but kind of conveys the intent here to have some header in the HTTP request, it says, this is the identity that I am representing in this request. a plausible authentic That seemed seemed clear to people. It seemed like patient scheme. Thumbs up from Sean Turner. Yeah. Exactly. So so, yeah, basically, we have here a a mutually authenticated channels so that when two servers are talking, They know which identities each side is representing, and they've got authentication with identities. And then we do requested responses over that Next slide, please. Oh, Tim. Yeah. Okay. I wanna I wanna complain about MTLS because I don't think MTS is right here. However, you might say to me that, like, MTLS or not, specifically, that it's premature to debate that exact point. Which is fair enough. So rather I'd wanna take step back step back and then ask"
  },
  {
    "startTime": "01:28:00",
    "text": "Well, acknowledging that, yeah, like, obviously, the, the servers need to have mutual authentication. Why does maybe need to prescribe a specific mechanism for authentication we expect there to be, I think, a small number of these providers Right? And if they federate, like, like, like, This isn't gonna happen, like, purely automatically. Purely in a machine to machine interaction. There's probably gonna be like companies we'll each other, maybe lawyers are in the picture. I don't know. So if there's all that, then, like, you would expect some measure of integration between, like, apples, iMessage servers, and meta's, WhatsApp servers. And so having them also work out, like, what kind of error token to use or something it seems like minor compared to the other things that they'll have to agree upon. If anything, I would think that, like, mandating MTLS just seems like a headache. For, you know, operations teams and security teams at these organizations that may already have really good authentication schemes that they wanna use. So so again, wanna make arguments against NTL S specifically, but first, could be me just say nothing or rather just say, like, require mutual authentication between servers. I'm gonna let Edgar go ahead and, you know, offer her a response to that for a minute Yeah. So I mean, I think as I understand the situation, it is reasonably, we are actually gonna have a situation where we have bidirectional connections between clients and servers, right, namely that in service and servers, namely, like, you know, that you know, WhatsApp and, and Webex, In some cases, the HTTP request will be from what's after to to what Webex, in some cases, there'd be a right direction, right, depending on who who you ask me for what. So, certainly, east side has to have a TLS certificate. The, And so I certainly I certainly see the appeal of, like, having MPLS my sense is, as as Tim says, MTS is kind of an operate operations headache. In particular, if you're behind, like, some sort of, like, CDN,"
  },
  {
    "startTime": "01:30:03",
    "text": "like, the the the the the the now you have to find some way to carry that in a GP header or some some such nonsense. Which apparently is quite a pain in the ass. So I think I'm sort of sympathetic to, the, does his parole not not require that come I do think that the on Sorry. I think the the important point is the identities are dominions. At least from the perspective of Sorry. You said you said the identities are what? Her domain names. Her domain names. Thank you. And so And so if we decide, no, it's not MTLS, we'll have to figure out some way that, you know, that there were that the that the server is persuaded that The client that does not use N TLS actually is the owner of example.com.com. Because, I mean, you have to know if to know that when when I come in and I'm making HTTP requests, that's the same person as person that I'm gonna go make my issue with request to when I wanna go to I wanted to push back on, Tim's suggestion that we could just wave our hands and say the various providers can make business style arrangements pure- pair wise. I don't think that's correct. If we have n large platforms that are willing to federate in this way. And you wanna bring a new platform online you wanna be able to interoperate with a mini discussion among those with users who might be in any of those end, know have end business to business arrangements to make. And now that there's n plus one folks, next person now is to make n plus 1. Business to business arrangements. And that is not proper federation. And that is a way to lock in the large providers and keep them permanently entrenched."
  },
  {
    "startTime": "01:32:00",
    "text": "That's a huge mistake if the goal here is proper interoperability. Hi. This is Sean Turner. I'm gonna be less lofty about it. You gotta get through the ISG. Presenting a protocol that a minute without mandatory to implement things is gonna ensure that you get stopped. So if we're gonna craft it in such what we're not gonna specify, you're gonna have to do some limbo in English to make sure that it can actually get through without getting kicked back. Some some Yeah. So I I I can grant that, like, Mhmm. nobody's favorite protocol. And mutual TLS is like But given the properties that we have that we that everything's domain name based, as Edgar pointed out, Everyone's gonna have to have certificates anyway because of HTTP requests go both directions. And to have the openness that that DKG and Sean are talking about, like, Like, it seems like a not terrible option to try and push forward with Like, this turns out not to be operable in practice. We'll we'll pivot But, you know, at least, it seemed like the minimal requirement here is we need some, like, some channel that authenticates 2 domain names in both directions. And so seems like a plausible starting point. Also, think the other thing is, like, we we don't have a lot of evidence yet, but we have a small amount of evidence from people who are starting to try to do interop, that those who are being forced to do it are incentivized to make it as hard as possible for the who are seeking it. And so I think leaving this unspecified just provides, like, yet another avenue for that kind of behavior to proliferate So I think we that part used in favor of specifying it somehow. And, I guess, MTLS maybe the least worst way. But I at least that way it, like, equalizes the burden on everybody, as opposed to having multiple different begrudging participants in this ecosystem make it hard in different is for those who want to try Yeah. Thanks, Melissa. Alright. Next slide, please."
  },
  {
    "startTime": "01:34:04",
    "text": "Alright. So here's here's where things get interesting. As if we weren't interesting enough in the last slides. Right? So we wanna do this thing where we take Changes at the application there, and we feed them into MLS to kind of confirm that everybody, agrees on those, those changes to step, step So really, we want 3 these three things out of MLOS. Right? We wanna put, you know, encrypt our intent and encrypt our to just wanna manage access. Right? And we wanna ensure that agreement. So 1 or 2 are not interesting. Like, it's regular with MLS. But for 3, we needed to, add a little bit to MLS. To clarify how we extent how we do this feeding of the app state into the the key schedule. So, we we sketched out in the doc this app sync extension, which basically gives you, you know, it's an extension to MLS that holds a a big old key value store. Of, application information that gets shoved into the key schedule and then you pass around diffs to that, to synchronize in in MOS proposals. In in the document, we have 2 different types of of state to get handled in parallel. You have 11 bucket of state for your policy and run 1 bucket participant list, but they're both using this this sync mechanism. Next slide, please. So the way this this so the policy framework, just to talk about that briefly. And then we'll get to the details of the sync. The policy framework is this, again, is pretty notional here, but, the the design team wanted to go go toward this kind of both flexible and usable trying to balance flexibility and usability here. So, like, The idea was to have these granular capabilities, add user, remove user set role, things like that, but also define roles that are combos of those capabilities. And then the thing you assign users in the participant list are those roles. So from from Obviously, this is something we can iterate on. This is the notional thing that's in the document. So just,"
  },
  {
    "startTime": "01:36:03",
    "text": "pin this for something you can file issues on in the refocus if you hate it. Next slide, please. Oh, shoot. I guess I If you would like to learn more about AppSync, please come to the MLSworking group because that's where we'll develop the details because our charter forbids us from doing them in this working group. Sorry. I have them. I'll send them to you. Yeah. Sorry. I forgot that was in my MLS slides and not these slides. We can, we can, switchover. People are really, really keen. Any case, suffice it to say, you establish this bucket of state that gets fed into the key schedule, and then The propose proposals are sent that have diffs on that state. The proposals are visible to the server because proposals are only signed and not encrypted. But they still get fed into the AMOLAS transcript and thus into the key schedule. Alright. So this, I think, is the last protocol detail slide. Which is just the HTTP endpoints we have. Requires actually relatively few, at least to create the the functionality we have so far. Kind of following the pattern that we did in ACME, oh, many moons ago, we have this directory that, allows is kind of the entry point for someone connecting to server that tells you where, you know, where does the server operator put the endpoints for these different functions? But I hope Tim's gonna tell me how poorly this works in Acme. We should do something totally different here. Right? What that directory gives you is these then 5 functional endpoints. Right? So when I'm adding John, to a room. I need to get his key material. And so I go to that that endpoint on his provider. To get his curate key material when I wanna send the commit and the welcome that him, I send it to this update endpoint. So this update is where I send the proposals to to change the state of the room and a commit that puts them into effect. Submit message is, how I say I would like to send a message. To this room,"
  },
  {
    "startTime": "01:38:01",
    "text": "you know, the the thing we actually wanna do with this protocol, the the whole reason we're doing all this set up. Alright. So there's submit messages, and then this notify endpoint is what gets called all the other servers. So, you know, you the follower who's who's you know, whose user is sending a message called submit, Then the hub calls notify on all the other ones, just like in that intro slide. And finally, this the group info endpoint is, you know, how how a new device learns the group info so it can do an external join in that last scenario. So relatively consolidated set of things. I'm sure we'll come up with a few others as we cover additional use cases, but this kinda seems like enough to get going. Alright, Tim. Yeah. The directory. So the way it was explained to me by some of the acne authors is that the reason that Acme uses this directory, like this in direction to figure out where where resource paths are. Was because, like, at the time, the BCP on building APIs with HTTP p kinda mandated this. For reasons, I don't recall, and I acknowledge that, like, it's incumbent upon me to have loo look this up, but The point is the BCP on building API is as I understand it has been updated. Since Acme, such that, like, you no longer have to do a directory. And I think it direct I I don't know. To me, it's it's an unnecessary direction and complexity. And especially like, in Mimi. So can you provide that temporarily to Acme, Mimi, or sorry, as opposed to academia, it's gonna be a very, very high volume protocol, right, like people are sending a ton of messages. Acme very important, but, like, it's actually used quite infrequently relative to the volume of traffic on that so it's fine to have the directory there, but it doesn't make sense to me to to like force clients every time that they want to, send excuse me, not clients. But, force a following provider every time he wants to relay a message, first have to hit the directory to figure out what is the endpoint that it hits. Someone's gonna tell me, yeah, but you can cash the directory or whatever. But, like, also, we could just not do directory and not have to spell it all the caching and just have the protocol spell out the resource paths."
  },
  {
    "startTime": "01:40:03",
    "text": "Yeah. Thanks. Yeah. And just overarching point here is, like, the reason we do all this directory nonsense is to give folks some flexibility in how they deploy these in in GTP server. So, like, that that's the overall theme of these discussions. Like, how do we offer the right degree of ability with that, I'm posing a bunch of operational burden. I noticed that Mark Nottingham is in the room who had submitted some counselor. And you had talked to Mark to kind of understand his comments more. You wanna summarize anything to Mike. Yeah. Rowan May. So Mark said that this provides a lot of flexibility. And, like, for example, one of the things that you could do is you could you, because you're using templates, URL templates, you could stick the room ID at the beginning for, you know, more like, because you wanna do your sharding faster for some of these. You could put, You could send them to different, in a in a in a in a in a in a in a in a in a in a in a to different hosts, you can you know, you can add version numbers. There are all sorts of things you can do, but basically he was He wanted people to understand that, you know, not to just code to a particular structure, a particular example, and to know is a flexible mechanism that has a lot of operational flexibility and has proven to be useful in the real world based according to work. Which I happen to I happen to believe in. So Alright, Travis? Yeah, I just kind of wanted to plus one using a directory here as somebody who works on a separate protocol who has a server discovery mechanism And that mechanism is, slightly painful to use and doesn't necessarily scale in all the ways that, Mark through Ron, just mentioned Yeah. Becker."
  },
  {
    "startTime": "01:42:02",
    "text": "Yeah. So, I mean, as far as I can tell, 92 or 5, well, not saying you must do this. Do this. Do this. Do this. Like like, kinda says you should do this, reading section 44, and it, like, says, basically says you should do this in the first paragraph. So, I mean, I guess if you wanna say you form mental health too, maybe you don't, but, think it'd be pretty pure the best practice. So, I personally don't like a strong opinion, but, you could put your time to do it and, and to advise us this. Like, I think we'd be a better reason than than relying him off or not to. Yeah. I mean, I think we might be able to, you know, compromise here somehow by, like, you know, even just enforcing, certain some of the histories in the records, like, saying there's config object, which is the thing you would serve from the directory endpoint, but we assume that that config object is configured somehow, not necessarily via this this endpoint. Yeah, I I think there's there's some flexibility here. You know, again, File the issues. You know, let's and let's let's have these discussions. Alright. So I think if we go to the next slide, this is the end of my prepared remarks. And we have a few things we ginned up this morning to respond to actors' comments in the mailing So Edgar said some comments. Thank you, Edgar, for those. One to kind of recap the the the the the one big point here and and teate Steve, for any discussion we have here. So next slide, please. Right. So we've talked about this app sync design. Right? We we have this kind of general agreement. We for a while that, you know, we need messages to be signed somehow, and we need the application state be confirmed on the key schedule. We need some way that the application state gets from, you know, the application logic to the MLS key schedule. Right now, we've taken the state changes, those diffs, the app state, and put them in MOS control messages, these proposal messages so that by virtue of the MLS control them last transcript, they they flow on into the key schedule. There's an alternative design you could do where you use the MLS application nurse and application data over the top of MLS to negotiate the state changes."
  },
  {
    "startTime": "01:44:04",
    "text": "And then as application logic, you pull, you know, summarize the state. You hash the state and you explicitly injected into the key schedule. So you're not levering the leveraging the automatic bits of MLS, you're adding, an an explicit step to inject that Next slide, please. I think Echo prefers the latter of those 2. But this is kind of a picture of the 2. Right now, we're we're doing this where the application controls overlaid on the MLS control protocol. And it flows into the key schedule by virtue of that as opposed to doing it up at the, MLS application there and and explicitly shutting it in. So, yeah, that's that's the alternative. I think this is actually a fairly, you know, you know, isolated thing that we could we could have a good debate between these and it doesn't have a huge impact on the rest of the protocol. So on the next slide, I think I just say let's let's Again, let's file an issue and have a discussion. Not the document. File an issue, and work on this in the working group. Anyone the echo, do you right now or folks in the room have a wanna say anything have more on this that's sympathies, concerns. I'm more than happy to file an issue deal with it later. For its worth, I think what I was thinking was not so much food hash. This summery, the state feed has the transcript. Every time you process, a message that change change the state, you just pass the you just pass the hash into the in in in nevertheless, but I mean, these are these are small things. Yeah. end up There's there's a number of ways you could have it reschedule. Jonathan Whalerland left. Have I this all inspired to mention, you know, key importers, just Alright. Cool. So cool. We'll, you know, we'll get issues following that and I think the last thing is to, you know, propose adoption. Next slide, Our last couple slides here. Next keep going. there there's a section of the document about no Oh, yeah. I obviously, there's a whole bunch of stuff that we didn't do here. All the identifier stuff is super notional. There's a bunch of stuff to for the working group to do. Fun things to discuss. So the next slide, please"
  },
  {
    "startTime": "01:46:00",
    "text": "Yeah. Once adopted. Yeah. I know. Travis. Slightly controversial, but obviously, we here in Mimi, are primarily only concerned with MLAS as the encryption layer. But over the last few, IATF meetings, we've also talked about on ramping from, say, double ratchet MLS within Mimi, primarily to meet basically today's DMA challenges. I don't think we need to go into serious detail here, but I just wanna double check the double ratchet is still theoretically supported by this protocol. And, is is providers have an on ramp. To MLS in a relatively easy way. Yeah. I mean, I I think as as we discussed, off and on throughout this process, you know, gonna be if you're gonna try and do this with double ratchet, you're gonna have to invent a bunch of extra stuff. Because double ratchet doesn't do all the things MLS does in terms of authentication in terms of state agreement. But I think we still have, you know, there we we have a layered layering diagram where we have an intense end security layer. That provides a defined set of functionality. The architecture describes the functionality that is. So at least, you know, if you wanna do this with with Doctor, it gives you a target for what extra stuff you need to invent to make it go. Becker. Yeah. I I just wanted to recap what I think the agreement on that was, which is Like, if you wanna make double ratchet work, that's okay. Something you have to write down. And, and there's, like, nothing in principle that the garage and not work here, but, like, that's, like, it's also not just dropping replacement. So, like, you're kinda on your own. Yeah. Clear clearly, this group has started to work on MLS. The the the the affordance that has been given to Doctor is to try and, you know, explicitly draw the boundary around the end to end encryption layer so that Doctor folks can have a target if they wanna Bye. Anyone else? Enthusiastic. Love it. Sean?"
  },
  {
    "startTime": "01:48:06",
    "text": "I I hi, Sean Turner. I don't wanna steal, Alice's, thunder here, but since we only have one protocol document, is it kind of moot if we're gonna do, any kind of adoption call, like, don't we just do this? I guess the idea is are we trying to figure out if we're gonna bake it some more before we do it. I I I think the question here, like in a working group. I thought that's fair point. Like, like, is Yeah. The question is, like, Is this baked enough to to be the direction Like, does this seem does this seem plausible enough that we can build from this starting point? Unless somebody is banging down the door, which I don't haven't seen the data tracker anywhere else, in any of the meetings I it's it's good enough along to get everything else in there and just start beating on it. Like, let's get on with Becker? Yes. I think we should adopt this. I I think it's imperfect, but, like, all these are imperfect. I don't think it's good enough to adopt, when Sean says we don't have some other alternative that we're comparing against. The alternative is is could be working at more. And I don't think that's, like, I think better at this point for it to be exit the short design team and enter the working group. John Peterson. Yes. Get on with it. Cares. Cares. So, of all, I I'm assuming we're talking about both documents Right. Architecture. The architecture and the protocol, guess. I Okay. Okay. Okay. I think it would be useful to hear from anybody in the room or remotely, if they have reservations about adapting these two documents, Go ahead. I I guess I would say I still think we should merge them into one document. They haven't run the same people."
  },
  {
    "startTime": "01:50:01",
    "text": "I think it's confusing to have 2. So, like, I can live with that. I think it's, like, not actually very helpful. I don't think it was helpful unless frankly at the end of the day. And, So, you know, I don't know if I if no one else is, like, I'm bored with that, then I'm windshield but, like, you know, they're going probably that, then maybe we can discuss it or come on or something. Yep. Yeah. I don't have a hugely strong opinion. I'm happy to copy paste content from, from one thing to another. Like, more stuff to scroll through before you get to the meat. I think we can leave them. As they are for now, and if if if they merge later, then you'd you'd only published one of them. Fine. So it looks like your audio is a little quiet. Oh, sorry. Yeah. I think this is a cosmetic issue that we can deal with later. Yeah. Okay. Alright. You guys want me to pull? My inclination is, yeah, we could, I mean, we can pull. Obviously, I just ask anybody to stand up and nobody stood up. So, we can pull and then we can put an adoption call on the list afterward as well. Let's see. If I can do a better job. With a tall, Give me a moment. Sorry. I'm like copy pasting stuff."
  },
  {
    "startTime": "01:53:12",
    "text": "Wait. Where do I click for seaboard? Seawar is is the raise hand button. Alright. Let's give it, 15 more seconds. Who's up, Salinity? One who's really on the fence there. Okay."
  },
  {
    "startTime": "01:54:02",
    "text": "Undecided. Do you wanna change one more time going once. Timerise. Okay. So it's you it feels like we have, rough consensus among those who are here to adopt these two documents, we will put the adoption file out to the list to confirm it. And, And from there, hopefully, we will have a decision. My next question is just like as far as moving forward On these, Richard, don't walk away. Come back. You know, we've had the design team up to now who's been working on this on their own, what is your preference for what the next steps are to. Continue crossing these documents, assuming they are adopted Hey. We've got, you know, we've got the documents and GitHub repos right now. Seems like let's do the adoption calls. We can keep we can keep working in those repos, and people can file issues, and we can migrate all that stuff over to working pre prepose when we set those up. So, yeah, we can we can continue working async on on the repos. It would probably be used to have some interims as you're already working on. See how it's a No need to gate work on adoption. We can keep moving, think the the the the documents and data tracker are probably good for the adoption call. But like, we Folks should not, you know, let the adoption call stop them from filing issues or PRs. We can keep moving Sort of timing wise for next interim like, how how much time do you need to make additional progress to have more things to talk about given all the gaps I I feel like we have a nice pile of things to talk about that we raised here. Okay. Okay. So when whenever you're ready. Sounds good. Great. We have we have"
  },
  {
    "startTime": "01:56:01",
    "text": "minutes left. Does anybody have anything else they wanna talk Or do you wanna go back to this, if all your devices land in a volcano issue, mean, I do really like I I don't really feel like we fully considered ASN 1 the earlier discussion. So I'll speak briefly to this volcano situation if if people are okay with that for the 5 minute, thing. So understanding is that we have these users that are distinct from clients, which I think is a misfeature in MLS, but I recognize that I lost that fight on MLS. And I'm sort of licking my wounds on that because I know that I can at least just pretends to only have one client, and then do some weird key sharing things among my clients if I wanna keep that active. But if I don't wanna share what my clients are, with the MLS or So that's my face line is I think we should not be sharing that much client information. And I'm concerned if the list of participants, does not include cryptographic material. But rather just some sort of identifier, some sort of identifier based on the SS I. That we are leaving the room for the servers to add ghost users to the chat. And I don't think that's a good idea. Hi, Rowan. So DKG, the MLS, leaf nodes, contain credentials. So while there is a basic credential that just is a blind assertion of of a of an identity. The X 509 or verifiable credential style"
  },
  {
    "startTime": "01:58:02",
    "text": "credentials for MLS. Both would provide strong Cryptographic. Assertions of a user's identity I would I would be happy to spend some time with you offline, take over, your privacy concerns, and we could also possibly include Conrad and Rafael. Who worked on this extensively. Okay. So it sounds like I might just be have been, confused, and I apologize bringing my confusion to the group. But if the user is the core the root of the cryptographic trust. And not the client. Then I might be fine with the situation. I I I think I misunderstood I'll I'm happy to take to talk with you about that, bro. Thanks. Great. Thanks. Okay. Does anybody else have anything? Okay. Great. Thanks, everyone."
  }
]
