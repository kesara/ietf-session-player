[
  {
    "startTime": "00:00:04",
    "text": "than giving up the microphone and re-enabling it muting at the bottom on the right here yeah it seems to work thank you oh here comes straight Greg good evening Greg he looks like he's shot of audio at the moment they might just be dealing with permissions yeah hello good evening Greg realistically I suspect this is everybody we will get so we can start anytime I would say take it away James cool sorry uh good morning good evening good afternoon uh this is the Jason path uh September 2022 interim uh because this is an official iatf meeting the usual disclaimer of"
  },
  {
    "startTime": "00:02:01",
    "text": "uh sorry I'm having a room but I have not had my second coffee yet uh no well so uh all the all the usual rules and stipulations of the ietf apply to this meeting as they do sort of a lot of variety of meetings please vote well um note takers I'm terribly sorry that I haven't got around to note taking the last meeting Glenn thank you for sending the action points over immediately after I was on Wells and find a big chunk um blue sheets are are automatic we don't have to worry about that I'll keep an eye out on the chat in case anybody uh else shows up or willing to do it through that um in terms of the agenda [Music] um I see we've put a few uh things on the on the list is there anything else that we want to cover I would uh we should just uh visit uh the uh draft draft uh at some point maybe first to get that out of the way okay and could we move two five eight to the top of that update on issues list I think it makes more sense to do that first sure sure so do you want to start with uh I rejects too sure so that one's I think been ready for our working group last call for a while uh you haven't had the Cycles to um to document Shepard it yet um sorry to hear I'm sorry about that I hope sorry to hear about you not being well I hope you're recovered yeah I'm mostly recovered now okay um you know if it's going to be an issue for you um I would propose that I remove myself"
  },
  {
    "startTime": "00:04:00",
    "text": "as as a co-editor on that one because after all Carson did most of the work and I could Shepherd that one because I think we should get that going forward yep um in terms in terms of my availability it is something that I should be able to do in the next couple of weeks okay now that I've I've most I'm mostly back to normal so uh I just need to uh put the time in my calendar and and sit down and do it so I think that if you haven't if if I haven't done it in the next couple of weeks then that might be the best course of action to get things are involved Yeah Tim I think you you are underestimating the the amount of contributions you made there so I I would be happy with keeping you as a quarter mm-hmm well go ahead sorry go ahead I just wanted to I just want to add in that uh Jason schema would possibly have a uh a passing interest in in this records uh standard as well uh something to some something normative to reference would be fantastic yeah I mean I care a lot more about getting it moving forward than whose name is on it and so yeah I agree okay let's shoot for for James doing this yeah give me a couple of weeks and if I'm not able to do it then I'll put it to the list and we can figure out an alternative orienting okay fair enough so update on issues does one of our editors want to take the lead on setting the stage and getting us going here I sent a a summary on 258 around by email I don't know if people have had a chance to read that um bring that up James uh sorry what was that glad can you bring up the email I sent yesterday about um"
  },
  {
    "startTime": "00:06:02",
    "text": "is that the one called update this index between tax breakdown yeah here's my Overview at the bottom of there sorry where uh the the email from me down towards the bottom of that screen here's the uh here's my review okay yeah so um uh yeah I mean that's that's kind of summarizes it but just to talk through it um I mean the uh the major Improvement that uh issue 201 and pr258 bring to the table from her perspective is um it straightens out the syntax makes it much easier to um do an implementation with a similar syntax uh input to a parser generator for example um and that's that's all in place in the pr and really the rest is about the way the semantics are described clearly we want to keep the semantics the same overall uh but they're a different options for describing the semantics and we've looked at some of those and I've got something on the agenda to discuss that again and also the the naming and the document structure so Greg moved the star Pickers section into its own section before selectors and so the current current PR um is is in that structure um I don't find it quite as readable as the current back currently but that's my personal position so I you know Greg and I are both looking to other people to review it to see what uh you know what other perspectives are and I've requested some changes um to actually finalize the terms because I think you know the wheels might come off when we finalize the terms you know um we'll see okay um I put my hand up and let me say a"
  },
  {
    "startTime": "00:08:00",
    "text": "couple of things um speaking I I buy and so early on it seemed clear to me that nobody wanted to change the semantics of Jason path and this was primarily an editorial discussion a large one a complicated one but but primarily editorial and uh so I I decided to to stand back so yesterday I I read the draft thank you for somebody whoever it was that formatted a copy so that I could do that thank you um uh and uh and and I hadn't read a draft for at least two months so you know it's been a while so it wasn't fresh in my mind at all um and for what it's worth I found the current structure of the draft uh acceptably readable and clear and comprehensible and it it made sense uh to me so um so speaking with relatively fresh eyes I think that what you have there now is is acceptably comprehensible I don't really have an opinion as to whether it was better or worse than what was before because I can't remember that um but it's essentially Okay so oh um yeah that's that's all I wanted to say so I you know assuming that that the rough structure represents the consensus of the editors then we should be able to proceed to attack some of these detailed issues that people have brought forward if Lynn in particular is brought forward foreign okay I would like to say thank you very much for uh the incredible work Greg and Glenn also uh I do like the New Concept of the two selectors and it took some time for me to get used to"
  },
  {
    "startTime": "00:10:03",
    "text": "that new structure but uh Carson introduced the new three terms which brings a lot more structure into it I see this as some kind of atomizing the former big selector thing thing yes um I think it's very important to get the terms right maybe we discuss it now in short I read the spec also yesterday and I like the structure I I think it's a very good start okay um I'd just like to say that the the structure was the important thing to me um as far as naming I'm going to leave that to everybody else I I really have no opinion on what things are named uh so long as the the the structure of the things um are somewhat uh sensible um to me this the way this is structured uh in the draft that I put together um makes more sense than the the current document uh because it is uh as as Stefan said it's adamite uh it's it's really isolating the the the the"
  },
  {
    "startTime": "00:12:03",
    "text": "breakdown of what's actually operating and doing what um in my mind at least but as far as what things are named uh I I don't really care you could call them the starters appenders and Pickers if you want um which is which is the the placeholder terms that um that I think Carson put together so um yeah I'll leave naming of stuff to other people go ahead Kirsten yeah so I sent this short note uh um this morning at 2 am um I think that there's one thing we should do before doing furtheratory work which is agree that we allow the the white card uh picker um in all places because I allowed uh which would simplify the the structure uh somewhat because we we don't need to have special selectors for for those um because um I would uh try to really separate the concepts of starter and appender and this means that uh Aquarius clearly defined as a single starter followed by a sequence of zero or more appenders um then we should quickly deal with the shortcut appenders which are just syntactic sugar on the two bracketed pandas the child and The Descendant a Pender and uh we shouldn't even try to to use a common name for starters and appenders because they are really different things"
  },
  {
    "startTime": "00:14:00",
    "text": "they share a right hand side interface and outgoing interface which is the node list which we can we come to next but this frees up the drum selector and we might actually want to use the term selector for what's called picker uh in in my preliminary terminology um so um the the one thing that we really need to decide is to to allow the the white card uh picker um of course this is a technical change in in contrast to the other things uh but uh I think it's a technical change the the um need uh for which has become clear by by the better structure we uh now have and this technical change enables editorial fixes so I think it's a reasonable thing to do this first um yeah and then I think we need to spend some time on on the issue of sequencing in the node list which has these weird um determinism constraints uh on it I think we we have a pretty good grasp for those but we haven't really written them up uh yet in a way that I would understand them um so um yeah this this really is about describing interfaces between the components the components that leave node lists and the components that pick up node lists are a singular node and and deliver node lists and how these node lists are integrated for components that pick up a node list and return a node list so that's number three and that is entirely a technical issue but I think one where we mostly have consensus and just have to make"
  },
  {
    "startTime": "00:16:00",
    "text": "sure we find the right right words uh to to describe the consensus Greg Kirsten I think all right Carson I think you um I think you answered this in your uh in your little speech um but do you have a preference on the order of PRS for the integrating the wild card and then doing this editorial change I'd prefer them not be uh part of the same thing they're part of the same PR I would I would prefer them to be separate yeah are less important for for our process then then maybe in the process that you are used to um so I I wouldn't mind mixing this stuff up um uh it's a little bit of busy work to to do a technical only PR that that enables uh the the white card uh picker in those places that will be enabled once once we simplify uh the current draft so my uh preference would be to do it in 1pl uh this can have a good description which says it has one technical point and and a number of editorial points yeah it's simple enough for me to take the take what I have currently and just um take the two I guess it's a descendant wild card and the Wild Card selector and then move those uh I guess combine them into a single picker um and put that up in the bigger section so it means it's trivial for me to do that I just like the idea of the the current document and in this PR just being an editorial um an editorial thing would you consider"
  },
  {
    "startTime": "00:18:00",
    "text": "this still an editorial or is this a technical change well enabling things that that wasn't enabled before is a technical change right so this would enable having a wild card and uh a single index in the same bracketed syntax yes okay so that would be a good technical change Glenn you're trying to get in um yeah um well firstly I support the the Wild Card item number one I think we should uh should do that I'd be very happy to do that after merging the pr if if that's more convenient because I think we can all see what the change is and that it's very straightforward uh secondly uh I think the uh the terminology that's been proposed is good the starter and the Pender uh and I think possibly we could go for selector as the name for start picker I think that works but it will need a kind of editorial pass of the whole document after that to make sure that we're not using I'm not misusing the term selector subsequently um and I think the sequencing is okay but there's um a um an issue that will come to later which throws the um balls up in the air slightly but I'm sure we can start that out and unfold it in later so you know essentially once we've got the terminology straight I'd be happy to merge the pr um as a recent reader of the draft I found the terminology and current use uh nice and clean and and I'd worry a little bit about having selector I mean two different things so you know my initial Instinct would be to uh just stay with picker unless somebody has a better thing um uh you know a better alternative rather than overload the terminology but once again this is a notorial issue and"
  },
  {
    "startTime": "00:20:00",
    "text": "I think it's it's somewhat up to you folks to figure it out well selector wouldn't be overloaded um the way that I would do this and I would prefer to do this in this PR I would uh I would Define starter and then change over everywhere selector appears to appender so that selector doesn't appear in the document anymore I'd commit that and then I would also have a secondary commit of changing picker to selector just just to make things clear that's good okay I can work on that so it sounds like our editors have consensus on so it doesn't sounds like nobody has any issues with Kirsten's or with the notion of adding the wild card um and the editors are roughly pointing in the same direction about how to get there no I think it's a logical thing to add the white car uh to to the to the list of uh because it's logical it makes sense it I don't don't have a problem I applaud them okay uh then let's have a go back to Kirsten's email here on the screen James could you increase the font size a bit thank you okay and scroll down a bit okay so we can see right so does this lead us naturally to Glenn's issue about determinism then our Glenn do you need to do we need to do anything else first I think we could next discuss my issue"
  },
  {
    "startTime": "00:22:01",
    "text": "on Pica semantics and that that issue is um 261 because we you know now that we're going in the direction of these of Pickers and we've got some decent terminology um I think we still have uh actually three options it turns out for how to describe the semantics of Pickers and I'd just like us to spend five minutes on this call uh looking at the options so that we uh we're sure we're going in the right direction uh you know I think it's acceptable the way it is which is um option one here where the Picker is essentially a selector because it it's given a value and it selects zero or more children of that value and returns them in a node list so but I see that has been quite a implementation oriented approach it's you could imagine such a thing being coded in the implementation another option which Greg and I discussed uh early on which Greg didn't like and I favored was um that the Picker should be really a predicate and that it determines whether any given child of the value is to be selected then the selector would say uh you know all the children selected by the Picker are you know for all the children which are of course the Picker is true uh appear in the node list in the order uh blah blah blah you know so that would be more of a in my terms a less implementation bias kind of approach and it's actually got a narrower interface because um the pickers then don't get to choose uh the order of the node list and they can't see the parents of the children"
  },
  {
    "startTime": "00:24:01",
    "text": "so it's much a much tighter description the third option which I uh you know we which we moved away from fairly early on but I think we need to just uh revisit so we've got the the broad set of options is to not actually give Pickers semantics on their own but only to give Pickers semantics in the context of a selector um so essentially to say each picker behaves like this when it's in the child selector and then to infer the semantics of a child selector from that much as we do with today's list selector in the current draft and the benefit there is that we don't then get into implementation at all or you know we don't we don't uh separate out picker as an implementation item it's purely syntactic um so you know we've probably got different opinions on this but I just wanted to float those three options and say that I prefer uh either of the other two you know I don't really favor the current one but I could live with it but I don't really like it okay if I uh would like to comment on on on on Glenn's options I uh first would come to the terms I'm not very happy with the term picker pick I in from my point of view Pica is a misleading term as picking is an explicit action uh but a number one or spring full uh uh merely passive labels of an array element or an an object member uh"
  },
  {
    "startTime": "00:26:01",
    "text": "those are only indicating uh to the items in question rather than actively picking which is selecting and this is uh from my point of view the discrepance between those terms are they can you exchange them picking the Picker and selector and this is the current discussion uh we we we change the meaning and uh we already have the term index in the spec index is a non-negative integer that identifies a specific element in an array note that the term indexing is also used for accessing elements using negative integers and for accessing member values in an object using their member name this is read from our spec so we already relaxed the meaning of index and so why not think further and relax this term more uh because the new term a single item within a bracketed uh child selector that matches the values which are to be selected uh so the most uh implementers users if they meet the brackets would think about an index array index or if it's a string it's a"
  },
  {
    "startTime": "00:28:02",
    "text": "name if they come from a member name if they come from JavaScript I did one thing I I I would like to come to to Glenn's options I did one thing I changed ticker to selector so I start with the second object which reads now and index is a predicate which determines uh given child of a value a child selector selects those children of its input value for which an index is a match I I changed the wording somewhat the first option a selector presents a single value to an index the index selects zero or more children of a value and the resultant note list is used in constructing the selectors note list this simply makes no sense uh a selector does not present a single value to an index and an index is not a cannot select something so from my point of view those stuff going into the brackets is not uh nothing active these are not selectors they are only indicators they are indicating to uh"
  },
  {
    "startTime": "00:30:04",
    "text": "members or array elements and the selecting must be done from the outer from the selector or maybe from the appenders appenders I I like selectors more and would merely if we we want to name the brackets or the dots I would introduce the term excessive oil so that's my uh point of view after thinking uh some time about this wording okay thank you question yeah I think what Stefan just said is really a prime demonstration why you shouldn't mix up discussion of terms with discussion of the technical Concepts behind that because in the end we we have to get the technical Concepts right and we will find terms for those so let's stick with the working terms for now and so I I talked about the appendix and and Pickers and to Glenn um the fact that a description technique is also directly implementable does not make it less desirable as a description technique so I I think that the the little hang up you have with the fact that the the description technique is not unimplementable is such a reason to to not use the description technique yeah my concern though was it it's it's biased towards one particular"
  },
  {
    "startTime": "00:32:00",
    "text": "implementation no it's not biased it's just using a description technique that should be familiar to any mathematician and that also happens to be implementable but that's not a bias uh yeah but I think it and and naive implementation of the spec would tend to make a picker a uh a sub component with that description yeah that's fine yeah so we we can we can we can add some some verbiage that that says that this is really all just description technique and there are better ways to to implement this um but I think that doesn't have to stop at us using a really useful really highly understandable description technique just because it also could be used by an implementation yeah I I accept that but I'm the point I'm making is I think the other options actually give a better description yeah and that's where I'm disagreeing so first of all if the semantics of a picker depends on the append that is used in then we have failed isolating the two terms so the the interface between an appenda and the Picker should be independent of which appendix we are talking about this it doesn't does that mean in option two they are independent yeah exactly so that's the way it should be and uh which we should not make the description more complicated by by putting in stuff from the append or into the Picker again these should nicely abstract away from each other and yeah I don't understand that you your description of the preferred structures seem to be favoring option one you may have mistakenly I think uh swapped your option numbers in this post oh"
  },
  {
    "startTime": "00:34:00",
    "text": "I think option two um was was the way that I have it currently and option one was your your predicate forget option one and two the the question is is this uh picker or the appendo doing the taking apart uh of the node and presenting the children yes and uh the the answer in my option of whatever its number is is that uh an appendile presents one node for the child a panda and a tree of nodes for The Descendants appendo which are not the child and not The Descendants which is why the term is a little bit confusing but again we are going to get to terms later and then it's the job of the Picker to actually take that note apart and there are several good reasons and the main reason to do it this way is that the the appendile cannot do the enumeration because it doesn't know what index or member name information is of interest to the Picker so the Picker has to have a look at the whole thing and not just the child um because the the Picker needs the index or the member name to decide which of the nodes to which of the child nodes to include so yeah can I just interrupt because I possibly didn't explain option two well enough um so option two the Picker would be given the value of the child and its array index or member name"
  },
  {
    "startTime": "00:36:02",
    "text": "this is seriously real to me because you have a component that is doing some some taking apart that that is really unneeded I mean uh if if I want to get item number five there's really no point looking at items number zero and four and then six tools not in not in implementation terms I agree uh but in Spec terms it's just a for all well you know Greg Greg's been on the queue for a while Greg if you have a yes okay so I'd like to address uh something that Carson touched on a little bit um Glenn your your argument that the way that I'm explaining right your option one here is that it shows in this issue which is the current explanation the current descriptive language in the spec is option one here um the way that you're objecting to this as being a potential implementation path um I don't think it's a valid argument because your option two is also a possible implementation path um a naive I could also argue that that a naive implementation could have an offender take apart all of its take apart its children and give each child to the the the Picker and the Picker says yes or no and that would be an implementation so I don't know that that's a valid argument secondly uh Carson kind of touched on this as well if I have an array of a thousand items with just an index picker of three then I want the fourth item I don't need"
  },
  {
    "startTime": "00:38:02",
    "text": "all 1000 items to the the index picker of three in order to just get the fourth item if you pre if the appender instead presents the parent to the index picker the index picker says oh there's the fourth item I'll give give that back yeah I I agree that's true but it's it's a an efficiency concern uh I would argue that developers tend to think more in terms of uh efficiency yeah but you see you you're kind of supporting my view that um whichever option we go with readers of this or implementers are going to be thinking of it in terms of implementation uh that we can't win yeah whatever whichever way we go they are going to be thinking of implementation so my bet would be to have the uh have the descriptive language be the more efficient of the two if a naive implementation wants to follow the spec and do that then at least they would get something that performs okay-ish so so since since this is the point I wanted to address I'll butt in um so I disagree strongly I think that the most single most important thing about the language in the spec is that it'd be clear about the semantics the result to be achieved um if if the best way to achieve that Clarity is to describe an inefficient implementation I'm totally okay with that what my original reason for putting up my hand was to to Echo what Carson said a couple of seconds ago which is it's perfectly okay to use uh you know an iterative uh pseudocodish description of how it's done to establish semantics that's not that's not radical or new however I think if you do that it's absolutely necessary to have language saying that uh you know this this algorithm is"
  },
  {
    "startTime": "00:40:02",
    "text": "provided only for explanatory Clarity and there is no requirement whatsoever that it actually be used um uh which which means it's perfectly okay to do that as long as you give that language sorry that's all Kirsten don't we have that for the slice implementation yeah or for the slice description we have some pseudo code somewhere that says this is how this is supposed to work but implement it differently yeah we do yeah yeah the difference between the two approaches is essentially where in in the abstract definition We Run The enumerator and uh running the enumerator in the appenda means that we have to to supply everything the the enumerator find uh to the the pickup so the the Picker interface is not a nodeless based interface but it's an interface that Associates the nodes with attributes such as array index and and member name so that that makes things slightly more complicated for me because and I no longer can think in terms of notice but I have to think in terms of these this attribute uh things well the the input would be the attributed thing the output will be essentially a Boolean in option two rather than a node list the node list would purely be a concern for the appender yes um you see part of my thinking here is that because we I think it's correct to introduce Pickers before the Pender"
  },
  {
    "startTime": "00:42:01",
    "text": "appenders rather um I think option two enables us to present it more in abstract because it's just a set of predicates that apply to children you know children with their index or um or object name uh translation what about negative steps do we have a problem there oh okay yeah right yeah and and array length so it's another attribute or you can just give the uh the Picker the parent node and or I guess that's what uh and it selects which ones that you want yeah yeah I I admit that the the number of parameters is shorter in option one are we going to end up with possibly extensibility issues uh if we go with your option two here um for instance uh Carson just mentioned the the uh the negative index issue which added another parameter um are we gonna later find oh there's another thing that requires another parameter we have to add that now I do think that's a an issue because these are just spec uh words they don't actually require an implementation or suggested implementation don't think in particular I I get that but I mean the spec words still have to go and be updated and now"
  },
  {
    "startTime": "00:44:02",
    "text": "you're tracking three or four things instead of tracking one thing I think mentally I think that the mental burden is easier with with option one yeah the information that that a picker can operate on is essentially bounded by by how we describe the interface and if we forget to put something into that interface that would easily have been available from from uh just providing the parent node then we have made our life way more difficult okay I'm coming around to option one on this basis so um yeah any any other views okay then I'll uh remove this kind of uh concern then we'll go with the current approach okay so thanks for guiding us around to that that uh discussion Glenn yeah just so it was worth having it so we've all got that in our minds at one point in time that's fair enough thank you so my view but my current mental image of option one means that descendants append a um presents the current node as well as all structured descendant nodes to the Picker individually so the Picker doesn't get to to operate on the relationship between the uh descendant notes so that that would essentially be very very simple by saying the child's director just presents the parent and The Descendant selector just presents the parent and each uh descendant each structured descendant"
  },
  {
    "startTime": "00:46:01",
    "text": "node um to the pickup but the Picker does not know whether it's being used in a child selector or descendant selector that's that's true but I think the the way the spec is currently structured and the way the pr is structured means that the descendant selectors are actually defined in terms of the child selector uh so essentially we we enumerate a list of descendants and then we run the child selector against each one so it's a kind of it doesn't really matter you know because we end up with the semantics of the child selector really driving things yeah I'm not sure there is so much being shared between the child and The Descendants electoral but um yeah the same interface and we will describe the interface and the child selector because that's the first one we described so yeah I agree do I do I I do I I think we are all pointing in the same direction though yeah I believe so okay so let's move along to uh with Glenn's list sorry just before we move on uh Stefan is frowning and he had points about this index notion so I just want to check he's comfortable with the option one foreign that you exchange the numbers in your email and in the uh so"
  },
  {
    "startTime": "00:48:01",
    "text": "uh what I preferred when reading your email Wars number two is a now no no I must read it once again yes I prefer number two I prefer number two in uh here in your comment which is shown here yes definitely definitely number two uh I I'm I it's very unusual for me to to see uh a picker as an actively uh working acting uh element or a function or uh an algorithm which selects uh parts of a node list or a note list except the filter picker the filter picker uh in fact uh has artificial intelligence built in a plane index a plain member name is is not able to do picking by itself that's where I uh"
  },
  {
    "startTime": "00:50:00",
    "text": "fail to to to agree here it's it's hard I I'm I think we are complicating things a lot not not by the um by the atomizing these uh these elements of of the former selector but uh by that discussion of uh how do the Picker and the selector interact and it's it's hot for me and I think also for potential implementers in future to to get that right my opinion I would I would agree with the the idea that it's a a passive like the a member name on its own is passive um but I wouldn't necessarily apply that passivity to all of the pickers for instance the the filter picture is actually a delegate it is actually uh iterating through all the children and and um identifying which ones are selected yes I agree okay may I make a suggestion that we we go with uh option one as described here and see how it comes out because I I"
  },
  {
    "startTime": "00:52:02",
    "text": "think based on the discussion it will actually come out okay and I think it might actually satisfy Stefan when we get the final text yeah this is at the end of the day in a tutorial discussion and the best way to move an editorial discussion along is to edit to actually you know produce a subsequent draft uh and and see how concretely we feel about it yeah I mean if there's any comfort Stefan uh I share those concerns and as I'm doing the editing I will be sensitive to those concerns so I'm trying to you know make the description as clear as possible yeah at some point we will need to have this uh Stone energy discussion and maybe picker really was a pretty bad term to use here but uh yeah that's why I chose it so we we can make sure that we change it before uh casting it in concrete definitely having a bad having a bad option uh in order to force change is is a good a good strategy do we have enough time to talk about determinism oh yeah this is a two-hour meeting I got lots of time oh okay yeah so I raised this issue uh kind of separately from the current descript discussion you know the pr discussion because uh I noticed that our current spec current rap was overly deterministic such that it would even exclude some existing implementations so I thought we needed to loosen it up a bit add more non-determinism"
  },
  {
    "startTime": "00:54:05",
    "text": "so you say that at the start of the ticket you say that it cannot produce a specific result um I'm not sure I know why you think we should be able to reuse this specific result he's going way to the top yeah um yeah this one yeah um well the um that we've actually got that example um there in the spec and we can't produce that example result yeah so let's remove it from the spec oh but that example result is precisely what is produced or rather uh it's along the lines of the consensus of the implementations and we seem to be removing that consensus for no particularly good reason so this is the breadth first implementation and you're saying these these should be allowed by our non-determinism yeah Carson are you taught is your argument the breadth first versus depth first difference or is it the non-determinism of uh object members no the the there is no problem with the uh object members here it's just that the the um the yeah that it's just that this is a breadth first result and I just wanted to make sure that this is what we want I don't have a specific opinion here um but allowing breadth first so it's a little bit uh unintuitive to me but we can certainly opt that we want to do that yeah and just to be clear we're not"
  },
  {
    "startTime": "00:56:00",
    "text": "precluding depth first we're just allowing breath burst and you're saying that the the breadth first is the consensus of implementations yes well I think that settles the argument we have to allow it then I would like I would like to say that my uh my implementation is not among the consensus I think possibly mine isn't either but you know okay that was that was one item The Descendant ordering um just to loosen it up a bit uh then the the next one was the list selector ordering can we scroll down a little bit right so um yeah and this does go along the lines of the um iteration order for objects um you see it's possible to assume that the iteration order is not um expect by Jason but nevertheless to assume that it's predictable for any given implementation um but that's not the case because for for example in in golang the iteration order can change from one iteration to the next so I wanted to allow for that and that example uh shows a possibility you know that the iteration order could could be um uh for that list selector in current terms um two Pickers if you like could produce different orderings could iterate the um object in different different orders"
  },
  {
    "startTime": "00:58:01",
    "text": "so that's good from you yep yeah you know the one thing I I think I toss to comment on here is that um the reason why this is the case is is not mysterious at all and it falls directly out of the definition of Json which which is clear that you know order is cannot be expected to be maintained um when accessing objects members of an object um so so that falls out straightforwardly but I think it's important also to emphasize that applying a Json path does not uh reorder array elements so yeah whenever you say um you know do not count on ordering and objects it's probably important to make sure we I always make I always emphasize that yes array order is significant yeah yeah and so let's look at descendant selector ordering now um if you go down change please yeah so to reread this for a moment myself yeah it's essentially the same issue that um as you Traverse a uh a node a value than the order in which you encounter the children can vary from from one uh one picker to the next Kirsten your hand is up you want to um I'm sorry um yeah I just uh agree with uh it was what has been saying about the descendants Eric darling and then lastly uh repeated runs so if you have quite straightforward uh Jason path and value which can produce either"
  },
  {
    "startTime": "01:00:01",
    "text": "order we maybe should even say that and a given implementation could produce different orders uh on repeated runs just to make it absolutely clear that we're not assuming uh that implementations are deterministic I think that's worth doing I think that was it but you you now have examples that can be produced would be really useful to have examples that cannot be produced yeah yeah um so some array related ones can can deliver that yeah and the combinations of a raised descendants and and maps um I think it's getting pretty interesting when you actually run more complicated examples yeah yeah and with multiple Pickers in a descendant node list and uh yeah it gets quite juicy well I think in in the end this is uh to a large extent about what the descendants uh the panda does to the various note lists it gets from the various speakers at uh talks to so um for the the child a panda the the comma into the Pender uh gives an ordering gives a partial ordering for the The Descendants uh selector we just said we we are allowing bread first so that is going to be interesting um and um when the the results of the various Pickers are being put together which part of the ordering is maintained and and which part is is not so can you given that that uh"
  },
  {
    "startTime": "01:02:03",
    "text": "well if you have a a contains one two comma B contains three four uh situation can you have something like A1 B 3 2 4 um and so on I think we need to create some examples uh for that and and make sure that the the merging [Music] uh step we we have in mind for The Descendant selector does the right thing yeah I agree I think in terms of a plan I think we should not wrote this until the current PR is merged yeah we should do after the fact because we don't want to just drag out the current PR with all this complexity yes yep another aspect of this is another aspect of this is going to be um the test Suite or however we manage testing of this um yeah having listing out every possible permutation of acceptable orderings is probably not ideal um so we would want a better way to do that um but I don't know what I'm not sure what that is in particular um but we we definitely need to nail this down in order to implement some sort of test Suite okay I must confess that I need to read that issue again much more carefully I I cannot imagine uh situation where a single application"
  },
  {
    "startTime": "01:04:00",
    "text": "will will present with repeated runs uh different orders of noteless but maybe I I I have to read it again more carefully it's definitely weird but it does happen especially as as Glenn posted in here in golang the uh the the present in Json objects the presentation of the various members uh can be is non-deterministic in in their their sequencing many many programming languages have a you know a Content addressable array you know mechanism we do call it a map or a hash map or whatever and uh I I I believe it is it is occasionally the case that there is some Randomness and and many many languages which which provide this facility are clear that they do not guarantee the ordering and and there may be actual Randomness in the generation of hash sizes hash table sizes and you know test chaining into uh parameters such that yes this is actually observed in the in the night in the wild okay this surprises me that in in in practice uh with repeated runs you you'll have that non-determinism but I'm learning just learning well the main reason why you want this is that hash tables have anomalies uh when you sort all items into one bin or the majority of the items into one bin and you don't want to and to put an attacker in a situation that it can predict uh which bins are things put in"
  },
  {
    "startTime": "01:06:00",
    "text": "so you add some Randomness to to your your the hash function and some implementations add that Randomness per run um of of the the language and one added per iterator and if you do it per per iterator then it becomes interesting uh just as a anecdotal side note uh I keep track of the system text Json namespace uh issues in PRS in dot net and there was actually been a couple issues raised recently where people are complaining that objects were not serializing in the same property order between runs oh great yeah okay so um I think the conclusion of this is that we need to make sure we have a rich set of examples that shows the range of things that can happen when you combine um multi-level uh multi-level expressions uh okay what's next foreign right yeah okay I think we've covered all three of these points haven't we yes do we want to cover any of the other issues that uh that are notable and outstanding or well I think you know I went through the issues yesterday and it's not obvious that any of them are um still really as you said notable and outstanding"
  },
  {
    "startTime": "01:08:00",
    "text": "maybe we should just take a second and glance at the issues list yeah sure we kind of decided 255 yep okay foreign taking the silence to mean that our issues are reasonably well covered um what about 252 sorry which one two five two [Applause] foreign was that we agreed that The Descendant selector actually include self like just the side charity um selector includes only itself so from an expats point of view it should be called safe selector and self or descendants selector uh but that's a terminology thing again and I think that the the editors will throw various terminologies at each other for a while before we settle on something okay but I think it's it's implementation consensus that dot dot"
  },
  {
    "startTime": "01:10:01",
    "text": "does include the current node as a source of children to look at yeah where are we on extension points is that still uh in process yes yeah yeah okay just waiting for the spec to settle down exactly yeah good and how about 195 yeah I seem to be in the rough year um so most people seem to think that we should stick with singular paths for all of filter expressions I'm a little bit unhappy that some use cases may be excluded by that but maybe it's not that important yeah I I didn't detect that um that consensus personally and I was kind of going along with the drift of the issue of the initial proposal to include the you know food non-singular paths um but we can always add it later in the spec process yeah so the issue would simply stay open until we have settled the the current issues okay yeah I mean it's a little bit of a black thing"
  },
  {
    "startTime": "01:12:02",
    "text": "um the the of course it's uh uh better to have a simpler spec and and only allow singular paths at all uh but it's also uh weird to have an existence expression that cannot be applied uh in places where you might have multiple images so that that's uh just my general consideration here maybe we should have another look at the the implementation consensus to to find out whether we even have data that would support this decision and my personal uh thoughts on this is that I think it's fine for the exists expression um but not within filter expressions for example um I think I think having but then at the same time having it having like a a wild card in an exist expression but not being able to support that in a filter expression feels weird well exist Expressions only occur in filter expressions do you mean comparisons yeah as comparisons that's that's thank you Glenn being able to have them in existence Expressions but not comparisons feels strange but maybe it's not I don't know but for a comparison you want to have a single video so so having a singular hypothesis um kind of logical for an existence expression uh yeah it's nice to say does this object have any children yes if we allow"
  },
  {
    "startTime": "01:14:00",
    "text": "um multiple results within a comparison we would uh introduce the in operator through the back door I think yeah okay okay let's leave this open then somebody type a note to the issue summarizing what we just said yeah I'll do that foreign [Music] foreign says something like three days ago and eight days ago and so on um oh yeah okay so if you you hover over and we'll put the absolute timestamp on it yeah sure sure thank you if we don't have any more issues that we want to cut through shall we uh agree on"
  },
  {
    "startTime": "01:16:02",
    "text": "roughly when we should have uh follow-up interim meaning yes but but I'd like to um remark that we're a little further out from being finished than I thought we were um well I'm a little disappointed I I thought we were closer than we are um so ietf uh 115 is in November and at the moment it seems to me unlikely we're going to be able to do a [Music] we can do it that we'll be able to do anything with these really significant in time for that so I'm disappointed so when should we look to have another talk deadline is on the 24th if I get this correctly in a second foreign has been very noisy here at the moment can you repeat the proposal [Music] well there isn't a proposal right now but the internet draft deadline is on October 24th so we we have about uh four weeks to get our act together if we want to to make that deadline then we would still uh have two weeks for working with last call before the igf so this is kind of the most optimistic uh thing um can we fix the remaining issues in four weeks if we have some Cycles available I think we would be able to the editors also remember costs and we we need to get I regex through first"
  },
  {
    "startTime": "01:18:01",
    "text": "because uh Jason files depends on them right but fair enough we can't call them at the same time so if they're if the editors have you know some some resources to put into it I think that we could probably get through this in four weeks and I would love to do that okay we're kind of serialized on the uh Greg finishing the pr so it somewhat depends on his Cycles too yeah I should be able to have that up in the next few days pretty easily are we wanting me to add go ahead and add the wild card in this PR ere yes please it's mostly deleting text okay so I'll do that as a final commit great so would we um want to have an interim in week 42 uh so weeks starting the 17th of October yes [Music] hockey starts that that week I don't know what starts that week hockey the NHL it spins up in the middle of October I might be occupied yeah but I at the time uh it starts uh we already done I watched them delayed okay so let's do a doodle Poll for the seven for that week yep okay I'll sort that out after the call rage"
  },
  {
    "startTime": "01:20:00",
    "text": "easy are we done for tonight then anything else I don't hear anything else so thank you all we have had a few vacations getting in the way recently but these are getting fewer now fortunately we don't have people breaking their ribs like in the other working group I'm working with so please don't break your ribs and happy camping stuff exactly okay thank you everybody thank you thank you thank you bye [Music] foreign"
  }
]
