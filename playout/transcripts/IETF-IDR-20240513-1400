[
  {
    "startTime": "00:00:42",
    "text": "just so I let everyone know I'm going to give uh it about three or four more minutes uh that'll give you time to read the note well and uh perhaps get some caffeine in you I know it's very late uh for shaing in Finn uh for K it's very early so hopefully with enough caffeine we will be a caffeinated discussion today I hope we have quite a bit of discussion thank you for the comments on the list I have tried to revise some of this text e"
  },
  {
    "startTime": "00:02:28",
    "text": "e e e let's go ahead and get started this morning uh first of all for the record please read the note well this is an ITA of intrum we are obeying all the intrum information we are also so attempting to"
  },
  {
    "startTime": "00:04:01",
    "text": "work more like a design team with plenty of comments and reading Donald and I will be presenting this morning and um you will be uh hopefully giving us lots of good feedback good morning Nan good morning Nat Randy shiing Donald shaing uh K and Jeff the participation uh by particip ating you agree to follow ITF processes and policies this includes uh being aware that any ITF contribution is covered by patents and patent applications that are owned you need to report them read the rest of the um slide on the not well I'll give you just a moment hopefully you've all had a chance to read that if you have any questions about the not well please either ask a chair or ask uh the um busman uh we're glad to help okay we're going to dive right into uh sharing uh the design team three remember we tried to break this into design teams meeting we're trying to get cont uh comments on uh the breakup of the original flow speec feed2 spec into pieces this morning's agenda is uh a short review of the basic uh IP uh FP for basic I we're trying to get to in this uh May and June"
  },
  {
    "startTime": "00:06:00",
    "text": "uh something where we can get to a basic flow spec the folks uh so I will go through that first we're also going to cover what about actions in either extended Community path attribute and then look to have discussions on what happens with actions or ordering that's design team 3's work we're trying to figure out how to work on actions then there is design 14 and these are just four efforts where we look at non-ip filtering filtering for MLS or FSC Donald will cover l2vpn and tunnels and we've done all of this work for a while now these four design teams are looking at trying to get a basic IP the basic IP flow speec is a smaller uh is a small portion of the full flow spec material uh we found that the full flow spec that we'd adopted as a working group was complete which was our goal uh consistent and for the most part workable but the implementers came back with wow that's a lot to chew on for the first time so what I'm trying to do in these interims as both the co-author of the flowspec V2 spec and as a chair I'm trying to respond to those implementers by breaking it up into manageable chunks of the implementers can eat why do we want the implementers to have easily um worked on chunks because IDR requires two implementations to go to uh standard so our real focus is do we have the right amount of information uh"
  },
  {
    "startTime": "00:08:02",
    "text": "functionality in the basic IP flow speec V2 speec our focus is currently to have the current V4 and V6 filters uh from V1 current actions from the extended community and ordering user ordering uh the feedback we got from uh initial implementers uh is that was enough just to add ordering if you are an operator and this is not enough please let me know that has been giving me some really good feedback so is Nan and chuping and a shanen so the next thing once we have this basic IP then what we want to do is allow people to add things to it so the new flowspec basic model would be just the these current V4 V6 filters plus the current actions plus user ordering that seems to have a better fit for some of the denial of service attacks then other people would add like to ask more IP filters our original flowspec V2 speec had some additional filters and so what we want to make it easy for people to do is to add those filters to this basic uh prospec V2 the other thing people wanted to add is they wanted to add more actions actions which were ordered and that we will discuss today as the more IP actions in flowspec V2 the non-ip filters in action stonnell did some great work and we have some work for uh Ms and uh sfc so I'm going to Dive Right into team"
  },
  {
    "startTime": "00:10:02",
    "text": "3's Focus uh previous intrs have reviewed the basic IP and the more filters I will give a very short and so we've done three interims in April and May on this flow speec we will repeat some of that in June hoping to go along with an adoption call for the flowspec V2 basic we'll see how we're doing in June we will review this at ITF again the reason why we're doing this is we're seeing a lot of requests for flowspec v2 editions but uh people have been not sure how to frame them so let me briefly go through the basic uh flow speec V2 in case you were asleep uh or missed it uh because you're not you're most interested in actions remember that flowspec V2 is a combination of rules that are added to a firewall what we wanted to change from flow speec V1 is we wanted to be able to have user ordering and we want it to have deterministic because while flow speec V1 allows you to order by component it doesn't allow user ordering so you have a user order and for debugging purpose there's an identifier that's because some people may want to identify certain uh rule sets maybe rule 256 as something that goes with a particular customer uh then we have a rule match condition and a rule action the rules on top uh identify the rule match the action uh could have an action order at"
  },
  {
    "startTime": "00:12:02",
    "text": "the extended communities there is no action order but today we're going to look at what happens if we have an action order we have not included an action a name at this point feeling that people uh didn't really have that as a positive but I've left it here in case because it was part of our initial feedback okay what does the nry look like for the new flowspec V2 because flowspec V2 is going to be in a new nlri from flowspec V1 you have an L length and a bunch of tlvs each with that order identifier flowspec filter type now uh we're trying in the basic to get a set of filter types that cover our current flow speec V1 work last time I had proposed Ed an order and based on feedback I've changed everything past the filter rules Donald's uh l2vpn and Tunnel traffic uh is hierarchically uh designed in fe1 to to link off of a particular type but you notice we're trying to settle on uh an initial set of types we initially set IP basic filter rules to be the filter rules from V1 V2 no additions the extended filter rules to have a version so we could add new filter rules and then MLS and L2 and SSV uh filter rules I've reordered and Tunnel traffic so this go this type goes in the FL flowspec D2 filter type and there's a typ length value field which is follows"
  },
  {
    "startTime": "00:14:00",
    "text": "okay if you look at uh the components for the basic you would see that it has just component types for flowspec V1 and perhaps we'll add a TTL there was during our initial flow speec V2 work a call for adding TTL field now once we get to component numbers those component numbers are based on the type so for the IP component numbers we have uh IP components that we currently have with the extended filter we followed that numbering and added TTL Sid and uh Sid and the S IPv6 routing header and NR P for nonm p I've chosen to uh put 64 and 65 these component numbers could be starting with zero uh in the l2vpn they have indeed started with zero okay that's my quick review any questions on the component numbers that the component number uh definitions are unique to the types that we have uh seven type uh six types defined one reserved and then additional types should we change uh include them okay remember as I just mentioned that flow spec V2 one and V1 are ships in the night the general order of rule is the rule zero which is the assumption is permit all rule rule one to sumn is"
  },
  {
    "startTime": "00:16:01",
    "text": "the flowspec V2 with user ordering and after that we put flow speec V1 at a single user order number and ordered by components just as the last indication if you have the same user order number it's then ordered by component types and if you have the same user order and component number then you Al order by uh the rules found in each component okay any questions on the base close back V2 discussion before I dive into IP actions okay this is that was all review there two types of actions extended community actions uh where there there have been in the past generic transitive extended communities ipv for transitive extended communities and transitive IPv6 address specific the difference between all of this has been the way people have def finded it uh there's great deal of options on how to define extended community and certain drafts have picked uh certain choices more of the definitions for extended communities are in the generic transitive uh some of the IPv6 require the additional space the community path attribute is a path attribute that has been defined in the wi Community draft but it is a unique"
  },
  {
    "startTime": "00:18:02",
    "text": "attribute with the flow speec V2 so the idea would be to define a flow speec Community type and make the base header which is just uh has I will show you followed by just the flow speec V2 so let's look at what's actually in the flow speec at actions uh one are the pro we have uh flowspec traffic rate uh we have buy bites bu packets we have uh traffic actions copy or terminate the flow speec uh choice we have redirects we have classifiers from sfc this is a very small step of extended communities um a lot of them having to do with redirecting denial of service taxs rate limiting or various things in the there is one problem what happens if there is a failure in an action for example if you want to Mark something with the DSP and then re direct it what happens if the DSP marking fails or what happens if your rate limit fails and you're sending it you're redirecting it to something that can only handle so much rate so one thing we need to discuss is something we'll call an action chain ordering what happens if something fails so uh keep that in mind by the way this is the format of the"
  },
  {
    "startTime": "00:20:01",
    "text": "generic uh transitive Community High bite low bite value of six bits and for the IPv6 you have excuse me for the transitive extended Community who have a flowspec interface set which decides to for a specific set of interfaces uh filter after you've uh detected the interface and the direction so interace set is a very interesting action in that it's set as an action but really it groups says this group of interfaces plus this uh direction is what we're going to do it's meant to work with a set of filters uh or a set of uh default fault filters such as dropped we went through that in a bit of detail last week I encourage you to read that as well and again for V6 you have the redirects so let's talk about failure modes in the failure modes we learned about in network management for example in the configuration from net mod net comp you have failures which uh can occur you can have a failure that causes you to want to stop all the rest of processing for example the failure to Mark a DSP uh bite may cause you to want to stop processing or the failure to be able to rate limit a stream may want you to just stop processing uh you may want to continue"
  },
  {
    "startTime": "00:22:03",
    "text": "you want to continue you may want a conditional on a failure well if it's this type of failure stop but if not uh go back uh and you may have an All or Nothing in configuration you have an all or nothing I want all my configuration in or I want to roll back it's not sure how that might work in this network management so has anyone ever had in a uh Network example the uh uh flow spec that by an implementation stops on failure have you seen that na or man or k or Jeff yeah so our implementation if it can't install the rule I will install basically a pass for the action that way the rule actually continues rather than causes a block so this is a uh implementation choice of fail open rather than fail closed okay so it's fail continue on F uh on failure do you continue to do other actions uh so one of the things that uh our implementation also doesn't do is that the commendations are not allowed to just complete the intermix we only support very specific things together with each other so you get very simple things like DCP marking along with maybe another action like uh no traffic rate limiting that sort of thing but uh you"
  },
  {
    "startTime": "00:24:02",
    "text": "start trying to arbitrarily mix things like redirect IP redirect dver Etc aration doesn't support the full combinations my understanding is that other people do not support the whole combination of these a actions that uh let K do you know of any uh have you worked with the flow spec where these action stop or fail I think what Jeff explained was an accurate Behavior we have seen cases where we have had um interoperable interoperable issues uh particularly when you look at a bunch of uh collectors or flow spec collectors if you will um and uh and the controllers and in those cases uh of where the interoperability issues were arising we've seen cases where you know uh implementation at least from our standpoint would not install the filter so pretty much what Jeff explained okay um and yes we also Implement uh relatively simpler ones which is redirect to work or redirect to interface or U attach a label and forward it so forth and so on but no complex rule sets no chaining okay I think another thing that's worth highlighting here so we're talking about how at least two implementations do don't do complicated things right now and part of that just simply because you know the the specs have evolved basically little bits at a time and you know the vendors are solving very specific use cases what is going to be sort of challenging as you work through the ACO type stuff is sure you could have these very complicated rules about how things can go and what the behavior should be if it's not supported but the other half of the question for some trying to use flow speec is what does a given device in the"
  },
  {
    "startTime": "00:26:01",
    "text": "network actually do support you know so as an example if you support you know four different types of actions and you don't support all combinations of them uh it'd be nice for the controller to know that before it emits a flow speec route so that it doesn't try to send out nonsensical programming you know the ACO just means that when you receive it you can at least do something that makes sense but the second half of it is uh Network needs to figure out what it can actually do there is is the query on that um this ACO extended Community is trying to have us focus on that issue that je mentioned you have a whole bunch of of nodes you're downloading flow speec into them and you suddenly get a match that you expect but the command doesn't work what is is the normal attitude that the controller that's sting on this uh might do the default would be stop on failure don't don't continue on the deta might be continue on failure but this would say from a controller I'm expecting this on you're going to stop on failure n says if some elimination actions fail the simple action can be conducted for security analysis can you give us any more details on that Nan I don't know I'll read your chat room if your uh voice is problematic oh yeah yes uh I mean uh if uh we we our controller detects some uh text and we can install some elimination"
  },
  {
    "startTime": "00:28:02",
    "text": "actions in our rotor and together with the sample action but when we conduct the elimination action some of them are fail uh uh but uh uh what I mean is the sample action should be still conducted because our controller can use the sampled the traffic to do a further analysis on the attack instead of stop on the failure okay that might be conventional stop on failure meaning a failure means you want to do a a copy and that might be something you want to tell that your network that you're going to do a condition ask for a condition conditional stop on failure where you copy it and that would be uh number two um that's good to know that that's why that's in there Nan is that I understood that some people were looking to this this extended Community gets added to a flowspec lri and says this is what I'm going to do and passes along through a particular as or as confederations as you know at the edge of a Network many times things get pulled off that are extended communities and that might not be so bad in this case because it is really a uh extended it is something within a community or an as Confederation uh policy might add stuff at the next Edge but this is a proposal that I have in the in the basic draft to to try to add this type of concept um"
  },
  {
    "startTime": "00:30:03",
    "text": "anybody think this is a bad idea to add this particular uh thing to the uh to the basic uh functionality good morning inen um okay this will come back up I will try to send out the queries I've not gotten a lot of feedback but perhaps uh Jeff and I have been working on Jeff and ker and I and Shing and maybe n have been working on this you're not sure the ACT Randy brings up a very good point I'm not sure the AC action failures are exclusive that's an interesting point want to give me any more detail if if uh how that might work Randy Stop Plus roll back ah I got it I had intended roll back uh to be stop and roll back uh unclear thank you is there any others that are [Music] um are n okay I should have had thank you that's a good correction I should have had that as stop and roll back good point thank you Randy as always you catch the important details um okay let me go on I hope that you will think about uh this this was in this is"
  },
  {
    "startTime": "00:32:01",
    "text": "the one addition to the base proposal as a new extended community in response to what people have said okay uh let's look at how some of the generic uh extended communities have been added to for non-ip there is the additional of this ACO which I think is a a good basic and then there have been additions for the MLS stack that was included in the original flow speec V2 and the VLAN action and tpd action that are from uh flp ven it is my intent to pull those uh MLS fan and TI off of the basics but keep the the action chain ordering now these non-ip can be added it's just we're trying to get to a real uh simple base spec Donald always says to me when when working on a a draft together it's not how much you can add in it's how much you can also take out to make sure there's a clear spec so the first first thing took out the flow speec in the community path header it took out the user uh ordering of actions but I want to describe how that's working in case some people thought the ordered actions were important the question that we'll come back to with ordering is what is the def default ordering that we might use just a minute"
  },
  {
    "startTime": "00:34:01",
    "text": "let me go back I think I've gotten to the right spec here if you use a default ordering that says I'm going to order my actions my flow speec actions say say I have uh a TA traffic R bait rate bite uh action plus a uh redirect plus a remark that I'm going to order the actions uh that might be added to a particular filter remember these communities might be added to a whole uh group of filters in the lri I'm going to order the actions deterministically by number that's the default actions uh uh the implementation might have a knob to say I propose one versus the other so one of the pro what what do I mean by ordering if you think of ordering of these actions if you have traffic rate bite followed by uh redirect followed by something if if multiple communities get added to an N how do you deterministically meaning how do we Time After Time do the same thing with these actions um the idea is you have to have some basic order you have to have some defaults and some abilities to user orders Jeff do you want to bring that up now or do you want to bring it up after I uh after I think it's I think it's probably better to do it now to get give the problem and the before we give the"
  },
  {
    "startTime": "00:36:00",
    "text": "solution uh sure so part of the headache here is that our extended communities is just a way to Signal a thing but it has you know no context built into the operation so several of the things that we started off with the base flow spec RFC obviously apply to just what we have and even those we're starting to have combination issues when we start adding in the additional features which extend flow expect to start doing non IP type things you for example interaction with service chains tunnels Layer Two headers MLS Etc you start getting into actions that only make sense you know in some cases against very specific layers so like an sfc classifier obviously should only go with the sfc no feature knows part of its work vlans would you know be something that you'd address as part of the uh you know layer two type things but you start getting some of these weird hybrid cases where you do things like tunnels or you're doing uh redirections to things that are not just redirect IP but maybe CH change encapsulation and in those cases you start having the issues of well if I have a VLAN operation and I'm uh doing an L2 interaction uh and this is a tunnel am I interacting with you know the inner encapsulated uh thing or the outer encapsulated thing if you're doing certain types of of uh for example know tunnels across data centers so examples of how these things sometimes are layer specific sometimes they cross layers and there's not enough information available or space available inside of a extended Community to address what layer that we're doing so okay uh I think for my next attempt at this I may try some specific examples I went to this summary format okay so because you have these uh"
  },
  {
    "startTime": "00:38:04",
    "text": "actions that we've had in the past that can interact we uh the suggestion was that we go to something where we could order them and the there's no space in the extended community so we look toward a path attribute which is for communities it's in the wide community draft but the basic uh path attribute for communities is a fairly simple it has a tlv within it it has flags and then it would have the action tlvs these flags um help us in that they discuss whether it's transitive across Confederation boundaries or across as boundaries and that can give a hint to those networks who are pulling and getting rid of uh communities and and that's a a common thing so what would the actions look like inside well there would be a common action TV header to give some action order okay uh there's a global action order on it that's one two3 and perhaps a dependency chain ID now dependency chain uh is a more complex thing uh for example um you might want to do the sfc actions followed by the vland actions or you might want to say okay uh I'm going to redirect uh and do s uh DS uh CP the dependency chain would say Okay chain this to the other uh actions then you have a sequence of sub"
  },
  {
    "startTime": "00:40:03",
    "text": "TVs the action the length um type and value where they can be actual actions so you notice with this format there's a lot of complexity in in that has been requested in the actions uh but there's a lot of work to do to see if we have the right forms for the things that people do so one question will be what do you do and does this type of user ordering work here's examples that we've seen in proposals now this first one was done based on the community path attribute for wide but it shows functionality that's that's working they want to met match and set an attribute the attribute uh can be a grouping could be a community uh there's a match and don't advertise that was a set of functionality shown by the RPD draft there is uh a draft coming out of the debt Network to have a deterministic latency action forward but put it in this queue or map to this TSD stream where these actions have certain functionality that have more parameters this is not the complex case of the highly dependent uh excuse me where multiple actions have dependencies this action proposals are the simple where there's simply not enough space to give uh the details so if I don't any questions on the ones that we found that have just"
  },
  {
    "startTime": "00:42:01",
    "text": "simply need for more space than the extended Community has any go ahead Jeff yeah so at least half the headache here is that most of the actions can be encoded in something like an extended Community inter terms of space it's the ordering semantics you know you're trying very hard to supply some of that but extended communities are severable which means that those different routers are able to manipulate the things inside of them without you know caring about uh the whole package so trying to accomplish the order requirements in extended Community I think is an interesting challenge yes the only ordering that one can do with extended communities is uh how is that you could have a default order and the default even if you put in a default order for the basic one there's going to want to have implementations that say that's not my order give me a knob um but it is the challenge that we had because order to really impacts these actions so that's our first challenge is order for if it works and then order for success and failure and uh dependency when you modify the packet um new proposals from cats um savnet um and and even uh follow along the line of the dscp we're going to modify the packet and then we're going to do something with it"
  },
  {
    "startTime": "00:44:01",
    "text": "later so Nat do you want to give your example I thought it was a really helpful example about what happens when you modify the packet would you be willing to walk it through uh sure sure uh so um for example that oh uh the packet that was this cp0 that is the first rowle rule 100 and if we do some actions on rule 100 which uh we set thep to four and go to for example if we have a go to action then go to rule 400 then for rule 400 is matching against the4 so um if uh so um when when do we do the action uh will will have different will uh the rule for hit will have different outcomes if uh uh which is decided by uh when do we apply the actions to the the packet uh if we apply that just after rule 100 for each uh then the packet will be modified to thisp before so rule 400 will match the packet and do something else and if we accumulate all actions for the matching rules and do it at the end then Ro 400 will not match that package so yeah we might need to consider that uh behavior for each rule so yeah that's it yes um now n has a concept of a go-to rule 400 uh as Jeff says that's quite a jump from today but the one thing that his"
  },
  {
    "startTime": "00:46:01",
    "text": "example brings out in a short form is what when do you when do you do the the actions in my mind as I've been writing the spec you do you get you hit a match you do an action you change the packet the packet as it continues through the actions is actually then modified most most of the specs I've read seem to have that uh that uh concept that you match the packet and then you go on uh if you don't that's a really your packet uh your packet has different changes so if one implementation does it while you uh immediately another appliation does it when you bundle them all up there's a problem [Music] um uh do you want to mention your comment Jeff in sure whole point of put up the comments is to see where they fit in the flow so goto and accumulation both have some interesting consequences when we're talking about uh firewalls distributed by flowspec the whole point of flowspec is that we're Distributing these routes in bgp and that means that they're subject to bgb distribution headaches so if you're doing a static piece of firewall configuration you know you spend a lot of your energy as a firewall administrator trying to make sure you have all the rules in the right order installed appropriately uh and do a atomic commit on them because if you mess up the ordering if you mess up the capabilities or you do something else well you start throwing away traffic or"
  },
  {
    "startTime": "00:48:01",
    "text": "doing you know the wrong stuff with flow speec there's no guarantee that you have all the rules at a given period of time so there's sort of a rule rule set atomicity that's not present in the base flowspec protocol or even the stuff we're talking about for flowspec v2 now we're getting these things one at a time and for the original dos cases that was mostly okay you know even for the mostly okay cases if you had dependent rules well if you didn't have the dependent rules present all at the same time or if you have as we've talked about in the last couple of interims installation problems the headache that you have is that you don't even get for a specific set of impacted traffic level atomicity so this is just sort of highlighting flow spec right now doesn't deal with this atomicity know the same level that a firewall would if we move this to the uh discussion of the story of accumulation now in a firewall if you're saying know take action a then action B then action C well that's configuration depending on exactly what you're doing uh the things may be input on separate your know lines but they end up compiling down to a single operation in the firewall because you're trying to minimize the number of passes through the firewall infrastructure and if you don't have it passing through the same rule you end up having a flavor of either the packet gets examined by further firewall terms or in some cases uh may actually require a packet recirculation in order for that to take effect so that just in terms of accumulation you have to be very careful what you want to accumulate and what you expect the sort of performance impacts to be and the second half of this is highlighted by the go-to you know if you have these things uh that need to actually have the full"
  },
  {
    "startTime": "00:50:00",
    "text": "set of them so if you're cumulating rules ABCD well if you don't happen to have rule D at the time that uh the packet's hitting the network you're going to process ABC hopefully that's okay or if D can't be implemented by a subset of the devices hopefully that's okay and go to is the same way if you don't happen to have rule 400 on your system what's the expected Behavior you know how do you basically make sure that the program is complete and you know with these things being distributed as B2B routes I'm not sure that's a good assumption we should start with and sue your make is now on excuse me uh my apologies were uh I'm going to pick us up on so we're in the midst of discussing several questions uh that I need you all to think of because it's if you've got experience like Nat and Nan and chaing and and ying xen and Donald and G you you have experience about what happens when things go wrong um so uh some of what Jeff and I are trying to bring up are these basic questions what happens when actions interact the in the extended communities um the default is to pass all the traffic um the default filter match was to drop uh but we have known"
  },
  {
    "startTime": "00:52:02",
    "text": "interactions between communities we can work Beyond it as Jeff was just describing using user uh set actions uh but this complexity is challenging and has some of its other things so we first uh implementation or the first basic will focus on the interactions inherent in extended community and in the specs we find that there are the functions that are listed there a lot of them interact the traffic base the traffic action the redirects uh they all interact we currently now the implementations deal with it themselves by not letting multiple uh actions interact by streaming off communities uh taking them off the packets yes Nan uh the go-to may be to evaluate the next so that really brings us to what does the spec say uh currently the the implemented say I just want to do what I'm currently doing now the problem with that that we had is what one person's currently doing now is not what another person is currently doing now and that has led to problems there two ways Around It Go by order uh uh have excuse me three ways go by order"
  },
  {
    "startTime": "00:54:01",
    "text": "uh have a single action only um you know buy or beware with you know the current situation uh that's true there's also interactions in V6 so you can't just go to V6 we really have um yes uh do you want to mention the terminal action Jeff go ahead I know just that we already have one yes you can the terminal action says okay stop with this one don't go further if you got it um so all of these interactions are currently a problem and where we started out to try to get a user or uh user defined order that we could pass in a community or a community path attribute this is the order I want my actions to do and that that will solve the problem you know the flow speec of V could solve the problem with user order actions to fix this problem however the feedback is I can't get to community path attributes what can you do on extended communities so we've given the the option of the action chain ordering we've given the default ordering for numbers we need some sort of feedback uh from implementers and from you all as people who know what happens when the network has problems uh I'm going to ask you to think about it but if anybody has any experience uh one of the problems with it is you may only want to order certain"
  },
  {
    "startTime": "00:56:02",
    "text": "communities uh K I think you said you only did certain orders of communities that's correct right and uh do is that by application or is that by General flowspec V2 uh excuse me flowspec rules uh it's by General flow spec rules we ad heard to the flow spec RFC as much as possible okay so the flowspec V1 rfcs does not uh cut out any of the actions but it it uh does have the terminate function which some people say okay you got here stop processing uh but the terminate function has problems the more that I pull on the threads here folks the more that I say okay is flow speec external communities good enough for the basic IP the more someone pulls out a particular problem uh G do you want to mention yours uh verbally the go-to yeah uh my in my understanding can you hear me yes I can you're loud and clear yeah yeah yeah in my understanding the the goto uh room change some of this existing uh flow back filters operation like currently we use end between all the filters right but go to allows you to skip some of the filters just to go to some uh to jump to some uh filters maybe at the bottom so this a"
  },
  {
    "startTime": "00:58:00",
    "text": "uh change to me comparing to yeah it is a change the the the current filters add up the idea is you start with a full stream of data and then you cut down the stream based on the filters uh the terminal action that stop says stop fil stop processing at this point tends to stop the thing but it doesn't the and is a guaranteed uh function because all you're doing is cutting down the flow further and further uh the requests for goto are scary thank you g okay but we've had requests for that different ordering for skipping uh we're giving you a lot The Proposal that's in there is very uh in flow spe V2 is to go in order of the community extending communities by the type that's just a default order um to still obey the ter terminate and to uh perhaps add this action chain ordering that that's the basic uh okay I think we've gone through the action failure uh what I've given you some examples of some actions that can't be added by extended communities uh one of [Music] the things we've seen I've seen in the proposals is uh uh lack of space for parameters and"
  },
  {
    "startTime": "01:00:00",
    "text": "dependencies dependencies is a very uh complex concept that is saying I want to do action one and then if it succeeds I want to do action two but if not if it fails I want to go to action four and that's example I don't know if it works without dependencies because if rule one works and let's see if I can bring up no I'll just go Nat's example has different actions based on whether um you have it the dependency is that rule one matches you set the dscp and then the rules follow so there is a dependency on correct actions based on what you said that's one way of looking at dependency dependency can get highly complex okay um the path so I'm going to stop there have I missed any of the discussion on actions um it sounds like that I need some really good use cases to talk this through I used the simple one from Nats and the verbal ones that we've been doing any suggestions how we can work through a minimal set okay uh I'll try to work through some examples uh where uh the the the actions"
  },
  {
    "startTime": "01:02:02",
    "text": "in the community path attribute uh we will pick up in the future uh because we're focusing on getting the actions but if you go to that you have a whole bunch of questions about uh how you handle the community but we'll pick that up I've I've listed these questions and we as Nan's example n Nat's example gives us we need to have some understanding of dependency okay I'm going to pick up the second piece of slides from uh the from the non-ip stuff there is in the uh flowspec V2 original an MLs set of uh filters uh and actions and so I'm going to briefly go over that then Donald's going to take the rest of the time to go through the l2vpn and the flow spec tunnels the non the filters I mentioned there was a label match based on the actual label which gives you range for before after uh they're just uh the same type of ranges you have in IP that's what the operator does and then it has a matching on experimental bits the sfc does not have any match filters so with that Donald I will go to your uh l2vpn okay um let's see yeah I'm not sure I'm"
  },
  {
    "startTime": "01:04:01",
    "text": "going to really need all the time you've allocated to me but uh okay whatever just tell me and I'll uh do you want me to run the slides or do the slides okay so these are these two drafts one of which is uh General really Layer Two and also Layer Two inside VPN and the other is really General tunneling the file names are somewhat more specific the list of authors here is a merger of the author list for the two drafts next slide so this is a s a document dependency thing uh showing what uh components and things uh each of the uh the the two drafts do use that are defined in other documents I think that's uh reasonbly straightforward uh next slide so initially talking about the uh quote l2vpn so it it really covers uh non-vpn cases uh and what it does is uh extends the safy 133 to a 2 which is A6 rather which is the one which is defined for I it says 802 is sort of the name of that a intend to include ethernet u in general and it um also extends and renames uh safy 134 which is currently defined in the registry as l3vpn dissemination of PHP rules there's no particular reason for that safy to be restricted to layer three so it just renames it VPN and it allows it to be applied for uh fe25 so and anyway uh it provides various optional matching on uh all3"
  },
  {
    "startTime": "01:06:01",
    "text": "headers that appear after the L2 headers the main thing it adds is matching on the L2 headers but you can also uh and that uh to require also to match following L3 headers and it defines 13 match components in a new registry and two new actions which are defined as extended communities so this raft is passed working group last call and is a awaiting implementations next slide so uh this is what this looks like the nlri so if you have the VPN case there's a routing discriminator to indicate the VPN that you're trying to match the traffic uh inside um and if you just want to match directly on the traffic uh not in a VPN you can uh is not present so it depends on the safy uh so the ordering of the other fuels is a little odd the next thing is an apy which is two bytes and then there's the L2 flow speec length and the L2 flow speec uh and it is all the this draft is written to be kind of General Lous the null case uh not sure just how useful that is in all cases but whatever uh and whether or not there's a an L3 uh flow spec and you can tell how long it would be from the overall length and the length of the previous Fields whether that's there or not is sort of indicated also by the L3 ay so ay zero is reserved and means there isn't anything there uh I mean it's generally reserved for all purposes that a z is a reserved value and it would indicate there's no no match on layer three stuff after the layer two headers that you're you're matching next"
  },
  {
    "startTime": "01:08:03",
    "text": "slide so these are the components that are ated uh I think these are mostly pretty straightforward ether type source and destination Mac uh daap and saap are the destination and Source service access points just if you have the LLC format where you have these uh access point U basic uh protocol identifier is what I want to say uh VLAN ID uh I'm not as a typo there sorry that means should uh then there's the uh the VLAN priority control uh Point uh which is the priority value uh there's a three bit priority in the VLAN tag and that's those by implication of the outer ones and there's the inner VLAN ID and inner one if you have double tagging which is quite common there's also a drop eligibility bit uh in there and exactly what that does differs a little bit by different in different implementations but you can check that and then uh these days there's um a u redefinition of all it's currently optional of the some of the bottom bits of the first bite of the MAC address that's always been the case that there's a multicast or actually officially called groupcast which includes both multicast and broadcast uh bit that's are still there and then there was a local bit but they've added a couple more bits and there's this optional uh thing uh where you have can have uh different subsets of what were the local uh addresses and have some of those be Mac addresses that are allocated by uh local protocol for for uh Distributing uh Mac addresses or things"
  },
  {
    "startTime": "01:10:01",
    "text": "like that anyway these are basically tests on these bottom bits of the first bite of the MAC address which may be more convenient than doing a check on the entire Mac address uh next slide so there's those communities which are used in the level Layer Two act uh matching and then there's two actions that are added now you probably should maybe should have had slides for these uh the first one is called VLAN action and uh it basically is a expended community that enables you to encode uh various operations on the vlans um and it assumes you might have you know single or double tagging so you can do things like uh push another VLAN tag onto the frame CA it essentially be inserted after the Mac addresses and before the rest of the frame quite likely before an already existing VLAN tag or or not uh you can swap the Inn Outer VLAN tags you can pop the top level VLAN tag off of the frame and uh interestingly enough if you look at the definition of this VLAN action wondering if I can actually uh share a screen from my machine uh does that work uh uh maybe not uh let's see uh not sure how that would work oh well you know anyway uh if you go look at this thing you can actually there's actually it's actually a double action uh there's uh you can do two such actions as I was speaking about so by uh you combining these things you can you could swap the the uh inner and outer VLAN then you could replace the outer VLAN with a different one uh you could"
  },
  {
    "startTime": "01:12:01",
    "text": "do a variety of interesting things uh with the VLAN action and uh that's sort of interesting because uh it doesn't actually talk in the draft about what happens if you're trying to do something and that assumes there's two vlans and there's actually only one the draft refers to the outer and the inner so I guess maybe if you have only one VLAN they both refer to the same one which is interesting uh the other action has is tpid that stands for a tag protocol ID so uh it you know people may be well aware the standard uh C VLAN is ether type 8100 um there is also this service VLAN which is 88 uh alpha 8 uh ether type in HEX and if you look at the 802.1 specs uh you would never have two c two CV lands in a row it's clearly not allowed by the 8021 specs even though everybody does it and you if you want to have two VLS in a row you have to have a service VLAN followed by a customer VLAN an S VLAN followed by a CV Lan so uh maybe there are pieces of equipment that uh enforce that there's also the fact that I I don't remember the exact details but I believe early on uh the service VLAN concept when it was first being proposed was illustrated by using ether type 9100 and sort of an analogy to the 8100 and in fact many people use 9100 for the service V land in fact ether type 9100 has never been allocated and at this point it was sort of it's a kind of a poison VLAN and if anybody ever used it it probably wouldn't work very well because lot of other pieces of"
  },
  {
    "startTime": "01:14:01",
    "text": "equipment might interpret it as a service VLAN U nevertheless uh 802.1 steadfastly refuses to reserve that ether type because it was never officially allocated so they ignore the common use of it so anyway if you you have you might usually have something coming along with some uh VLAN tagging and be about to forward it to other equipment which would like a different ether type to be able to recognize that VLAN so the TP ID action lets you change the ether types indicating the VLAN and actually it's generally you could plunk an arbitrary ether type there but it likely to cause problems if it's not a a VLAN one and the trill has uh fine grained labeling basically Trill uh initially proposed using double tagging with CV LAN but since that violates the 802.1 standard even though everybody does it 802.1 insisted that that that the trill standard couldn't say that so Trill ended up uh burning another ether type to generate the trill fine grain label so that it could specify double tagging uh with its own ether type under ietf control rather than trying to use the CV Len ether type which is under i e control anyway more than enough about the tpid action for changing The Ether type on the VLAN tags uh next slide uh so that's basically the whole story I've covered the things that are in the l2vpn uh just talk about a little bit more about that so it basically comes along and it uh matches uh against the L2 headers with the various components there and if you've indicated it can match the level layer three beyond that it's written pretty generally so you can"
  },
  {
    "startTime": "01:16:05",
    "text": "in which case it always matches and why would you want to do null no Layer Two only layer three matching you could encode that as a as a regular flow spec perhaps more easily but maybe there's some piece of equipment which will only allow you to use these VLAN operations if it's uh the Affy safy that indicates the the layer two stuff should be uh available so uh you know it might be reasonable to in that case to have uh this use the F ay for the layer two even if the layer two matching is null and you're only matching on layer three but then having doing an action on vlans which are kind of a layer two thing uh anyway moving along to the nv3 uh initially was oriented just towards uh some things from the nv3 working group but it it covers uh currently a wide variety of tunnel types and it's easily uh extendable for other tunnel types that people want to do there but there's specific mention of the all the types listed in on this slide for in terms of tunnel types uh it lets you do component matching and so forth on the tunneling header fields and also on headers that are beyond the the tunnel header uh and of course it's indicated by uh afy safy and the uh the top level ay saffy indicate the what outer header you're trying to match and then there's a provision for the U header so the the Safi indicate this is 77 and and the outer one would be indicate IP V4 IP V6 or you could do a layer two matching on"
  },
  {
    "startTime": "01:18:01",
    "text": "the outside if you want uh this draft creates a new registry for the tunnel header components I I think I mentioned uh there's also one for the layer two components created by the first draft and it's also has passed working group last call and is awaiting implementations next slide please so this is what it looks like uh there's an overall length there's the tunnel type which it uses an existing tunnel type uh registry I believe uh then there is an octet of Flags uh currently there are only two flags defined there so there's six bits that could be assigned for some purpose uh one bit indicates that it's the VPN case and in that case there is the routing discriminator 8 by by routing discriminator is present to indicate the VPN excuse me then there's the length and the outer flow specification uh which depends on the outer the AP uh and then then just the length plus the tunnel heter flow specification and in in either case if those are are no uh they would always match whereas that the two are ended together and then uh whether or not you want to match things after the tunnel header uh there it's indicated by a bit in the Flags the uh I indicates as an innerflow specification so uh if that's present then you have to provide an an apy for that uh and the length and the interflow specification so uh that's the overall structure uh next slide so these are the uh components it defines which are all for matching headers and in some cases the component is applicable to more than one tunneling type if they're the same sort of thing"
  },
  {
    "startTime": "01:20:01",
    "text": "like uh basically the first thing there vnid is variously called vs ID or vni depending on whether you're using vxlan or whatever and basically it's the tenant ID some cases I've annotated these as to uh which tunnel type they apply to Tunnel header Flags almost all tunnel headers if the tunnel header is if there is a nonn tunnel header do have some Flags in them so there's this one component type for matching against those no reason they have different component types for different kinds of tunnels and then the rest is all fairly straightforward um I don't even off hand immediately remember what NS and NR stand for but if you go look at the l2tp V3 spec it defines what they are there uh next slide so here's an example so this is IP and IP which is a kind of example where there's a null tunnel header you got IP and IP whether it's you know whatever combination of version four and version six it might be uh there's no nothing between them um and you would have there's Provisions where you can match on the outer IP header uh depending on if you you specify ay one or two or if you specify a six you can match on the L2 headers and then option match on the outer IP header uh and then there's the optional you can have an inner flow spec to match on the inner IP header including the inner uh things like uh the UDP or TCP headers and things like that uh there's a question see uh that's not related to this uh so that's a very simple example uh something you can do with the"
  },
  {
    "startTime": "01:22:00",
    "text": "uh what's specified in this draft and the next slide please give a slightly more so this is a vxlan so uh very similar uh in the vxlan there's always a UDP header uh and so you can match on the outer IP and UDP header uh you can optionally have the if you selected it you could have match on outer L2 stuff if you want then there's the VXL hitter itself so that has the tunnel header flow spe and the components there usually fairly simple I think could match against things in the tunneling header and then optionally you could have an inner header to match against uh the fields that are uh after the VX l so vxlan is uh defined to have an Ethernet heter Rait so there's a basically ethernet Fields there and uh you could possibly match on the IP header after that optionally if you wanted to so those are a couple examples there uh next slide I think that's most of the material I have here's the summary chart okay so this is little uh full of smaller print here this shows the different documents down the left actually the first two are RFC NRA and then uh for various safis across the top uh What uh you need to what you can specify there for the various uh Affy saffy combinations and down the right is what the components that are sort of defined by that draft so you have the there's the ipv4 and the IPv6 component types and the rfc's the l2vpn adds the L2 Flowback component types and the Flowback nv3 draft adds the tunnel header component"
  },
  {
    "startTime": "01:24:04",
    "text": "types so I will that's my presentation and I'd be happy to answer questions to the extent that I can thank you Donald for the presentation Jeff is go ahead with with your questions so Donald uh this is past last call and question I guess I have is uh implementations are you aware of any at the moment uh not right now no so okay I guess this moves to the interesting question of uh so you're basically saying here here's an embedded 8955 uh flow speec inside of the L2 as the example what do you think should happen to your current document when we do flow spec V2 and get a different n format uh well I would say that well these these documents are I think they'll be fre one round for a while so these documents hopefully will be implemented and perhap should go through but in in terms of what's Incorporated in PH V2 I think these are capabilities should be included but there's no reason for the formatting to be uh you know the all the way it is here uh I'm not sure what the the right way to do it is uh how you know there's a Temptation Of course going to a new version to make things more General but uh which might be good like the these uh things allow effectively nesting where you have a flow speec inside uh another flow spec almost uh and you know this only goes two layers but you"
  },
  {
    "startTime": "01:26:00",
    "text": "could imagine more more than that or something but uh it's not clear that's really uh useful uh I don't know oh that's that's sort of the double motivation for my question so flow speec V1 part of the problem with the format there is that we have no ability to add additional stuff in there so as an example like TTL we couldn't add TTL to the IP stuff with plus spec V1 the you know protocol format doesn't not permit it so if uh the L2 mechanism you're defining wanted to be able to match on TTL it can't use you know the flow speec version one stuff it would actually have to upgrade itself to flowspec version two so that's one as I might mention that all these components are tlv they all have lengths with the the newly defined ones the layer two components on the tunnel header components yep and that's great that was sort of early proof of concept for what we're discussing here today for FL speec V2 uh it was mostly the encapsulated flow speec uh know V1 for the layer 3 match that I I'm talking about okay yep that's true okay and I guess the the second half of the the question is part of what we're looking at as the broader flow speec V2 work is trying to do at a very generic level to some extent what you're doing in these two documents you know be able to look at tunneled content as an example uh do you find it possible that if we come up with a good format and there's no implementations of your existing format is there a motivation to move to the new format or know where where do you see that going I'd be happy to consider that I mean yeah I uh okay if there's a better way to express it uh until publication is requested the working group decides to okay improve these drafts they can do that"
  },
  {
    "startTime": "01:28:01",
    "text": "okay no objections that was the the question I was looking to get the answer to thanks that takes us to the end of our presentation for the actions and the non-ip uh work we'll start these again in um June uh please watch the mail list we will follow the uh order given in our presentation just a minute I'll bring up that set of slides so you can see it it'll be starting on June 3rd it'll run for three weeks so I hope that you will join us I hope you will give us some feedback on uh what we should do uh the base IP is the real key thing we need to know where we that uh we have the actions designed correctly for the Bas I that we're solving the problems that flow piic V1 had with interactions between actions and ordering I will bring that up on the list and see if we can work on that the whole purpose behind these design teams have been to try to dig into the basic and see if we can actually get the basic out and uh approved as a working group draft the chairs will look at that and see if we can start a a working group adoption call all of this uh thank you for your time and I wish you to have a good day anything else Jeffer ker all good thank you nothing here talk"
  },
  {
    "startTime": "01:30:02",
    "text": "to you soon talk to you soon bye bye byebye"
  }
]
