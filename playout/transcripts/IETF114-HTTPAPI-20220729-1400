[
  {
    "startTime": "00:00:04",
    "text": "foreign foreign sure no I it's only 10 hours of blind really nine ten yeah and also it's Japan [Music] which is cool yeah that's what I meant about hearts yeah it's kind of all traffic is expensive right now yeah but the Japan yeah like you said getting into Japan might be a problem"
  },
  {
    "startTime": "00:02:03",
    "text": "how long did it take you to get here awake with your paddle boat eternal life I was I was in London last week so okay that took 30 hours 30 35 yes I don't know too many Boston and Japan is easy there's lots of direct flights well there used to be lots of direct flights it used to be a 767 11 hours but who knows what they're doing now I will move the mic closer how is that any better all right uh people have stopped coming in let's get started share pre-looking slides all right uh welcome to the penultimate session of ietf 114 an ultimate is one of my favorite words when my wife says did you take the last donut and say no I took the penultimate one there's one left for you anyhow um if you haven't already signed in via the medeco thing please do so obviously um here Daryl is remote As is Mark Nottingham can people on remote hear me better I can hear you fine but I wasn't having"
  },
  {
    "startTime": "00:04:01",
    "text": "a problem before right okay this is the note well um if you haven't seen it before it's because you've been late to all of the other meetings or your eyes weren't open yet be good to each other don't hide patents uh we have a process we have a process someone so uh meeting tips everyone should know this by now also uh sign in Via meet Echo if you're in the room there is a take the mobile phone app starting the QR code that's on the back halfway through the room or outside the room if you're remote please keep your audio and video off until you're speaking uh and it's too late to go out and buy a headset now but next time uh we have an agenda it was posted in the data tracker uh media you know again if you're just learning this stuff now it's probably too late so just watch and raise your hand if you want to talk okay we need somebody to take notes thank you Martin um yeah okay we don't have to explain how to take notes Martin's an expert foreign next topic is agenda bashing I think we're going to be done early so I don't think we need to shuffle the agenda around it's and if there's other topics that come up under the any other business at the end I do think we'll have time to do that but does anyone have any concerns about the agenda okay Roberto are you ready"
  },
  {
    "startTime": "00:06:02",
    "text": "hi everybody can you hear me thanks yep um I can hit the next button or we can Pest Control to you whichever you prefer no it so okay everybody Rec limit header is almost complete as we editor think please move on the goal for this draft is to communicate service limits so clients can stop before being traveled out and the basic goal was to align all the original existing fields and stop headers proliferation so we didn't want to invent a new way of doing just to consolidate the shape in which something already happens and we added another field to express limiting policy move on so on the left you can see what's currently on on the web and underwriting three new fields uh that we have in in our case with the additional field with the policy and that is instead of structured field with many items"
  },
  {
    "startTime": "00:08:04",
    "text": "next this is the shape of the actual field I think you already know that next and let's go to what the technical choices is to implement design a design similar to reply after and using structural fields and we don't want to mention infrastructural concept like connection because you don't know how intermediaries implement this kind of infrastructures so maybe you can have every Clinic Fields but connection can be aggregated multiplexed by intermeasuring so you could not rely on the concept of connection of connection using replanting tools next we added privacy configurations and we got a lot of more a lot of interesting in their fields thanks to uh especially Mark Nottingham and to all the folks that supported this specification in the integration period next and so we are currently two open issues the first one is not to allow rate limiting fields on trailers because no one uses them and it's way too complex to Define all this Behavior the idea is that if tomorrow through someone wants to extend rate limits to trailers is welcome to do it"
  },
  {
    "startTime": "00:10:01",
    "text": "and then did only step between us and the the last call is that the con The Proposal of combining all fields in a one structured field next well we have been asked to do it and we tried uh to accommodate this request there is a long maybe merrily spread but me and Alex finally decided not to support this change this is because almost all platform and middleware decided to use in time and it this practice as more than 10 years to use separate integer valid fields so there is no operational experience in providing and consuming this information in in Combined form when we try to combine information in one single field uh we were asked to separate them because implementers found that confusing and an important thing for what's the current AP ecosystem the structural field parts are not available [Music] and in general we do not advise a processing number item structure field with reg X so we try to accommodate this requests but the current API the system current implementer current consumers and"
  },
  {
    "startTime": "00:12:01",
    "text": "current products um do not support while this kind of change so um my our opinion is and is to be consistent with the original goal of this specification and try to consolidate a long-standing practice to provide something that must value for current implementer I think that in in the future if the current ecosystem changes we could be open to make a new specification for rate limiting fields and providing a way of combining the information but in this case we think that the the result would just be to have another standard that nobody uses so the first goal for us is to consolidate the current ecosystem around the specification in the future is implemented field that there is um some operational experience and provide feedback a positive feedback on a combining the field we can make a red limit big Maybe but currently I think this is not an option we want to gather and join all the implementers existing implementers under one"
  },
  {
    "startTime": "00:14:01",
    "text": "in the future one will have these one Consolidated community on rate limiting field if the implementers feel or if the work group things that the ecosystem is ready for an updated specification we will have a Consolidated group of implementers of this specification of this pack and we can move the Consolidated Community to a new uh improved Maybe field but today we think it will just be confusing so um net but I think um and finished all right let's take some time and discuss this issue because in the chat it's there's some contention so Mark you want to go good morning it seems to be working I don't know um so Roberto I understand your your arguments here but it's just not appropriate to have you know make a decision that is made on arguments or or on data that is not brought to the working group by the people making the arguments um that makes me really uncomfortable um I think we need to have a discussion as a working group and talk about the pros and cons and make a decision as a working group not just have the editors say well we've talked to a bunch of people and we think that it should be this therefore we made this decision so so let's do that please okay uh Martha sure I don't want to overstep"
  },
  {
    "startTime": "00:16:02",
    "text": "the freedom of decision of the working group clearly on the other side we have been asked to investigate try to accommodate and we did it and honestly the result we had was this one so um um they surely the work group is is free to do and to I mean uh propose another solution but we did our homework um this was the result so I I just done don't want to uh I just wanted to clarify that we tried to accommodate this requests and and we think that in the future we have no objection to to move that uh to to um to a structured field what I I am not sure that is the right thing to do is just to to have structured Fields as a goal in my opinion structural field is not a goal per se okay to go here to uh for the original goal for this specification is to consolidate a standard and about political proliferation the the it is not to force anyone to adopt structural field even because we don't have the faults in this case for uh pushing structural fields in an"
  },
  {
    "startTime": "00:18:01",
    "text": "ecosystem that is currently not uh [Music] not really for that because we don't have products so I think we we can separate the structured fields we have the absorbed the side absolutely not but we have been asked to to investigate and we did it so we wanted uh if there is some I mean some other ideas to me it's fine but I think it should be basically based on some data or some feedback not just on um legitimate thoughts so so Martin's in the queue maybe we'll let Mark Martin go ahead I think I just broke a chair um so I think I want to concentrate on what the what the the real arguments are here um I think I think Roberto hold the mic yeah I've got everything in my hands [Music] is anyone yeah okay um so I want to I want to focus on the goal here which is to express this information in a way that the people can use and I think that this debate about structured Fields is really the the nub of it I I honestly find the the spelling of this information across three fields to be a little odd um but there are there are aspects of that that make me think that maybe under certain circumstances the having separate Fields could be somewhat"
  },
  {
    "startTime": "00:20:01",
    "text": "advantageous in the sense that there's um this this reset field for instance uh is is stable where the where the other ones might not be on on a per request basis so I'd rather concentrate on those sorts of arguments than than these um like Mark I'm a little uncomfortable with the the way the this is being being argued and seemingly decided I think this is at some level the editors work for the working group and um need to need to try to capture the the decisions that are made here unfortunately there's not a lot of people here who are contributing to this discussion so uh that that does make it quite kind of difficult it's going to be hard [Music] I hate taking them out yeah [Music] okay uh anyone else on this topic I think it's certainly something we have to bring to the list and discuss all right uh Roberto Julian destroying thecube yes go ahead hello um so uh I think it would be really interesting to understand what kind of support in things like ngienics and httpd actually is needed because um I mean if there was a actual ticket I could look at for for functions for httpd I could get people to"
  },
  {
    "startTime": "00:22:00",
    "text": "consider actually adding that support but just saying it's not there without saying what's actually needed because I think a bit so what is the actual API or tool support that would be needed to make structured Fields uh acceptable here foreign we'll take two votes um first is do you have an opinion raise your hand if you do have an opinion on this and then we'll ask what the opinion is and this is not the whole structured Fields discussion this is three headers versus one header pull request 65. all right I'll close the vote in a few seconds so for the benefit of the recording which doesn't count this uh 17 people participated 11 said they have an opinion um and seven"
  },
  {
    "startTime": "00:24:01",
    "text": "have no opinion this is out of roughly 40 participants so in the session and now we'll have another one um it doesn't have to be just the 11 people who said they have an opinion three three headers or one three ah good point yes let's just skip that there we go so raise your hand basically if you support the editor's decision to have three headers and do not raise your hand if you prefer to see it merged into a single header good a couple more seconds please raise or not raise your hand is you are willing all right uh so 13 participants uh seven raised six nine so we clearly do not have consensus yet even rough consensus in spite of that Martin is word smithing the field names to be even more terse"
  },
  {
    "startTime": "00:26:04",
    "text": "yep we're fat please quick question I I don't have an opinion here just want to understand like for the people that proposing that we merge this what's the rationale what's the reason behind that and the races on Martin you can go first okay Mark go ahead yeah is it working it's working yet okay um I I I'll let Martin give his opinion but for me it is there's an aesthetic aspect to it um there's a uh kind of a you know don't repeat yourself it's it's the having three headers is very repetitive there's questions about you know how they interact and and generally in HTTP we have you know we don't spread things across multiple headers unless there's a good reason for it and there are sometimes good reasons for it but I don't see any here I think the the most probably the biggest reason though is is that if we're going to specify these as structured Fields but make them look like they're just simple integers and simple you know so that and and really the draft currently downplays the fact that they're structured fields and this was discussed quite a bit in the issue um it's a bit of an attractive nuisance and that people will say oh look it's just an integer I'll just parse it as an integer and that'll break if people ever had an extension or a parameter to it for example and so it's it's you know it's kind of like leaving something around that people can hurt themselves with if you're not careful and and so if"
  },
  {
    "startTime": "00:28:00",
    "text": "if you don't want it to be a structured field if you don't want people to use structured Fields parsers that's fine but don't specify it as a structured field and if you're not going to specify this instruction field I think the expectation in the ITF is is that you will specify parsing materialization to at least as as high a level as structured Fields does so if if you know that to me I think is is the path you'd take if you want this to be three headers is say okay it you know you you specify a parsing in the serialization algorithm for each one that's bespoke um but there's not a great reason to do that because we already have these algorithms defined you know that I don't see a strong argument to go off and have bespoke bars and gothens for these headers and and I don't find the the arguments for putting them into three headers convincing it all um I just don't Martin you go that was a lot I'm I'm hoping to capture all of it um so I I agree with everything Mark said I also think that in this case this can be a lot more efficient and uh simpler in in the sense that it is an atomic unit at the point that you have everything together and um splitting across multiple multiple Fields means that you you need to go looking at multiple places for the for the information I personally think that this is much easier to to process from a um a usability perspective having had to do that on the GitHub apis uh this would this would have been better than what they have any other discussion on this issue which is clearly open in the working group hasn't has not decided yet a lot of comments speaking is an"
  },
  {
    "startTime": "00:30:00",
    "text": "individual one of my concerns about rate limiting editors always has been the practice is to re once you support returning these rate limiting headers you return them basically on every response and um I think there there's a burden on the client and the burden on the network to transfer those things on every single response and the simpler that we can make this um from a processing perspective uh on the client side the better and having just one header to parse uh I think is is easier and simpler okay I the the argument excuse me here is that a I think that if if it would be simpler and easier somebody else who would have done it in the sense that um the the actual uh what's trade implementation provide free Fields so this happens uh independently on what we may argue about what's more efficient because implemented to do it in in another way maybe everybody is wrong and they didn't do their due diligence in the funding uh their way of implementing fields but I think that let's Branch said in the last meeting that there is value in what um"
  },
  {
    "startTime": "00:32:00",
    "text": "community of implementers do and this is done in from more than 10 years so again um I I would like that the argument for combining Fields were substantiated in some Implement your community in some implementation where for example uh Google and Facebook says okay within the idea it's a more convenient to combine all the fields so we changed the way and we think that other implementers just like data banks people and are doing it in the wrong way you're in the last efficient way but actually we do not have the we do not well I do not have the force of foreseeing the deployment of uh single fields you know what ecosystem and test and provide a study uh to demonstrate on real data that one single field is better than um [Music] so I think that uh following the the common practice is a value because it's a long-standing practice and the goal for this specification was not inventing a new way of doing things but to provide a common ground for different implementers of the same in the same on the same ground I mean on the same specification"
  },
  {
    "startTime": "00:34:09",
    "text": "question for you Roberto from a client's perspective is it possible for implementers to use these fields in isolation for example like is the remaining value of any use to me without reading the limit you can probably just use um remaining and reset values to shape to shape your policy but um in in my experience with the implementers I know um those values are used in different ways depending on the kind of uh interaction so in some cases um they they use uh even even the policy indeed even the policy value to to make photograph for example uh in other they consider that uh requests can be multiplexed so they assign each uh a couple of triple of fields to different users from the a single client the goal really is here to standardize the semantic of fields not to define a way a stringent way of how using them because the way that clients and server"
  },
  {
    "startTime": "00:36:01",
    "text": "can shape their traffic um can be different actually and for example I saw um one of the questions from Mark it is possible that the intermediary process those fields and changes them if it's if this is eternal to one infrastructure so yes there is the possibility that one gateway to received some fields and lowers them for example depending on the how many services this Gateway is services so the possible the possibility to mangle these fields is different uh both internally one is a structure and on the web and in case for example an intermedia is processing those fields the the uh the fact that there are no um libraries inside of this process them easily they were just one skills combined it's not triggered all right we're going to close the queue on this obviously we have to have discussion on the mailing list um encourage please people who were involved in the API community that aren't commenting to either comment in the pull request remember the working group decided to use GitHub and and or the mailing list um let's figure out as Spencer would say let's make good decisions so uh Roberto move on to your FAQ"
  },
  {
    "startTime": "00:38:01",
    "text": "yeah that's well you are already I think it's the fourth time well it's a couple of years that those this back is lingering around but I I think we are we are done with this um with this presentation thank you Roberto and so do we want to move on to the media types presentation sure next so we are trying to register some media types to increase interoperability when processing API specifications such as open API and leverage content negotiation of the goal of this specification is not to disrupt current implementation and restart the engaged communities such as yaml business schema of an API and just next schema for example have not been registered and this uh makes content negotiation for this kind of document non-interoperable and moreover yaml does not have interoperability and security consideration next we have different uh goals for this specification but the just the yaml D was moved to the w3c world group that is working on Json ID so Cara for this presentation we just focused on yaml and plus Yama structure"
  },
  {
    "startTime": "00:40:00",
    "text": "syntax suffix because there are nothing API engagement schema we still have a lot of work to do next we have the other things we focused the the yaml in another draft and uh we almost completed the Yemen data registration with security until probability configuration fragment identifier multi-documented yam of streams and a strength and con efforts with Yama community for rest apis I said before there is still other work to do next I think that the document is uh ready for our group class code we have a uh just some fields that we can discuss the first one is the more controversial the is about the plus yaml meditate to use the same yaml uh fragment identifier then there is um suggestion we can take it or not to reference Unicode security configuration for yaml but I think this is very similar to what could happen in Jason um happy to get feedback on that and this the issue 59 uh the yaml LD media type um asked us for a normative conversion uh algorithms for from Yama to Jason um well we have to engage with media targets many English clearly next"
  },
  {
    "startTime": "00:42:05",
    "text": "so this is one of the points should every uh plastic yaml media type use the same fragmented identifier of application yaml the yes Alexa we will register the placental suffix to together with yaml so the proponents um says that structured syntax facets are a way to implement list of substitution principles so if something is valid for application yaml it should be valid for any plasma media type [Music] um we think that this can affect future media types for example a Json schema Plus yaml or link linked data plus yaml already uh well for General schema they already defined um a fragment identifier certification so if they were forced to use the same application yaml fragmented amplifier this means that the um it will be impossible to use um to register schema plus yaml using the same fragment identifiers Json schema plus Json and this for us is a showstopper because we really want that since they're they're already um usage on the internet for plus yaml media types even if they are not registered we do not want to break this implementations moreover the 6838"
  },
  {
    "startTime": "00:44:04",
    "text": "it does not require that plus yaml and yamo have to have the same fragment identifier so since this is not a requirement I think that I would favor these the ability for new implementation to to use yaml to extend the syntax with with respect to Define different media types the or to have inconsistent implementation between something plus Json and something plus yaml but we are open to suggestions here could I ask a question Rebecca yes I'm not sure I don't know that I've seen this on the the the spec and but I sorry in the discussion and I did see it the the this conversation about if you use plus yaml you have to support the native uh is this this SSS fragment ID and um the one mitigator to that might be for example um open API Plus yaml open api's use of yaml is limited to what yaml calls Json schema not to be confused with the thing that is called Json schema yaml has this other concept that says you can only use the con the things in yaml that will round trip to Jason now my question my question is is does that prohibit using anchors because if that prohibits using anchors then you won't be able to use that native yaml fragment ID well um"
  },
  {
    "startTime": "00:46:00",
    "text": "[Music] is not really compatible with Jason because it supports for example plus if and then I'm not supported they're using Json okay but that feels like just an error in the yaml spec the intent of the Json schema is to be fully round triple so the fact that there happens to be an error there doesn't negate that fact right yeah uh well I I am not sure that probably this was an an error in the in the gamma specification or maybe that they just use the JavaScript way of uh of using Json I mean probably JavaScript implementation supports that field while Json doesn't the point is that you can use Define a fragment identifier in open API foreign the Json pointer one or the native yaml one the the native yaml one supports Json pointers one it starts with slush right okay right so you can you can say for example that in this way if we do not uh"
  },
  {
    "startTime": "00:48:00",
    "text": "in France that um open API must use application yarn structured syntax suffix we can say that open API defines its own fragmented identifier Json pointer and then open API Plus yaml or plus Json is free to decide its own fragment identifier Urban is it can be different from the one that is defined in application yaml since the content type or the media type of this file is not just the yaml application yaml but if open API plus emo it is a different media term that can have potentially that can potentially have e different behavior from this just yeah application yaml and as a matter of fact structural syntax allows to Define its own fragment identifier okay the point is that we should be careful here just because we are not defining a specification in Greenfield there are implementation um I think that we should be careful in not hindering the ability to to use something like Yama or Kenneth because they people already uses it that sounds that we should write something that is that matches the current implementation"
  },
  {
    "startTime": "00:50:00",
    "text": "in other cases if we were to write a new specification I think that we were free to Define whatever we think appropriate in this case we should be a mediator from different communities just came out an API yaml communities sure they've read it they implement it so happy to to listen to your opinion here but I think your last Point uh about RCA 6838 is probably the the strongest item there so what do you need to be able to close this issue uh agreement for uh [Music] the community thinks that uh we do not need to Define uh structured syntax suffix and just currently we just take that if you want to use application yaml you should explicitly explicitly write it down so if you use if you would tomorrow we Define open API Plus yaml if we want to use the full-fledged application yammo we should write it down so [Music] if we don't want it uh we can do we can write our or use our current current specification that already exist as far as I know in open API Roberto Roberto can I interrupt yeah sure I am completely incapable of following what you're saying here can"
  },
  {
    "startTime": "00:52:01",
    "text": "please I've been really struggling to pause what you've been saying and I'm I'm mostly following along but that last little bit I completely lost you yeah could I could I have an attempt to paragraph paraphrasing sure um there is a mechanism that applications like yaml uses has available for fragmented identifiers that uses its native anchoring type support um existing media types or existing formats like open API and Json schema when when they use yaml as their format tend to use Json pointer as and basically squint and look at the yaml document as if it is a Json document and use that to reference elements in the um in the document and because they are only using yaml sufficiently to describe a Json document they don't use any of the fancy features of yaml and therefore Json pointers are sufficient the suggestion that Roberto is saying is just because application yet slash yaml uses this fancy format it doesn't mean that uh plus the animals have to do it if they want to support this fragment identifier with the anchors then they can explicitly say in their media type registration that they support the format the fragment identifier that uses anchors did that help at all"
  },
  {
    "startTime": "00:54:03",
    "text": "that was immensely helpful thank you and I think because this what you're saying Roberto that 868 38 doesn't require that they need to have the same fragment ID then I think being explicit in uh media type registrations as to which ones which fragment identifiers are supported um is seems to me like a a very valuable solution and solves the problem mark working is it working it's working um yeah usually the pattern is to have uh uh you know the the default be the uh you know the the common the application slash yaml in this case uh uh fragment identify our syntax so that registrations with the plus CML or whatever it's going to be uh uh do the right thing that if if the people forget or they're lazy or you know whatever that they there is still a fragment identifier syntax that is sensible for that uh uh format available but they can opt out of it um so that that's without knowing too much about the specifics here I have no idea what SS says is for example but uh that's the general pattern that I've seen in the past I think foreign I don't even think it's worth having to hum on this there's still some we still need to have some discussion on the list so"
  },
  {
    "startTime": "00:56:01",
    "text": "let's and Daryl is nodding so let's move on to the next slide Roberto sure okay this is coming from The Young LSD War groups in WCC the they wanted to have a normative way of converting DML to Jason when it is possible I think it's a hard stuff and probably we could in which a normative considerations um excuse me the interoperability considerations to defer this to the gamma specification or we can uh we can Define another draft either under the ITF or other organizational umbrella but I don't know maybe you think that it's something we must have a way for conducting gamma to Jaden in this specification or not the point to me is that I wanted to release this specification as soon as possible because we needed to continue the work for open API so I want to work with the open API specification on something that is that has some ground I I will just comment I'm not sure I'm allowed to voice an opinion here but as an individual uh I would defer this to the yaml swag the ammo spec is attempted to define a way to limit yaml usage that was compatible with Json schema if"
  },
  {
    "startTime": "00:58:01",
    "text": "you're saying that there's holes in there um let's go let's go ask them to um close those holes I think if we try to define a conversion someone it's not in our Charter and we'd have to confirm with the area director that they really would let us want us to do that okay let's continue thank you cheers do we have a resolution on that one uh do you have a relationship on this PR well we know that uh uh I think the answer is no okay if the author if there are people who really I'll put it this way if there are people who really think this working group should address 59 um please bring it to the list and we can discuss it but right as of right now I'm fairly positive it's outside the scope of our Charter yeah I totally agree this this seems like a massive mistake for a media type registration to start defining this stuff okay we're you can feel strongly about opening up the charter question you can just close this PR and say it's out of scope all right uh Daryl you want to go through the the board sure um so to address uh the other working group documents I'm"
  },
  {
    "startTime": "01:00:03",
    "text": "going to share my screen once I remember where the button is there it is Martin I think this last two Cup last two discussions weren't quite what you thought you were signing up for so thank you um and uh so before we get into these items the one item one um document that is not on this list uh because there are no open issues would be 7807 Biz uh which has gone through working group last call now I think the only open question on that to mark would be do we need a new rev of [Music] um the document um I'll have to go and check that we do have uh finally a pull request much belated for a Json LD context as an appendix but there's been a fairly uh robust discussion on the details of that and it it doesn't look like it's actually been resolved yet um I don't know enough about Jason LD to comment whether it's good or not so as an editor I I'm a little concerned about incorporating it without wider review um and I'm still not sure that it's actually necessary to put it in the specification uh but people seem to some people seem to want it so as a non-normative thing any guidance from the chairs"
  },
  {
    "startTime": "01:02:02",
    "text": "um I guess my question would be why why if Jason LD want to do a flavor of HTTP problem why does it need to go into the HTTP problem specification my understanding is is that this is basically a mapping of uh uh the the data structure in a problem detail to something that looks like you know that is compatible with or understandable by Jason Aldi although I wonder about extension members and how they'll be handled but yeah I wouldn't it be in a completely separate document that just references 7807 biz that to me yeah I wonder that and I haven't had a good answer as to why it needs to be in this pack Eric has joined the queue Eric um yeah can you hear me yes yes okay great hi everybody my name is Eric um yeah so it's not so much about Jason LD right in the end Jason hell he is a mapping mechanism into interpret Jason as RDA um and I think that's where the problem is because if you if you specify the mapping into RAF you have to settle on an rdf vocabulary right because essentially that's what you will standardize the RDS vocabulary that the Json gets mapped to and I think this is why it's so hard for the commenters to come up with something because just just putting in some Json LD mapping so to speak is not good enough because well you can use Json LD for any Json that's not the point um"
  },
  {
    "startTime": "01:04:00",
    "text": "the point would be to say this should be mapped to this rdf vocabulary and then everybody agrees on okay and RDS then what 78 or 7 Days looks like and and I think this is also because we had those discussions in those last open issue right around well what terms should we actually use and personally I don't think that this is going to be resolved anytime soon because in the end that would be a discussion in the rdf community how they want to define those standardized vocabularies and I'm not sure that this community will be able to come up with an answer in the next couple of weeks four months I'll thank you that's that's actually really helpful Eric um it makes me more concerned because we're going to put this in an immutable RFC and I I have less confidence that what we put in there is going to be the right thing so yes I agree okay thank you that that's actually very helpful then uh so I think we'll we'll close that one down a little gracefully and uh I'll check I think we probably do need to have another uh draft issued and then we'll uh go ahead and progress the document if the chairs think it's ready sure yeah um unless there's anyone who does anyone in the room feels or online feel strongly about Jason Aldi and now therefore rdf being included great okay Mark you have consensus go for it thanks excellent okay so moving on to uh deprecation headers so I think Eric you're back up um there's a couple of issues that are minor document update required um there's one that is in discussion and there was it was just waiting for a"
  },
  {
    "startTime": "01:06:00",
    "text": "comment from Julian uh with regards to redirecting uh but the big issue is what started how does the conversation is use structured fields and turned into hey how do why don't we just completely redesign this API this HTTP header to a completely different thing so um Eric do you want to just give us what the current state is there and or Mark do you want to jump in ahead of time oh I go for um it was a long discussion um in in the GitHub issue and I don't want to kind of rehash the whole thing I think what we what we have ahead of us now right and that it's great that we have this meeting so that maybe we could also have like like a pole around that because I I really would like to know what people are thinking so so the draft as it is now has been written kind of to be in line with the the sunset header field which is has been an RFC for a little while and um and that that was kind of the motivation to have something similar for deprecation and it also uses the same syntax right and then a little while ago there was an issue proposing that instead of using that syntax which may not be great going forward because it's harder to parse than some other syntax we could switch to structured Fields here there are again and and use structured Fields instead um my feeling was that it would be better even though I agree that the structure field way is better in a vacuum but since deprecation and sunset are pretty closely related my my takeaway was I think it's better if"
  },
  {
    "startTime": "01:08:00",
    "text": "those two Fields work the same way and use the same syntax so this is kind of where the first decision would need to be made so right now the draft still is using the the sunset syntax which is the the iso date format and um and in that issue that Daryl I think is showing here there's a long if you're interested right you can look it up but it's it's a long discussion and then at the end of the discussion right we also get and there was a I think there was an idea that kind of at the same time Roberto and Mark had and I I like that idea um but I'll get to the catch um the idea would be to say well what about having like a generic header for life cycle information which would be able to express Sunset and deprecation and maybe other life cycle stages as well saying like this is experimental or possibly other life cycle stages you could distinguish four apis and then that header would just be called something like life cycle and it could have different time stamps in it and it could always use structure fields or anyway always the same syntax and that would make it easier to have one place where the life cycle info is going um so I kind of like that idea what I don't like is that this would basically mean to start from scratch um so that I think in my mind is the downside and I think there also were some people uh voicing concerns that well how many other life cycle stages are there do we really like a kind of a more complicated header to begin with wouldn't it be good enough to have Sunset and interpretation so so what I would like to do if that's possible"
  },
  {
    "startTime": "01:10:00",
    "text": "um would be to maybe have people um voicing their opinion between what is more desirable syntactic compatibility to the sunset header that is already in RFC or being compliant with structured fields which is kind of a more forward-oriented way of representing data information but it would not be competitive but Sunset so that would be the first poll I think that would be interesting to see what people are thinking and then the second one would be what about just ditching the whole idea of having a separate Sunset and deplocation header field and creating a new draft about life cycle info which probably would obso lead the sunset RFC but that would be a lot of work and I'm sure that we take another at least year or two right as we all know these things don't move too fast so that's my concern and I think I I have heard people saying hey when are you finished with deprecation so I think would be good to actually have something out there but um there is this idea that we could also do something that is a little bit more forward-looked okay that's it thank you very much all right waiting for Daryl to get back online there he is all right just lost connection I am back uh Mark you're up if we see you okay we can hear you um uh separate from this whether or not it's a structured field or not uh I find the idea of a life cycle header really intriguing um I think it it would be really nice to have one place you can go and look and find about you know the the status of"
  },
  {
    "startTime": "01:12:00",
    "text": "the API you're interacting with and and where it is in its life cycle um so that that to me seems like really nice rather than having it spread across multiple headers I don't think that that it would take a long time to make this change it's just syntactic it's just shuffling some text around um we do this all the time the ITF the hard part is is the concepts and and the semantics the easy syntaxes always fluid so I think we could do this in just a pretty quick PR um so yeah I'd I'd like to see things go in that direction just from a I don't know it seems intriguing to me uh regarding the structured field stuff uh I would I think I and a lot of other folks would like to see headers being adopted in structured Fields wherever possible um I think there's kind of a growing number of people who have a Prejudice that if if something isn't a structured field there should be a really good reason um but uh if if you know the reason is compatibility with Sunset and we decided to go that way then fine um what I'm more interested in getting feedback from this working group is is and I'm now going to hijack this session thank you very much uh in the HTTP working group we're talking about adding a date type to structured Fields as part of the retrofit draft and uh they're you know we we're at this decision point because retrofit ads uh structured equivalence to the date header and the expires header and the last modified header which are all dates so now is the opportunity to introduce the date type if we're ever going to do that um and and so you know the the HTTP 1.1 serialization of it could look like an ISO date you know where the net sign at the front as discussed in the pr or it could be an at sign with just an integer"
  },
  {
    "startTime": "01:14:00",
    "text": "after it representing an Epoch uh uh you know second since January 1st 1970. um and what I'm asking for here is feedback on you know if we defined a date type in in structured Fields would that make it more interesting to use structured fields for for you know cases like deprecation and other things in this working group um so far the discussion in the HP working group I I'm I my reading of it is is that people think that the textual representation should probably just be the at symbol is the sigil to denote that it's a date and then an integer after it which is not as human friendly but it's easier to parse and serialize and a tool can reliably recognize that thing to present it in a human friendly fashion if need be um so any kind of feedback that people had would be super super helpful and if people here don't want to use it if they that that's not interesting uh in whatever form that's good information to take back to the HP working group too so I'm done hijacking sorry please return to your normal flight Eric go ahead um yeah I think it would be very very useful to have that I think we also part of a long threat in that discussion about replication was the same kind of thing like that is there even a concept of a date time date card and it's and it's not so so I think having that time would be very useful I think for doesn't matter whether we use it for the application or life cycle we I would say we would definitely use it if we go the life cycle path but regardless of that I think even other header Fields it's highly likely that they will use some kind of daytime information and if that is something that you can specifically Define and say this this is not just string it's actually a date time I think"
  },
  {
    "startTime": "01:16:10",
    "text": "Eric do you want to call jumping topics um because Julian commented uh in reply to you in the chat um suggesting that we could just start with Sunset and deprecation and deal with extensibility at a later point in time would that mitigate your concerns about the time it would take to introduce a registry and so forth for extensibility oops some my audio on sorry yes okay um I think if if to go the life cycle route I think it would make sense to really design it in a way that it is extensible and and if we want to make it extensible we need to come up with some extensibility model and it probably will be some kind of registered date thing and I I don't think we can wiggle our way up to that point I mean either we say this should be future proof then we have to think about how we want to make a future for you if now we just say there can only be two Fields then I would say why even make the change just stick with sunset that's there and and to finish the application and if we have it it's sitting there you could just um I misspoke Jillian was suggesting having a an extensibility mechanism three mark okay"
  },
  {
    "startTime": "01:18:03",
    "text": "think it would be super super easy because if it's defined as a structured field then it's going to be either a list or a dictionary and that is naturally extensible and you don't need to registry all you do is is that the next time you want to add one of these things you have another uh uh uh RFC that Updates this one and it adds a new value that is the simplest extensibility model the ITF and we do it all the time uh you only need a registry when you need uncoordinated extensibility and I don't think that's the case here I think we'd want to come to consensus the next time that we Define something so it's super super easy super easy in ift ITF ietf terms um here let me add myself to the queue uh one comment Mark about the dates going back to the date think you say integer plus epoch um I have experienced working with teams where they've said they've used integer fields and then there's the question of well what is your origin time for the epoch and my understanding is there are different origin times floating around for Epoch now maybe that's just because I spend too much time in a Microsoft world but is it is that a problem that other people have seen that what is the epoch origin you said 1970 but I've heard other dates just specify it yeah it's not in the message though right no but it's in the semantics"
  },
  {
    "startTime": "01:20:04",
    "text": "foreign Eric you uh you suggested you would be interested in a poll uh with regards to interest in the life cycle um Bridge do you want to do that uh sure how do you want to phrase the question um votes for go ahead yeah so my recommendations first ask should we just move on with deportation as we have it because it's finished pretty much um so we we could just have it if we want to have it um and would that be good or not um just finishing the application in one way or the other and then the second question would be for those who um sorry I misspelled so the first question is so should deprecation be syntactically aligned with sunset or should it be something else um that is supported by a structured field so that would be the first question assuming that we keep deprecation separate um I think it would be interesting to figure out and the second then would be or should we stop this idea of having a separate application header and instead suit for like this unified life cycle header field that can have multiple um of those life cycle stages in it and we would just start maybe with sunset interpretation as a starter set"
  },
  {
    "startTime": "01:22:05",
    "text": "doesn't look like we'll get to a statistically relevant result here or I could say twice as many wanted that way I I think we're seeing a bias for the uh for an answer on the second question that is that is very well uh possible let's try the other question upper right corner of the bar graph yep let's see if I get I probably should have said replacement as opposed to alternative okay we look fairly stable at 12 participants nine saying yes we should"
  },
  {
    "startTime": "01:24:00",
    "text": "explore the use of life cycle as a alternative to Sunset and deprecation Fields with three saying not raising their hand so there is enthusiasm for that proposal I don't know does that count as consensus rich it's gonna have to be confirmed on the list not because there's not a lot of people voting yeah yeah um Julian's in the queue go ahead Julian hello hello okay um the note that Mark were very unhappy about the first question maybe they should explain that themselves um the question that I have is if we are concerned about consistency between these two header fields we actually have any data about the adoption of Sunset and how many people have actually for that I put the reviews just asking so maybe I can jump in here so it's it's not a scientific poll um I've seen sunset being recommended in some API guidelines here and there um it's not that everybody uses it but it's something that I've seen a doctor at least in some cases I have received a few not many but a few questions around deprecation asking hey when is this ready we would like to make that part of our guidelines so we're not sure if we should reference it because it's just a graph um so I would say at least there's"
  },
  {
    "startTime": "01:26:01",
    "text": "um I don't know how much adoption of sunset is out there I think for the application there's probably none because it only has been floating around in the craft and maybe people don't feel confident um enough but for Sunset there is some adults that's that's the only thing oh and Microsoft is doing it okay that's always good to know okay um I you have you've heard feedback from the people who are present in this room Eric um I think as rich said it would be good to take this to the list and get a broader um sense of interest in creating a Consolidated lifecycle Adder um you might find that the interest for it is significantly more uh for that okay I'll do that um at least I'll ask and then I see it I have to I have to admit right I put a lot of effort into that application thing it's kind of sad to see you then I'm I'm not quite buying marks thing that it's just a simple little edit um but anyway that's not a discussion we have to have now but um okay that's fine uh at least I'll write a little note today and we can see what that needs to do and just to confirm Julian's asking currently in the spec it's an ISO day right not an HTTP date yes currently it's the same as Sunset because there was the original idea that both would use the same syntax and"
  },
  {
    "startTime": "01:28:01",
    "text": "that's the current status but there is this open issue that I think was raised by Mark okay cool well thank you for uh all that information on the deprecation header and it's been a good conversation foreign moving on to item potency I don't believe Sanjay is here so unfortunately Eric you you are the you were the sole person in the room uh attached to this specification I believe uh from what I've seen uh most of these updates are fairly minor um do you have an idea as to anything that is blocking uh these changes from going into the spec and was being able to move towards last call um to be honest I haven't looked at this one in a while um it's true there are no formal blockers in there um but yeah I can't tell it's I I don't think that it's ready for last call I think it would probably take a little bit of effort to kind of re-read through it and see where we are but um okay I I I can reach out to Sanjay because I know it was expired last in ietf 113 and it did get um updated um so yeah but I think mostly mostly I think you know just to have a like a non-expired person pretty much okay um I I I'll I'll talk with Sanjay and sorry to go back to an issue that I maybe I confused Julian is saying Sunset uses HTTP date is that correct"
  },
  {
    "startTime": "01:30:01",
    "text": "I thought it used ISO I think that's insane pretty much no it is no idea so when we say HTTP date we mean the bizarre syntax that's used in the date header field and the iso ones the you know year Dash month Dash day that you're using in in the draft the other one's like Wednesday blah blah blah yeah it is not best practice it's Wednesday blah blah blah I think because that's what um Sunset is doing right so that's not ISO okay in that case it's not using ISO okay Julia yeah okay so um in which case although I would prefer to have ISO everywhere um the fact that they use the same format as HTTP date is of course a good reason for keeping the consistency because although it's a very broken and bad format that at least has browser sorry I was up everywhere so we the current state is we are not inventing a new data presentation we keep the HTTP one date youth values which I think is the deepest thing to do right now okay so so if I think what you're saying is if there is a decision to stay with the two separate headers then you agree with Eric that consistency between the"
  },
  {
    "startTime": "01:32:01",
    "text": "two headers is uh is good and we should not actually introduce an ISO format okay so so I think if without construction here and the current state of things is the right state okay thank you okay which is linked template and of course Mark has his structured field uh thing are there any reasons why you wouldn't go with a structured field there mark um you know they're the same discussions about consistency um I personally think that it's not that big of a deal if this small inconsistencies um especially because uh we noticed in uh the retrofit draft we're defining a structured version of the link header and so we can just reuse that syntax and so that's very nice and straightforward so I'll probably do a PR for this and to have folks have a look at it and we'll see how it goes um that and I think someone raised an issue yes should should the anchor parameter also allow URI template which is an interesting thing is I need to think about it a bit more um but seems reasonable I I will say this idea of being able to define a linked template that can work for collections of things has been an issue that has come up quite a bit in the past in the open API world cool okay so um the other documents are the media types and rate limit headers but we have already covered those unless Roberto you have any other issues here that you"
  },
  {
    "startTime": "01:34:00",
    "text": "wanted to bring up I'm assuming not no I think not excellent which then I believe brings us to oh just a Martin um do you have any updates on your Explorations around the date header and where that might live yeah so um we had some discussions in the Ohio walking group uh earlier this week and we essentially concluded to take the the pieces of this work that are relevant to that and and take it there and and probably I'll abandon doing anything more generic so I mean there's some stuff in there that's interesting but I don't think it's really worth pursuing thank you and Eric just brought up an excellent point that we should mention the fact that uh the link set document has now been published and I'm sorry Eric I did not bring cheesy fireworks but it is very exciting to see the first document from this group go go all the way through the process yes congratulations to the authors and and also working group comments so hopefully the first of several I won't say many let's say several all right uh okay so with that uh any other business that people want to bring up to the working group all right thank you everyone for your participation uh this uh with the end of our ietf 114 meeting"
  },
  {
    "startTime": "01:36:00",
    "text": "hope to see many of you in London on the mailing list in the PRS on video take care travel safely thank you thank you go grab a last cookie if you're in here my mouse is now captured in the screen share so I can't do anything how do I get it out just close the tab I can't get out of this yeah the screen share to do anything ah there we go I don't know what I did thanks everybody um um"
  }
]
