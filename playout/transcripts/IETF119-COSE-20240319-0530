[
  {
    "startTime": "00:00:36",
    "text": "Okay. Yep. Alright. Welcome to the Jose Working Group meeting. We're gonna get started right away because we, Have a full agenda. Note the note well well. As you do in all working groups. And as you did when registering, So, make sure that you sign in to the on-site tool, or failing that Scan the QR code. But we will be using the on-site tool for queue management So if you wanna speak, raise your hand, just as the people that a remote will do, There's a set of standard resources for This meeting, Now to the first case specific, content. We can't really go any further until we have a net ticker, or even better a team of willing volunteers to do so. Who Oh, Haunas. Boy, you just"
  },
  {
    "startTime": "00:02:04",
    "text": "came off the buff. You're you're a workhorse, man. Thank you. And I will know that Anyone can help on us in real time, transcript if you help. So there there's an incentive So Eva and I prepared a few slides of status just from the chairs. About work that's happening. For starters, that Cause a CWT claims and headers draft is at the RFC editor and is currently stalled there. But for a good reason, it has a normative dependence on The cause a type header parameter for some discussions we had at IITF 118. Which is finished with IETF last call. And is scheduled for an IESG tele chat in about 3 weeks. But that point, assuming things go well, it will join a friend in the RFC editor queue, they'll both get edited together and published together. So that's all A good news story. Because I keep on print, The chair has requested publication, which we should have done earlier, but we did it a week or so ago, are Area director, Paul, asked me to update the Shepherd review to reflect the status of some comments that had come in. I did that. That is in IETF last call right now. So there's still opportunities for you or any IETF member to"
  },
  {
    "startTime": "00:04:02",
    "text": "say things about the draft, through April 2nd. As part of the IETF last call. There's the, draft on time stamped token. Header parameter. Up. And rather than doing a presentation, the authors asked, us to just say things in the chair slides. They had asked to the list in November, Should we have 1 or 2 header parameters? Reflecting sort of pre or post time stamping or pre or post signature time stamping. They didn't get an answer. They made a judgment call that they are different header parameters that's published About 3 weeks ago, reviews are requested. But, I believe that was the last outstanding question. Unless there's more discussion, we probably take that to working group class. Call. But, again, have a look. Of of the type header parameter, let me go back to The type header parameter will be on the IAS gtellerchat, on April 4th. With Orie Steel being a, Recusing Area director by that point. Welcome, Maury. Thank you for your service, as they say. So at that point, Those two drafts, the CWT claims and headers, and the type header perimeter should progress through the to the, RFC editor queue as what they call a cluster, meaning they move together."
  },
  {
    "startTime": "00:06:08",
    "text": "So we have a full agenda. We have a full agenda in part because We took 2 hours of content and we compressed it into an hour a half EVO and I asked for this session to be moved from Monday when it would have been a conflict with the CFRG. And we got a 90 minute slot rather than 2. So I'm gonna be brutal with the time And with that, unless there's any agenda bashing or questions For the chairs, I'm going to move right on to The first presentation which is koseihpke. Okay. Yeah, that's As you know, this is work. With Ori Daisuke Lawrence and, and many of you from the working group, a lot of discussions next slide. Try to keep it short. Illustrate you where we are roughly Yes. You can. So we have And specifically, so There is this work happening in the wholesale working group with the Jose HBKey, the counterpart, And there, we made a couple of, changes which we tried to reflect here as well instead of the one layer, 2 layer sort of description, which is not very sort of not a good, terminology There's we now use the direct encryption versus key encryption approach which indicates like direct encryption is if you only have one layer, you and which means you can only use 1 recipient, and the other one, you can use 1 or multiple"
  },
  {
    "startTime": "00:08:00",
    "text": "Olympians, which is a key in wrapping method. Okay. So nothing changed in that respect. Content wise terminology changed. Yeah. I think, you know, all of this, why we do this was keep over that in for the benefit of time. So the status, that's where it gets a little bit complicated. So the issue, the main issue is We have made a couple of, sort of Wait. I'm gonna take an interrupt. Is somebody scribing because he was our And school? Evo, thank you. Yeah. So we we made some some changes to the to the header parameters to get them also in line with the hosting work But, But the most important, issue that customer mailing list, and we had a lot of private maces, as well. Is the question about how do we bind They're The encryption to the context which is something if you haven't paid attention to this whole topic If you use, any of those mechanisms, you need to make sure that, the the context is their endpoints, the application you're using this for, the the algorithms, etcetera, they need to be pounced in either to the key derivation or to what you are protecting the whole thing. And the story gets more complicated because we use HPPE, which has specific ways to incorporate those parameters. So you don't have full freedom We don't want to make it too complicated because Hosey cozy specification has a context infrastructure, which is pretty elaborate, but unfortunately not that super friendly to use the attacks are complicated, but do exist So, for example, the unknown key share attack"
  },
  {
    "startTime": "00:10:00",
    "text": "Well, reflection attacks and so on. And there's some more recent attack that was presented at the Lambs meeting of the BRAC IDF meeting where There was a downgrade from AES cheesy from ASGCM to AES CBC, which we suddenly have to take into account as well. So None of us is a photographer, although we obviously work in the security field, but cryptographer and and security people that's still a difference so we've been debating many of those aspects, and I think we have a better picture now. And some ideas on what we would what we want to do, which we haven't yet fully incorporated into the document, or at least not in a submitted one, There is a PR that exists that was an outcome of the hackathon last weekend. Which you can look at the, working group repository not going through the details. It takes longer to understand. And on top of that, we've reached out to a really cryptographer ball 1 or shot, who said that he would be looking at this and providing us feedback, within the next 2 weeks to He was the one who actually Originally, worked on that, or I came up with this attack, the unknown teacher attack with, Bitfilthy and Vena. So presumably, he knows best what he was doing there. Salt. Quite thankful for that. And so I'm positive that we will sort this out, fairly soon. And finally get this to completion. And then obviously the resolution will be applicable to both documents, the hotel Working Group and the cozy Working Group. Between working on code, here you see the header change, The white com a confusion with another head of parameter on the cozy, Hossey Site And, yeah, those examples are, still outdated"
  },
  {
    "startTime": "00:12:00",
    "text": "So when are going to update those as well there's a little bit of, change there, but, yeah. So one specific change that maybe highlights, we want to explicitly indicate In the protected header, on what the context actually is because that's another, I think, another trap we could fall into specifically developers is to make that the context implicit, because then both a communication endpoint somehow, need to know sidesly what that context is because and if you don't get it right, then the result is it would just fail and nobody knows what what went wrong. I think that would be a very unfortunate developer experience the downside of that approach is that we need to carry more pipes along. If we carry, for example, the sender the path to you, path to be, context Well, an endpoint string specifically separately in the, in the message. Hannah, do you want to take questions now or at the end? Mike Mike is going to ask a question. Mike Gounsworth. So you mentioned the recent attack recent attack lapse in in Prague. at CFRG? Were you Yesterday. No. I wasn't and I resend it back. So there's an even more recent one. Deirdre Connelley presented So back up. I assume you're doing this to get mlchem. Ultimately, No. No. Okay. So you should still take a look at Deirdre Connelley's talk from TFRG. Yes. Yesterday in that when you put mlchem into this, when you replace Diffie Hellman with mlchem, you don't get the same properties expect unless you do some additional tweaking. So there was discussion of a 9180 biz"
  },
  {
    "startTime": "00:14:01",
    "text": "you should just be aware of all that. Yeah. It's I I think it definitely. We'll do that. Thanks. Good to be aware of that, luckily or not luckily. We, there's what HP key provides us is, is the hybrid version, but I don't think or maybe that's impacted to, I don't know, Yep. Just to respond to Margaret, I I went through the draft that she had proposed and there is a problem with the binding properties that Duffy Hellman has versus MLchem has So the other drops are gonna incorporate the changes that she is suggesting don't have to do any changes to this because this is pure traditional all of them. But will it, so, like, it shouldn't impact the the the baseline HBKE version is could potentially impact the hybrid, right, It it won't impact the hybrid. It will impact the The The PQ Kim. Okay. That's that's fine. Ori? Whatever it impacts, it'll impact the cam ID that goes in the HPKU registry until we have cam ID for whatever cam has this problem won't be relevant to this draft. Yeah. Was just gonna note there there is time to clarify this for the exactly the reason that Ori noted. The specific thing is what will happen is you'll think getting the properties of Tyber and you actually don't it doesn't behave exactly right. Okay. And so it should be Yeah. So it so it is something worth just reviewing and incorporating won't require much change there. I think it's maybe not a document, it other document that will be presented later. In any case, we'll have to update the coat, as well. We have a multiple implementations, and we keep changing things. So we obviously keep updating the code, I'm but that's what it is. We've updated the code so many times already. So it's get next one."
  },
  {
    "startTime": "00:16:01",
    "text": "Okay. Yeah. Maybe, the first line sounds a little bit frustrating. But, we obviously had lots of debates and and, like, The relationship between discussion time and, text in the document, was disproportionate? So And, another complication, unfortunately, is that in in KOCI also in Jose, we have also algorithms that are not AAD CIPAs used for some special use cases, but there's obviously And this is obviously something we have to take into account in the in the description and it is signed. And so that's something we need to do as well. And Yeah. Yeah. So Yeah. I hope, so my, our hope, I would, I hope I'm correct here as well is that by the next IETF meeting, we are done to follow this, and can finally ship this This document has been around for a little while Longer than, expected Right. And and I do commend The efforts to align this work With the Jose work, this was talked about yesterday as well in the Jose working group to the extent that developers that are building both are unsurprised by differences that's a good thing. We, You are 8 minutes ahead of time. If people want to say anything else about this, you can add yourself to the queue. Otherwise, we have 2 more of hannahs up coming. Okay. Then I Let's let's keep going. Get on with it. Cause a key thumbprint. Confirm your solar Okay. This is actually, covered this during the during the you"
  },
  {
    "startTime": "00:18:00",
    "text": "chair update already. So I is one slide anyway. So basically what you said, already got feedback. It's later in the stage already. There's ISG feed back or idea plus call. And so we got feedback already, which we need in which we need to incorporate And There the call ends, April 2nd. So, there will, of course, be more feedback and, Yeah. No. Yeah. Get your feedback in by April Fool's Day. It's Anything else? I I trees. don't like these Given the, HPK experience, I'm not Alright. Let let's move on to harness version 3. Give him a prior experience. We'll spice someone to get this these presentations behind me as Yeah. You're having a traumatized speaker, so just be kind. you're I probably have to start therapy afterwards. I actually should ask IDF whether they can, sort of pay me some psychotherapy. So this is the, header. This is the chains of, Siebel web tokens and, as a background, We had this work originally was in 1 of the suit, the the the suit software, update for internet of things devices. Working groups. It was in the trust domains document the idea was that have to have a way. So, normally, you attach, a CWT, and it has a key you use the key and and provide those, 2 payloads kind of, like, think of the CWD with the key as a certificate And do you use that key to for example, sign something, and you also attached this CWT but there was no mechanism To"
  },
  {
    "startTime": "00:20:04",
    "text": "attach a chain of, CWDs, like you would attach a chain of certificates. Right? You often want to have a hierarchy. You don't want to have just I'm sort of a you want to have a a deeper hierarchy rather than just the CA kind of and then the end entity certificate. If you compare that, with the PKI infrastructure. So This document adds that feature And we thought that this would why put this into Well, the before that the suit document a specific suit document would not be the right place to describe this, And so we extracted it from there, And put it into a separate document so it can be used beyond the the suit environment, which I, I think is the right, way to approach this because some of you may also have some use cases where you actually want to have a chain of CWDs. Of course, as when you have a chain, you need to describe at least to a certain extent what that means, what the validation of, an n entity certificate give him a chain what that actually means. So there's a little bit of the ROC 5280. The big kicks RFC that we had to sort of absorb here in this document alongside the terminology But of course, we didn't want to go all the way to basically replicate because for most of the or for the use cases, we have hopefully, you too. You don't need all that sticky stuff. You don't need all these X Five for Nine stuff. You you're you want to be minimalistic. That's the whole purpose. And why we came up with these CWDs in the first place? Okay. Probably settle. Modest everything. So there's, There's some there's one document already, RFC 9 360, which describes header parameters that reference X509 certificates"
  },
  {
    "startTime": "00:22:01",
    "text": "And also had a parameters that carry the certificates themselves. So passing this X Five Four Nine certificates either by Value What by reference? So that's what this ROC does. What this document does is basically defined similar head of parameters But just for CWDs instead of X Five for 9 certificates. And I'm as I explained, suit here, So obviously this is only useful for CWDs that have this confirmation claim, which adds this key this key, this key public key which would then turn it conceptually. Into a certificate. Just in a different encoding. Okay. And here are the the ones that basically it obviously I changed the name of the parameters. So, like, CWT pack is obviously unordered. Chain is audit list. T is the identifies the in entity CWT per hash value in this, CWdu provides the ability to identify a CWD were chained by, URI Okay. Carsten. Custom Berman. So we we have these, sets of 4 things, big chains, some print and UI in so many places now. Okay. And I'm just wondering Is is there a useful way to generalize this. I mean, we have to have 4 header parameters for X 509 and 4 header parameters"
  },
  {
    "startTime": "00:24:02",
    "text": "C509. Another fighter from it is first. So is is is there maybe something that can be extracted Yeah. That that's, is common between them. Of course, you you also have these extras down there, which Yeah. Yeah. Yeah. Yeah. Yeah. Of course, the it would be possible to do that. For example, by tagging some of the structures I could imagine, Like, we, in an ideal world, if we start, again, we would probably some will indicate What the type is of the credential, and then we just say pack or or sort of, like, chain or etcetera. It that may be a use more useful approach, but now given that we have these other things already. It's kind of, a little late. We missed the, the the point of no return, I guess, Oh, I mean, maybe there is a way that I can see right now. So I just wanted to get the the thought processes starting here because I think this is the third one and, we would certainly get more And, So I mean, these are all signed statements. And, Yeah. Yep. Yeah. There's definitely a pattern here. And, obviously, like, I exploited that pattern by literally just doing a fine replace, Yeah. So if if something comes to your mind, Let us know. I'm gonna take off my chair hat for a minute and speak as one of the designated experts for registering these things. The contents of these are big. So it's not like we're we need to burn one bite header parameter values for these. If they were 2 byte header parameters,"
  },
  {
    "startTime": "00:26:03",
    "text": "or even 3 bite, which I'm not advocating. Then we're in a space that we're not gonna run out of anytime soon. So as long as you're not asking for a 1 byte value, you know, If it makes programmers lives easier, I'm fine with the multiplicity of header parameters. Okay. Chair hat back on. Okay. Yeah. Makes sense. Yeah. Yeah. I'm definitely not small neither the X Five Four Nine nor CWT small, relative in a relative way, but, still not small. Yes. And chains, of course, needed. Okay. Mhmm. Yeah. I think slide speak for themselves, Tobias. Yeah. I was just I was just gonna sort of say, I think I I support this as a as an idea. I definitely see the use cases for it, and I think to your point, Hannes, because we've already kind of are embedded. That consistency with that is probably what developers would maybe value more than starting a new pattern. And the other thing I would say is that often these samprint. Bag chain, it's usually one of them is used. So even though even though there might be lots registrations and a registry, and implementation may only be using 1 or maybe 2 at a time, you know, it it picks from the last So it's not like they're all present in in the head or of a of a CWT at the same time. A lot of the time anyway that I've seen. Yeah. It's act that's actually a very good point. I need to check the original document and this document to what it says, in the case when you actually have all of those parameters in India. What is, what is, what is the semantics of it? I'm not so sure about that, but, maybe something to clarify Yeah. Alright. Yeah."
  },
  {
    "startTime": "00:28:04",
    "text": "It yeah. It'd be a big problem if you had all of those in a message. Yeah. I don't. And it also be sort of a problem if you have, CWT claims and headers and ISS and KID and like, other combinations of key discovery, components could have interactions with these that leading developers to hit their head on their desk a lot. So Yeah. I, you know, we at Skit, you know, just for context, we spent a lot of time debating ex 5tandx5 see, like, chains and which one should be required, which one should be optional, and if you have them, what should you do with the KID value? Should AID be present? Should it not be? What about ISS? So I don't Yeah. good one. I would be I don't That's a that's a I would actually if I if I were you, I would, like, try not to talk about that in your document, but then you may end up actually kinda needing to and consideration section maybe at some point. It's maybe actually, a topic for the Jose Coast a guidance document, because it's we already have, some of those out there for each individual document was find by itself, but the fact that kept piling on to it, made it more complicated. And just in the earlier talk, we were speaking about the party u, part dv for identifying endpoints yet another different, parameter And that makes it, in the end, quite complicated or confusing, maybe. So we should talk about the potential at back scenarios there or, or at least, develop a confusion. So In any case, So what I'm, Asking a group is to adopt that this document. I think it's also in a in a state where which, a good starting point, quite reasonable. It's, minimalistic. I tried to be minimalistic. Hillary asked on whether I want to have some"
  },
  {
    "startTime": "00:30:03",
    "text": "key ID on, key usage, parameters defined, which I didn't want. But, but of course, it's up To the group to recite this, ultimately, So but I wanted to keep it as simple as possible. That was the the goal of the write up. I didn't Basically, a replica cover was in the, suit document. Just just Are people in the room largely in favor of holding a call for adoption Is there anyone who wants to speak against that. Okay. Evo, I think you and I will run a call for adoption on the list. Thank you. And we are 10 minutes ahead of time. John Bradley, You are next. So I'm going to do big hand gestures to represent Giuseppe who couldn't be here. So Giuseppe and I had have been working on this. Well, honestly, mostly just happy. But, who may her may or may not be up to, watch this from Italy. So we can move on to the so, this this follows on The previous Honys' previous, presentment about chains. So I'm chaining off of his to to present, the notion that we can represent, open ID federation trust chains, in CWT headers. There are"
  },
  {
    "startTime": "00:32:01",
    "text": "So essentially, this presentation boils down to. I have some polite things on the slides, but the reality is that X509 sucks. It doesn't represent many of the things we actually need for federation information. So being able to, rather than refer to the federation metadata by reference. We wanted include it by value because not So given entity who receives the CWT may have access to the trust root but they may not be able to actually walk the the trust chain of the federation information And, you can probably skip Yeah. That point. So the the idea is that Oops. come How How come has a different than that? that slide Oh, no. It doesn't. Okay. The the Notion is that in, Connect Federation, we have, a rich rich information about trust marks and other things that You couldn't easily represent it in X509 certificate. Yes. You could put Absolutely. Anything in the next 509 certificate, nothing will understand it. Or, parse it. But this is a way of bringing together Cote and connect federation metadata there are use cases for this around potentially around wallets, etcetera. It's a relatively short document. There's one header parameter. Yes. The things that are in are included in that header parameter are a chain of"
  },
  {
    "startTime": "00:34:01",
    "text": "JWTs, which is what the what I can see in the eye of the person coming up to speak. But we I'm happy to discuss that. It's not like I didn't anticipate it. Year. 1, But, The the the reason why it's JWTs is that currently, Connect Federation is a JWT. Format. So, you know, you could lobby the authors here, to have an alternative co save representation of those JWTs, which with with probably upset Brian deeply, but So that's I'm I'm gonna call for adoption so that you can rip it apart in the, in the working group Like Prorock. Mike Paroc here. Could there perhaps be a little bit more of a generic structure that says, yes, this could be a JWS embedded in IT identified in such a way but we could also maybe set ourselves up to go reference things that are like CWT or CWT like, like bags and Yeah. You know, giving giving ourselves a path into these other chains and stuff that are going on. It just feel felt very odd to me when I get down there. And I knew where it was coming. I knew what gonna show up, and it's like, and then b string JWS. And I'm like, So that's all do Wow. You have to the move it Yep. I I wonder, like, I'm thinking, and I always have a deja vu, thinking of Kasan asked her a few minutes ago whether we could have something more generic because it sounds to me like you are, describing It JWD version of what I just described as a"
  },
  {
    "startTime": "00:36:01",
    "text": "why I said I was chaining off your president. CWP. That's Now I now I get that team. You explain a joke three times. I I I don't know. And the chair did put these next to each other on purpose. And now I'm so suggesting something not obvious, maybe we should, together to just define something generic that works for c w t and C w t. It won't say OID, open, open ID federation, but bec but because the content is as long as we can profile it to do what we want for open ID federation, you know, Think there's a problem with that. No. So, yes, assuming that If the working group wants us to work together so that we can have a common thing. Mike? I would be highly supportive of a collaborative effort working towards a common goal that unifies You trading as as opposed to trying to have to bigger split things up and pick over details. I think we could find a way maybe to allow for profiling like this and link it up with other things. That would be great. Brendan? I just say, I I'm I'm supportive of that effort as well. The the only thing that I would, mention on that is that it's critically important that this doesn't, blow up, to large sizes or complex parsing. The original target, the reason that we started the previous work, was a very simple delegation technique. So I have to admit that Connect Federation Trust Chains Could Be Large. It's it's for me, it's not about whether it can be large. It's more that it can be small."
  },
  {
    "startTime": "00:38:06",
    "text": "Right. So, ideally, we would you know, do this by reference, but You can't always do things by reference. So Other questions? Okay. Evo, if you concur, it sounds like, sets of authors should talk to each other and, make a recommendation to the working group We could Talk to each other. We've So Steele. Ori? Ori I do suggest that you talk to each other but I also suggest that you talk to the folks in STIR who are, developing a similar sort of chaining mechanism in in JWT land for telephony. Applications. And I think if you talk to them, you may find that you have yet another friend who's doing this similar type of activity. So I'm happy to connect you. Offline. Sure. Kirsten, Just a moment. Is it Is this just a chain of jots, Oh, JW. Excuse me. Or you have to know it's actually OIDC GWS. You would have to know that well, like, anything, have to understand the trust you like, you model. And you'd have to know how to parse the open ID connect Federation Metadata. Yeah. So the the the two layers. One is the synthetic layer. This this is chain, of, j JWS. And then there is the"
  },
  {
    "startTime": "00:40:01",
    "text": "that says, oh, you have to interpret this OADC like Right. Because we don't we are not providing this cementicleer with It's 509 chains, C509 chains, Well, that's ones. Han has talked about maybe we have to. Well, Yeah. If you want to convey something more complicated than This key is signed by that key, which is signed by that key, then yes, you have to know how to parse it. I mean, even not all X 509 certificates are created equally. A. Browsers implementation of parsing X509 will not deal with, say, the federal PKI bridge. Just to pick on someone. I yeah. Yeah. That that was not my question. My question was not do we get to pass this? But after having passed this, Do I know what it means? Well, that's No. That's not the same thing. So Simply knowing that it's a chain of X509 certificate doesn't guarantee that you understand all of the extensions that might be required for it the particular application. Right. Yeah. So so it would be good if by the time you do this, you know what application it's for. Yes. This is To case here? Yes. But Any other questions? So I I I guess, my takeaway is we we will have to specifically find out whether there's some application specific semantics. India that requires A certain validation logic or whether there's a possibility of us differently. Is there a generic"
  },
  {
    "startTime": "00:42:00",
    "text": "sort of part to the whole story or or not, if there if there is a way to generalize then we we may have to Have a structure that holds JWS's CWS's, etcetera. And then separately indicate what the application logic to understand those collections of things. So we may have to look at parsing it out, but I think we that The application needs to know what kind of application logic it needs to understand the trust information that's in that chain of objects. However, they happen to be encoded. Okay. Thank you, Giuseppe. Grazi. Mister Prorock. 1st Quantum. You will notice That there are now two things on the title slide. Just dilate the image. Finks plus. Really aren't the names anymore. Are in San we Francisco? No. I didn't update that either. So let's go to the next slide. We're gonna quick rip through this. I think this is old news for the first couple slides, but they're there. Let's go to the next slide And let's just mention that there's a strike drone falcon. Obviously, if the working group says, yep. Let's go kick this up and go do it. We'll do it. But right now, not seeing a huge demand since know we're starting with 2 other things. Yeah. Yeah. Exactly. So, If at some point there is, can come back and revisit Got a good bet there. Next slide."
  },
  {
    "startTime": "00:44:00",
    "text": "Next slide. This is the big stuff. Got some draft updates. So we got some renaming. This is thanks to this. We have MLDSA, SLHDSA. If you said this things we're familiar with. Thanks to Ori, we actually finally move this stuff over into the Kose working group, kill her, off of off of like, my personal or work 1. I don't remember which one. But, The, key stuff is is now that that stuff's been fully specified. We can go through and rip a bunch of stuff out so we were able to Drop a whole bunch of text. Great. This makes life easier and easier to implement and understand. Next slide. The, big help one that asks, test vectors, implementation tests, all that kind of fun stuff. I think a bunch of us are working on that, but always want more eyes. The other thing is is waiting for any weird parameter set adjustments, finalizations, It could still happen. We should be aware of I think I have one more slide, if I remember correctly. Which is this? The security considerations. We had some really good ones in. We're gonna go back, revisit those, and just double check that they all apply and make sure there aren't any new ones lurking. And some parameterization adjustments were made. Importantly, there's some stuff around, like, padding and stuff like that going on in terms of implementations. And we've already seen some quirky things pop out. One of is brought up earlier, related to Kyber, where, the nest version might have some slight differences because of some of those design decisions that were made as things came over that introduced unintended consequences. And so we should just make sure we get good eyes on that and account for those in the security considerations. We'll do that between now and the next idea Those will go out, and they'll be ready for review. So we will share those with when that update goes out in, 4. Or 03 or whatever we're up to. So that's where we're at."
  },
  {
    "startTime": "00:46:03",
    "text": "One question I do have, and this is really for the group and probably for the chairs, which is at what point should we go ahead now that we kinda know the base you know, at least, for dilithium, I think it's very clear that there's gonna be 3 kinda unique AL combo type deal parameter set identifications. At what point can we register that stuff so we can actually test that stuff consistently across implementation. Sph thinks we could probably either look at the full side or otherwise. But, but I, but I think at that, I think we're at a point where that side is stable enough, and we need to be able to start testing some of these things against each other. And welcome feedback. Chair hat off Mike speaking, I will say that the preregistration procedures At this point, are flexible enough that with chair approval, Things can be done that make sense. There has to be some statement of expectation of stability but free registrations are there exactly to help facilitate early interoperation testing and whatnot so We can have that conversation. Thank you, Mister Chair Hatoff. Are you still in queue? Know. K. Mike. Mike Gamsworth. Both speaking as author of one of the parallel lamps drafts and also speaking as Russ Housley, don't register I am a anything until Mist is done tweaking stuff. That's how you get incompatible Yeah. The, do you have cons do you think we're gonna see different matrix sizes with, Hello, Timothy, out of curiosity?"
  },
  {
    "startTime": "00:48:06",
    "text": "That, I don't know. But, I mean, what you don't want is incompatible test 100%. Yeah. So that's that's one of the reasons I was asking the group at large because, like, If we think we're there, cool. I know we'll probably discuss this in next the Pequip meeting too. Right? But I, I do think there will be some changes. But can we clearly identify enough to test on consistently. That's the big question. So Oh, no. No. No. This would be pre rent. Yeah. So so I said it was distracted, but we we have several ways in custody to have private. Fire to pick now. Obviously non final things, so maybe we can use one of them. That that might be a good path. I think one of the things we're looking at is some of these tests that are going multiple parties that might know, not necessarily Want to get in the same room with each other where you can just say, hey, go. Pointed this. Yeah. Indeed. There is a private use range. And it would be fine to grab some beautiful numbers out of the private use range. And put them in the draft, Excellent. That might that might be a good approach. So That's awesome feedback. Thank you. Mister Carston and Mister Jones? Would that I see at any time that remains? If any, if any, Thank you. Next, we have Orie. Because they resets. Ah, yes. So I think I actually adjust this for once. Alright. Much better."
  },
  {
    "startTime": "00:50:00",
    "text": "So, this is the cozy receipts draft. It's called cozy receipts now. It was previously called cozy Merkel Treat proofs, had even a longer title And with the short name was Kometor, which I did like that name, However, Kozy Receipts is really a much better name for several reasons, like primary reason being that this isn't limited to Merkel trees, It's, generic a scheme for creating receipts for logs that have different proof properties. And so we're gonna get into the changes that have been made, I think these changes have been these are made, since, the last IETF and a little bit before the last IETF. And I, unfortunately, did not present this draft and updates the last one. So you're kinda getting 2 IETF's worth of updates in one set of slides and hopefully That's good. Kirsten, you're still in the queue. But Okay. I'll ignore. Let's go. Alright. So, what is this cozy receipt stuff? Well, you know, I think the way to think about it is it's a kind of counter signature. It's not just you know, I looked at your signature, and I'm giving you a normal cozy counter signature, It's I looked at your, cozy envelope and I'm giving you a kind of counter signature and that kind of counter signature that I'm giving you also says that I have a proof of consistency or other kinds of proofs that go along with that. And that's an interesting, addition to know, countersignatures because it's kind of proving, you know, two things, the counter signature part, and then there's this other proof stuff that rides along with it that can be independently verified. And what's cool about that is that in a simple sort of, cool and possibly dangerous. So love your feedback around on this part."
  },
  {
    "startTime": "00:52:01",
    "text": "You can get a kind of interoperability just by verifying the counter signature piece. So if you speak ES256 or EDDSA, ED25519 or MLDSA or whatever, and you're verifying the receipt, you can just verify the receipt and you can say, I trust The signer of this receipt, I'm good. There's another kind of verification where you can say, I trust the signer of this receipt, I verified their signature, And I verify their inclusion proof, which proves that this message was in a log, a transparency log, certificate transparency, key transparency, or skit, supply chain artifact transparency And then there's an even deeper verification where you can do all of what I just said and then verify the signature on the original message that went into the log. So that would be, like, a use case for that would be, like, assigned binary. That then went into a transparency log where you verify the inclusion in the log and then you verify the receipt signed by the Transparency Service operator. Next. Next slide. So, I kinda got into why to do it already. Just get needed it. That was the first reason. It it's also a kind of this is a we're in cozy. It's a generic building block. Meant to be useful for anyone who has this need to provide a kinda enhanced counter signature that can support these other data structures. And there are, you know, applications outside of just like The direct transparency log use cases depending on the nature of the data structure that you're including your your messages in. But, you know, supply chain transparency and key transparency, kind of the obvious ones and a certificate transparency is the original system that the this particular draft is sort of aligning to as a, as an initialization of the the concept. Next slide. So we're up to 4 now. We've been working adopted for some time,"
  },
  {
    "startTime": "00:54:00",
    "text": "the main changes in a 4 are kind of adjusting the framing. And to really deemphasize the Merkel tree part a lot of people were kind of really getting attached to not liking Merkel trees or, liking them or just talking about them like a lot. And, really, this is about the envelope structure. It's about You have this verifiable data structure or I'll transparency log and you're including information in it, Yes. Lots of systems use charcoal trees. To, to represent that structure, but you could do, you can use this for other cryptographic schemes, like cryptographic accumulators or other set membership inclusion proofs or, Eventually, even fancier mathematics, if you can imagine it, And the draft creates kind of Jaren general purpose structure that lets you sort of register your verifiable data structure and the proof types it supports. And then those can go into your receipt. And, your receipt can get whatever powers come from that data struck sure or cryptographic scheme. And I think, you know, the main the other main change in this version is we were kind of thinking about how to manage these code points and registry integration points for this. So We have kind of two things we need to do. We need to say, What verifiable data structure is this receipt for? So is it for a binary Merkel tree with shot 256? Is it for a binary miracle tree with Shaw Five Twelve, is it for a cryptographic accumulator with some other hash function. So we have to identify the verifiable data structure. And then we have to have a way of including the proof types that that data structure supports, So a binary Merkel tree, was shot 2 56 can support the shot, the inclusion, proof and a consistency proof. And so I should be able to take those, and I should be able to pass them along in my receipt. That I can verify those proof"
  },
  {
    "startTime": "00:56:00",
    "text": "And so what we did was we copied the cozy key and cozy key parameters registry approach. And for those not familiar, first, you register your key type and then you register your parameters that go with that key type. And what's nice about that 3 consumption on the parameters really low because every time you ask for a new key type, you kind of reset the counter and you go back to counting from minus 1 to minus 2 assigning points. Not so nice thing about that is that you kinda have to think about 2 parameters to make sense of the object as a whole. So, think this is a good structure for what we need to do here. But if you read the document and you have comments, love to hear from you on the list. Next slide. So, some examples Here, you can see this, tag 394 in the unprotected header indicating that this, cozy sign 1 tag team has a has multiple receipts, potentially multiple receipts. This is just showing one. And you can see that it fee string sort of here, the entire receipt itself is d is gonna be decoded in the next couple examples. But I wanna call out this tag 394 issue because Right now, Skit is requesting the registration of this, and I think that's incorrect. I think that cozy receipt should be requesting the registration of this header parameter, Since then, you know, everything regarding COVID receipts is in one place, and, and Since this header parameter is not specific to skits use case, it's just basically A generic header parameter you need to use this structure. Someone taller than me. Was it the microphone mic Prorock here? Definitely, I do not think Skid Architecture should be registering 394 unless there"
  },
  {
    "startTime": "00:58:00",
    "text": "some specific semantics item. And I think we dealt with that just a little bit ago with the open ID items and things like that. Right? So when we're looking at the generic structure, If this is the primary generic structure and it's the primary generic structure that's gonna get utilized by SCIT, which I believe it is. Operating in that group a bit and doing some, code around that, I think it should be registered by the draft that defines what a receipt is. Procedurally, who can liaison with Skit and have that conversation productively. I can. He knows there's Okay. Thank you. at least 2 other skip people here. So we could delegate to one of them, so I'm neutral. You wanna Dude, can you walk me out? It's Alright. it's leftover. It looks like the people are gonna let us do it. Yeah. Okay. So, this is the seat. So, actually, could you go back one slide just to it's It's confusing because these are nested and they're encoded. So I wanna call out the blue thing Here. About to look at just the blue thing. Alright. Alright. Moving forward. This Whole structure is the blue thing, but we're gonna look at the specific subcomponents of this structure to understand the anatomy of the receipt So the first part here that's interesting is the unprotected header has this proofs property with minus 222 And that's a a map that has a minus one in it, which is indicating an inclusion proof And then inside of that is this specific encoded inclusion proof. Now the thing I was saying before, like, how do you know that this -1 is an inclusion proof. That's that 2 layer registry structure that I was talking about before. So, and you can see this decoded protected header here says minus 111colonone That's the verifiable data structure parameter that tells you This is a receipt"
  },
  {
    "startTime": "01:00:01",
    "text": "for a verifiable data structure, that is the shah 256, binary mercury, defining RFC 916 2. And that's what tells you that minus 1 means inclusion approved from RFC 9162. So And and just to be clear, the decoded protected header at the bottom the decoded protected header of the receipt that we're looking at at the top. So together, these tell you, this is a receipt. It's, a receipt for an inclusion proof and contains an inclusion proof And this would help you prove that a given message was in a transparency law. That mess could be a key. It could be software artifact could be a certificate but the this is the generic structure that tells you how to do that in cozy. Next slide. Right. So I was hoping this document would be basically ready for working group last call. And as I went through the document, there's a part of it that I still don't really feel comfortable with, and it's this consistency proof design. So in the document, we are initializing these registries for the verifiable data structures and for the proof types. And there's really only one entry that we're initializing them with. It's the RFC 9162 shot, 256. Binary Merkel Tree, and the inclusion proof and consistency proof registrations for that Sure. Sure. And I we spent a lot of time on the inclusion proof, so I feel like pretty good. And skip people will probably matter if we changed it, but It's our document. We can change it So, inclusion group, I feel I feel good about, but you read the document and you hate it, let us know. The consistency proof 1, I just feel like it never got any real re review and skit since they don't use inconsistency proofs for anything. So there wasn't any argument about that structure ever there. So I don't think the consistency proof has gotten anywhere near enough review to call that part done,"
  },
  {
    "startTime": "01:02:01",
    "text": "and we need to finish both of these, in the document, and, you know, frame them well in order for this to sort of establish the registry and conventions for this particular draft and call call it good. And so I think this is come up. Blocking us potentially. Although, you know, It's The main It's the it's the main remaining design piece. So I don't know how you all feel about progressing and addressing that part. And then the other two parts are the early allocation question for header parameters like you maybe don't wanna see minus 222 and minus 111. And examples, the next to ATF, Maybe those could be early allocation. And same thing with the tag 394. And maybe it's good time to request director reviews from IOTeter and you just get maybe some other, you know, well, not skip, but, like, good to request early director reviews to start to focus the attention on the consistency proof piece. Or just gen generally get better comments. I'd like to I'd like to get the document to working group last call, Before the next one, next IETF. Are there people either in the room or participating remotely who would be willing to volunteer to provide reviews. And in particular, if you could review the Consistency text. That would that would that would be super helpful. Who feels like they have enough subject matter expertise to provide useful reviews. I'm k. Monty is volunteer number 1. The the serving banner as president. My disclaimer is a Okay. Fair."
  },
  {
    "startTime": "01:04:01",
    "text": "I will have the opportunity to look at the doctor's and I will You you want the architecture to get architecture to move through? Is is this is this is it. gonna block Eventually. This is gonna go into a cluster with the get architecture eventually. So because we skip architecture takes an normative dependency on Okay. Any other feedback? Iran? Quick comments. Maybe Yeah. More more of a question. The reference in the document is to certificate transparency. Is that a generic definition of a miracle tree that's being reused by Yeah. Skip. Yeah. So a 916 RFC 916 to defines, the minimal binary miracle tree with the smallest consistency proofs for That kind of data structure assuming that, The text and RFC is correct. It also defines a bunch of other stuff, which we're not using any of that. Just using the inclusion and consistency proofs from RFC 91 too, and we're packing them into this cozy structure. And then we're signing them with a cozy sign 1, like a That's the only parts that we're using from RFC 91. Okay. So so my ask is to be very clear in the IANA consider in the IANA Registry, on what exactly is being registered if If this is the ultimate VDS Fine. If this is one specific use case that we know of today. Let's say so. And leave leave the space open. It's just one. And so that we're initializing the red streets we're requesting with this one But the idea is, like, we're gonna see Merkel Mountain ranges and, you know, other verifiable data structures requested for registration,"
  },
  {
    "startTime": "01:06:04",
    "text": "under, specification required policy. That's what the current requirements are, and there's some guidance to the designated experts to know, try and make sure that anything that goes into that registry is hitting a really high bar because you don't want a situation where There's lots of these different systems that are You don't want all the same normal registry issues apply. Like, you don't want duplicates or things that are almost similar or that have basically the same security properties. So kinda want the experts to be really hostile to anything that like that, that might happen. Alright. Thank you, Ori. John Matson. Thank you. So this is a seaborne encoded 509 or C509. And next slide, So I have closed quite many issues in the last two releases got you a lot of comments from Leon Liu on brand Cyprus. Thanks for that. Current version is, relatively stable all the revocation related topics have been moved out to a separate drop. Like, revocation list, and we'll see. And the plan is to ship this as soon as possible. We have also released the updated source code under a free BSD. It's called Indian Ross, It's X 5092. See it 509. Update of the old code fixes Well, the known issues and have the features updating to the latest draft. We are now working on the reverse direction will be, hopefully, be released in a couple of months. So next slide,"
  },
  {
    "startTime": "01:08:00",
    "text": "The main remaining issue is the location of the signature algorithm. There has been discussion in the, GitHub and no real conclusion. We would like to have the group's help to solve this either here, but maybe more realistic on on the list. So basically an 509. There is Two places for the signature, see, 509 shows one of these. But now we got the comment that this, when you want to parse, this great unnecessary complex parsing. You need to parse down in the structure to find the signature Algwick. And, parse back up. And, So there's a change request to change the place on the signature Albert and there's been heavy resistant to that change because, people have implemented and deployed this. So they don't want any changes. Sort of potential discussions make the change. Optimize the processing. Don't make the changes. Keep things as is. Or to basically define new certificate types. So you keep 014, like, dropped version of of the specification, and then you register new for the final Mike Parikh, just wanna comment if we're gonna make a breaking change now is probably better than later, or if if we must do, do double certificate type. But it, it, we're, I mean, the whole part of why we're moving this stuff of that we're looking at looking at the stuff in COZA and CWT is to optimize processing, etcetera. Let's make that change now. I know it's frustrating to people, but"
  },
  {
    "startTime": "01:10:00",
    "text": "it's a dash. Whatever. It's not done yet. Right? Yeah. Mike Ellsworth? I have not read the draft. Are you proposing only the To only have it outside the assigned data, no, it should still be signed. still protected. Yeah. It should still be signed. I I don't remember It is what the proposal was to, but but the proposal is to not change. It's signed currently, and it should still be signed Yeah. Right. Because that's the reason there's 2 in X O Nine is if you have one Five scientist. My strong opinion is that it should keep to design. I will make sure it Yes. is. It. Customer, man, those people who have already deployed this how will they'll they like a solution where we essentially This is a low Type 0 and 1 and only have types 23? Yeah. I I I guest they would be I I am guessing my be okay. I don't know what has been discussed really disallowed and so on, but I guess 0 and 1 would be here, like, it's, some pre standard version, which we don't recommend it. It's not the final RC, but I've been happy to be Sure. Yeah, question. To your question, registering, you know, to note. You're very lucky. That's very quiet. No. We don't hear you at all. Now somewhere between, please. No."
  },
  {
    "startTime": "01:12:01",
    "text": "You're muted. Is this good enough? Is this good enough? This is better. Okay. I'll try to respond very carefully. So what I'm trying to say is test that and personal posting this change wanted it was fine with defining code comments, no certificate types. But in the entire picture, specifically speaking, about recommendation and annotate things. Sorry. Can't really say, but that that's the thing but put it up. So we got finally we've been finding for example, something 34. For the, the new format. Perfect. Can anybody translate this? The the transcription on screen isn't bad. That's it. You have 3 minutes and you have another 5 slides. Is this better? What would you like to do? I don't wanna be on have any more comments if we this issue. We discussed this issue. Otherwise, I go quickly through the slides, then we have to doesn't seem to be more common. So then we go quickly through the slides. Next, So we have added pen. We have now 3 ways to encode things in or it in pen. Next we have as agreed, we have stated the way how to signal, between certificate request and did we get native and non native Next. We have defined, as requested, we have defined structures for private peace,"
  },
  {
    "startTime": "01:14:01",
    "text": "You can see them here. They're quite simple. The exact format of the subject private key is the field to do. Next. We have registered media type. Content format and We are using the content format to the file format. According to this magic number RFC. The next Yeah. Add it. Finally, added examples of, DebID certificate, Yeah. Next. And, yeah, next step is to encode in regards direction in public that also under free BSD license. It will also be done in Rust. I think we're quite quite stable, hope to finish quite soon. More reviews, welcome you to be ready for working group last call. Later. I think we need to continue discussing this top speak about moving this signature. Hopefully, now people are up to date on the issue. So Mike speaking is an individual I mean, it's always the case when doing data structure design that The preference is not to duplicate information because if you duplicate it, Then you have a new air condition, which you've self created, which is What if they're not duplicates? We, we only have one now, and the the we are not want we are not planning to take back to it. It's just moving the place where the signature algorithm Oh, okay. As long as you keep 1. That's us. Uh-uh. more constrained Yes. We we've been much session. Thank you. We'll keep 1 and it will be signed. The the only question is we're infrastructure. And and what is the reason for potentially moving it? To optimize processing. So you don't have to dig down to find the signature, Albert. Yeah. The the complaint that it's not"
  },
  {
    "startTime": "01:16:01",
    "text": "optimal to process is is valid. Yeah. Okay. People are encouraged to give feedback on that. Thank you, John. To buy us, you are up next. Thanks, Mike. Can you hear me? We can. Maybe talk a little quieter Okay. Thanks. So this is just a quick update on a previously adopted draft. Next slide, please. So development since the last ATF meeting is we've changed, to use the e c key type. For Jose and the equivalent EC 2, for Jose. Because, we are using uncompressed key representations. And we've changed the identifier spelling, to represent and reflect the fact that the algorithm, in its origin, sorry, the curve and its underlying origins as representative of people's initials, Next slide. We currently only defined uncompressed key representations, and that is because there is no suitable, stable reference to a compressed representation, there is one defined in expired draft at the CFRG for pairing friendly curves. However, the compression, compressed representation is bespoke to these curves. So it doesn't follow, say, sec 1 where there is, a predefined kind of standardized format of metadata for indicating compression and the sign of the wake of and instead sort of uses a a variation of sec 1 that is, to that takes up the 3 additional bits"
  },
  {
    "startTime": "01:18:00",
    "text": "remaining on a bike boundary for, fully, curve. And so that is originated from a Zcash implementation. And because that is not standardized, we have moved to an uncompressed representation to remove our dependency on, on this draft. It does leave the question though for this group. Do we wanna also define a press care representation, And if so, how would we go about that? I think slide. I think that's Pretty much, actually. And discussion. Hello? Corey Steele. The don't do the compressed curve. Representation in this draft. But now I'd like to talk a bit about what it might look like in another draft. Like, It's basically the same thing that we see for of the p curves. Terms of compressed representation. So the why piece is gonna become false or whatever. And then compression's gonna go into x. And then On the other end, someone's gonna always decompress that to put it into whatever format they need that supports the expanded format before they use it. And, like, The I know it sucks that the original versions of these keys were done this way, but, like, in my opinion, the compressed keys are, like, Mostly not helpful. And in in the go cozy library, like, we're probably not even gonna support them at the interface boundaries. So, like, I don't know. I may maybe someone says, like, I really like compressed key is like, that's my favorite thing. Definitely go do it. I think do it in another document. That's it. That's it. Thanks. Sorry."
  },
  {
    "startTime": "01:20:03",
    "text": "And and that's a short update, really, on the draft. Alright. Thank you to buy us. Finally, Tiro. Good afternoon, everyone. I presented this draft yesterday in, the of the working group, and I got several feedback. I I I don't plan to go through all the slides, so work on the feedback. Next slide. Yeah. Sure. Being traditional asymmetric crypto next slide. Yeah. MLKIBOR is one of the finalists and potentially will be standard as in another couple of months. Next slide. Then skip this slide. Yeah. I think this is the one that's in that's of interest, I believe, that we already have of course, the HPTE, which is already being, going through, I think, finalizing this working group. We recently published an hybrid screen draft which is basically talking about a combination of, traditional, cryptographic algorithm plus, PQM, that's typically referred as hybrid schemes. And then the eventual part is to use pure PQM. There are several reasons to do that. One is that it's already being, advertised as a CNSA, 2.0 standard. Mlkim has been around for more than 7 years. And, once cryptographically relevant computer computers. Alright. Then you we eventually have to deprecate traditional algorithms. So but what I realized after publishing this draft and then the feedback I got from the working is, I was in the the working group, I put in CFRG, but ML cam, doesn't seem to have the same,"
  },
  {
    "startTime": "01:22:02",
    "text": "security properties as what HPE does because of the way, the key derivation binds, the ciphertext, and the public keys the way, HPG does, whereas MLCOM currently does not bind this for text, and that to get the same, binding properties. There's a new Vicky, a ML campaign proposed in the CFRG. So I eventually plan to update this draft to align and make sure that we have the similar, security bindings that HVAC EAS, and, we will publish a revised draft. I think I I think I'll stop here because rest of the slides needs to be changed based on that exact exact exact Next, That's it. Yeah. Oh, you're done? Yeah. mean, I Since the feedback, I already received there's no point in going over that, but If there's anything new feedback, I would like to hear. Alright. Ori Steele. I'll give an abridged version of the same feedback I gave him, Hosey, You know, for cozy, we have algorithms. We have a lot of them. We we could go about adding these cam algorithms as sort of 1st class entries in the registry for cases where we previously had no ECDH algorithms. There's a lot of ECDH algorithms in the the cozy registry now, And there's about to be, like, a bunch of HPKE algorithm that are gonna fit in there as well. So the same sort of comments that I gave in the in the housing working group, does the cozy working group want These chem constructions like, like, just the native chem construction without the HPKE wrapper and the HPKE wrappers. And there could be, maybe because of the unique, concise and, you know, IoT deployment, considerations for cozy."
  },
  {
    "startTime": "01:24:03",
    "text": "Perhaps there's a reason to come to a different conclusion than than Hosey. On that, that point, but my general sense is, like, let's not have a bunch algorithms that are doing mostly the same thing. So that's the basically, what I said in Hosey, repeating it. Yeah. For for this audience. Yeah. Makes sense. Thanks. Anyone else who's following this space closely like to had any thoughts, I know there's a number of you in the room. Yeah. Yeah. Yeah. Mike Prorux's off mic. We got a lot of this yesterday, but he appreciates the work. Thanks. Alright. Thank you, Tiro. Is there anything else people would like to say generically about or to the working group. Otherwise, we are right on time, Evo. Would you like to say anything? Yeah. So on the chat, we were to casing cord, we can get quick vote for the, C549. And draft. Basically which way they would be going. I don't know if anyone can summarize this better. But Yes. So in Well, basically, guys. Question is whether we I don't know. It's John wants to we can get the site to join get the poll, but, yes, whether we want to have this this this I'm"
  },
  {
    "startTime": "01:26:01",
    "text": "the, you know, more efficient way to on the t o I mean, the present the toy. Yes. Thank you. And go Can you hear me in an some reasonable loud sense now. If. Okay. So Yes. That's better. Thank you. So the the proposal that was discussed Was to move in the chat Mike Consworth kindly included the format of the certificate, And the proposal was to move the issued signature algorithm Which is currently at the end of TBS. Certificate. To, the top of the structure. So you don't parse twice. Before you know the signature algorithm. So that was the proposal then there was a discussion. In the mailing list, whether that's what maybe we should make that change at this stage or not. So essentially, let's say it's the instead of the last entry, would it be, like, second or third entry in the and and that that doesn't matter. But if it's before all the bulk content, that was the request by the Person making the proposal. Is that clear, the proposal? Yeah. I just put a, straw poll It says vote. Yes. If you wanna move the location of the algorithm. Now the the question is about is is your signature algorithm? In response to the chat here."
  },
  {
    "startTime": "01:28:05",
    "text": "John, go ahead. Yeah. This seems quite clear that we want to do this optimization. Then the question is, should we should be designed, align new numbers. I guess, that was not in Current question to still support all the implementations. I think we have many numbers that That's not, that's not a problem. Problem would be if we feel that it's split deployment? Clarification question is They're already preallocation of assigned numbers for this draft? No. There's not Alright. Well, If I were Jim Shod, which I'm not I would be saying Until it's final, it's not final. I wouldn't suggest Well, as Jim would say all the requested assignments in the cosa registries are TBD until they're actually signed. So it's up to you what you want to request as numbers, and you can change your request, but they're not final until they're all allocated. Okay. Could I come and come to Yep. That's fine. Yeah. My recommendation would be to just change the numbers. Only register the new ones, and, maybe Marky, or what that's reserved. Okay. Kirsten, I believe you just had the last word unless urine. you still in Are the you. Yeah. So could we ask that same question to the to the working group?"
  },
  {
    "startTime": "01:30:05",
    "text": "Okay. Our limited response seems to support Kersten's suggestion. Thank you all for an engaging and a hopefully useful session to each of you. Enjoy the rest of your week. Thank you. Sorry. So, ahead. Evo, go Mike, could I could I ask one more thing. Go ahead. Yeah. I'm gonna So so we are we are we almost resolved this issue we're assigning new numbers But we also had a question if we should like custom proposed reserve the old numbers or if we should recommend. I mean, or we can just take that simple question. Should we serve the old numbers so so that people will only use new numbers new deployment. Was was that implicit in your question? I mean, you only just asked Should we take some money? And, again, I'm not gonna run pocus where every time. But Yeah. I think it's too many I think there's no objection to Carsten suggestion. Let's do that. Go Yeah. If if you wanna take that question to the list, you can ahead. feel free, but I think you have actionable outcomes. So Okay. you. Thank you. Thank Thank you. Thank you, Eva. Good morning."
  },
  {
    "startTime": "01:32:35",
    "text": "To get"
  }
]
