[
  {
    "startTime": "00:00:03",
    "text": "Some more private Oh, Okay. That's for the rich You turn 82 hours down. Okay. Good. Other rides Okay. Good. Good morning, everybody. It is half past. So, call the meeting to order. AJ. Good morning. Is this working? Okay. That's better. I'm just gonna as they say, lean in. Okay. So it is half past. Welcome everybody. Welcome to everybody online. The quick reminder, this session is being recorded if you don't like being recorded, then sits somewhere where you can't be seen. And don't say anything, obviously, in the same So, agenda, is as published, there's been a small change to presenters. Your guess is had to go home slightly early, so Cedric's going to do the, the technical part on registration policies, but otherwise, no agenda hacking. So we are as posted. So first first bit of that is the introduction. So as ever note well, the note well, this is an official meeting"
  },
  {
    "startTime": "00:02:00",
    "text": "we are all bound to the rules and processes of the IETF, if you say stuff, and you are responsible for it, And if it has IP implications, then you're responsible for those 2. I'm sure we all know the note well by now. If you don't, please really do familiarize yourself, with it and with Bcp 79, because we have to take care of this all the time. This is a good moment also to remind everybody, as part of that, your attendance at the meeting should be recorded. So if you are in the room, you can join the light client on Meteco. So just, you know, hop on your phone and press what they call the on-site tool that will record you automatically. If you don't or can't do that, then please do make sure at some point before you leave the room, you scan this and, yeah, we'll just pass it around during the meeting. Scan the QR code that'll get you recorded and you get nice, a brownie point. So you get to say you at one of the best events of 2023. So note also the the note really well, the note well really is all about, the the the content that we produce and discuss at the meetings, the note really well is about the conduct and the way that we do that. We're all cool people. We're all here to do cool stuff. So please be cool. And if anybody does have any concerns, if anybody experiences any negative you can, of course, report it. We will take it seriously, and we will make your environment a nicer one to be in. So, there's some links here. That's just for posterity. If if if anybody gets lost, so we don't need to go over that. But note taking is important. It's very important to reflect accurately what everybody says and how the conversation goes, Mister Steve Lasker has kindly agreed to take notes, so we already have one but if anybody else would like to help that would be offensive. Okay. Thank you. Another volunteer excellent. Looks yeah, what what's your name, sir? So Frank Shell has just, agreed to do that. Thank you very much."
  },
  {
    "startTime": "00:04:02",
    "text": "And, anybody else who likes cute hedgehogs you get the bonus of seeing the queue hedgehog if you take notes. So thank you very much. That's it. I think I think that's everything for intro, intro, So, with that, we'll start the 1st real session oh, this is I'm gonna quickly check-in the background that we have the right version of the slides because that's wrong. Be 5 minutes. But, Mister Hinkbergholz is gonna come and remind us why we're all here. To. Yeah. That's the other one. Alright. Okay. Which the multiple other ones, this one, Okay. Hi. This is Hank. Everybody do the Monday session at the IETF 118, It's early in the morning. I love that. Again, my name is Hank, and this is a small recap on Skip. Next slide, please. So, it doesn't work. It doesn't work. It's animated. So flames. Yeah. So I can't read this, but I don't understand. And, yeah, what do we do? I'm gonna put the PDF version up because if we can't see your animation, this will let you at least see your, text. Yeah, what's the point of Very good. Thank you. So, yeah, are we doing? Skip, a lot of, trust in signing things as needed over time. Trust relationships to trust anchors and certification of thoughts. That's a thought of change over time. Key material sometimes even gets lost. So you need authenticity, for a long time."
  },
  {
    "startTime": "00:06:02",
    "text": "About statements. So our car model here is a simple scalable authenticity layer for endorsements endorsements is what I'm talking about. I have few examples here because we have a software supply chain use case at the bottom. You can see which come These statements can be softwares of materials that can be relationship statements about them like on-site, etcetera. There are things out there. And when you look at regulation requirements, authenticity and signing is not the first thought. Skits makes this intrinsically it's first thought because products will move along your supply chain statements will be accessible as well as some of them that they're not you, and, some importance in in retaining authenticity after the fact when the certificate has burnt out already after the 3 weeks of his lifetime or the company has burned out of its 2 weeks of lifetime. So next slide, please, Yeah. As soon as I get my network connection back, Okay? Thank you. So what we're doing here is we are combining a few things that scalable and lightweight and such. So this is compact. We're using seabor as this authenticity layer, we are, you know, trying to they find it very well so that it's not ambiguity here. So we're using a data definition language for that. And, of course, we are using a established signing mechanism for Siboa. That's cozy. So these are very obvious building blocks. And, with this, we signed 2 things in the end and create 2 things in the end. It's the thin layer around your statements. I always bring up the, example of a cat video you can put in there whatever you want because that statement is opaque to the sketch intrinsic services and the various blocks that we produce. That is created by the issuer. The transparency service in the middle that acts like a notarization service is basically"
  },
  {
    "startTime": "00:08:03",
    "text": "storing all these, statements in a, append only lock to make them parent. Again, this is a building block in order to actually query something or, to put something into such a append only lock, you will need applications. This is not the application. This is the authenticity layer. You're defining here. And in the end, this receipt you will get back. We call them receipts across. It's actually really cool. As now basically a delegation of trust to the transparency service where when you have this receipt, You have a proof that you said something. And sometimes, It's it's good enough for a small thing to have a offline via validated approval because sign, you can, again, with the trust anchor, with certification path check its validity offline, that's good enough for some scenarios. And if you don't know what that received actually means, and what the pointer to the registration policies that's in there are mean right now, you can put it to a policy service that's close by and it can check it for you and say, oh, that's a okay. So you can install that firmware. Or you can not like that s bomb that is basic data presenting some software that you are running right now as a service. And so all these trust relationships are somehow going through the, transparency service that is the application layout implementation of a skit. Authenticity system. So that's our recap. You're basically defining 2 things to sign. In a certain way of causing seaborne. One of them is created by the issuer. One of them is created by this transparency service. And this is a convenience function that will have a lot of CAs and the RAs who survive authenticity quality and regulation control for decades to come. Yeah. And this is basically my last recap slide, I think. Yeah. Yeah. Am I doing that also? Oh, I'm also doing that. Okay. Yeah. So, Hi, Adam Heng."
  },
  {
    "startTime": "00:10:00",
    "text": "We have done some work. So, we have done something quite unusual We had weekly I work in group virtual interims. Some ADs found at that. I understand that. Weekly meetings are very rare. I think we're the 1st No. Better or not. A seaborne, core interject so that could be called weekly, but, you know, it's for that ligands. 24th. Let's not talk about that. We we did a lot of virtual interim. And the point is that we had to do this in order to get together, I'm not a IETF, I wanna say. So for newbies, new attendees, that are not really familiar with the process, also not really familiar with this thing that we are building because of course, and then something we're talking about s bombs and salsa and all this good stuff. You think you can clearly something and now you know your response is good. We are not doing exactly that, but we are doing that in hackathon stuff that's coming later. What we're doing on the documents we have, that's a use case document and an architecture document. Is basically improvement on how these, sure science statements are created and how they are. Then added to the penpony log. That's here. For. That's basically tax additions. Then, someone recognized that we are a little bit weak on the normative language. So all the shots in there were like, and what's the reason when this is not a lot of shots have gone out the, the moment of Texas is way more crisp right now. Are basically as an implementer. It could be implemented before. So we have again, last rocket fund. So I've seen that you can even offload this to engineers, and they have no idea what this and they can implement the the the prefix was it would be easier with better normative language. We have, yeah, a lot of clean up to the, you know, reference to claims are not going to the detail of that. That's a long, long thing. We have a clarification on a feed purpose because we add some cozy"
  },
  {
    "startTime": "00:12:02",
    "text": "had a parameters that might or might not be needed here. I will jump ahead a little bit and say that we renamed, for example, feeds to the subject. That's not only renaming. That's a reuse of the CWD claims and cozy header parameters. ID that's going to work in Google's call right now. So we want to bundle some specific metadata in the issuing the the the issue, envelope and it's not entirely clear with this course. That's why they're mostly PRs. On that. Again, you'll see WKlabs and headers yet another PR on this. We also had a bucket before where we stashed a lot of these, skid specific metadata that they don't actually want to, registered, registry necessarily. That's what's called rec info. It's still in there. So do not be confused that we now have CWT claims as one item in the header and this rack and for another item in the header there kinda a redundant or maybe not, and there are some discussions we have to really figure out. So they're both in right now so you can see that the, alternatives. I see Mike on the queue have a look at the last ti here. And, yeah, the last one is basically, consistency of terminology because sometimes, we were not clear. We want to say consumer producer, I think that is TMI because next the mic with a question or comment. Actually, Mike Jones, CWD claims that headers has finished IETF last call. It'll go to the ISG telechat. The month. That is that is excellent. So so we we are looking for yeah. It was looking stable enough to rely on when we started this already. So we are facing you, of course, and in the process. And so that is, that is my update. So what we can say in in summary, I think, is why we had weekly meetings that sometimes"
  },
  {
    "startTime": "00:14:01",
    "text": "Circa around a topic. And then again, courses weekly, but it was really necessary to bring full together that I'm not familiar with the IITF process. Sometimes I'm not familiar the the, structure of a cozy envelope. And and sometimes I have to learn over time how this works. So we are actually onboarded, I think, and that is a call personally a call that is success can't really measure NPR numbers and then slide updates or running coders. We informed and not have transferred a lot of things to to new members, to new attendees, and I think that is worth the effort Nevertheless, I think we are now planning to tone in a little bit down. Go away from the wiki. Each other. So that's my recap. On the PRs. Send anything on another slide? I think so. Oh, yes. And yes. Oh, yes. That's cool. I changed this twice. Okay. Because the first item is one item. And so this is, of course, the eye document we started with So that is the use case document. It's manifold. I think it's also has a very cool feature all the use cases are not, destroyed. Is somehow always overlap a little bit. They have some commonality So they actually, when you compose them, like, most like, they form a bigger picture. And again, Sometimes you feel that there will be the the the the the 2 signing things that are authentic authenticity layer that we're building here will provide queries and is is is is immediately effective on web size and available and and and helping you and your your your supply chain needs with authentic statements about supply chain products, but Again, this is a 2 layered system, the use cases was to drive them all, and define the requirements for the scale authenticity layer but in the hackathons, because it's out of charter for now. We bid at the, proof of concept code around that. And,"
  },
  {
    "startTime": "00:16:04",
    "text": "Somehow there's an item missing between call of adoption to speak So this is not correct. And so there's a work we have a working group last call on the use case document ongoing. So if few I I ideally I would like to see a a show of hands if someone, in here could also volunteer to review the document who is not the author of the document. Yes. Okay. Ori, I don't see that. It's NCR. Okay. Okay. Yeah, so we have 3 people that's excellent. We should write that down. Yeah. It should say that the walking call us ongoing, and then just still have a chance to comment on it. So that's what's supposed to be on that slide. This I think I'm done. I'm just waiting for the slides Yeah. You are. I just so Yeah. We changed the slides this morning to reflect some of those correctness whatever is. I I uploaded it, but they're not on the, pre share for me tech. So I'm just gonna put them on my, on my screen instead June. There we go. And Okay. There we go. Thank you. So thanks, Hank. Didn't see any more in the queue. So"
  },
  {
    "startTime": "00:18:00",
    "text": "We're gonna move on to registration policies. So 2 presenters here because this was, a big topic at, 116. We discussed it a lot, we had a a recap, and then we kind of put it down again. So thanks Sorry? Well, and during the course as well, yes, of course. So a bit of a recap there. And then, Cedric's gonna go into some improvements and thoughts that we've, that we've had. I'll sort out the formatting later. So but let's have the right content. So, a reminder for for folks, in the simplest possible terms, as we defined in the, the the document current draft and registration policy a simple set of rules evaluated by the transparency service to determine if miscibility of a statement. And it's worth remembering that, part of the mission here is as Henk has already reminded us, to, have lots of statements rendered transparent and give you this decades long trust in in in things that took milliseconds to create in a moment. But have very long shadows. And so just accepting any old thing, makes the the the life of a verifier or a trust system or a court. So we need to have some kind of, control over what we think is actually, admissible to the record. And we had a lot of of debate about that, and it was all quite confusing. Again, Henk's kind of covered covered some of that because a lot of, layers were discussed. In terms of sort of application versus component versus message level, but protocol level stuff here that all got mixed up. And also even about sort of the requirements of what they were supposed to do mixing up. General purpose access control type principles with actually making a conscious judgment type things. This is, you know, it was"
  },
  {
    "startTime": "00:20:01",
    "text": "kind of kind of complex, but we landed, I think the consensus of the group as as as I observed it is that we have a a small number of requirements that define this minimal, simple set of rules. Concept, which is it needs to be payload agnostic, and interoperable where as for for anyone the room, I see quite a few new faces. So just, as a bit of background, to make sure everybody's clear the the seabor, CDDL, cozy, nature of what we're doing here is exquisite interoperability for transparent payloads so that you can move them around so that in pretty much any application that needs to record something knows exactly what message to send and consent it without having to, you know, mess about with knowing whether it's an s bomb or whether it's scan of a PDF of a self attestation, you know, we don't we don't care about any of that. So payloads themselves are are opaque, but obviously any payload you wanna send to any transparency service should work and should honor the rule. So that's what we mean by by those two things together. We absolutely can't predict all use cases or inputs so, you know, if it's gonna make a conscious decision about whether the thing it's seeing in front of it is is is it acceptable, this group can't define what acceptable means, in no small part because, well, that will be up to the application and the application layer is out of scope for us. So, so again, we need to have spaces in these structures which are able to transport, faithfully transport all of the sort of input signals and an intention that we want to enable without, unnecessarily constraining or trying to guess everything that will ever happen in the next sort of 30, 40 years."
  },
  {
    "startTime": "00:22:01",
    "text": "So we need extensibility. And then we need to address 2 sort of broad areas of of functionality. There is general control, and the most important 2 of those. You know, API implementation is an issue. We need to make sure people can actually build these things. But the important too in terms of the, the working group documents is a concept of anti spamming. We don't want to fill up the transparent record with just any old stuff. It just makes everybody's lives really difficult. And it is mandatory, and and and this we end up including partly because, of of the discussions at 117 over identity and and things like that, just to be very clear, that in this system, you can't issue a statement to the transparent log. We don't use transparent log, but, yeah, you can't issue a a statement without being somehow identified as an issuer. There's lots of leeway in exactly how you do that and how many keys you have and whatever else, but the point is you must be authenticated and identifiable in order to make a statement. And so we need to kind of separate out those exquisite interesting details about what it means for message level signing versus wire level authentication, which is kind of implementation, and and whatever slightly different details, and then what that means in terms of, the entity recorded as being responsible for the statement versus the entity that actually sort of moved the bits and bytes around and contacted the server and pushed it up there, getting slightly different things to accommodate those. And then there are what, Cedric's gonna go to talk about, which is the statement specific registration concerns. So somebody in, again, for those who are not totally familiar, the fundamental thing in Skit is that, it enables entities, called issuers, to make statements, which is a bunch of claims, about about, things, which is"
  },
  {
    "startTime": "00:24:00",
    "text": "We don't care what it is, but it's a thing. One important thing though is that if you make a claim about the same thing, it's the same thing. So you can say, you know, I I built my software My software was reviewed my test passed, got my release approval. I released it. And the it in those statements, it should always be the same so that you've got a coherent links kind of graph, of knowledge about that piece of software that you're potentially bringing into your risk profile in your business, that kind of thing. So clearly, in some cases, it's really useful to allow people to talk about your thing in terms of, you know, I looked at it, it looks cool, or I bought it or I, you know, I tested it. But in many other cases, it's very unuseful to allow just anybody to talk about your thing without it being very, very clear that it is them having an opinion about it and not your opinion about it. So we've got the these kinds of subtleties really need to be built into the structures because although they are and may seem very kind of applications and going into semantics of supply chain operations and whatever. If we don't have places in the structures that very clearly communicate these concepts, the applications won't be able to build use the building blocks. So that's a kind of really cool saying for for what we're doing. And then underneath there it go. We wanna make sure that things are, not unreasonable in terms of the of knowledge or where you have to move things around or introduce bootstrapping problems, that kind of stuff. And the bottom one, which will be very important to what, Cedric is going talk about and a a big breakthrough that, that's been made. In the last sort of couple of weeks. Is that registration policy determines whether or not a statement is admissible, and that can include things like if you've got a decentralized or distributed system, and you've got lots and lots of bits of software or machines making"
  },
  {
    "startTime": "00:26:01",
    "text": "statements about stuff that's going on, they might not necessarily issue these things in the right order. They might owe you no that they're racing with some other better informed entity that's to make more useful claims, things like that. So just as one narrow example, you know, if things arrive out of order, you might require or request the transparency service to not record it because this thing is it it is it's lost its usefulness before it was ever recorded. I want to reject that thing. So with those kinds of rules in place, If Henk comes back in 20 years, to verify a receipt and say, well, you know, this thing clearly when it was signed, it was okay because signings always okay. In the moment, but now knowing all that I know, is it still okay? You need to be able to go back and not only verify the crypto and say, yeah, the crypto okay, but also say, and how was this thing produced? Was it actually properly vetted was the issue of properly validated. Do I now know that they had their key compromised at that point, but I didn't know at the time. All those kinds of issues. You can only truly verify that. If you know both that the statement is intact, I, e, authentic, I, e, has its integrity, and also what policy was enforced at the time it was accepted, that you know that that policy was properly evaluated. And it's that last thing that that, Did seem exquisitely complicated when when when when the group first started working on it, but has now become are very, very simple. So won't, I won't go into any more of that because Cedric is going to do that on the next slide, but Small short version is we've identified a way of of eating the one bite at a time. It yeah, it seems seems to be working. And so, obviously, working group is always at liberty to work on whatever it wants to, but, I would expect that if if people are observing,"
  },
  {
    "startTime": "00:28:03",
    "text": "expect to observe work on the registration policy stuff because there's been some really nice movement in the last last couple of weeks. So, Cedric, if you'd like to explain to people progress, that will be fantastic. Okay. Yes. So I'm I'm Cedric. So, So, yes, we have been discussing that for, quite a while, but I'm happy to explained, but, we're working there as you can and notably, I had back ethan yesterday. So the So the as explained by, John, the main challenge is, that, in many cases, to understand what what the the research statement means and what the receipt means. You need to know the context or the configuration that was used at that time. So, when you verify your receipt, you know that you have and the issuer signature, you know, that you have a statement coming by the issuer, and at the point of time. Now, part of the configuration are critical for that. So as an example, if you are using a certificate certificate by Zay notification. For the issuer. Then you need to know which route certificates were considered acceptable at that time. And, similarly, if you, are enforcing some, normalization and subject the state won't really need to know what were the rules beyond false at that time. So next slide, please. So, the first part of the solution is March and the role. It's all something you have been working on for a while, but where we are, we need to aware, that is,"
  },
  {
    "startTime": "00:30:00",
    "text": "to uniquely refer to a transparent segment as it has at registration time. So the important event here is the fact that, size set mount is made transparent by registering it into trans into opportunity log. And we won't be able to refer to that. You know, enormously. And so that's what we are calling, registration IDs or statement IDs. And, once we have that, then next slide. We can, bootstrap the process. Right? Of studying, the consideration or the registration policy that is being unforced using, state months of a party to that type. Onto the transparency service. And so we have, let's say the 1st statement on the transparency service that defines It's usual configuration and then that configuration. Can be updated by issuing and registering a new configuration statement that describes the chances and made them transparent and the data board. And now we can use the statement ID for that. The, the, the latest on the current registration policy. To refer to, the roles being applied. At the time of registration. Next slide. And so now when, we register some, further state bonds fun, less any other issue. Also, we can, embed into the receipt the this, unique identifier to the policy. That was on force at that time. Next slide. So so now some verifiers will be satisfied by received. Some of the house may verify also the signature. From the Israel, and some of that in the details of that can always go and fetch. From the trans balances service."
  },
  {
    "startTime": "00:32:02",
    "text": "The policy that that was applied. And, so that they can, confirm what was the holes that were applied at the time of crisis, And so of course, you can, next slide, you can cash that. So, you expect configuration not to change to a file. And so, most cases, you can you are we have it located. You can also a step at it where what is, very important there is that as before, the verifier need not contact the transparency service. It can verify that we see to file the statement that it is, Constidling, and also the receipt for the persistent mandate refers to And, all of that is just according to Schipholapa. Yeah. Next slide. So, in short, it's good to see. We can, in copper height, the the, the, the moving, the moving bits of the registration policy as skid statement. So it's like them discoverable and transparent. So it also, increases the trust and the deductibility of the transparency service itself. It's also a good way of, removing some of the bug back on the complexity of the architects up in particular or complexity is not gone, but now we know it can be, content into how we are going to define the details of the you rational the details of the registered policy. It's not, some other text, in the architecture anymore. So there are still some, technical, questions. So we have, have been discussing, firstly in particular how much, integrity we can get out of the process. So as a baseline, it might be okay to trust the transparency service. Attribute and to return the correct ideas. But, We think we can do better in particular. We, we will prefer to have the ID being, authenticated and,"
  },
  {
    "startTime": "00:34:03",
    "text": "extracted, you know, reliable manner, how it's, the. So that, to remove further opportunities to be confused about wet, transparent segment is referring to next list. So, there are, many other, open questions. That, there's seamless, problematic artist, think we know enough about them to converge on that point for for the first session. So terminology. So we have been, moving back and forth between calling, those is a whole federation. You know, since we don't want to have, separate configurations of if that includes things that talk about, policies for, like, software patches or whatever. That is not directly related to registration. And so so I think we are leading to our configuration that, that buff, black. That's the that's the situation. That's the state so, we are I've also been thinking that it's, although we aim to provide generic support for a supply chain. Transparency in most cases, you want to actually document the application profile and explain what the situation is, what are the some holes for that. And so we have been referring to that. Formalizer as an application profile. And, we think that the configuration maybe a good place to, include that application profile, maybe just as a It's the SDR to begin with, but at least the place of, it can be recorded and, that it is discoverable, So, We don't want to go too far there because they are, supply shines comes in many, shapes and colors, but what we I think it don't do is try the copper like exemplary very simple, use cases to show how we can have, some some tax for them. So it's for internal validity."
  },
  {
    "startTime": "00:36:01",
    "text": "And then, stop there, and let people decide what what are the most useful patterns and which needs to be, stop the lights for her a heavy chance. Of certain of the architecture. So quite deliberately, we are also leaving the rules for, actually, registering and updating the registration policy itself. OPEC. So that's implementation specific, of course, It should be documented, but it seems out to agree on that, in general. For Irene Lemonteshaan. And we think that's already being able to, get the, a sequence of of, configuration updates. As a series of, same transfer on set note is a is a is a good step forward so similarly, we think the registration policy is always going to be, mostly opaque through the ski kia. So, be part of it is going to be specific to the application or to the implementation. But it offers, but be working. I would talk about, for example, let go to include, a list of good certificates of early stuff she bought it. Content types are supported, mechanism for identifying issue, I was, would be good enough for this Next slide. That's it. Okay. So now we're done. Thanks. Etcetera, No questions in the room? Okay. It's an early morning crowd. Okay. So next up. Sorry to talk about the seaborne API. Awesome. Hi. I'm or if so There's gonna be 2 sections I'm gonna cover. The first is gonna be a high level description of the CBAR API the conceptual messages that communicate these concepts that you're now familiar with the signed statement, the receipt, transparent statement, And then after this section, we're gonna look at, high level sort of"
  },
  {
    "startTime": "00:38:04",
    "text": "transport aware API for moving these conceptual messages, between is Next slide. And and by the way, I love questions in the middle of the presentation. So if you see something on the screen, you have a question, Please go to the microphone. I'm happy to answer. As we go through. At this point, you're very familiar with the core operation that Skip provides. I as the issuer give you The transparency service, sign statement, I received a receipt. So the statement. We've said this word a lot could be a file could be an artifact, could be a set of claims about an artifact, it's it's it's We use the word statement. As a placeholder for its generic structure. That's relevant to a supply chain. We wanna provide integrity around that structure. So we need to produce a signed statement In order to do that, we take the statement, as itself, an opaque payload, We add additional issuer claims. We use the issuer signing key or, signing capability. In the case of the keys, backed by hardware or you know, some more complicated security process to protect the material associated with the issuer. And then That issuance process produces the signed statement. And After we have the signed statement, We can perform registration. So we'll take the signed statement. The transparency service will apply its registration policy if if if if the registration policy is, the Decision is to admit the signed statement That sign statement will need to go into a transparency log or an append only log and as as as part of once that operation is complete, the transparency service can include It's It's notary claims. It's perspective on what has just happened."
  },
  {
    "startTime": "00:40:01",
    "text": "And used its signing key or assigning capability. To protect the receipt, and the receipt is produced at that point. Then Now we have a signed statement from the issuer and a signed receipt parentee service. When we compose these 2, we received this transparent statement. And that's the sort of core pseudo seaboard API, and you're gonna see messages in a second that are gonna correspond to these these components. The coloring on this, slide is meant to sort of convey how trust improves over time as parties to commit themselves to the byte representation of information about a supply chain. So we start with the statement not really trusting this thing. So take We don't really know what it's about. No one's looked at it yet. As part of reviewing that, statement, statement the issuer is going to commit themselves to it. So the signed statement are already includes a higher degree in trust of trust because the issuer is signing over this object there. Evaluating and they're making decision and they're signing. And so trust has improved slightly by signing this original statement. When the receipt is produced, the notary has also authenticated the issuer. So there's further, improvement in the trust And then when the sign statement and the receipt are composed, transparent statement is achieved That's why the transparent statement is green. And these other, artifacts are on the color spectrum towards red. So it's meant to, convey that there's an improvement in the review process hopefully, more chances to catch potential problems in the supply chain And that's why the coloring is the way that it is. Next slide. Okay. So I hope you all have taken, seabor, extended diagnostic"
  },
  {
    "startTime": "00:42:02",
    "text": "notation 101 because that's what we're gonna be looking at for the next several slides. In case you have not, I am happy to answer any questions you may have. One note is that, In designing these message structures for Skit I had to learn extended diagnostic notation. I had to learn CDDL. I really wish someone had come up to me at the beginning of this and said, Just learn extended diagnostic notation and CDDL before you start talking to anyone, it will make your life a lot easier. It's been very, very helpful to me to just look at these examples. Instead of trying to match up the the seabor language and the English text in our document. So I found that working with the exam was personally, really, really helpful. And so if you're interested in Skit, I would encourage you to also Look at the seabor structures first. Look at Cozysign 1. Understand the basic structure of a cozy sign 1, Look at a protected header. Understand the basic structure of a protected header. Want that basic understanding. It'll become easier to under understand what skid is is trying to achieve and how it's using cozy and seaboard to achieve it. Okay. So this slide here is about the sign statements protected header. So you can see the first You see this 1 and then minus 35. That's the algorithm indicator for the digital signature. -35 is e s 34. Which is an ECDSA signature with a Shaw 34 hash. And, there's algorithmic agility at that layer. In the future, if quantum signatures come along, and we wanna use a post quantum signature. -35 will become some other number. And that's an important property of cryptographic, building blocks. Sometimes you really want algorithmic agility and get this by building on top of cozy. The next line, 3. It indicates the app the content type"
  },
  {
    "startTime": "00:44:00",
    "text": "of, the payload. So, in this case, it's application JSON. But if it was an XML file, it would be application XML. If it was a Seabor file, application CBOR, could be a vendor specific media type. Perhaps, application to SPDx plus Jason. Or another s bomb format that's in XML. So content type is a useful property to communicate and since we're gonna be signing this statement It can be helpful to know the content type of the statement that we're signing. And that's, recorded in the protected header. The next tag, or label is 4. That's the key identifier That's very helpful, in discovering, discovering the public key that we use to verify the statement. I'm gonna skip to the bottom now to the 33. Because You probably wouldn't see 4 33 in the protected header at the same time. Like, I put both of them here just so that it'd be easier to talk about So 4 is a key discovery hint to help you find a public key. What if you weren't? Using that particular approach. Perhaps you have a certificate chain that's important. Tag 33 or label 33 here, will help you include that certificate chain so you can verify the, sign statement with that particular trust model. So, again, you probably won't see identifier in 30 and certificate chains in the same header, there are 2 different ways of accomplishing this this, mission to help discover keys for an issuer that you trust. Going back up to the top. You've heard already that we've been starting to use CWT claims. I've included a TBD 0 because this requested assignment keeps changing. At some point in the future, CWT claims will have a fixed integer value for expressing them in a protected header. And at that point,"
  },
  {
    "startTime": "00:46:02",
    "text": "labels 12 will be useful identifiers for identifying the issuer and the subject, which are both text strings according to the CWT registry. And that's, a lot of flexibility, texturing. So we may see refinement there in the future. And then, You've heard about registration info. Right now, that's, 393. For us and, as an example, within it, a secure version number that's a skid specific claim, Again, you may see TBD 0 and 393 collapse in the future. Or perhaps remain separate look forward to the discussions on the mailing list regarding that topic. Next slide. So this is the body of the, transparent statement. And I say transparent statement here because you can see that it includes a receipt in the unprotected header. So tag 18, label 18, Scosi signed 1, as you become familiar with CDDL, you'll get very used to seeing cozy sign ones that show up all over place, the first component of the array is the protected header And that's a seabor encoded, byte string in this representation. We just looked, at its value. Protected header value on the previous slide. So that entire object that we were just looking at now is just this first element of the array, represented by the check the header here the next component is the unprotected header as a map. And it contains this minus 333 label, which is a placeholder for the concept of a collection of receipts. One of the interesting things to think about for transparent statements is that the same sign statement may be made transparent by multiple services. Perhaps you have several different software, auditors that are required to review a signed statement."
  },
  {
    "startTime": "00:48:02",
    "text": "So you'd wanna see an independent receipt from each of them because they each maintain a separate transparency log. So the import well, this is actually an improvement since the previous IETF. We've added the ability to include multiple receipts, in a science statement, and, you can see it's expressed by the minus 333 label. And then an array of, incoded receipts, which are opaque at this layer, but we'll take a look at that structure. In a another slide. The nil that represents a detached payload. That's important because sometimes you're signing something that's really, really large perhaps it's a machine learning, a model that's like several terabytes, you know, in in size, probably don't wanna duplicate all of that data, So detached signatures are very valuable, useful, construction for large payloads. Also, large software configuration or other large data structures detach payload can be a really useful way of, putting a small signature next to a really large thing that you're trying checked And then finally, the signature component. Next slide. So now looking at, one of those receipts that was in the unprotected header on the previous slide. And, and It's another cozy sign 1. So you can see tag 18. That's what tells you it's cozy sign 1. The receipt has a protected header. But this is the protected header that the transparency service is committing to. So, different than the protected header that the issuer is committing to, we'll take a look at the protected header value in the next slide for the receipt. But for now, we're also looking at the unprotected header, of the receipt has minus 222, which is indicating that this receipt has proofs and quotes. What kind of proofs are these? Well, depending on how the append only log is constructed."
  },
  {
    "startTime": "00:50:02",
    "text": "There may be a need to identify different proof capabilities that the log offers. So, a simple example, in a binary miracle tree, you'll see a consistency proof and an inclusion proof. The inclusion proof, proves membership in the log, the consistency proof provides proof that the append only property is being maintained by that service provider. Those are both valuable proof types. And we need a way to express them in the unprotected header of the receipt. We do that by using this minus 222, which says This is a map of proof types. -1 is the inclusion proof And inside of, this inclusion proof, there's there's only one inclusion proof provided here. But there are scenarios where perhaps you would see multiple inclusion proofs There's a scenario where you might see an inclusion proof and a consistency proof This data structure is meant to make it easy and flexible for us to enable that functionality. But we may see profiling within Skit Receipts that turn some of this optionality off as we become confident that it is maybe optionality that is harmful complexity or unnecessary for the purpose securing a supply chain. Or perhaps we become convinced that consistency proofs and inclusion proofs should both the mandatory to support and in some context for skit. So Again, again, something to be discussed over time. Again, a detached payload and a signature. Next. Next slide. We're now looking at the protected header of the receipt. You're seeing the first, digital signature algorithm identifier 1 and minus 35. This means the signing algorithm is ES3d4 with the Shaw3d4 hash. And, 4 is the key identifier. I've omitted certificate chain details in this example, but you can imagine perhaps their present and key identifier is absent. And TBD 0. This is an important detail."
  },
  {
    "startTime": "00:52:01",
    "text": "This is the identifier for the data structure that the transparency log is using. So, RFC 9162 defines, the data structures for certificate transparencies style, transparency log. Which, is a binary Merkel tree with the minimal, consistency and inclusion data structures you can achieve in a binary Merkel tree. And, So if you wanna express that your transparency system, is implementing the same data structures that RFC 9162 is. You'll use some TBD tag and then one. And that will convey that you're using the proof types that we saw before. Are the binary mercury inclusion proof and binary mercury consistency proof as described in RFC 9162. The Tbdone here is the CWT claims. Again, That will get an assignment hopefully soon, and then we'll have a clear understanding that one is the issuer claim, and 2 is the subject claim, And here you can see the issuer is the transparency service because this is a receipt. And the subject is this registration event ID or some described to identify or chosen by the transparency service. That they're assigning this receipt to. Think that's it. Any questions? No one in the queue. So, thank you very much, Ori. Cool. Ready for the next one. Okay. So so, Now that you've learned the basics of the envelope structures, why were you laughing with something? Not It's just everyone's just early. Hey, everyone. Stand up. Wake up. There you go. Yeah. I know. A seaboard or seaboard can put me to sleep two guys. It's okay."
  },
  {
    "startTime": "00:54:00",
    "text": "Alright. So now that we've seen these basic, envelope formats, the basic conceptual messages. These are really useless if we don't have a way of moving them around. So I'm gonna describe a kind of hypothetical rest API here. Know, this is the IETF and sometimes we get concerned. We see the words API up on screen. So just to be clear, the the you're gonna see in the next several slides is one way to do this, but there could be other ways in the future and the important part of these interoperability points provided by the conceptual messages, but I I think that that that thinking about Skid in terms of APIs like this is really helpful. It it helped me under and what's the interaction model gonna be like, what would be experience B to do an integration as a developer. So, hopefully, you'll find this valuable and in the case you think there's something really horribly designed and that you're gonna see in the next several slides, please come and tell me. So sorry. I didn't put myself in the queue. Just wanted to say a nontechnical thing to make it really clear. I think it's great we're talking about as an API. There is this misconception that the IETF does not do APIs. That is incorrect. We actually kind of do do them. So carry on. Okay. Thank you. There we go. Next loading. Okay. Okay. So We've already discussed this statement it could be very large. Here, I tried to use some color on the right hand side some labels to sort of show you The parts of the API maybe their relative size And the color kinda indicates your trustworthiness in them. This large statement thing. Maybe it's a machine learning model that I believe was not tainted with adversarial training data, or maybe it was. I don't know. That's why it's red."
  },
  {
    "startTime": "00:56:01",
    "text": "It's untrustworthy. Right? It's large. Statement. Underneath it, It's gonna become a sign statement. And once it's got these receipts, I will I will I will trust that signed statement, as a transparent statement more. I'm showing multiple receipts here to remind you all that you can have multiple receipts on a assigned statement. So the first example There's a signed statement with 3 receipts. And the second example is a signed statement with 1 receipt. In both of these cases, you can see all three of the, core, Messages or structures with them get the signed statement, statement, the receipt. On the left hand side, you can see a hypothetical curl API for moving these things around. I'm not very good at curl. So, please feel free to correct anything you see on the screen here. Of course, these URLs won't work. But they're parts that are omitted are kind of the irrelevant parts. The important part here is that this first registration operation, We're gonna want to pushed this statement and its signature. To transparency service. So we're using the post operation, We're including the statement, which is a very large XML file, in this case, And the sign statement, which is hopefully very tiny detached signature as a seaborne cozysineone structure. And I'd like to point out that moving statement like this, when it's several terabytes, is Probably not a great thing. I don't know how many of you have curled a really, really large object. Often, Bye. This is a potential problem part. Of moving sign statements around like this, if to The signature is tiny. That's great. But if I have to move with the signature,"
  },
  {
    "startTime": "00:58:03",
    "text": "is very, very large object that the signature applying to so that you can verify it That's sort of a problem. So stay tuned for solutions to that. On the mailing list in the coming weeks months. The next part is retrieving the receipt. So after this, curl operation that probably took few minutes to resolve. Hopefully, if the connection in, die. Has finished. I should be able to get my receipt. So it could be that, this sign statement is gonna be made transparent within that operation and that the response from the post would include the receipt identifier. Or could be but that's gonna go into a batch, and then it's gonna sit in a queue. And like several minutes later, it's gonna settle. Into the lock, So At some point, I'm gonna get a receipt identifier. Maybe I have a long running process identifier that I get right away, and then I go check back, to see is my receipt ready? Nope. It's my seat receipt ready. No. Is my receipt ready? Oh, Yeah. It's finally ready. Great. Great. So whether it happens instantly, or it happens in a few minutes. Everyone loves eventual consistency. You're gonna get a receipt Eventually, with that receipt, You're gonna want to be able to store that receipt structure. So the important part of this curl examples to say, We're gonna try and save this receipt as a receipt dot seabor. So now you've got your sign. You had your statement in your signed statement, which you sent, Eventually, you got receipts. So now in your local curl environment, wherever you're calling curl from, you have 3 files. I've pro pretended that there is a command line tool called skip up transparency. Supposed to make you feel like you're up armoring. Maybe? I don't know. It's just a made up command name. The point is"
  },
  {
    "startTime": "01:00:03",
    "text": "You've got your statement. You've got your signed statement. You've got your receipt. Now you can produce your transparent statement, but putting this first receipt, into the sign statement. And these are the colors here correspond to the logical concepts on the right hand side the skit skit up transparency command that's totally made up again. It's it's meant to convey that composing receipts into the science statement is a thing, that that can happen on the client if you've retrieved a receipt. Technically, you could have gotten the transparent statement right back from the server, but then the server would have done this operation for you. So, again, How does how when? When are these, Message is combined. Who combines them, There's option that there's there's different ways that that can occur. In this case, I like to think of the client as sort of preparing the statement, preparing the signed statement. Asking for a receipt from the transparency service. Then including that receipt in the signed statement, and then maybe doing that again for a different transparency service. Maybe I'm going to one transparency service for one kind of, receipt and going to another transparency service for another kind of receipt. So I'm gonna be the one who puts those 2 receipts in my signed statement. Because I know that I'm gonna need 2. If I'm gonna get transparent statement from only one transparency service, maybe they would do that combination for me in give it back and then format that I wanna I think that's it. Next slide. So We promised you that feed was going away, but I'm here to bring a version of it back. So, In the previous, slide, you saw how the sort of"
  },
  {
    "startTime": "01:02:03",
    "text": "unique identifier for the receipt was produced. And here I've shown you at the top to fragments of URLs. The first is an identifier for a collection of receipts. On a transparency service. You can imagine this as an identifier for all receipts produced by this transparency service for all time. Probably not a very useful URL. But conceptually, this is the list view of all receipts on the transparency service. Underneath it is the detailed view of a specific receipt. And and and this one, you might have gotten as the direct response from your registration request, or you could have gotten it as bonds from a long running process that eventually settled The important part here is these Top 2 URLs are kind of the generic concept of all receipts for all time from this transparency service, For this specific receipt, from this specific Registration event, And While those are nice and useful, they don't actually help, application developer or service provider, understand receipts that are relevant to their supply chain. What what what what what that entity really wants is Give me all of the receipts related to my suppliers. I'm interested in the integrity information and confidence information around the identity of my suppliers When did they rotate keys? Why did they rotate keys What's additional information about them that's important? So, when we start to ask those kinds of questions, we start to think about subscribing to a feed about a topic The transparency service could express that as a URL. So the bottom part is one potential way that URLs could express This concept of feeds, related to topics. And the bottom URLs and,"
  },
  {
    "startTime": "01:04:00",
    "text": "the top URLs are at the discretion of the transparency service. So that service could decide to expose this information many different ways, and this is just one example. But I like to think about transparency service is giving you views of suppliers for a product. These of ingredients that go into a product. Lab test results for a product over time. Origin certificates for a product over time or origin certificates for the ingredients that went in product over time. Those are concepts that apply to pretty much every supply chain, whether it's software, Whether it's seafood, or perhaps it's semiconductors. Next slide. So At the last IETF, I'm I take full responsibility for most of the confusion that was generated regarding feed, feed, feed, I think I showed a slide about GS 1 and their architecture. And if you don't know GS 1 is the company behind barcodes, And my well, I was feeling really good about telling you all about barcodes. It's think that did not land super well. So this time, We're gonna talk about making soup, with ingredients, It's a little bit simpler. And, hopefully, the concept to feed will be smooth sailing from here on, but if it's not It's still my fault, and I will keep trying. So I, I like to think about supply chains as of having a directionality the most simple way of thinking about a supply chain is thinking about a linear supply chain. We have an upstream direction and a downstream direction. As you go upstream, you would counter raw ingredients. The the first component of something. So perhaps this is where the minerals are attracted from the mine for the very first time. You know, in the jungle. Or the longer is harvested for the very first time in the forest. Or perhaps the tomatoes are picked for the very first time in the farm. And then that"
  },
  {
    "startTime": "01:06:03",
    "text": "artifact is first raw ingredients start to down the stream. And as they do, they become processed. They become tampered with potentially. Problems could occur. Problems can occur at the farm. That's earliest, earliest point at which a tomato can have a problem, basically. But that ingredient could have problems all the way down to the point at which you take a bite out of it or you drinkle. Bowl soup that has tomatoes that have problem in it. So you have to think about where where could the problem start, how do I track where problems might occur and how can I use sign statements and transparent statements to secure my supply chain? So for the tomato, farm, perhaps they do have a product and you're welcome to go, see if any of my g two numbers are right or not. I still put you as one identifiers in my slide. But But you the point here is that for the tomatoes, maybe I wanna know where were they grown, or are they organic? What kind of labor 50 was going on there. Etcetera. Please. Seller Oh, I'm gonna keep going. Rob, I have the question now. Hi, Rory. Roman Didio. AG. So I'm channeling kinda Hank at the important kind of repeating the things from the beginning of onboarding so everyone kind of understands This is, of course, or a notional example because the scope of this working group is software supply chain And it's just illustrative that there are other kind of supply chains and we have the eye on the prize to finish soft response. Thank you. Yes. Right? Just making yes. You're correct. But And I'm and you're gonna see this tomato soup will become software by the I I love Yeah. Okay. So, I'm gonna kind of move along quickly so I don't get, in trouble anymore. Noodles, At one point, noodles were wheat, but still for noodles, I may ask what kind of wheat"
  },
  {
    "startTime": "01:08:01",
    "text": "What how was the wheat processed? Where were the noodles made? The carrots, where were they grown, how long since harvest, people allergic to carrots? What kind of allergy information do I have around this ingredient? This is the upstream supply chain for the suit vendor. Next slide. Then there's this entity that picks only the finest ingredients to make soup. You just saw how some representations around those ingredients. And then this particular supplier, they produce soup. And that soup is bought by, distributors those distributors wanna know What did you put into your soup? Who contributed to those ingredients. Are they trustworthy where do tomatoes come from? All those questions. So imagine Being asked, to prove where your ingredients came from as the soup manufacturer you would want to have some structure with some integrity and some transparency and make your life a lot easier to just say, here you go. My receipt for my tomatoes, my receipt for my noodles, my receipt for my carrots, and here's a receipt for the soup that I make. That includes this sort of structure around my upstream supply chain. And is useful to my downstream consumers. Next slide. Right. So, about software. So software and firmware. They're like soup. Thank you. So here, I've asked for, artificial intelligence to generate me a high ethetical, firmware network device things so they don't have to mention any vendors. This magic AI firmware, hardware, a wireless device,"
  },
  {
    "startTime": "01:10:00",
    "text": "And it's got it has firmware in it. It's it's it's It's got chips in it. It's got configuration. It's got other details, and And I'm about to plug this thing into my home network. What is it? Why should I why should I allow this thing to talk to the other device is on my network. Why should I plug this into the wall? Terrified about every part of this totally fictitious made up hardware device that an AI generated like, 3 seconds like, What questions, Should I be asking before I exposed my family or my customers. Or you know, Anyone else I care about to whatever this thing is. So The first question I might ask is, as this device didn't certified in any way by anyone ever. Maybe there's a QR code on it. I could scan to get some feed information about this device. So certifications, other details, All of those questions you had about soup you might have around this device Are there vulnerabilities that have been reported since the device was made. So the vendor may have believed everything was good when they package this device up. And and shipped it off to a distributor where it sat on the shelf for 5 years for someone picked it up. What in 5 years, New information could become available about the quality of this product. And women before I plug it in, I might wanna know. Is there Are there other problems that have been discovered since the manufacturer produced this? Has the regulatory landscape changed? Maybe, at At the time it was made, it was certified to be safe and details were fine, but, like, the law changed between then and now. So maybe that's of interest. Has the product been recalled? I would definitely wanna know that before I plugged it into the wall."
  },
  {
    "startTime": "01:12:02",
    "text": "Is there, an upgrade path? It should say path for the installed firmware. Is the device still supported? Are there any unpatched CPEs? These are all questions that I have. And, at the top, you can see this ldev ID. This is just one way that people think about giving devices identifiers and you might use that kind of identifier in a feed. We're asking for critical information about that device. And again, We're here to talk about software, but software goes on devices. So this is acceptable. Next slide. Please come to the mic. Dan Ruth's AT and T. Thank you so much for, the illustrative, example. I like I like to too. But, I wanted to ask something, It seems to me that there's a catch 22 with with these questions and answers. Because I'd like to understand you know, you're asking these questions at the time of installing the app, but the receipts are already issued. So how do I know? How can I create maybe a profile or a template of things that should be asked So at the time of of of the issuance, the time of in in the in the upstream, there are proper receipts that will answer those questions? Thank you. That's excellent question. So ration information, And the issuer could be aware of requirements that they are committing to at the time at which they're making their signed statement They're securing it and they're asking for a receipt. So perhaps I know that, this device is actually gonna need to be certified for operation a few countries. I could sort of say I know that that's gonna happen and the registration policy that this transparency service should be applying should be aware of that as well."
  },
  {
    "startTime": "01:14:02",
    "text": "I'm looking for device certification, I'm looking for an analysis of my pay payload perhaps. Those that looking at that payload, is sort of outside of the skid layer, but probably very much in the realm of things businesses will do with with Skid. It will look at the payload. It may look at the integrity information around the issuer. They may say, I have extra information that I use before I decide issue a receipt. And I will review all of that And then I'll make my decision, and I'll give you a see only if I feel satisfied and I don't, I'm not gonna give you a receipt. But just to add to that if you weren't here at 1 17. There's a good example of the the hackathon target for 117. Was a model of a federal software supply chain use case, where they know that they need before you accept something, I need the vendor response file saying, yeah, we followed all the checks, and we're good. And I know I need the s bomb. So although Skit doesn't know this self, there was a model in the higher level application that simply said, automatically check, do these 2 application types exist, got the receipts off I go. And if I don't, then they then they don't. So Yes. I Thomas Werner. So on the previous like, you mentioned, LDF ID. So I have a question to that. So shouldn't it be IDF ID in that case? It comes from the one earlier how how Yes. Okay. Yes. Just stay on it's Hank. Okay. Thanks. Thank you. Hey. Are you responding to that point? Yeah. Okay. We'll let you cue cut and then AJ you can come in after. You can have already worked over there. So I made him write LFID. That's the reason why I'm here. Yes. So,"
  },
  {
    "startTime": "01:16:03",
    "text": "depending on the scenario and which transparency service you ask, It's the ID, all the ID IDF ID, of course. You can have the local identifier generated instead ask the questions about the device. It will be a different trust domain that you're apparently now, referring to. And this L FID scenario here is when you have something provisioned in a factory floor. And there is a, transparency service charge of its own, you know, policy things. But it can be a global thing, and then you can use an ID that that that actually doesn't matter. Just one example of how you would identify the, up the product in question, I think the FID scenario is a little bit more interesting. Because then, you can, really make up your own, transparency service about the provision state and your, dependencies all over the world. That's up to you. You can do that, and that is the cool thing. Because there's not just one transparency service. There are many of those. And and and just going to the local scope here. It's that it's controlled by you. I mean, and this is an interesting example, but it doesn't have to be, of course. To be clear on that. So it it can be different vendors in the chain, and It can be different vendors in the chain, and it may be not the first manufacturer, so we're not the first identify of that Exactly. And so now, you could, still have access to the IDF ID compose it. And then have all this information together. Like, like, your own own authority, the information, and the manufacturer as original opinion, and they might be vastly different. Okay. Thank you. Thanks. So, AJ, Nope. No. You need to talk to the mic."
  },
  {
    "startTime": "01:18:00",
    "text": "That's why I said T shirt first. Hi. AJ, you know me. I just wanna roll back because I'm getting kind of lost. Are we talking about setting the context of what's happened. And we're gonna talk about where this is and the relevant, I guess, architecture and scrappy drafted, I'm trying to understand is this like where we were, where we're going with with Sure. Sure. The general concept, the rest API are both. I'm trying to recover from my disastrous description of feed in the previous IETF. So we just looked at the rest API, you saw receipts, And then I I said, what, one receipt or all receipts, not very helpful. What get receipts related to a topic that was helpful. Now we're looking at a specific topic it would be helpful. The LDAP or ID's receipts regarding that particular topic That's what we're discussing here. So, and and to answer your question regarding IETF documents, everything that I'm saying should be consistent with our architecture. If it's not, then we're gonna Yeah. Ready to find that. It's a good question, nevertheless, which is like we extracted the document from the architecture about the API moved it into a separate document, which was not published in time for the deadline. So I hear you asking, like, What's the story on that I'm not I'm not heckling with that. I'm just asking if that We're gonna fix it. Does that does that draft up that's emerging Does that need to be updated to reflect topic subject, terminology, and the thing you're talking about in this URL example is the thing that we're moving towards. Yeah. So the document does need to be updated, but part of the document has already been updated to reflect what you're seeing here today. Thank you. Next slide. So, We had these questions about this topic,"
  },
  {
    "startTime": "01:20:00",
    "text": "And and the response we get from the transparency service We may see several useful files that you may be familiar with in a soft supply chain context. The SPDx s bombocyclone DXX, s bombs, salsa, Vax, vendor response files, another VX update, because things change over time. Revocation alerts. New versions available or end of life material. These are all examples of, specific statements that may may have been made transparent. That would be relevant to this topic of the LDEV or ID. Or whatever other topic identifier you want to use. So the generic building block here is that feeds allow Downstream suppliers, to subscribe to relevant information about their supplies supply chain that is provided by an upstream supplier. The feed is a generic structure for communicating that ability, And when you query a feed, you may get results for receipts for files like this. Or other files depending on your supply chain scenario. Next slide. Let's play it. That's it. You know, Any other questions? Seems like people woke up. Right towards the end. So, fillet, it's good. Yeah. Right around the soup. Okay. Thank you. Thanks. Sorry. Okay. Great. So, feels rude for me to sit down for everything so I can stand up. So, yep, hackathon report as ever, those who are at the hackathon, Might have noticed that for the first time in a while, we did do a readout in the, in the readout section. So this is an exclusive for everybody who go"
  },
  {
    "startTime": "01:22:00",
    "text": "this morning. Thank you very much. Slide, please. Oh, and again, This is my So, good participation, as ever, full tables, people stealing chairs from each other as as as they get up. So, you know, good health indicator, for us there. And just to say, much more spec focused than, than code focused this time. So press the button. And as you've just seen, there was, big, step forward, I think that, Cedric's already talked us through on, registration policies. So this wasn't the only thing that was discussed on the spec. There were a few other little, sort of details and edge cases. But this was the the the vast bulk of things. And I wanted to go into just a little bit more detail because obviously that has been decided and and will be written down in PRs and stuff. Of course, will become fact and legend, but what was a tool. The big. But what sort of didn't make it in, of course, wouldn't necessarily. So just for those who who weren't there and don't know what was discussed, lots of complexity in in registration policies came from things like identifying, whether this is a sort of client server type relationship where the the issuer and the transparency service have some sort of hierarchical relationship or whether it's a peer, relationship and who gets to choose if they conflict in their opinions about things, So all of that kind of stuff, seems to have been worked out, and and and we'll continue to work it out, but the separation that, Cedric explained got rid of that. Part of the conversation about, the the name change also was re was recognizing that maybe configuration, including things like what roots cert I"
  },
  {
    "startTime": "01:24:01",
    "text": "I I believe in. It's not really quite in keeping with the principle of registration or a policy as such, but it is something that is needed to be known. If I'm asking to get many of the sort of slightly more abstract or, hand ringing things that we discuss are in the context of Hanks, excellent summary that really why we're here and why would why do we need something new is to provide very, very long term trustworthy decisions. And so those kinds of things need to be need to be verified. And, and lastly, you know, the ideas of, policy languages and things like that, you know, we do have a very good go at thinking about whether we needed to define any of that and happily it was a very strong conclusion that, no, we don't. It's not necessary to define any of that or get into discussions about formats and types, just the same as we don't pick winners with what kind of s bomb you want to put and and the test to in these in these transparent statements, we just need to make sure that we can accommodate any choice. Say that as as the world moves or as people more focused on that particular problem area to make progress. Not getting in the way or stopping you from doing that kind of thing. So, Although the the conclusion might be very simple, you know, give it a label and then put the label in the receipt, the process was thorough. It was excellent discussion. I think we came to a very good good conclusion. So thank you to everybody in the photo from the last slide for for participating and indeed many who weren't. Slide please. So, yep, at the last two hackathons, we've been able to show, some decent running code. So I'm glad that in this one, We flipped the balance back a bit and and have shown some rough consensus. Which, restores restores balance to the universe. There was actually a bunch of work done, and there was some progress made, but"
  },
  {
    "startTime": "01:26:00",
    "text": "owing into all sorts of things, we didn't quite get anything finished. There is breaking news and this is part of the reason for having the wrong version of the slides uploaded. Is that strictly outside of the hackathon, but this morning, we did have a decent, a decent breakthrough which I might if you don't mind, I'll have you just step up to the mic and say something about in a second. But just to to keep a a people appraised of progress, skip the first bullet because it's got its own slide now. But I'll API access control, has been moved along a little bit, just kind of yeah, improving the point that we can accommodate, proper things like OAuth, an open ID connect, along with all of the kind of message level, and structure level stuff that we're doing that Orie's talked about. So that's great. Improved out did resolution verification. So the implementations that take my chair off for a second. My team in my company has made an implementation, and we've added the did web, key resolution step to the, issuer and the transparency service, identity verification steps, so working for us. So that's that's cool that shows that works. We've got rid of the the need for translation proxy. So that was the other, 2 efficiency that was noted at 117 was, you know, We thought it all kind of worked because it was possible to get things from one end to the other and back again. But, obviously, it's impractical to require translate proxies and and and message format changes in the middle of a real world sort of entity to entity trust system. So we've managed to eliminate that, which is Good. And most importantly, and this is where the the link at the top, coming to focus. Raymond, made the point that we wanna concentrate on"
  },
  {
    "startTime": "01:28:01",
    "text": "finishing, I think, with all completing, I think, was the word completing software supply chain. So having made progress on the 2 big things, that we noted at the last meeting, which was feed slash subject slash thing identity, the registration policies Actually, it feels centralizingly close, and so we wanna switch a bit of, focus for those who are of a of a mind to sort of implement things and and play with this stuff. Switch over to really adding some meat to the examples, in this this second, spot here. We can actually prove it works. And, and, essentially, the thinking is, well, if we have an example for each use case, And if the use case document, which, Hannah issued the, working group last called a little while ago, so that that should be completing really soon. So if that gets, accepted, we got an example for every use case in that document then then, then, what we can kind of claim we finished, and we can we can make a call, and we can hopefully publish a v 1. That meets the the thing. So, Yeah. Loads of loads of progress, loads of nice proof points, yesterday, we didn't have anything to show. On the code side, but, slide, please. This morning, there was a a PR. For those of you who watched the the GitHub repo, there was a PR who's message started with, it works. So, if you don't mind, John, I'll hand over to you to to explain this slide Alright. So, the PR is about federation, and the PR that exists right now is just using Activity Pub. Activity put for those of you who are not familiar is AW3C spec. Which basically it has this concept of actors And so, which abstract beyond just a direct service interaction, which is something that you might find this, like, like, data notifications, right? So this is one one abstraction layer beyond that."
  },
  {
    "startTime": "01:30:04",
    "text": "And what we're doing with this PR is really just trying to get events of new state that have been submitted to the transparency service. And so services which federate with each other might, re you know, they would receive a event from the serve, the, the other services they're bettering with, and they would decide they may have different registration policies, right, and they may decide to issue a receipt for a given statement. Or they may not, right, depending on, you know, what their policy is. So if we could just jump to this. So Let's see let's see. I updated this link, the header, but we can click on it, and then we can took and then they have a I have an, cleaner demo on me, make sure Oh, okay. Let's see. Way too small. Is that work? Oh, that's working, but, you know, And this Okay. So What we see here is basically we see Bob on the left and Alice on the right. And what we're gonna do is we start both services activity public as it is this notion of actors and followers Right? So Alice follows Bob. Bob follows Alice. We create a claim. We submit the claim to Bob. And then or let's see. We submit the claim to Alice and then, we wait for a moment as we see these create no events. Happen moments up in up here in services. And then we end up downloading the we downloaded the claim and the receipt from top. And so that kinda happened in the background on the top service service. Right? Tom. Okay. Good. Snatching, snatching victory from the jaws of defeat. Let's go back."
  },
  {
    "startTime": "01:32:00",
    "text": "There we go. Thanks for the work. Yeah. No. I think, yeah, it's been it's been great. And that just for, benefit I point out the examples, repo just to reinforce the API emulator repo is where that work happened. And where we have the, we've got a couple of independent implementations of the, of the draft API. So if you're interested in that, if you wanna run it, if you wanna, participate, it's all happening there. And and obviously, conversely, even if you don't wanna participate, but you want to know what's going on, it's all open and, you know, you can you can, you can, see it. Great. So, next bit, I wanted to have, a few items to, to talk about. So Hanks already alluded, to to this and a few other folks have well. We have had a lot of meetings, between 1 17 118 and yes, they were useful to get everybody on the same page, But, yeah, the the suggestion is that weekly meetings, For the next period up to 119 is maybe a few too many, that we've got that, conceptual consensus now, and it's more important to, actually sort of work in the mailing list on topics, I suppose, and work in PRs and issues on actual changes. So well, there's absolutely no, prohibition on people sort of chatting about stuff much more often, and and we of course welcome that. Official meetings, interims to kind of take consensus votes on big topics proposed to move down to, just once a month. And then, yeah, they have much more work on the"
  },
  {
    "startTime": "01:34:03",
    "text": "PRs and issues, where people can actually make progress and, and and stuff. So everything's still as open as as ever it is. It's just we're pretty close. We feel, and I certainly have have been fielding as, sort of chair feedback a a balance between being transparent and inclusive, also not drowning very busy people in too much information. So so that's the the proposal there. Obviously, give me feedback, we can change it, but, that's the that's the intention. And more importantly, and I see Roman teed up at the back, for those who who didn't pick it up last who was at the Mike Roman's our area director for for security. So, for, honored guest here to talk about, the the sad loss of, Our friend our friend and co chair. Hannes, get despite rumors, I'm not dead. And I hope also the slide when it starts with more effective and then new coach here that sauce also unrelated. But but, the truth is that, a year ago when Roman asked me to help out with the with with this initially with the path and then subsequently with the formation of the working group, I agreed to do it, under the commissioner, I would do it for a year and try to make as much progress as I can But, But, yeah, now the years over time flies, the group has made a lot of progress, I think, I'm quite happy about this. One of the documents you've been working group last call and and you've seen the in the presentations today, like there's coder's, specification work that has been done, tons of meetings, and so on but, Yeah. But it's, I think it's also useful to sometimes see I'm I'm I'm I will just move from this chair to this chair over here. So not would not be gone So"
  },
  {
    "startTime": "01:36:07",
    "text": "Yeah. I I came up and like to say kind of exactly that. So found. Thank you to you, Katahontas, for everyone's kind of benefit as point, he said, you know, I can only give you kind of a year. I'll help you kinda get started. Boy, we have really launched the level of enthusiasm and kind of excitement. Around kind of the regular cadence of meetings, how we're making documents and everyone coming to the IH, you have to work on this problem is kinda really phenomenal and exactly kinda what we need to do. How does I'm glad you were able to give a year. I mean, we wouldn't have launched, where we are kind of without your help. So we really gotta thank you for all your engagement and your leadership to get us from the very beginning all the way to to to where we are. Now the working, of course, is kinda wondering we're we're not gonna leave John kind of up there solo. So in the coming weeks, Paul and I are gonna be working to make sure that the team is fully rounded out. So by the time we launch again in 1 19, we see each other person will have all this squared away and we'll have it squared away much sooner than kind of, of course, so Hans, again, kind of thank you for all your help here. Okay. Great. So we're coming coming to, to the AOB section, which is where I guess you get to choose whether to stay here or or or go grab a break. So we do have some some drafts. Supply chain use cases, as we say, you know, that's that's that's please please do take a look at that. I was about to say we don't want it to sail through sort of with with with minimal or no review, but actually I think it just can't. So, yeah, we really do need to to take a look at that. And if there are improvements to be made, we should make them we have a quality mindset in this, in this working group. We have the architecture draft. A lot of changes lately. A lot of stuff actually being cut which I think is a good sign. Again, it's a sign of completion because all the exceptions are being removed and we're consolidating on a few"
  },
  {
    "startTime": "01:38:02",
    "text": "consistent coherent structures, which is great. So that's gonna need about a bunch more work to to encode all of these breakthroughs, but, coming on well, there's the receipts, stuff. So for anybody in here who's temp said, because of our sort of constant talk about append only logs and Merkel trees and stuff. That's the place for you to go. And please do help. There's all sorts of, interesting implications of of formalizing things in there of of adding optionality, as Orie has already said, you know, there are some subtleties in the mouth or the structures that we're encoding these things in that can have quite profound effect in terms of what technologies and math you can and can't use. For for this technology. So if if you're that kind of person, please do look there and help and have opinions and then there's scrappy, which we've mentioned a few times, for those who didn't know, we made the decision just last time at 1 17, to split the architecture document in 2, so the content or at least the initial content of of scrappy, was a precise cut and paste from the bottom of the architecture document from a kind of informative appendix. Into a working group document of its own. So the the the content was no different to what reviewed and and, worked on prior to that, it just didn't really belong in there. So we split it out, and now it's got its own. Got its own life. So those are the the 4 places where we officially work together and then, of course, you know, the the work of the emulator and the examples in GitHub clearly not working group product as such, and not normative but useful ways of proving this out. So the the idea of those is to say, well, if we've got this idea and change the spec in this way, what will that look like?"
  },
  {
    "startTime": "01:40:04",
    "text": "And, and really make sure we've got something robust. So those are the the places to work together. And the related stuff, So, obviously, cozy, Henkel already mentioned Seeball, see 3 in the queues where I couldn't see that before, so we'll get to those. So there are many other bits of IETF that we're using, of course, but these are the, are really implicated, other related related drops. Hank. Seem I can't I can't read the slides anymore. I'm I'm just improvising now. So, if you go to slide back. You're saying that, there's to go to The third item is going it's going to go away. Okay. Because, what we tried here to is to do hierarchy of building blocks. Skitch should just be a frosting on every, on building blocks that are applicable to many domains. So we have a cozy kilometer ID, again, it is concise mercury's proofs, now we understand that it might be more than just trees, but we are sticking with the commuter for now. That will be the actual place where we do the, inclusion proof for the receipt. And then Skit will only frost a few items around that. And so so there will be other users. So if anybody's, somehow kind of enthusiastic about a market freeze or other impaired only lock structures. Look at the cozy working group We are, creating that work there, actually, and then use it in, in Sketch. And, that should it's basically just a section now that has moved back into the architecture. Doesn't mean it has to be there, but when you're number of documents, ISG"
  },
  {
    "startTime": "01:42:03",
    "text": "you know, there's something good with having this in one document. Same goes with, for example, timestamps We I've heard that when you want ordering and and, science statements. You would sometimes want to include a time stamp. There's also a header parameter in cozy that is using the old TSA, TST, to be included in a cozy header again, all this work is then more universal and will be utilized by Sketch so we might have to draw a little map at some point. What we're using, where, from what Thanks, Hank. Simon, Hi. Thanks, Hank. Yeah. Simon Frickbroker, Mozilla, I just wanted to say regarding the use case document that I had a look and what's missing in my view, and it might just be somewhere else. In that case, I apologize, is a mapping of the metadata to the actual use cases because it says in the beginning, we are not defining the individual messages because that will be too much But then each use case, it says something like, we want for this product to find all the audit reports. Right. And that's kind of a contradiction because, either the message is opaque or it's not And I feel like that needs to be a mapping of the extra data that isn't opaque somewhere. Is that in the Does it exist, or is it a work in progress? Of Yeah. Thank you for the feedback. It's for a bit of elucidation and and as a sort of consumer of the spec, it it's always good to get, those practical viewpoints, The group has to be very careful about not reinventing or making redundant copies of other people's work. So for example, we're not going to recreate"
  },
  {
    "startTime": "01:44:00",
    "text": "or reformalize things like bits of cyclonedxorspdx. To then be formally indexable or or or whatever. And that's the fine line to be walked. So we need to make sure these things are possible. And so to your use case, there's an application there's a My brain's gone blank. Content type. And the issuer and subject. And so at a minimal, thing, well, something we consider is that, well, if I no issuer is my software vendor, and I know the subject is the software package that I've subscribed to. And we have a content type, which is something, you know, VRFplus JSON, Is that enough? You know, we would hope it is, but we always keep on probably isn't. So that, yeah, that that kind of feedback would be really helpful. Yeah. So that's pretty much what I was aiming for, right, it would be great to add to the use cases, the specific metadata that is solving that that use case. Great. Thank you. Hello. Hi. Maxpala from People Ads. I have a question is related to the use case probably. I don't know if you're ready addressing that. But, you know, as, you know, you know, we're trying to figure out how to migrate to different type of cryptography in the next 5 to 10 years, depending on your time frame. Definitely a software supply chain is a big part of many of these frameworks that that really look into that. So my question is are you already considering, addressing that particular problem of tracking all the crypto capabilities, for example, for that that you have in your software upgrades so that you can track the migration or help my tracking immigration through something like Skid, and It's not that you're already considering explicitly You already have it on the use case. You want to add it to the use case. I think is Ori, are you in the queue to answer this question? Yep. So Ori then, Cedric. Okay. Alright. Or steel Transmit Yes. Yes."
  },
  {
    "startTime": "01:46:01",
    "text": "So, I'm involved in several other work items at IETF. One of them is applying the post quantum, miscandidate signature algorithms took cozy and hosie. That applies to digital signatures. There's also work to give plus quantum, more quantum, Pump, what's the other word we use? Quantum safe. Yeah. Yeah. There's there's for this, everyone's looking for, more conservative language in describing these algorithms, but in in, as I mentioned in some of those other examples, Skid is designed with cozy support to enable the low usage of of of those cryptographic criminals as they become available. But one of the things that you could do would be to make transparent your internal use of those capabilities. Either in hardware or in software products as well. That's very, awesome use case. And perhaps one we should consider at or adding and elaborating on in the use cases document. Happy to talk more about it. Offline this Friday microphone. Yeah. I I think Max's point wasn't it's it's itself going to migrate to PQ, but are you tracking whether the things that it is describing. The softwares that it's describing are So because one of the things that we are looking into is how can we integrate with inventory systems? For example, they might have in, enterprise some parts might not be, you know, the best. Right? But, we kit, we we might track, for example, the evolution of the characteristic of each device or each software upgrade, firmware, etcetera. So that you can track and you can apply tools like optimization This part of the company with being integrated first. These other type constraints, And since this is evolving, you can you get a feature of"
  },
  {
    "startTime": "01:48:00",
    "text": "how you're evolving your company enterprise access network, whatever, whatever you're tracking And this might be very, very useful use case. I just wanted to point out. Yeah. I think I think, that type of information would have to come out of, for example, bombs and the configurations that go into the build process. Of course, it's a more complicated story, but, like, the whole s bomb topic is complicated. But, this would be, like, for example, let's say you take a crypto library, which algorithms out of that trip to libraries, which typically has 100 are you actually using for your specific product that would come out of the the bid configuration, so in, like, for embedded systems, would the tea processor directives. I would tell you what you actually compete in. But that's where I think he wouldn't bubble up at the layer of kid what Ori has presented here but it would be the us. And I think you could do that. It would be another use case to demonstrate on how that works. Yeah. Just to to brief follow-up on the on these licenses. So, yeah, I completely agree. That's a great use case, but that's something that, named that to be, mentioned, you'll need any specific strip out in speed to enable that in term of skits implementation, we do have, built in future agility for see as a notification. Another thing I that is more professional on that we are not planning to support his, crypto agility for the, car algorithm found to happen on the line because in a in the market, it's tricky, but, but I'm happy to discuss the email details if they didn't. Frank, could imagine that we add some some lines about paragraphs to the use case document to illustrate this. Yeah. And just before we recognize Steve, that's also some of the thinking behind having the configuration configuration rather than registration policy because exactly, you know, I the example of root certs because it's more familiar, but also"
  },
  {
    "startTime": "01:50:01",
    "text": "migration of trees and things could could come into that. Steve. Yeah. Hi, Steve Lasker. I the examples you're talking about, whether it be agility of the particular artifacts you're putting on the feed or Whether it's a particular s bomb, those are all great examples of why, skid is content agnostic. We know things will continue to evolve as different content types but you wanna register what is the information around a particular artifact. So fact that new things are coming up is Great. Many. Hi, Manny. I'm a newbie, so I don't know if this is the right time for me to ask question or comment suggestions? Just hold that thought. Okay. As the back. No. There you go. I just I wanted to put your slide up Hey. So I'm mainly Fontaine. I'm with Hashmesh, cybersecurity startup, Wonderful. we work extensively with confidential computing. And, maybe this is for I don't know. I'm as I said, I'm a newbie. But I wanted to suggest a, asymmetric signature and symmetric cryptography approach to skit. Because once you actually embrace confidential computing, you can have attested agents and verified agents So that solves the integrity of the agent itself. You can have send the agents use symmetric keys to actually do H Max signatures, which gives you an order of of, an order of magnitude and performance gives you quantum resistance, gives you a whole bunch of benefits, and it gives you you know, the the the the the the symmetric signature ends up being an encryption key, gives you an an encryption layer it gives you a whole kinds of a whole range of benefits and then, you know, on our side, we take it back the other way. You can actually have a tested agents, then that they can do the authentication of the user"
  },
  {
    "startTime": "01:52:00",
    "text": "the authentication of the organization. So now you can chain those things in a way that is, you know, fully end to end between people, organizations, and and and things, digital things, and physical things. And in particular, because ORE mentioned the silicon supply chain, I think there's, something that is also quite important to integrate is the fact that the silicon or chip level roots of trust have a level of inherent security that exceeds virtually everything else. And we believe that it's critical that the enrollment of a chip into some sort of, you know, supply chain network or transparency service or whatever you wanna call it. Be of of the same the essentially the same level of security. So hardware backed you know, cryptographic security throughout the entire chain. And that has all kinds of very fascinating consequences and benefits. So I would strongly I'm here my first time because I'm trying to reach out to different groups. I'm looking forward to meeting with you guys and and then see, you know, where we can take this. Perfect. So while while Henk walks up to the microphone, I'll just say that's your first question was apt because some of what you said is relevant here. Some of it should go into Kozy and and and things like that. But, They to the soup example, absolutely, I would be happy with a lot of sort of mobile type use cases, to accept software if it has run-in an identified TE, but not if it was run just on an open. So the the essence of your use case is absolutely valid here. So if you wanna take a look at the use case document and see that it's represented. I think Hank Yeah. Hi. This is Hank. So to the, topics that the confidential some task, for example, And you mentioned, Rudolph Trust. So that's that's a lot of"
  },
  {
    "startTime": "01:54:01",
    "text": "on top of these stack of turtles that we do here on the IETF also that is rats, the remote the station procedures, working group. I think, the, A gestation resides or made a very concise evidence we will play a big part here. We have dedicatedly excluded it for now. We have a running system and on on many. Things at the same time. But for example, the transparency service itself could provide, remote attestation results it's on a pen only log. To, vouch for its, trustworthiness We have, for example, the issue that we, sometimes might in our plan to resolve DIDs, resorvers are not inherently trustworthy of their remote. So there's, for example, a TLS that could, be a solution to that problem so remote attestation will come into a lot of places of in this year. And so there's will be another map, I assume. But I would not I would not say that symmetric, based remote attestation is the only way to go here, there are multiple approaches, this is, now with had as the TCG attestation working group co chair on, there are a lot of ways to do this. Some of them including, semantic we are Thanks, Hank. Daniel. Hi, Daniel Hawkins. I wanted to very briefly mention that was some discussion at the W3C, about potentially introducing the concept of a transparency log for web application, source code, particularly for web applications that don't want to trust the server and use engine encryption, for example. And it was brought up that it might make sense to"
  },
  {
    "startTime": "01:56:00",
    "text": "build that on top of skit. Right? So, I have a very preliminary proposal in the WICG. Around that topic. So if you're interested please also come talk over there. Thank you. Can is the proposal written down somewhere? So I did write something. Again, it's very preliminary. It's just a a brief. So there's a GitHub repo, the working title is source code transparency. Did you send it to the list? Yes. Sounds good. Thank you. Ned Smith, Intel. I just have a question on slide 33, which in Orie's presentation, where he was showing Trust increasing from red to green based on addition of multiple receipt issuers having issued a receipt. And Thank you. And the question is, what did the receipt issuers do Good. Using the using the the tomato or the soup analogy did they do to ensure that the tomato was fresh. From Take take the case where the farmer asserts that the tomato is fresh. And then the receipt issue comes along and says, I'm asserting that you asserted that tomato was fresh, but I didn't actually check that the tomato was fresh. Why should I trust you? Yeah. So it's the classic notary example. So We have these 2 roles. The issuer and the transparency service Sometimes we refer to the sort of signing entity in the transparency service as the notary. It's important to think about what kinds of activities is that entity engaging in before they secure. They they produce their receipt. So the minimal, activity that they might engage in would be authenticating the issuer. Basically checking the signature on the signed statement. If if If they're kind of a basic notary, that's all they're gonna do. Just gonna say, is this said authenticated"
  },
  {
    "startTime": "01:58:02",
    "text": "Is this is this issue or do they have key material that I can use to verify what they've put? I'm not even gonna look at the payload at all. It's a completely opaque payload, And we I I don't see tomatoes. I just see issuer, Public key. Check. Right? But, more advanced notary, maybe one with some domain expertise could start to look inside of that payload. Start to make assessment sort of decisions. That's an that's detail that, It's at the discretion of the transparency service. How much rigor they wanna put into their registration policy that's gonna be applied to that signed statement. Don't know if Cedrick Grant, you'd like to comment more, but talk a lot about transparency services. So the if this a did it did that its first net, is it sufficient answer, or did I size It feels like The path we went down with registration authorities for PKI where a lot of people automated that step and now PKIs in some sense, are broken because there's no registration authority. So So, yeah, it's not perfect, but then we are not going to define, what to, what is a good policy for automators? So the So the Yeah. Thank you. So so they are the main, the main benefit, the immediate benefit is that, you know, you have a notify with the farmer is and, you know, to blame or to discuss it. It should automatically disconnect us. That's already something. Furring into an energy with, CS and certificate. This provide the counterpart for certificate transparency where similarly you are not going to trust every farmer, but at least you have a transfer won't take out. To discuss it in case that is, disagreement about the quality of the metals. So so a compromise might be that the type of check that the receipt issue or did when they issued when they signed the receipt,"
  },
  {
    "startTime": "02:00:01",
    "text": "is is is is is would that be something that goes into the issue or claims, So that's a possibility. So, you have, claims and by the insurance and, of course, If you don't trust her at all the issues, then it's a very useful. So You can have a refine amount of issuers and different kinds of credentials. Different kind of accreditations, and all of that is enabled, but We don't want to be specific about that as in the definitions in the dark in the eyes. Thank you. Okay. So, we unfortunately had a flurry of people joining the queue 2 minutes to go, which, is is not something we can accommodate. But chunky, you, and Steve, got in before the queue was locked. So if you'd like to make your points, we'll hear you, please. 4. This is, Peter. Huawei. Just, it's more like a common that may relate to certificate transparency and, Roku trees and Jose. It's just, there's a new primitive popping out that's more efficient to you know, filled, similar, like, merkel trees. So when we are proving an inclusion proof of one element, dollar, and elements usually in local truth, you need log n of auxiliary sub trees, and you need logging up building back And, saying that the Ethereum blockchain is using. It's called, polynomial commitment is something that can, you know, when it's proving 1, or k elements out of and it only needs one constant opening proof. It's almost always the same size. And the verification of this inclusion proof is always a one constant. I think it's interesting. Could improve the efficiency efficiency That's Yeah. I think that's a great reason to maintain agility of the tree. Form us, Thank you. And Steve, close this out, please. Hi. So Steve Lasker, related the tomato one. I think it's a perfect example, because Skit's responsibility is not, as Cedric said, to verify tomatoes. Any more than it is to know specifically about SPDx or cyclone or Steve's or Steven Orie's new format."
  },
  {
    "startTime": "02:02:02",
    "text": "But what it does do is, if you decide to trust Tomatoo verifiercorp. That provide statements that say they're organic or super green or whatever, then that's exactly what Skid is for. So it's exactly that kind of thing as to what enables that flexibility and you're just you create create a registration policy that maybe says you trust tomato verifier issuers, and then That's what the registration policy has done. So that kinda gives that flexibility. I'm trying to see where Ned was, but Okay. Great. Thank you. So, yeah, again, apologies, as I've said in the chat, I don't like to lock people out of the queue, but we can't run over. So, please do engage in the mailing list. It's skitteritf.org. and we'll discuss your points there. Thanks very much for coming, and, have a good IETF"
  }
]
