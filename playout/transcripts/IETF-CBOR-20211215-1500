[
  {
    "startTime": "00:00:05",
    "text": "no i don't see anything on the seaboard list should should that have come to the simple list or somewhere else it should have gone to the zebra list let me check whether that actually happened so maybe more things are broken oh it's really it was just my my mail that got that that that got hanging down i see it now nobody reads my mood okay um so with people showing up now that we're at the top of the hour um i'd give it a sc marco hello record um i'd give it two more minutes just to make sure that everyone is really here and then we can get started so"
  },
  {
    "startTime": "00:02:31",
    "text": "okay um hello to the first interim of this uh of this interval of between ipf meetings we have a few points on the agenda for today or two points so far one is that cdl control had a few issues that had one issue that came up during auth 48 so it would be good to have a bit just just one or two more voices and saying that yep let's let's just fix this north 48. if that is indeed what we want to do and the other is an update from carson on how we can progress file magic and then on the mr administrative administrative side there's the question of whether anyone is around between the holidays if we want to keep up our two-week meetings anything anyone would like to add here okay uh so then let's start with the off 48 issue um something that all of us missed in the in the reviews was that while whereas cat is defined to accept both text and white strings um correct me if i'm wrong the av and f um control was um was not described to accept either with the conversion that"
  },
  {
    "startTime": "00:04:01",
    "text": "that the concatenation already defines being that binary strings have to be utilized if they are to be used and even there is an example in there that already used a b and f with bytes so this proposed resolution here is to just change the text to allow the abnf to have bytes in there as well rationale for the whole thing being that byte strings are a bit easier to use with respect to line breaks because text strings are compatible to some extent to json and bad strings don't have to be and this allows way easier copy pasting into documents most people probably don't even notice the difference because it's just a matter of single or double quotes custom anything you would like to add there well this was a very good summary so just to clarify dot a b and f and dot a b and f b except text and byte strings as their left hand side as their target they are just described right now as only accepting text on the right hand side and that's if you look into the example in figure 4 that actually is an example using a byte string in the right hand side because otherwise we would have to cram this in a single source line with backslash ends in between them yeah so iraq can't be here today because of a uh conflict uh but he said he would be happy with this change um so"
  },
  {
    "startTime": "00:06:01",
    "text": "um i would be too um having missed that in my shepherd review so for me it would be fine anyone have would anyone around have a problem with doing this in all 48 because otherwise this would be what what happens in the next few hours and days i think barry gave us till friday to respond okay i i i roughly remember the 16th but that's kind of the oh maybe it was the 16th um again and and anyone speak up now or in the next day otherwise this will this will proceed yeah deadline of 16 comments okay thank you then let's hop on to the remake to the one thing that remains to be done about filematic carson i think you have slides do you want to shield um not sure if i properly imported them yeah so i i already described the problem at the iitf 1 12. why do i have two different products to choose because i just clicked on the import link again not seeing that it was already automatically imported so those should be the same good"
  },
  {
    "startTime": "00:08:00",
    "text": "okay so this was the state uh during uh igf-112 where we had uh two tags five five 55799 which is part of rc8949 and fight the new 55800 and the 800 gives us the ability to prefix the zebo sequence with a short piece of silver 12 byte usually 12 byte zebo data item uh that allows us to identify what the zebra sequence that follows is about so that's fine and the mistake i made is that in the examples that explain uh how to use the the content format tags allocated by the same draft i actually use non-sibo data as examples and the text for 55-800 is pretty clear that we actually want to have sibo data there and not something else because so we also run into um issues do do we um do we need to have a byte string header edit and if we need a byte string header then of course it's no longer a fixed uh sequence of bytes that you just add or prepend uh to to the file so it gets complicated um so what we we said um is that we will make a very simple change uh which is uh just adding another tag 55801 uh which has exactly the same meaning as 55 800 except that the resulting structure is not a sibo sequence because there is no guarantee that what follows the 12 byte header is actually cbo data"
  },
  {
    "startTime": "00:10:02",
    "text": "so we don't have an rfc yet that describes that that construction but people have been using that before because it's kind of obvious um so the zebra sequence and in rfc what is it 87 42 or something that that defines um you have a sequence of sibo data items uh in one white stream and 55801 uh now would be a sibo header where you have a single c bar data item and then data follows that is no longer necessarily c bar so that that's the whole difference and of course data that is not necessarily cbo might very well be sibo so you everywhere you can use the 55 800 you can use a 55 801 which is slightly weird but apart from that i think it's a nice solution uh of of the problem um yeah so uh the the work that needed to be done is to fix up the examples and actually find examples that explain all of the various uh combinations and so the the only almost rfc i could find where we have a content format number for a cbo sequence is the new block mechanism out of the the co-working group for the dots uh working group so that that is being referenced even though it's maybe not something that you put into a fire all the time um but it's the only example that that where we don't have to invent something to make the example and um yeah the the one thing that you you need in your library is something where you can"
  },
  {
    "startTime": "00:12:01",
    "text": "decode a single sibo item it's called decode with rest in in my implementation and um i actually only added that after 1749 was published if i remember correctly because i noticed it's actually useful so it's slightly less than eight years old um but i think any modern sibo implementation should have something like this not in the sense of i have analyzed all of them and found most of them to have it but in the sense of that is something you really should add now if you don't don't uh have it um so i think we we are fine with that but even if you don't have that in your implementation you can just uh take the first 12 bytes and and see whether this is a sibo item so you don't necessarily need the the uh counting uh aspect that this decode with the rest interface has um yeah so as i said it's slightly weird to have both 55 855 801 and it's also slightly weird to have the content format tags change their semantics when they are directly enclosed in a 55800 or 801 because then the byte string that is being tagged there no longer is the actual representation but the uh three byte byte string bor uh which together with its head becomes cbo uh in in a hex dump um yeah that's slightly weird but i don't think it's it's a big uh problem and the other thing that that is maybe a little bit hard to explain in an elevator"
  },
  {
    "startTime": "00:14:00",
    "text": "is that this document is about uh labeling c-board data except that we have a little hook sock for uh doing other content formats as well well okay what just was uh an opportunity to do this and having separate documents a separate document for 55 801 doesn't really win a medal either so that's my my slight uh sensation of weirdness here uh but i think this is fine now so in dash 07 i i put in 55 801 and and the examples and the next step of course is doing the reviews because the working plus call we already had uh was about the previous version and now that we have uh done a non-trivial changes so we probably have to have some some round of review again and my question for for this meeting would be um are we doing a second drug last call for that or is is it uh in the end simple enough that we can uh consider this workhorse call processing but i still would like to have the reviews in in any case um not in the meeting i think um questions i have two but i'd like to go with any other questions first uh okay then then let's start um one thing that i only started to understand as you went to the second last slide is that these these nnn on the first slide are all on the first two slides are now actually all the same numbers right because previously as i"
  },
  {
    "startTime": "00:16:00",
    "text": "understand there was the allocation for the ranges which was completely distinct from what you would use to tag your own uh more or less custom data item in a in a 55 799 tag so these are now these are now a unified sequence that are overloaded depending on what they're in inside of if they're if they even contain zebra items at all well you can use and then an end for for anything so we actually have an example where michael's open spawn uh tag is being used so this is not a crap content format this is just a tag he has got allocated completely outside any existing range or anything um and he can use that to identify open span uh information but if that where you but but if that were then used with 55-801 then uh what would that binary that what would that data that follows the an end would that be an identity encoding because if we are talking about content types then they are content formats then they have an encoding attached to them that means that what follows the 55 801 would be in say um see wall um in g-zipped zebra or or deflated sebor whereas the same num whereas both the number four zebra and deflated seabor in 55 1799 would just mean that it's just generic sibo yeah so the the the 55 800 or 55 801 kind of disarms the the nested peg and tells it not to to"
  },
  {
    "startTime": "00:18:00",
    "text": "run the media type processing just yet uh because the the actual media type representation is following and not embedded in in the tag but but say say we have something for opens one and opens one plus deflate sorry no actually con allocated content four mods say cinema l inside a seabor cinema and see worse animal deflate these have content format numbers and thus have get a matching and an n of the 64 kilo range that is allocated right so if i see a 55 801 followed by the content format the the shifted content format for um sentiment l plus c board in deflate is what follows the more than um compressed data or is it again uncompressed table because that got disarmed well the next thing in the the sequence which is not a zebra sequence in that case because it's inflated um is the the raw data of compressed uh okay what was it it was something um so the the only thing that's weird is that the byte string inside the nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnlnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnlnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn th actually is not yeah compressed uh centimeters but just those three bytes bor and because we might have media types where the three bytes b o r actually are a meaningful uh instance of that media type uh we need to make sure that uh we don't hinge the that distinction on on the"
  },
  {
    "startTime": "00:20:05",
    "text": "not applying the media type to the tag content of any n but to the next following representation but just to stick with the encoding for a moment that means that if i use either of these two cml um cmlc board in this in deflated non-deflated version either of those inside the 55799 would be would have the same meaning they would both indicate that this is centimeter this is centimeter and obviously what is in there is cyborg and the deflated the deflate information just gets discarded when used in 55 7.99 the the disadvantage is that you have this byte string header which you need to generate uh based on the actual representation because it has to encode the length of that representation that's why you don't always want to use 557. i mean 55 799 is oh okay oh oh i see that that's that's still the without any um without any bite uh by string around it or is it oh you're right yeah yeah yeah sorry and then later yeah um i'm not so much worried about the the concrete case of the nnn and having different meanings what i think that would be good for all of us to consider is what this means for the general"
  },
  {
    "startTime": "00:22:01",
    "text": "processing model for tags because now this and as far as i know it's the first time but maybe i'm wrong here this would be the first time when you need to process the text from the outside because if you start processing from the inside you might get completely wrong and you have to start work work your way inward and the and in a in the sense of a preprocessor um creating a language that might mean that um the 55 80 55 800 tag doesn't get the content of what is in there but it really gets the kind of the abstract syntax tree or the the unexpanded model and then works on that tag being there and all all the other things that go on yeah we have that in other places like zebra pact um where you also need the information from the outside so you can make sense of a tag yeah but you can in impact you can at least kind of defer pro no know that you have to defer processing there because what is in there is a reference to the index and here it starts being like if there's anything in there you just can't process it but yes packed is to some extent president for that already yeah i think that that's a pretty good point that uh probably needs to be made in the text as well so if you can write a sentence or two um i think we should include that i'll give it a try more questions or comments on this"
  },
  {
    "startTime": "00:24:04",
    "text": "file magic in general procedurally as you mentioned reviews would be good i lean toward um having an actual second working group last call once all of this is done because i think it's a comparatively large change um barry i'd like to have your opinion there too make sense okay thank you okay if nothing more comes up on this the next point on the agenda is already the next meeting that would be scheduled for the 29th now i don't know about you i'll probably be kind of jumping between family stuff on these days so i wouldn't mind leaving that meeting out but if you think there's something pressing to discuss i can probably also be bouncing around so i think it's best if we just pick up in the new year when would we pick up it would be two weeks after the 29th that's the 12th okay yeah okay in that case that was a short but i think good meeting just looking at chat here okay yeah that's just more voices for supporting the twelfth then have a nice holidays"
  },
  {
    "startTime": "00:26:01",
    "text": "and good new year and see you all next year on 12th january thank you see you then thank you thank you thank you everyone thank you thank you bye thanks michael for the good night"
  }
]
