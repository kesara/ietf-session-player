[
  {
    "startTime": "00:00:27",
    "text": "Hi, everyone. I think we'll get started I think we'll get started soon I think thomas haynes volunteered to take notes, but if anyone else wants to take notes, that would be very much appreciated Thank you"
  },
  {
    "startTime": "00:03:03",
    "text": "Thank you Thank you Thank you All right, what? Oh, you got it, okay Do I need to approve it?"
  },
  {
    "startTime": "00:04:05",
    "text": "Let me just make sure I did that Yeah, I'm gonna have to go in Thank you approved them All right, why don't we get started? Welcome to VECON meeting for IETF-1-2 120 As with all meetings, please read and understand the note well and follow its guidance We also want to make sure that we're"
  },
  {
    "startTime": "00:06:00",
    "text": "having civil conversations and acting collaboratively, so please follow those note really well policies we want to make sure you're aware of your probably are at this point in the meeting but uh logging in and when you participate at the microphone, please use the tool to get in the queue Some resources there Okay, so the agenda currently has is a follows does anyone want to bash the agenda Thomas had actually volunteered to also present, if there has time, some of the work that they did at the hackathon, and I thought that was a great idea, so if we do have time you can go through those at the end Anyone disagree with? that? I hope not All right, then why don't we move forward? and Dan, you want to present? My name is Dan going to talk about the VCon container draft and some changes in issues Next slide. By the way, not done interrupt, but we did some changes in issues. By the way, not to interrupt, but we were able to make it a working group document officially. Yes, actually, if you back up a slide and in parentheses there, I apologize I should explain that"
  },
  {
    "startTime": "00:08:00",
    "text": "I had some difficulty with the build when we forked it for the work group repo and I couldn't get it building in time, so I submitted it as 04 as an individual draft and then over the last last week in this week I actually fixed it and finally fixed the name, got that right. And so I guess, got it submitted is 0.0 zero, is work group item The documents are identical other than like dates and a few other whatever formatting things that the tool in introduced So things I was going to talk about are Seabor and CDDL CDDL some additions and resolutions of some metadata from jonathan hui contact center use cases ID some hackathon findings and some other new issues. Actually, first two in the wrong order. I'm going to talk about the CDDL and Seabor stuff first. Next slide slide Nope, I rather this slide was wrong, but yeah, I'm going to talk about the CC use cases first uh, the, uh, CC use cases first. Um, this is just kind of a review from, uh, it past, and this, this, this which lays out all the metadata that Jonathan defined in the CC use cases draft this table, which actually extends over the next three slides, is in the repo That link on the bottom is wrong, it's missing the IETF part. So it's draft IETF v-con container. But this table is on the repo if you want to see the whole thing and can't see it here on the slide this is kind of tiny here. But this was stuff that was in jonathan hui use cases draft"
  },
  {
    "startTime": "00:10:00",
    "text": "that was already in beacon to begin with, right? So it was stuff that was, it was stuff that he identified in his draft, but he'd already had in there And there's references to where that, uh, uh, draft those, the metadata is defined. So next slide These were things that after reading jonathan hui draft, I thought, were straightforward and I just put them in. They weren't, went into the 03 version of the draft, and there wasn't, I didn't think there was any issues or anything warranted discussions, but just again for history reference. And next slide And these were things that we talked about in Brisbane These were things that I had questions about, didn't quite understand or I wasn't sure where it should go in the V-Con. And we resolved all of these except for the time one. It's the last two, I had some questions, and actually jonathan hammell back to me on that and clarified So everything except for the top one went into the 04 version or the OO you know, IETF version, worked with version The top one, I should doesn't look like jonathan hui here, it's unfortunate but the top one, I think is covered, but, you know, I'm open to other other input so the point here is um unfortunate. But the top one I think is covered, but, you know, I'm open to other other input. So the point here is the interaction type, you know, was type of interaction what type of interaction was this conversation and this is the covered from the perspective of we have the media type for the dialogues so we know that it's text or its audio or its video We have a dialogue type, so we know if it's part of a transfer or a conference or those sorts of things"
  },
  {
    "startTime": "00:12:01",
    "text": "So we know that perspective. What we don't have in there, and oh, there is My question for you Yeah interaction type so I'm sorry I repeat just to catch you up here. We have the interaction type, we have, you know, whether it's a text or audio, video interaction, we have the dialogue type so we know whether it's part of a conference or transfer situation. What we don't have is this was know, this was an SMS exchange or this was email exchange, or this was, you know, a web chat exchange We don't have the specific application label in there. I don't know if that's needed And so I'm open to input on that if people have an opinion Okay. Jonathan Rosenberg I do have an opinion, and it's, you know, mentioned in the Connick Center Doctrine. I think a type with an enumerated list that's extensible would be good, and the one know, the ones at least for the Connacht Center cases are an inbound call, an outbound call, manual dial call. I mean, it's, I have a set in there and then we can make them extensible so include a few baseline types. I think it's useful That I think is covered in ways. I mean, like, we know who the originate is, and so, you know, we're knowing who they part is, we can infer whether it's an inbound and out outbound. Okay, so you want to infer it as opposed to an explicit type? Well, I just, I mean, I, guess maybe there's two things here I'm wondering, do we need to know whether it was email or SMS or some web chat or whether it was audio call was on the PSA? or whether it was on, you know, what's at? Is that detail important to?"
  },
  {
    "startTime": "00:14:00",
    "text": "anybody um which i think is slight different from, you know. That is different from what I'm talking about I think what you're talking about are a common of like channel types to use the context of like voice or email or or SMS types to use the context of like voice or email or right or SMS I presume you is that I don't recall is that all already somewhere in there elsewhere that that's not in there that you know the you know the channel label grant I'm, I was inferring from this that might might be something interesting but I don't yeah I don't have a need for it. You know, I'd love if somebody does speak up and tell me what it is That's what you mean, yeah. That is handy. I can send you a list of enum values. Okay, okay, awesome So other than that, that's, you know, I think, from my perspective, all the metadata that's in the, the, and jonathan hui, you know, CCU use cases, I think is covered in the, in the in the latest draft And, and so if people feel that's not the case or if there's other stuff that they think that that's relevant I need to know I think other than this one issue, I think, I'm done with the coverage Next slide I think Thomas, John. Oh, sorry Hi, thomas mccarthy-howe, how? I'm fine with the enumeration of an interaction type, as long as it could be extensible So as long... Yeah, yeah. Okay, great. Sounds good to me So we'll define some types, but it'll be open to, you know, whatever the same thing with like uh uh uh participant type, John, Jonathan Gave me some labels for that to put in as here's some standard ones but you know it's open to put whatever you want in there"
  },
  {
    "startTime": "00:16:00",
    "text": "anything else on on use cases before I go on to? seaboard and see detail? Okay, next slide so um I've got like three slides here on CDL and CBOR. I'm going to go through a bunch of stuff And, you know, if you have questions on clarification of what I'm saying here what's up here, chime in, but hold the opinions on what to do with this stuff until I get through this So I always had, you know, the thought that, you know, we should support Seabor in the background mind and that it was on the roadmap and in the you know, we should support Seabor in the background mind and that it was on the roadmap and all that, and I was thinking there was a separate draft but Rowan volunteered to help me because he was, you know, going through this with Mimi and and so I took it on and I took a stab at throwing together some CCDL so we can define the so I took it on, and I took a stab at throwing together some CCDL so we can define, you know, generalize this from not just Jason, but Jason and Seabor I basically all I did was throw in the CDL scheme into the appendix and I did a few quick edit to the draft, and I didn't, you know, there's a whole bunch more that need to be done if you know if if if if to continue with this but I just wanted to get something out there for, you know, discussion and and to be able to kick the tires on it, you know, a little bit I don't, you know, even we do cope forward with the with this, I don't want to have to reform it all of the parameter definitions I think what's in there is sufficient. There'll be a few you know, Jason Seabor specific things that will have to document, but I'm hoping that people are happy with the existing format of defining the parameters and the objects and all that or whatever and and that will just you know"
  },
  {
    "startTime": "00:18:00",
    "text": "do have special cases where it's appropriate I still have a few things i'm sorting out with the cdl i'm sure it's not quite right or valid. I'll get into that in a bit I had some struggling with T-Date and C-Bartag 20 I think I've worked my way through that but there's still maybe some polishing to do And, you know, just, you know to be clear, no intention to support YAML though that comes with CDDL, but whatever, you know, it needs sections on CWS and CWT if we're, you know, if we're going to support Seabor And so, you know, there's a bunch of work that still needs to be done, but I wanted to take a stab at it Next slide. Colin, did you? Yeah, I apologize So take this with huge grain of salt I haven't been involved enough to really have an opinion, but I don't really see what drives having both. It seems that having two things is categorically worse to me than having one thing and I know there's the temptation. Maybe if we had two people would like and love us more because somebody, because they don't like us because of X And I just don't, I mean, my experience with deploying Seabor in real situations is been horrific. Jason works great, unless you have a very specific reason why you need to move off of JSON to Seabor, I would heavily stay on JSON. And if your problem is that it's too big, I mean, I encourage you to Z g-zip both of them and see which is smaller because it won't be the seabor right um So, like, if size is the only reason you're doing it, is probably not the right answer. If performance of parsing and things is the reason you're doing it, neither of them are the right choice. And having more than one thing seems like a wrong choice And I'd take that all with a huge great"
  },
  {
    "startTime": "00:20:01",
    "text": "of salt. I'm not going to object to whatever you do Yeah, I know, I, I would, you know, comments so I get through these slides and we can decide whether, you know, we want to do CDL of Seabor or, you know, whatever I definitely want to have that discussion, though, but let me get through a few more things. Yeah, Rohan can you wait? Okay Oh, you drop the case. Unless it's, you know, question and clarification No, we should have that discussion, but you can finish your slides for- yeah so next slide so uh hack I just want to talk a little bit about hackathon because we did some work with CDL and CBOR both in preparation with the hackathon and, you know, at the hackathon and a reduction object too But I'll put that off and we'll stick with CDDL and CBOR. Next slide So at the hackathon and in preparation for it, you know, did some playing around with CDL, you know, my, my and in preparation for it, you know, did some playing around with CDL. My thought was, oh, we've got the library for Vcons, let's validate them, right? This is what we can do with CDDL Well, I really struggled with the tools about the command line tools and there are various forms of that as well as the, you know, the Python libraries that the few that do so support CDL, and a lot of problems you know, they didn't all support all the operators, they didn't, you know really obscure errors that have you know really obscure errors that have no clue what you know what it means you know parsing errors as well as just validation errors. And so I struggled with the tools If anybody has some, you know, some great insight on this love to hear it But that certainly made me question of, well, is CDL"
  },
  {
    "startTime": "00:22:00",
    "text": "you know, ready for prime time and, you know, do it? we're going to take this on yet? But I did successfully, we did successfully implement Seabor in if the in, in, at the hecathon, so we can, you know, we can read in Seabor beacons and, you know, write out Jason and vice versa and convert back and forth and so, you know, I'm pretty happy that that's reasonable the question is you know is how we would want to document that You know, we'll talk about you know, benefits of one or both or whatever in a bit. But I just, you know, I wanted to talk about the, you know, the kind of struggling in the head would do CDDL CDDL and when we get to that discussion. So next slide So, CDL or not Seabor or not, you know, if I do keep CDL and or in and CBOR in, you know, I realize there's a passive edits in there and so, you know, don't bother, you know, pointing them out I realize there's a passive edits in there. And so, you know, don't bother, you know, pointing them. I haven't taken a pass to the document to clean that up So this is kind of the point of where I wanted to open up discussion of what people the document to clean that up. So this is kind of the point of where I wanted to open up discussion of, you know, what are people's thoughts on it? I mean, I think, you know, from my perspective, the reason to support CDL, one of the reasons is size, I have, you know, I have kind of center customers that do 5 million calls a day and, you know, anything they can do to say you know, I know this is, you know Colin, you said this wasn't the a day and, you know, anything they can do to say, you know, I know this is, you know, Colin, you said this wasn't, you know, you didn't think it was valid, but you know, anything they can do to save 10% are this base saves them a lot of money He's a baseball. Well, yeah"
  },
  {
    "startTime": "00:24:00",
    "text": "know of this base saves them a lot of money. He said baseball. Well, yeah. But, um, um, you know, it's like it of money but um you know it's at this point you know go ahead uh steve Yeah, just steve lasker So I understand the Seabor and CDDL and going through SCIT and going through some of the other tooling We've hit some constraints in there as well, and it's all about tooling You know, there are a lot of challenges with JSON from canonicalization to other challenges and I just think as a group it's we should, you know, maybe look at if it, if we think there's positives, is there opportunities for us to improve it? So I think that's where I'm trying to go back and say what can we do to improve the tooling around it So we can make it, there's a reason we groups started with Cozy and Seabor and the more I've used it, the more I've liked it the but I do find the tooling lacking So I'm hoping we can fix the tooling as opposed to abandon the technology because it's not mature enough when this is the body that can mature it So if we don't like it, let's propose fixing it as opposed to abandon it because we have this old thing which we're used to the old thing. So that's all Any more comment? on our thoughts on you know seabor jason both. Rowans in the queue. We have a couple people in the queue. All right have a couple of people in the queue. Oh, sorry. Oh, yeah, let me see Hi Yeah, rohan mahy. I actually had a question for Cullen Cullen You said you don't think that either Seabor or Jason is the right solution if parsing performance is an issue So is there another IETF spec that you think? we should use instead that? satisfies that goal? Well, you can parse ASN.1 faster No, I don't think there is"
  },
  {
    "startTime": "00:26:00",
    "text": "but I I don't know why IETF spec is somehow a relevant discussion in here. This is the insanity that takes IETF shit down is us thinking that it's needs to eat our own dog food or something. Like let's use what the industry wants here. Like, what do they want? Right are you suggesting Krotoboff? uh i i i do not suggest any of those things. Protobuff does parse fast but Dan did not say that parsing performance like Rowan, you're just fucking with me, okay, first of all No, no. I really respond to that. But I mean, you're like, bring me a rock so I can make fun of you, okay? I mean, Protobuff does parse fast but doesn't have a stable rep is one of the problems with it. But Dan said so so I don't really respond to that. But, I mean, you're like, bring me a rock so I can make fun of you, okay? I mean, Protobuff does parse fast, but doesn't have a stable rep is one of the problems with it. But Dan said size was an issue, but the thing I said about size was GZipped JSON, in my experience, has been better from a size point of view than G-JP seabore right? And so I'm fine. I mean size, I can understand why size is very relevant if we're archiving craplode of this stuff and we're keeping around for many years or whatever Like, that makes sense to me that size is an issue so so i don't see seabor as an answer for that yeah so the reason I brought this up is because like I think that there are multiple applications for recon and in the sort of classic call center case Deacon with Jesus, just Jason with Jesus might work just great But I can think of some specific use cases where parsing performance is important and so that why I asked the question. I wasn't just, I mean, I was So do you think Seabor has better parsing performance than Jason? JSON? Yeah, I do. Send me number because I got numbers to send you. So anyway I'm not in line up here, and there's several other people there, so I'm going to shut the fuck up and sit down Thomas? thomas mccarthy-howe Howe for another angle of how to think about this,"
  },
  {
    "startTime": "00:28:00",
    "text": "I've been working with four or five different implementations now because that all outside of this room probably And if we didn't pick Jason, as the container value, there is zero chance we would have gotten this many implementations that quick because it's very easy to put together a JSON implementation versus C4 Seabor. So I think the penetration we're going to get with JAS is much greater However, I will admit that as we start to make these becons and throw them around, we do get some interrob problems, especially with, you know, date times, etc., which are being stored inside objects that aren't being JSON serialized parts properly. So it's not like it's a also a magic bullet that it's all going to work just right the first time that actually there are some other issues that come along with it I'm not very tied to either one from a technical standpoint, except to say this We make a VCon once they may consume it many, many more times And so the people who create the VCon typically are at the bi-layer, networking layer, people who are actually have access to the conversations, and the people who consume the VCon tend to be JavaScript guys Right. So in terms of like how often it gets presented into technology, I think JSON is the clear clear win. I just did second it would, I think that there's a lot of front end use of Vcons and they want that in to be in Jason in my I guess my, I would probably position it as do we do Jason or do Jason and Zybor Sorry Jonathan. Yeah, Jonathan Rosenberg, five I would prefer we have one format"
  },
  {
    "startTime": "00:30:00",
    "text": "not two. If you have two, you have to go through the mandatory to implement mandatory use discussion for interoperability. You'll actually have to require implementations to support both and so you know, that actually raises a complexity. I think this was Cullen's point point So I would rather pick one and I would rather and compression is definitely like absolutely the main requirement GZip, JSON, I think is the right answer for that. So I think I'll same as everyone else said JSON's why they implemented we would prefer that thank you Is it something we want to take a vote on? Sure, we can get a sense of the room I'm going to challenge me on Are we, is there, is it consensus that it should be either? Jason or Jason and Seabor? You know, is that a reason? that a reasonable thing to vote on? on? Is that? If I could maybe just make a recommendation I don't think it's, I don't think anybody is going to claim that we shouldn't have mandatory to implement Jason and and and know you should have you should support Joseph Jesus So the question, I think the only other question is whether it's worth having another format which doesn't even need to be in the core draft I'm sorry, you'd repeat that. It doesn't need to be in the It doesn't even need to be in the main draft I mean, if the tools were better and you wanted to have a CDAL schema, that validated JSON, that'd be great. But I think if everybody is going to be doing JSON, then it should be Jason schema and not CDE How about this question?"
  },
  {
    "startTime": "00:32:03",
    "text": "Do we first, do we feel like one format? should be the goal of the group? Thank you wait till you vote What's it? No, no, no, he's, I'm sorry, he's wasn't logged in Okay, I think we're seeing pretty good consent there, just for the record it was 10 yes, one no, one, no opinion opinion Should I ask something specific about? Should that one be Jason? Are we? Is that? Is it Jason versus Seabor? Is it JSON versus Seabor versus Jason? Zeezyp? JZIP? Yeah, no you. It sounds like we're concluded, but just one final nail in the coffin of two things. You can't do two things and not have them both mandatory and implement unless you have a signature protocol to negotiate capability, which is like, just ruins something that's a file format So like this, so just for like yeah, but we're already on one. So I think it is JSON and GZIP both required Rowan"
  },
  {
    "startTime": "00:34:00",
    "text": "you have an opinion here? for the record I wasn't the person who voted no on that one have an opinion here for the record I wasn't the person who voted no on that last poll so so so i it sounds like there is strong consensus that that Jason should have it should define a format using that start that VCon should define a format using JSON and that GZIP should be required And then, the probably the logical thing would be to have a adjacent schema with which to validate it My only ask is that I would like to be able to continue to have C CDDL and like the option to use Seabor as a sort of, you know, red-headed draft option and I actually disagree with jonathan flat that is I actually disagree with jonathan flat in the particular use case that I have in mind, it doesn't require it doesn't require negotiation it would just be you know it would be like it's sort of a separate thing that's either converted or is only in its own in its little island I can't figure out how to get in the queue, but just to ask you clarify question. I mean, are you asking for an alternative file, a second file for get in the queue, but just ask a clarifying question. I mean, are you asking for an alternative file, a second file format, let's call it Ccon, FluffyCon, and it's in CDDL, and there's a way to, and somebody has written a tool that moves between VCon and FluffyCon is that sort of the... Sure, yeah. Okay I just, that makes sense. Okay, I'm going to register that media type right now I don't think anyone can stop you from how having a converter tool to a different format, Rowan Rowan Rowan"
  },
  {
    "startTime": "00:36:00",
    "text": "So do we need to do a show of hands or? does everyone agree there's pretty much consent? on JSON with GZip? At least in the room. Yep. Okay. So I'll pull out Seabor. Do I leave CDLA? in? We can ask on the list just to make sure as well Just do we need a polls Do we want to pull? Yeah I'm saying out Okay hopefully we're okay with that question Do we feel JSON plus GZIP support as the way? forward? I assume GZIP would be optional, right? Or mandatory? I think supporting it would be optional, right? Or mandatory? I think supporting it... Mandatory implement, right? that's right, okay. Jonathan said, man mandatory to implement, but not required to use, that's how you stated, yeah I think we're getting pretty good consensus there right now it's 10 yes, zero no and two, no opinion I think that's pretty clear All right, anything else on that topic?"
  },
  {
    "startTime": "00:38:00",
    "text": "And so I'm taking CDDL as well, right? Okay. Is that? Well you could use CDDL to validate your JSON, right? Yeah, I think it's for, it's independent definition language, right? Yeah Yeah. Okay, I'll pull them both out. Cool, I'm glad I did do a thorough editing editing All right, next slide Some more hackathon findings. We worked on the redaction object, which is something that hadn't spent, you know, hadn't implemented and hadn't really thought through in depth When I, when I created this originally, I thought, well, you know, all these things that have kind of in-direction or reference things like, you know, the dialogue and the attachments and the analysis they all can have a body which is, you know, can be either in line or referential through a URL. So I thought, well, when we're referring to other Vcons, I should do the same thing. And so, you know, so when for, we do this and we do this in the redacted object, the amended object in the group, uh, uh, uh, uh, And so my thought was, okay, we, you know, should always probably have UUID to refer to the other V-Con We optionally could have a URL where we can go retrieve that and or optionally have a bi- where you included in the line and in kind of thinking about this and then going through the implementation I'm not sure that ever makes sense, actually I mean, we, you know, it probably doesn't make sense to create a tree of these, you know, in-line"
  },
  {
    "startTime": "00:40:01",
    "text": "vcons. One that's big, two you probably, you know, to, you know, un you know, detailed all those elements anyway when you want to use them so why not just, you know, use either UUID or URL to reference these, you know, the less redacted or unredacted URI for the redacted object or in, you know, is that? also may apply to the amended in the group object I'm not I think, ready to decide that to jettison, but I am thinking that and I just wanted to bring that up for discussion if anybody had an opinion but, you know, and I'm, you know, I'm not going to do it yet but i it's definitely something that i'm you know, kind of tooling with and thinking it may, may not make sense to have the body for the reference to the vegan thomas mccarthy-howe how? So as we've been playing with the V-CONs, what we're finding is the embedding of Vcons and embedding of anything makes the most sense when you're sending it across a network boundary right right yeah trust domain or or you know the trust domain but you can't get back and the other thing we're finding is, you can find any use case for a VCON And so as an example the use case for this is I am a enterprise and I am responding to a legal lawful request for the conversation and that conversation that I'm being requested of is a redacted conversation so in that case, I could put that redacted beacon and keep the original in it to have one package and I'm"
  },
  {
    "startTime": "00:42:00",
    "text": "sending across a trust boundary. So that's a case Now, it's just as easy though to send two Vcons Two, right, right. And so I think in I think my, my senses of simpler is better, less things to break means less easier implementations and then interrupt. So I think I would be okay letting this one go because I, for the one cases I can think of, there are other ways of doing it Okay, all right, cool. Good, good input. I said, I'm not fully decided on that, but I just, I wanted to, you know solicit input on that. And if people have thoughts afterwards love to hear it The other thing on oh, the redacted object I, I mean, it's, you know, in addition to the, you know, the VCon container you know, for this workgroup, I had always in my mind, had thought, and I think it's in the charter even that we would create, you know, to find some other media types. One, I think you know is pretty important that we do is uh the transcription, just because every transcriber comes out with a different format of transcription. And unlike some of the other analysis, that get attached to a VCon transcription is, you know, is an output, you know from analysis. But it's also in is, you know, is an output, you know, from analysis, but it's also input to a lot of things, right? It goes into, you know, you know you know, from analysis, but it's also input to a lot of things, right? It goes into, you know, feed, if I want to feed this conversation in the chat, GBT and prompt it with something, I want to feed it the transcription, right? And so, having the transcription in a standard format, you know, I think is a useful thing Because it's not just an output that we attach to the beacon, it's input to a lot of things And in digging into the redact, object a little more, I think there may be"
  },
  {
    "startTime": "00:44:00",
    "text": "a redaction analysis object as well that we may want to again, this is just, you know, thinking out loud here, but I think that there are be interesting to define a redaction for the DECON as some type, immediate type, which describes the instructions of how to redact not, you know, why you're redacting or what the methodology for redaction is, but here's the here's type, which describes the instructions of how to redact, not, you know, why you're redacting or what the methodology for redaction is, but here's the set of instructions for redacting this this beacon. Again, just thinking out loud, but, you know, this is kind of some thoughts that came out about the out of the hackathon Okay, uh, next slide Hit some other issues that I heard. These are more kind of hallway issues that weren't on the list or whatever someone mentioned is already here is he on online? I don't know, but so ORI mentioned you know, remove the use cases section out of the container graft. Because we know got jonathan hui draft and hopefully we can get a few other maybe use cases But, you know, so that was the was one bit of input I had another input from already saying, you know, take take the GWS and JWT out of here and it doesn't and let people do their own thing i don't know I'm not sure I agree with that but I'll bring up these issues I had another cross from jonathan lennox to support a separate recording file for each party so that you may have a instead of having a multi-channel recording you may have several, you know, one-channel recordings for each party in a conference or even in two-party call"
  },
  {
    "startTime": "00:46:01",
    "text": "I think most of it's there to the day that. I have to go through the mechanics of that but I think it's mostly we can support that There may be a few things that need to be added there, but I will go through that scenario and try to see if there's some may be a few things that need to be added there, but I will go through that scenario and try to see if there's something missing we need to add, but we're pretty close to being able to support that. And I had another comment from jonathan lennox. I'd like to be able to stream the construction of a V-Con That one, I you know, I think you kind of partially do that Like, you know, if you cashed all the parties and just start streaming the dialogues, you could kind of do that and then add the other stuff at the end I don't, I don't, you know, I think without totally rearranging the whole structure, I don't, I don't think that that's something that we'd be able to do very easily. And I really would hate to start over again and read re-change that structure. It looks like John Jonathan, you have a comment Yeah, this seems really hard. Yeah. And I'm not sure why. Okay. So I don't know like, I don't see jonathan hui Jonathan online? No. Okay hui Jonathan online? No. All right So, yeah, so there's some hallway issues that I heard I thought to bring them up. I'd love to have more input and thoughts on them I had it you know, from the floor I think if we get into those things, then you're talking about more of like a playback format or something like that, and I think that's a lot more difficult than what we want to do here. Yeah Yeah Yep. Uh, so, uh, a playback format or something like that. And I think that's a lot more difficult than what we want to do here. Yeah. So next slide to do to do some"
  },
  {
    "startTime": "00:48:00",
    "text": "things about emergency services use cases right? I'd love to, I know that was a use case that we thought about. I'd love to see an ID or even just a you know, a long email you know, similar to the fantastic job that jonathan hui for Contact Center. Like, you know, give me some metadata right, and some things that are missing or you scenarios and so that I can, you know, I can look at stuff. Same thing for messages We'd love, you know, somebody wants to take on writing up, you know, some use cases for messaging. I mean, I've heard of you and Rowan has presented a few outlines and stuff, but I need details you know, I need metadata that I can, you know figure out how it fits in or not or whatever. I got a bunch of to-dos in the ID I know I have to fix that stuff So complete the edits for Jason only to Jason and Seabor Well, that's, I'm just going to back stuff out And there's some missing examples that I need to, that I, did it play source those before and I haven't done them yet, whatever, and so I need know, that's still needs to do See more examples, don't have to do that anymore and, uh, don't have to document, uh, Cozay stuff. Next slide Thomas did you have a comment? Oh So I want, I wanted thomas mccarthy-howe Howe I just wanted to take just a temperature for a second. One of the requirements internet drafts that I would really love to put forward would be something like we did in the hackathon this weekend, which was the integration of skit and becons or"
  },
  {
    "startTime": "00:50:00",
    "text": "requirements around governance of becons through their life cycle So a VCon governance life cycle internet requirement draft. Is that appropriate for a charter? Is that in scope? I would yield it to other people who know better, but I don't think that's in our charter. There's no reason that you couldn't you know, put together an individual draft and and we can you know, potentially talk about it, but, but outside scope. I don't think it's currently in our charter is it? Isn't there, well, it depends on what you consider part of the security? and other things. Yeah, I guess. Yeah I don't know. Does anyone else have opinions there? I would have to read back the charter, to be honest Okay, we'll bring it to this list. Yeah. Okay, thank you Let's do that. But, you know, an individual draft would be great either way Next slide. Next slide Next slide. And this is an old slide that I just updated. I need to do more explanation and working code on the referential vcons. I, you know, I did, I made redaction a little smaller because we did a little work on that that And, you know, I need to, you know, we've been creating signed and encrypted decons but not, you know, just as demonstrations and not really been using them. And so I just feel like we need some more, you know, experience with that to make sure that, you know, we're heading in the right direction here But next slide come give it a try, right? So there's, we've got a, you know, the open source from the hackathon is out there"
  },
  {
    "startTime": "00:52:01",
    "text": "and, uh, we've got, uh, you know, a Python, library for doing operations on V-CONs We've got a command line interface for doing stuff, you know, you know, you and do things to it And we've got a V-Con server or, you know, you can store VCons and operate, do, construct kind of workflow kinds of things you know, give it a try if you want to want to want to want to want to ECONs I think that's the last slide, isn't it? That's the last slide, yeah. Okay Thank you, Dan. So I think there's still more work to do there. So, um thank you jonathan hui want to come up So, um this can be really quick because there's nothing new I basically refresh the document just to have it I have the slides I presented like two IETFs ago if people really want to hear about Connex Center recording, I can do them again. Or you can just ask questions or you can end the meeting. I'm like totally open to it It might be good to review it now that we're... All right I'm going to go really... All right group. All right. Okay. So people, everything you didn't want to know about contact center right? Here you go. All right This is a simplified sort of view of what we're trying to solve for we've got agents we've got the sort of the ACD, is it sometimes called, or the thing that actually does the contact center It connects to networks and that connects to a consumer. Very easy. Next slide please. It turns out that largely for historical reasons, a separate industry grew up around processing of the, and, you know,"
  },
  {
    "startTime": "00:54:00",
    "text": "additional applications beyond the core connect the caller in chat So I'm calling those supporting applications and those supporting applications including recording so we're doing it for compliance purposes for archival purposes, and the main thing is this thing called quality management, which is if you ever call the contact center, and it said, thank you for calling This call may be monitored or recorded for quality and monitoring purposes. Have any of you ever heard that stupid thing? Raise your hand All right. Yeah, yeah. Everybody heard it. Right. So that means that they did this. Something recorded for quality management system, and that's someone who listens to these recordings, and they have a rubric that they score the agent, like, were they friendly, did they you know, upsell the latest product or what have you? that's obviously a lot of AI is getting applied there but it started now with just recordings. It also includes screen recordings, so also very common for an application on the desktop that basically takes everything that happens on the agent desktop and it uploads it. It actually combines it often with the audio recording for this quality management purposes So the person looking at the agent's job can see now only what they said, but what they did. Like, okay, you're supposed to enter the information into the case system you know, with the notes in the right format. Did the agent do that? So, so why? it's not really a fun job to be a contact center agent. You're basically spied on 24-7 and hope everyone knew that all right um next slides So a user goes to the supporting applications. So the main data flow, that's two data flows are relevant for the V-Con thing. And it's usually different vendors I have very frequently different vendors for these two things. So the supporting applications, the contact center industry variant is one of the market leaders and 5-9, we have some of that, and then there's, we're also on the left, that's our main thing on the left. There's other vendors there, too. So it's actually common for this to be a requirement for direct interoperability traditionally it's done by like shipping around"
  },
  {
    "startTime": "00:56:01",
    "text": "wave files and proprietary file formats for the metadata that were then, you know, people just built custom connect There wasn't, the ecosystem is maybe, you know, four vendors and people just go implement to whatever those four people are. So here we have an opportunity to standardize it Next slide So I am not going to go through this, but um there's a lot of information typically using the connect center the we have an opportunity to standardize it. Next slide. So I am not going to go through this, but there's a lot of information typically using the connect center. These are complicated calls, conferencing, transfer multiple participants as the norm So, you know, there's a lot of information there It matters about things like the details of the participants were they an agent or a customer, their contact information PII and PCI readaction is a must have, especially PCI redaction for these use cases. And then there's a bunch of unique things for the contact centers like disposition which is at the end of the call. The agent typically marks it like sale completed or customer follow up needed and those are used to drive reporting and other posts workflow processes in the contact center So disposition skill is like the queue like where you're in the sales or support queue so these are super common metadata, and they're often used for these downstream applications. So for example, a quality manager might only look at recordings from a particular queue and therefore it's important to have this metadata in the file format, which is why I wrote the draft to sort of get a good list. This list represents the information that we that we use in our connect center I think that was my last slide. Next slide Questions? All right Thank you. Thank you. Appreciate that review Anything else to discuss before? we invite Thomas up to go over the hackathon? Why don't we do that?"
  },
  {
    "startTime": "00:58:00",
    "text": "Thomas? I will Sorry, just one quick. So here is the hi, my name is Thomas, sorry, Dan I just want to thank Jonathan for the use case. I mean, it was great input to the beginning Yeah, Jonathan, thank you for that. Great addition Yeah. And I'm sorry you, I'm sorry for all the CDDL pain that you just went through Yeah, to my co-author, I'm sorry Can I interrupt for a sec? Do we want to do anything with that document, actually? I probably should have asked that question Sid Yeah, or is it just used? If I recall, I mean know if it isn't, like normally you don't bother with these documents because it's a workload on the IESG. Right So, okay, I just want to make sure. I have no personal Mary, Mary, do you have a different opinion? go ahead and Dan had mentioned removing that section, so I just want to make sure we're good there. Well, my thought would be take that document and expand it and show it as examples once the solution work is done, right? I personally find use cases really, really helpful. I had a wonderful document for stir that no one wanted to work on but I thought it would have been helpful. They're a little bit painful to do is the challenge, right? Yeah So yeah So yeah. Sorry, time right Yeah. So yeah. Sorry, time. We're happy to not publish documents. That's awesome but if this would fit maybe in a reduced form in"
  },
  {
    "startTime": "01:00:00",
    "text": "an appendix, you could stick it into the main document. You don't have to do it separate examples thing unless it's actual like a few years down the road, here's how VECON has been used. If they're ready to go together, just do what, do it please as one. Okay Which is sort of the opposite guidance you mentioned, Dan, but, but I think we should consider that for sure Thank you. Appreciate that. Great So this is really quick. This is the hackathon that my team worked on through this weekend we call it scrappy becones because it was the integration between the scrappy interface that's being proposed by the SCIT working group and the VCon work that we're doing And here is the Y and what? The Y is humans have the right to know how their data was processed especially when there are robots involved And that's the presupposition of the hack And this is actually what we did. So if you look at the left-hand side, here, we have an agent and the customer who are involved in a conversation, which events eventually comes up into a VCON And this is where the hack story starts That VCON, the lifecycle, the VCon, as it's created, processed, and deleted is also triggering rows in the SCIT transparent chain such that the regulators and auditor have a list of activity for that beacon they can use for their particular purpose As we were doing this, we were keeping the events also in the VCon, so we had them in two places and we went from creation, processed, and then finally, when the customer asks to have their VECON deleted, we also put that request and the deletion also on the chain"
  },
  {
    "startTime": "01:02:00",
    "text": "So from the beginning to end, you know what happened to your data Next? Dan, you have a question? Wrong way Dan, are you? Dan Okay, okay, good a question? You're going to wait. Dan, are you? Dan. Okay, all right, good. All right, next Okay, so what was our plan? We were gonna put V- put V-cons and skit together. Becon, you know what, you're here Skit, if you haven't been involved with that team, it is the software supply chain, integrity, transparency, and trust We've had a really great team working with that working group And they're working on a distributed ledger for software supply chains and scrappy is there a skit rest a SCIT-REST API, which allows a client like us to record the events onto the chain, and that's what we were testing here in the hackathon. So the question was is it peanut butter and jelly? Do beacons and skit go together? really well? Or are they like peanuts and chewing gum? And so that was the emotional thing of this. And so our idea was to implement that, that scrappy draft, which we did audit every beacon interaction and place it onto the ledger and then implement a self-serve right to know based upon the ledger And so that was what we decided to do next one please and there's a and so this is a visual for those visual people out there but it actually kind of looks like So on the left-hand side is our conservor It's our B-Con pipeline And you see here a series of steps that the beacon goes through from a creation by the is actually real. We posted using Brea, which is our test soft client We posted the VCon out of Bria into our API And so every event here ends up showing up here in the Transparency Service. And one of the things that we had to think a lot about was what actually goes into that signed statement. And"
  },
  {
    "startTime": "01:04:00",
    "text": "so, and that took the longest time actually because one of the things that we learned in the process was, there's a lot you can do with skit and that's a lot you can do with vcons so it's almost as if we could have chosen like 50 different ways of doing it and we probably could have. So after we figured out, all the different bells and whistles we had, we calm down. And we, decided to do one thing. So what we did here was we were on the transparency service we have a list of what happened. Who was? the person or the authenticated identity of who said it happened, and then the version of the VCon that happened. And so one of the things that we recognize early was that in a distributed network, you may not have an updated V-con, you may have a redacted V-Con, there's all kinds of time where you may not have the same data that someone else does So we put the version of the, of the, the hash of the beacon as a payload on that transparency service that we knew it happened to this version of the Bcon. The Bcon ID was held constant, but we were able to snap shot every version that we took by using that shaw The two things that we ended up not doing for the for this was the actual beacon. We could have put the actual beacon on the transcript. We could have put the delta on it. We decided not to do that. We'll talk about that in a second. We also try thought about putting attachment types for this, we decided that was overkill for what we needed It wasn't really required. Next Can I ask a quick question? Yeah, of course When you refer to a VCon and the same ID, is a VCon additive or those are each individual Vcons? Yeah. So, one of the things that we had to get our head around was what was the subject? So in the, you know, in Skis, you are making sign statements about a subject And that subject can really be anything. We use as our subject, the V-Con ID. And that V-Con ID"
  },
  {
    "startTime": "01:06:00",
    "text": "we held to be constant through this scenario because even though we were constructing it along the way, we found a lot more value in being able to keep the VCon ID constant and then account for the birth version. Makes sense. Yep flexible So at the end of the day, though, we did this You go back for a second, I'm sorry, one thing I've got to say So what we did was we inserted, so we call these links and they manage the V-cons. And we decided to make a skit link that would go after every link, that way we could point to places in the chain and go, this happened, and this happened So it gave us a lot of flexibility in what we said and when we said it Next. But we also realized that we could also do it this way, which is to audit all links generically which was to put a skit wrapper over every link and then monitor what it said. We didn't monitor what it interacted with interactions with the network what we could have, we didn't, but we actually contained the link. Therefore, we could make some strong statements about what we gave it and that really helps a bit too because sometimes your provider, like, if this link was off off-boarding into a l-lm this allowed us to really understand what we told it to do without regards to what it did and vice versa we encapsulate it so you know exactly what it did in response to us asking so we did that way It also ended up being easier, but very, very chatty. You would give a lot of events doing this, but it was easy and, of course, authoritative So what did we learn? First of all, distributed ledgers are forever you know depending upon where you put the ledger maybe you shouldn't put your becon on it because once it's there, you can't get it off And so there are times and places where V-C- and partial V-cons should not be put on a ledger because it"
  },
  {
    "startTime": "01:08:00",
    "text": "eliminates your ability to forget So if you have a forget me, sir, partial VECONs should not be put on a ledger because it eliminates your ability to forget. So if you have a forget me service and you decide to use VECONs as the forget me thing, well, there's only so far you can forget because it's immutable on the ledger. So that's not always the best idea. Now, as I said before, at the at the microphone I can think of a million different use cases for V-cons so sometimes you do or you always find a way a reason to do it, but in general, putting personal data on something immutable is probably not good Secondly, the hash makes a great version identify It actually becomes a lot like if you program Git has this nice ability to be able to version the way the software moves and gets added Every new addition is a new Git hash. That actually helped us to be much more able to handle the V-cons in a distributed network because the question, was answered, if I had this VCon and I know something happened to it is the same version I have If I hash it, I could tell you that it was So the ability to understand that, we didn't flesh out this idea except to say, the the redaction, the whole redaction idea actually does work out fairly well if you do the backwards looking ID on SCIT because you can redact, put that on the auto chain saying, I've redacted it and here's my ID. Then it may it a new subject on the skit ledger So that actually worked out pretty well, too Okay, next Finally, we were able to get the right to know, right to erasure thing done. This is one of my favorite parts of the VCon that enables the customer, no, people, consumer, to be able to get their data, to see their data to download it, to ask for its correction or deletion So this is what we had from the last hackathon to be able to get their data to see their data to download it to ask for its correction or deletion so this is what we had from the last week last hackathon in Australia and next please Now we have this"
  },
  {
    "startTime": "01:10:00",
    "text": "is a new addition to it where if that VCon ID is on a skit ledger, we'll also tell you exactly what its activity was as recorded in the ledger. And so this is this subject big ID would have been an object ID for the VCon we will also tell you exactly what its activity was as recorded in the ledger. And so this is, this subject big ID would have been an object ID for the beacon, which we didn't do. But that's, that was working out really well. Next I think this is it. So what did we learn? Yeah, it's actually really great It was very easy to use all the, all the ways and ways they were thinking about software objects and signing them worked out very well for us, very native And as I said before, our first problem was there were so many different ways we could do it. It took us a while to figure out we should just, okay, pick away I talked about FECON redaction holding up against the new object IDs And we did find ourselves kind of in this thing where, you know, we see holding up against the new object IDs. And we did find ourselves kind of in this thing where, you know, we signed the VCon so we know what version we're talking about and then we hash it and we sign it. We were just hashing it to keep the, to keep the version straight. And I'm not sure if that's going to be something that we should add to the spec I don't think it should be, but we did have to do that. And it was useful. Next and that's it we had we had five new timer first timers on the hack Three people I work with Josh who is here in the audience. Thank you, Josh and Benji, who just graduated college at Champa College with his BS in cybersecurity And then the rest of us are retreads, so we've been around for a while. All the work that we did is up there in those various, you know, repositories all open and open for you to get And if you're interested more in scrappy, you should be I think one of the biggest problems that we're going to face for people who use VECONs is, are you handling my data? safely? And I think Skit gives us the ability to say, yes, we've handled it safely, and we can prove it So that's it Great. It's Mr. Lasker"
  },
  {
    "startTime": "01:12:03",
    "text": "Hi, steve lasker. Just a point of clarity because we've taken that feedback and we incorporated the feedback around a ledger that's supposed to live for forever. What do you do around important data? that you probably want recorded, recorded air quoting? on a ledger without but being able to redact it? So what actually goes on, the ledger is hashes, not the actual data. So in the implementations, basically the payload of the signed statement or all an ancillary services and the ledger includes the verifiable data structures without the actual data. So point taken and we need to make that more clear in the docs but that's exactly the kind of thing we want to make sure we can support thank you Stephen and thanks to your team we had a good time working together a lot of fun Okay, any other comments? Thank you, Thomas Of war I think that concludes, unless anyone has anything else, any other business? Okay, thanks for your participation participation Yeah, thank you Yeah you Thank you very much. Especially. Yeah you. Thank you. The decision on one of them"
  }
]
