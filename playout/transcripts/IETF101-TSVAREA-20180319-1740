[
  {
    "startTime": "00:00:04",
    "text": "Terry I was in here thank you so much thank you that may be okay yeah many ways many ways to fail right so you\u0027re running this right sure yeah yeah it\u0027ll seem like more you laughs what do we got so everybody\u0027s all uploaded and everything right sorry I\u0027m obviously incompetent I\u0027m gonna do recall me remember this Joe we can start this is enough so if you\u0027re in TSP area you\u0027re in the right place and that means we\u0027re in the right place too and if you\u0027re not in TSP area you probably should be looking for you are "
  },
  {
    "startTime": "00:03:05",
    "text": "we\u0027re getting a start just a couple minutes late but that\u0027s not bad for slow start so we have the blue sheets coming around we have the blue sheets coming around and we have an area director doing a last-minute grab of a scribe this will take just a moment well while we\u0027re doing that you can review the note well which is much like what else you will see this week as the second slide in pretty much every presentation so we are Monday afternoon session 3 with this agenda is there anything that we did anybody needs to do to the agenda that we need to fetch it hearing no other unis hurry no suggestion so we will we will love blow forward so yeah I found a minute taken to mean time so thank you Magnus excellent we always we always try to say thank you to the TSP area review team and I want to do a special thanks this time to the people on the triage team Wes Magnus and Martin this is this is gonna this is looking good now and this is looking better I think this is going to be looking better in the next IETF cycle but we\u0027re way more hooked into the data tracker now that we have been and the request tools and stuff like that so what to thank the people who did whose names are in bold who did reviews for us and these reviews really helped I mean we we both both Mary and I have balloted fairly serious ballots basically you know this started out with the transport area review team reviews so thank you for that talk a little bit about the updates I\u0027m gonna just blow through mine real fast the delay-tolerant networking the best draft for the bundle protocol is past working group last call the TCP Convergys layers and working list group call and BP sack is still in progress i ppm the fun thing I wanted to do for "
  },
  {
    "startTime": "00:06:07",
    "text": "that was we are finally updating our CE 23:34 ipv6 because we hear that\u0027s going to catch on that\u0027s in an ad evaluation right now and there I wanted to also notice that there were nine working group drafts or revised for this ITF meeting so pretty in pump two about that nfsv4 is not meeting at IETF 101 because they\u0027re at a hackathon that is an excused absence quick continues to focus on the quick core protocol specifications for a quick version one in November taps since the last ITF recharter to announce analysis of transport security protocols as well those were explicitly out of scope when we chartered caps they\u0027re explicitly in scope now and they\u0027re gonna they\u0027re going to be spending some time on that some enjoyment of time on that this this meeting if I remember it correctly tram is finishing up their final deliverables stun bisque is on the next hello Chad and turn business in working group last call and tspwd is indescribable because they have 11 working group drafts that were updated for this ITF meeting Maria would you like to share your thoughts so I just I just want to highlight those groups that are trying to wrap up some of the work so also is really trying to finish their current milestones and tcp inc is basically mostly done the one of the document is already approved the other one is in i hg evaluation and the third one we will process hopefully quickly so I hope I can press some clothes working Go button suit excellent especially when the documents are met I\u0027m sorry did I say that out loud all right we should have introduced ourselves so you are yeah I mean I\u0027m Spencer Dawkins I am the outgoing area transport transfer area director and that\u0027s next March but I want to get used to you guys hearing it so I want to get used it we got lots of stuff done and the thing I want to call a special especially attention to this time is the number of things that slid all the way throughout being are published RFC\u0027s I\u0027m I\u0027m getting really impressed at the stuff that is coming out of the working groups on my side of transport I hope you\u0027re having the same experience but but I mean like we haven\u0027t had one that was mostly RFC\u0027s published since I you know since I joined the ISG so I say thank you for continuing to do a lot of work and continuing to do work that is easier to get through the publication process and into a form that people that more people will see it and more people will use it no thank you we wanted we were doing a we were doing a short advertisement for this draft "
  },
  {
    "startTime": "00:09:10",
    "text": "from Fernanda and this is about ipv6 address usage recommendations it\u0027s being chatted about and taps taps is actually working on things like connection racing they\u0027ve been thinking about things like choosing between paths and choosing between transport protocols but there\u0027s also choosing between IP address families topic that\u0027s relevant and the answer you get is probably going to depend on how you do the right how you do the racing we\u0027re not going to talk about that in here please keep an eye on it if you\u0027re interested because the impact is way wider than taps thanks we would like to call Tommy Pauly to the stand and to talk about experience with tcp encapsulation for Ike yeah and after the presentation we will have a little bit room for open discussions because we see more and more protocols that request TCP encapsulation and we would like to get some community feedback on those approaches all right hello everyone I\u0027m Tommy Pauly from Apple and the area directors asked me to just talk about some tcp encapsulation experience that we\u0027ve had this is mainly just one use case that we\u0027ve had or using TCP as a encapsulation tunneling strategy that we have done in the IETF and we\u0027ve also done measurements around there definitely others but hopefully this can give a starting to the conversation and some light into that all right so next slide please so all right so why why are we looking at TCP encapsulation at all so we were looking at this for Ike and IPSec over UDP traffic particularly in the cases in which Nats and firewalls are badly treating our UDP traffic this is not everywhere but when it happens it\u0027s pretty bad so even in the good cases in which UDP can get through the networks ESP traditionally when it\u0027s going over a NAT recommends having a 20-second keepalive timeout so that you send a if there\u0027s no other traffic you send a UDP packet every 20 seconds just to keep the NAT happy that\u0027s pretty terrible for radios and power but then beyond that as of when we started this work back in 2015 we were seeing somewhere between three and eight percent just total failures for getting any responses over UDP these this is generally to be port 540 500 and that generally is not too terrible of an issue traditionally we think of I can IPSec being used for VPN access so sometimes that just doesn\u0027t work when you\u0027re at your hotel sucks other strategies include a lot of proprietary TCP or TLS based VPN solutions which are presumably "
  },
  {
    "startTime": "00:12:10",
    "text": "doing something like T speaking capsulation but they\u0027re not quite public about how it\u0027s being done but this became more of a problem because we were using ike for doing things like Wi-Fi calling so this is telling back to your carrier and so if you\u0027re roaming internationally and you\u0027re at your hotel and you want to make a phone call and that just would fail all the time because of you being blocked that was a more critical problem than just the enterprise use case so it had more visibility for us and so there\u0027s mainly being blocked on captive net works Hotel networks cafe networks enterprise networks I think we saw higher failure rates in like Asia other it was less of a problem in some of the US markets and more of a problem internationally and of course TCP gets through the networks with a much higher success rate and to some degree it\u0027s even better when you just look like HTTP traffic so next slide all right perfect so what this turned into as work was something that has been published in RFC this is RFC eight two to nine which is T speaking capsulation for ICANN IPSec so what it defines is how to take a series of traditional UDP iq2 packets and traditionally UDP encapsulated ESP packets that normally go over port 4,500 and stick them over some stream um so the RFC defines sending those messages over port 4540 CP um you can configure other ports if you need to get through evil middleboxes but as ITF we don\u0027t like sanctioning that usage we decided to begin the stream with a stream prefix such that whoever opens the connection sends essentially a little bit of magic bytes saying that I\u0027m doing this TCP encapsulation thing the main point there was that we are concerned that there are existing deployments of proprietary non-standard iq2 over tcp implementations that have been broadened by other companies and we wanted to really differentiate this standards-based version from those the actual strategy of encapsulation is very very simple you just have a 16-bit length field at the beginning of every otherwise Datagram and you send that and then you send what you would send us your Datagram and then you send them a length field etc etc so it\u0027s really really minimal essentially just takes your traditional IP packets and put UDP packets and sends them over the tcp stream instead this is kind of multiplexing multiple protocols here because we are running I can DSP but luckily this particular issue was already taken care of by UDP encapsulation for ESP so that strategy is putting if the first four bytes of the message are all zero then it\u0027s ike "
  },
  {
    "startTime": "00:15:11",
    "text": "otherwise it\u0027s going to be ESP packet so it\u0027s a multiplexing basic tcp encapsulation stream so it works that\u0027s how it functions but then how does actually perform and when do we want to do this or not next slide so there definitely are concerns with this approach we recommend quite strongly in the document that it is only something that you should be using as I can fall back when you don\u0027t have access to network over UDP or there are particular problems with that so there are a number of issues that we were concerned about and we tried to measure and look into so the first is around what happens when you have TCP within TCP and when you\u0027re dealing with packet loss generally what this happen will have what happens here is a loss on the outer TCP connection turns into what just looks like a delay to the interior TCP connections because it\u0027s going to be a reliable stream on the outside and will eventually deliver the lost packet from the perspective of the interconnections so this can induce a fair amount of burstiness so that you won\u0027t see a lot of loss but you\u0027ll see a whole bunch of retransmits or other things on the interior connection coming at once we also ran into concerns with window size issues because if you have the two if you have inter connections and outer connections especially when you\u0027re running ESP within this and so you\u0027re running two levels of TCP they\u0027ll both have to do a slow start and if there are problems that occur on the connection it\u0027s much more likely that the interior connection will kind of fall back into a slow start and overreact when there are any issues on the connection and of course whenever you\u0027re running something over TCP that\u0027s not traditionally over TCP you\u0027re adding a lot of head of line blocking and reordering that you wouldn\u0027t have over UDP so if you are doing multiple streams here on that does cause issues and later on Stewart if you would like to comment anything I\u0027m sewer is also involved in a lot of the measurements and discussions around this one we were first looking at it back next slide so when we were first doing this we did run a number of performance tests to try to understand how is this TCP encapsulation thing going to affect our traffic so the setup was that we had essentially just a standard vanilla IQ - VPN server and in front of it was put the relay box that would do the translation from the TCP encapsulation into the standard UDP packets that were going to be expected by that VPN server the client side was modified to take the packets that was already going to send frankly to in ESP and just encapsulate them like we\u0027ve mentioned before into that TCP stream and then for the actual performance tests we ran multiple "
  },
  {
    "startTime": "00:18:11",
    "text": "instances of I prefer doing TCP through that tunnel to see how it would be affected by various changes and so when we\u0027re doing those tests we had several variables that we were looking at first what is the strategy for encapsulation so we ran as a control just iperf without any tunneling at all we ran it with just ESP directly over IP so a completely uninhabited version of that but still using encryption on a tunnel we ran that with ESP over UD piece of the standard encapsulation and then also ESP over TCP so using TCP encapsulation and in the two ways that we tried to impair the link were to induce a fixed random loss between zero and three percent I\u0027m using a Sarah router this is fixed and random so it\u0027s not necessarily truly realistic but it\u0027s a number and value that we can look at to get a good picture of what are the basic reactions of a tcp encapsulated connection here and then also we modified the delay anywhere between zero and 500 milliseconds added in this error router so next time so here\u0027s the basic results that we saw when we were playing with loss so the top blue line that looks pretty good is just the iperf over just a direct connection no ESP going on at all so we see here that we\u0027re on around 100 megabit link and then as we increase loss up to 3% that does degrade fairly strongly the green and yellow lines which are the ESP directly and ESP over UDP track pretty closely to each other they do degrade pretty quickly when you have loss and this is just having the normal encrypted non TCP encapsulated link get impaired by loss he was interesting what we saw when we did run it over TCP actually at the lower levels of loss we saw a better performance overall for the throughput and we believe that\u0027s mainly because the loss was being hidden and turned into a somewhat minor delay and so the interior connections wouldn\u0027t actually see the same negative effects until it got much worse but once we reach around 3% then the throughput for that T screencaps of the link does tank and become quite bad so while it\u0027s good it\u0027s pretty good and while when it\u0027s bad it\u0027s quite bad but when your alternative is essentially no connectivity whatsoever and you also take into account that even the onion capsulated versions at 3% loss are relatively poor compared to the normal case we believe this was a reasonable "
  },
  {
    "startTime": "00:21:11",
    "text": "trade-off to take and now on the delay side we saw slightly less impact again the uninhabited unencrypted version does quite well and then the TSP capsulated version tracks pretty closely with what we see for the UDP and IP encapsulated versions of the same test so on that and it was relatively performant yeah last one so the conclusions we drew from this were that the TCP encapsulation does work and is certainly preferable to no connectivity at all when we have UDP ace protocols we did make sure to do this in ITF because we wanted to have an actual standard solution for doing a TCP or TLS based VPN which was not possible before the performance is tolerable it degrades roughly at the same points as the other approaches but it does have some pathological cases and I\u0027m sure that if you did a more thorough investigation of this there would definitely be certain scenarios that behave quite badly with TCP within TCP some of the areas that we think could be very interesting to look at if we do see this become more common that we have TCP encapsulation as a strategy is tuning that outer TCP connection maybe make it a little bit more intelligent about what traffic is going through it especially when we have multiple TCP s within each other may be interesting to see what are the right ways to pass ecn markings through should you even create your own ECM markings when you know you\u0027re experiencing loss on the outside should there be any coordination of the window sizes of the various connections with each other some of those approaches we believe could mitigate some of the pathological cases but we haven\u0027t fully explored those so that\u0027s it any questions please come to the mic please remember to state your name as you\u0027re talking for the describes thank you hi vladimir o\u0027donnell UPB so I\u0027ve had a bit of success running TCP inside of TCP if I marked the TCP packets with congestion experienced whenever the the outer connection experienced losses okay yes that was one of the approaches we were thinking of so and that works great I mean it doesn\u0027t work perfectly but nothing ok Tom Herbert so when I first saw this presentation I was slightly alarmed because I thought this is gonna be stt are you familiar with that no yeah so ftt the idea was to use TCP as a header form oh not you know they were encapsulating with that no so recognize one slide one just to make sure this is encapsulation within an actual TCP "
  },
  {
    "startTime": "00:24:13",
    "text": "stream does it have a question on the performance when you consider in the UDP case if Packers are out of order you can actually deliver out of order packets whereas in TCP you have to wait for all of that did that have an impact on performance so in these particular tests not so much because they weren\u0027t really targeting that I think but I think you definitely would see that especially if you had more connections running in parallel that you don\u0027t that when we\u0027re running i prefeer they already required a fair amount of in order miss between them because there was a lot of packets there but if you have a lot of bursty small connections I really have no relationship to each other then I imagined it would be a lot worse whenever there was a loss or delay emerges whose multipath TCP my name is Joe Cheshire from Apple I think the thing that told me was hinting at earlier relates to this a couple of years ago we did some work with John Iyengar recently at Google and he had when it was a research professor had a protocol called minyan there was an extension to TCP allowed delivery out of order and we were very excited that this would give big benefits and it didn\u0027t and it was kind of a surprise and it turned out the TCP in order delivery model is actually not bad because most applications need data in order as a HTML page or a style sheet or a video stream doesn\u0027t work if you\u0027re missing the iframe then all the P frames and B frames that depend on it can\u0027t be decoded and when the packet loss rate is only one or two percent most of the data is in order so the number of opportunities you have to deliver data out of order is small and the number of situations where that\u0027s helpful is even smaller so that was educational because we\u0027ve gone into this confident that media would show these huge benefits and we were kind of surprised that not as much well that makes me think like if we had some use case not like the current use cases that you mentioned that was naturally much more lost tolerant that expected like as we see these particular modes we were putting over here already degraded heavily whenever you hit three percent loss if you had another type of load which was perfectly happy to receive a bunch of loss on you to be connection then it would see a much worse decoration by adding it yeah I think a lot of the thinking in this space goes back a long way before TCP had fast retransmit and if you lost a packet you\u0027re waiting for a timeout that was a huge performance penalty with fast retransmit it\u0027s one round-trip later the missing data is filled in so you\u0027re left with the sweet spot for this out of order delivery is stuff where one "
  },
  {
    "startTime": "00:27:13",
    "text": "round trip is too long to wait and that applies for videoconferencing person-to-person it doesn\u0027t even really apply for YouTube or Netflix for that fixed video streaming because a half-second playback buffer is ample to cover one round-trip and the fast retransmit here is critical to making this work well last I heard so I wonder if the stats are shown in the beginning about UDP not working over a bunch of paths have you seen any change in the last three years has it gotten better I don\u0027t have the updated numbers on that I was looking for that as I was putting the slides together um no I mean it seems to be relatively similar to what I\u0027ve seen for the quick UDP intolerance numbers that were given initially asking because sort of three years is basically the time creek has been around yeah so one prediction could be that if quick gets deployed more it\u0027s gonna push UDP into networks where it currently doesn\u0027t work well simply because people will want to fix that alright so there\u0027s there\u0027s one potential future where the need for this kind of accent encapsulation might go away because CBP is going to work better however we don\u0027t know right and it\u0027s still a concern that even if UDP packets do make it through and maybe only certain ports for quick would make it through that the net timeouts for UDP ports that are not well recognized are not going to be treated well in lieu of some other connection type header so the cases which I need to be able to receive a phone call and I\u0027m just sentry camping on a NAT for a really really long time sometimes does work better when we have a TCP connection to leave that NAT mapping of them but it doesn\u0027t do anything for knots I Ritchie from Telecom Polytech ah I was looking at the first bullet here and I\u0027m thinking if a protocol is being designed to use UDP there is a reason so maybe doesn\u0027t want all the heavy machinery that comes with TCP now you put that protocol on TCP is there is any negative impact on the from the TCP machinery on the protocol have you thought about that yes I mean I think all of the things that were looking at here are the negative side effects that were having from using TCP instead of UDP this particular case I imagine is one of the worst because the previous use of UDP was to tunnel many many many TCP connections in all of their IP packets case in which you really don\u0027t want any relationship between the delivery of those packets and so I imagine other direct UDP applications that aren\u0027t necessarily about tunneling would experience similar effects but hopefully less than this let me be introduced ok what if there is I mean a way to turn off the congestion control or some part of the machinery of DCP "
  },
  {
    "startTime": "00:30:14",
    "text": "when the purpose is just to go through right and that source of getting to some of these other approaches of oh just use TCP as the header to her and I that gets into a pretty messy space I think so thank you very much thank you very much yeah I think this was really good to understand the main use case we see and some of the problems so we would like to actually get some feedback for the whole community can you go on the next slide - should be another one yeah one more I should say this was just a few oh this is not really how it\u0027s supposed to be so I\u0027m just speaking just out of my head I put up some fewer seats that were recently published and drafts that are kind of under submission or a work really work in progress already work in progress that kind of cope was the same use case and the same problems so we see this more and more often it\u0027s not like one one use case where we will receive mail box problems and where people think that disappear in collab encapsulation might be the solution to their problem and therefore basically what we would like to ask the community is two questions first of all what do we think about this is this an acceptable approach do we know any better and no matter what we think about it can we do we have to provide more guidance to the rest of the community outside of the transport area how to do TCP and collect encapsulation correctly any thoughts hi Tommy so just one part based on that the RFC that we did for Ike was in the security area so it\u0027s not a group of people who are used to transport necessarily it was very useful to get the transfer orders review on it but when we were doing it it would have been really useful if we had a document to refer to that essentially gave here the guidelines on how to do this and when it\u0027s a good idea to do it or not and the pitfalls that you\u0027ll hit and we essentially wrote up at large you know performance considerations section in there and it would have been great to have just another RFC to point to you like look at this this explains all the problems I mean Nike to other areas it\u0027s also not clear that like TCP streaming protocol and UDP the data one protocol and if you put data on the streaming protocol then you probably need to figure out where your message starts name so these are like very general stuff we think they are not very complicated but writing them down as reference might make sense all right burned Ram I got up because nobody was getting up no and yes one no - yes um question for Tommy um you\u0027ve done a lot of the work in order to like "
  },
  {
    "startTime": "00:33:16",
    "text": "make this document makes sense you already did a lot of the work for writing the guidelines document can like can we use that text as a starting place yes I think we should do that and I think I mean I think it should be you know there should be it should probably capture than no answer in one but it\u0027s like yeah don\u0027t do this but we know you\u0027re gonna do it anyway so here\u0027s how not to blow your feet off right if you know if people have this problem and the ant says don\u0027t use TCP can capsulation and what\u0027s the what\u0027s the alternative right they\u0027re gonna do something even worse free like anything well for example we just heard you can put TCP headers on things that aren\u0027t TCP so that would be another way to do it so um yeah it\u0027s I mean we\u0027re here so and actually I even this was a Pecha Kucha slide of mine right what happens when you run TCP and TCP and that was I realized when you were giving this talk that was in the pre fast recovery era right that was and that was in the 90s when like yes anything what RTO if you look at it funny al RTO and that\u0027s gone away now and okay so I mean which means if it works if these sort of approaches work as well as they do up to three percent loss then you know I don\u0027t how many how many VPNs are running over PPP over SSH and I\u0027ll probably a lot um and yeah I think that I think that a guidelines document here would be useful and I think you should offer it because you already wrote half the text so cool thanks Kyle arrows so I was just thinking about the question that was asked earlier about you know what if the title protocol doesn\u0027t like what TCP is doing somehow that got me thinking about what could be one allocation of that and maybe the protocol running over UDP actually cares about packet loss that tells us something about the network or maybe it\u0027s trying to figure out information for the network to maybe fall back on something else if there is packet loss would it be possible to push you know give access to that information those metrics from the TCP layer up to the upper layer protocol so this kind of reminds me of the guidelines for ecn in tunneling protocols I think a lot of synergy there so if I\u0027m running something that is expecting like as an application I\u0027m expecting UDP but I happen to be tunnel over TCP I could either see the idea of OTP gets a loss it actually fixes it but then it tells the application oh you lost the Packer it just never delivers it so you could do that or you could deliver the UDP Datagram but make sure that the UDP API gives sufficient signaling of ecn bits and essentially you add on a an explicit congestion experienced bit onto there to make it look like hey it\u0027s as if a router saw a loss so you should react as if there is that so that\u0027s a good reason "
  },
  {
    "startTime": "00:36:17",
    "text": "to have ucn api is for UDP which would also be useful for quick largos quickly gonna reply to this with this API exists already if you look at TCP info for example right you need a poll it kind of but but it does tell you when your TCP connection retransmits and and you can you don\u0027t see the loss but but if you see that counter go up you can sort of infer that something has happened at a lower layer um it\u0027s an ugly API and it\u0027s not not at all related to any you know socket API or that but it is there on many platforms right and that also gets into how do we expose TSP capsulation because one approach to doing is kind of make it hidden for the application just take their packets and stuff them in a TCP pipe if they are aware that they\u0027re going over TCP then they could check this pet J holin the milk box seems to be the problem here it\u0027s dropping VP right so without insight into the reasons that they\u0027re dropping UDP or do we have this insight is that documented anywhere like I\u0027m not really clear whether encapsulating in TCP is just going to also get blocked after dpi and then it\u0027ll have to be inside TLS and yeah I mean yes but you can put it inside TLS and put it over a report for four three so is that going to be the next step of the recommendation if we make the TCP I don\u0027t think we want to recommend that so the that was an interesting line we flirted with for the IKE stuff and essentially we just defined here\u0027s how you put it over a stream and left it at that I mean is there a channel to provide suggestions for standards for middle boxes maybe that sounds good sorry but just because we read something in an RFC it might not happen you know and I\u0027m not sure if if it makes even if the situation gets better it might not make this case going completely away because in some cases your business cannot risk to just have not connectivity so you really want to have a solution i bhisma understand you KP is mostly used for real-time service even yes peace you take for example in the enterprise there was a key in the prior in the enterprise what he used also used the USP a yes V but my concern for your performances you\u0027re only talking about the delay or not a loss rate and the performance of the circuit but there is no loss rate and the delay because for the was a peon other will you attend service a delay and is very critical or summer time service former insignia and you know some these "
  },
  {
    "startTime": "00:39:17",
    "text": "performance tests and some or some other words for the world IP sign so I kind of reassess what n7 maybe have some problems in there and the price yes I definitely think that if you are running a YouTube protocol that\u0027s being used for real time services calling and stuff then the effects of the delay the the bursty delay that you get from fixing up the loss on the other TCP connection would be fairly visible in certain cases and also we have I used some TCP to different the defense service but for the TCP even though she used PSAP because this secret lambo dependence so even use this reason mmm no use for the TCP connections so I mean my main concerns how to support some your tongue there\u0027s some different service if it is being solution is used right and there is definitely an open question of what do you do with per packet markings like ecn or essentially the traffic class markings on packets when you\u0027re putting them inside a stream and they\u0027re different you could say drop them you could say apply them if they\u0027re uniform within that segment that you read that you\u0027re transmitting but that would need to be discussed so Spencer Dawkins the responsible area director for a few a working groups that are relevant to about what I\u0027m about to say first is it seems like you know as we\u0027re headed this direction also the taps working group when we charred it was was pretty yo Pete Resnick leaned over to me during the buff and said this is right on the hairy edge between research and engineering but I like it and you know now we\u0027re saying you know now we\u0027re saying oh well you know but we need to be looking at this purity trace for security protocols as we were picking a we\u0027re picking a path you know and we\u0027re saying oh we need to be looking at address families as we\u0027re picking a path and I\u0027m waiting for somebody to send me a charter request for a recharger request for technical taps it says we need to be looking at things like loss rates and stuff like that so we\u0027ll know whether to start doing things like that so this the second thing I was gonna say I\u0027m taking off my 80 hat the second thing I was going to say was if I knew anything when I got to the ITF it was that you know running running tcp over x.25 was the wrong thing to do and that was that was a long time ago and it\u0027s I think it\u0027s really a good good thing for us to say you know well with Destry transmitted you can get away with a lot of stuff "
  },
  {
    "startTime": "00:42:17",
    "text": "that you couldn\u0027t get away with when you really had to reliability mechanisms that were beating on each other a lot more a lot more violently than what you were seeing was beating on it to each other and the third thing I want to say is I\u0027m waiting for the day that you know says quick runs over UDP and it has really state-of-the-art at loss recovery I\u0027m waiting to see if anybody tries to run that over TCP as a fallback and now I\u0027ll go sit back on the stage you\u0027re welcome hi Stuart Church again I just came up to answer the question that Jake asked about why we have short timeouts for UDP and I think it\u0027s a good question because we often forget the reason for that in the ITF we generally don\u0027t like middleboxes but there are places where they provide a useful service the battery on my phone would run down if random strangers could bombarded with packets so I\u0027m actually glad that my phone carrier has some kind of stateful firewall maybe not an ass baby doesn\u0027t need to translate these expresses but I do want it to I do want it to block wanted traffic and I think that will continue to be true for battery-powered devices and many other cases so TCP has a thin bit the middle box knows when the connection is over and because of that it can keep the state trusting the client to give it a fin bit and say I\u0027m done now as long as UDP has no fin bits the middle box will just accumulate piles of stale State to never know when they were done so UDP I think inevitably has to have short timeouts and I I worked on PCP port control protocol which was an attempt to provide signalling there but I don\u0027t think there are enough incentives for carriers to deploy that so we\u0027re back stuck with there being no way to know when a UDP flow is over one option which would be interesting to consider is if quick being over UDP provides the correct signaling and middleboxes do adopt that connection because this connection went away type of signaling for quick how hard would it be to essentially take the approach that\u0027s bad for TCP of Oh send it in something that looks like TCP but don\u0027t really do TCP to do that with a quick wire format to say let\u0027s send what looks like a quick packet but not actually be running reliability within it and just use that as your encapsulation method I have not been following quick closely is there a move to put a visible fin bit equivalent in quick that middleboxes could see I would defer to the people in "
  },
  {
    "startTime": "00:45:18",
    "text": "the room who would know the answer to that question as of about two hours ago okay sounds like no pressure I Brian Trammell it\u0027s been discussed there was an if you filed um there was not really interest in it because the working group didn\u0027t see it as problem that you know this is basically like that the the so I think we don\u0027t care as long as i think what\u0027s in the zero-one of either the applicability your manager or should be in there is hey you\u0027re gonna be dealing with short timeouts so if you don\u0027t have anything to send over 30 minutes that\u0027s why you have a pink rim right that\u0027s the 30 second I said 30 minutes yeah 30 seconds yes Oh ping ping Aubry ping every fast is the is the guidance now if that\u0027s not what it should be there\u0027s a working group and there\u0027s a github and you can probably a few again but I don\u0027t think there\u0027s a lot of appetite for that yeah and and thank you all thank you all for the clue on that Kylie Rose so this goes back to some it\u0027s related to the you know quick discussion and someone just pointed out that you know why don\u0027t we just use quick with that reliability and assume that that\u0027s gonna somehow keep the firewall state open earlier we discussed just using a TCP header with no no TCP stuff involved what if we use the state machine of TCP but not the congestion control and sorry the recovery mechanisms reliability would that be horribly breaking or what you\u0027re describing pretty much is Jana Iyengar\u0027s research work which was called minion he had a bunch of academic papers and we had an implementation of using something that looks like TCP so it gets through the network but actually we can do our own thing inside the payload and what we found is you end up having to mimic TCP so closely that you are in fact TCP one of the things about minion was it had a mechanism to skip retransmissions if the data was timely and it was stale it will just skip the sequence number ahead there were enough middle boxes that would recognize that as bogus and tear down their connection so we had to retransmit the data we didn\u0027t want anyway but as long as that was only less than 1% of the traffic it wasn\u0027t a significant overhead to send the data we didn\u0027t want and with fast retransmit it\u0027s only one round-trip latest ended back with TCP I love the Internet I just like to say that i J holin again I just want to mention that there was a set of drafts called Plus that tried to talk about this very problem as I recall it got a mixed "
  },
  {
    "startTime": "00:48:21",
    "text": "reception sort of and that\u0027s fair I was sitting at the front of the room that\u0027s fair yeah so I mean this is the maybe the question is is the recommendation that we should release mechanisms in light of the feedback that was given then to address this problem that is still present for you to be I would love to but I don\u0027t think that\u0027s the solution people look forward to right now because it\u0027s something that Nick has certain deployment effort and will not happen tomorrow not not talking about plus so one difference with quick in the space event so because of 0rg t if the client actually has a pretty low overhead of just establish a new connection and then finally state x out however you still have the problem what if you know you want a connection open without pinging constantly and that is not solved but at least these sort of overhead if you have a tcp / - yeah TLS over tcp with opening a new connection is gone or not nearly as bad right and to that point the reason that this came up for us with Ike was not about outbound connections because i has mobike we can re-establish in one RTT it\u0027s great the problem was that we were using these connections to receive incoming phone calls and we need to be camped and so if we ever want to use some variation maybe it\u0027s quick v2 or something like that to receive incoming connection incoming pings on a long live like push style connection then we\u0027ll need something to indicate to the network that I\u0027m still around don\u0027t kill me right and right now that\u0027s pink right right now that\u0027s right but that but yes that drains your battery yeah great right exactly but so you go ahead because I\u0027m probably gonna say what I\u0027ve got to get to translate so um the the problem with its pinyin is probably gonna stay ping and the reason is that even if we did put the bits on UDP traffic by the time middle box gets up to actually do something different will be pretty long given the update cycles and um how do you know before you send the traffic or even while you send a traffic that you have a path where you have such a middle box so you don\u0027t have to don\u0027t have to ping so frequently yeah you do there are mechanisms to do that no binding time but a couple times right you you you start with a somewhat something low and then you just wait slightly longer you keep increasing the time out between writings ten seconds until you lose it it only helps you out for a long time where you don\u0027t move that\u0027s true that\u0027s true but four mechanisms that do need a long live connection to receive incoming phone calls if I can do this discovery mechanism over the first hour I\u0027m in my hotel and then be able to only send a ping every hour from that point on it\u0027s "
  },
  {
    "startTime": "00:51:23",
    "text": "yeah the PLP tod path packetization lair path i\u0027m not discovery yeah if I could if I could just mention one thing here my close personal friend Aaron Falk is in the process now I think of trying to figure out if we\u0027re supposed to be doing another hot RC lightning talk around later in the week I don\u0027t you know I mean he\u0027s trying to figure that out I think he put out a doodle poll saying you know would you know do you need to you need to do this and would you come and stuff like that I haven\u0027t looked at the doodle poll but whatever he asked he\u0027s asked if that if that happens I would recommend that somebody get up and say that and see who follows them out of the room okay good point um I did actually the thing that I was gonna say what Laura said I do actually want to get up and say that again so what Laura said no with respect to a stop bit on on quick a reason not to do that is okay we\u0027re uncertain if it would get used and for the current application that quite cares about which is HTTP as HTTP is often used but not always used like there there are things that do stuff with WebSockets that are gonna fall over in interesting ways but for right now for vanilla HTTP 3 or whatever gonna call it over quick it doesn\u0027t really get you anything and during for the deployment lifetime at version 1 yeah the the deployment of middle box will be negligible but it\u0027s probably something that should be raised when we talk about putting other applications on top of it because there are applications where having a long-lived connection where any either side could decide at some point to send on you need to you need to know that that stage there and maybe that maybe the solution is feel PT whatever timeout discovery and maybe the solution is some sort of signal ni discovery plus some sort of signaling when the hope that the some sort of signaling will use the feature or alternatively the recommendation at least in the meantime is you have a TCP connection open to receive that right no you can you do quick yes to it right you could do that to print so you could migrate the crypto yeah ok yeah Christmas stuff ok cool Thanks if I could do just a ad interrupting here we bet is it seven more minutes is that right and and we try we always try to end TSP area would the opportunity for the community to get up and tell us the IDS what the ADEs need to know is it was anybody planning on saying anything get over in my time and if you are to like it just displace your hand so we\u0027ll know I guess we\u0027re actually wrapping up this discussion anyway so yeah I\u0027m happy that nobody freaked out and screamed at me when I saw it set TCP encapsulation "
  },
  {
    "startTime": "00:54:23",
    "text": "that\u0027s a good sign I think there\u0027s interest in getting providing guidelines and you committed yourself right now okay perfect sure perfect say it any more people who wants to help just contact Tommy and I think that would go to T\u0027s woodworking group actually we don\u0027t want to see arrogance I\u0027m also happy that people have a lot of ideas about what to do about n capsulation so we should keep talking and thank you very much for this discussion so now if you have any other thing you want to scream at us go to the mic I\u0027m taking this as a sign that everybody\u0027s absolutely happy with our work great let\u0027s go for dinner good steak you all travel safely out of here and travel safely into Montreal and hi to our listeners at home bye bye "
  }
]