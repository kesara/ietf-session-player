[
  {
    "startTime": "00:00:04",
    "text": "foreign are you in the jitsi uh Channel yes so you can direct people here if they uh I can via text but not audio of course but I only have so many bits of audio um but yes there's no there's no notes there great um so I also have them there's a meeting notes the note-taking tool is uh on the top part panel the fourth from the left button I just couldn't paste the um agenda into that and then we'll just very shortly try and see if we can get a a victim to help take notes but otherwise I can help with notes great um so speaking of which if there's people are starting to join now if anybody wants to do a quick audio check now's a good time well hello yeah great works fine um again anybody else just jump in if you want to do a quick audio check and if anybody's willing to help take some meeting notes that would be appreciated please just let us know I'll be I'll be doing some of that so you won't be alone don't all you know don't all fall over each other volunteering there's a meeting notes a note note-taking tool that's associated with the uh with mid Echo it's on the top pane the kind of fourth from the left um and we can do it collaboratively good morning test test hi Neil how are you hey"
  },
  {
    "startTime": "00:02:01",
    "text": "thank you Carson [Music] and sir agenda um we give people a couple more minutes to join and curious to get organized foreign if you're willing to help take notes please let me know we're using the note taking tool that's built into Miracle which is kind of easy to use okay since since dkg will be mostly doing the speaking I'll I'll try and take notes so let's uh start at five house that sounds right to me uh Stephen you still have control over the slides I do pardon me I'm gonna about to give it to you yeah it's all yours product values got it yep I see the controls"
  },
  {
    "startTime": "00:04:06",
    "text": "and so how long have we got it we're here we have an hour for this or do we allocate longer it's actually scheduled for two but I'm hoping that we don't need to take the full two right okay so yeah just for people's planning I think um if we can get done around about the top of the era that'll be good I think uh so just in case people don't know the convention here is like when an ITF meeting's in place so if you want to say something you can put up your hand and join the queue if just under your name at the top left the screen there's a join queue kind of hand symbol that you can click like I just did and then you appear at the top of the roster and we can call on you [Music] um you know if if if we have one or two people having a discussion on a particular point you know we don't necessarily need to use the queue but generally please do use the queue because it's kind of fair to everybody I guess bypass dkg so why don't we far ahead sounds good um so yeah so um as this is a ietf meeting the note well still applies just as a reminder here um you've probably read these things when you've been in previous iitf meetings I think I see hang on there was the people who are in attendance or just as a reminder this is an idea meeting um and uh please make sure that your video and audio are off unless you're chairing or presenting um uh or speaking obviously once you're in the queue and if you're speaking uh we recommend using a headset because uh otherwise we get feedback loops one more administrative reminder we have a code of conduct here about being courteous speaking clearly and slowly and using recent arguments we're"
  },
  {
    "startTime": "00:06:01",
    "text": "looking for the best Solutions here and put them together in a group and folks should be fine with that the Baseline agenda is here it was published earlier and sent to the mailing list there's been some discussion of several of these points on the mailing list there's been all of them have been raised individually in separate threads of an analyst and hopefully we can have those discussions on that thread those threads clearly which document I would hope that we can have a chance during this meeting to just clarify the specific details these are the major substantive changes that are standing that are proposed and outstanding for refresh do they want to add anything to the agenda or remove anything from the agenda and so just a note um we forgot to say yeah the meeting is being recorded um so uh that's that that's happening you should see a little recording um and I guess my note on this agenda is I I hope that if we manage to figure out all these topics that we then managed to get this document out of the working group very very soon that's my goal because the longer it kind of hangs around the more issues we find we'll just end up on an infinite kind of Never Getting finished kind of mode which is part so hopefully we try and decide these things today if possible and uh move the document along yes agreed uh however we also do need to make sure that those those conclusions are posted publicly to the list um and so if you reach any special Insight today or you just realize that you have a clear opinion one way or the other on these things and you choose to express it on the list that would be much appreciated because uh activity analyst is where the the funnel decisions are made and thank you to whoever's taking notes in the in the note Tool uh please feel free to"
  },
  {
    "startTime": "00:08:00",
    "text": "identify yourself so we can thank you properly um okay so I'm gonna carry on because I have not seen any uh there's also a chat function here if you are kind of speaking it doesn't work you can use the chat function um and we'll keep an eye on that too um so just to move on to the first item in the agenda we discussed this at the iatf 115 whether we should rename Keys uh signatures and one path signature packets from B5 to D6 um this avoids a conflict with some already deployed code from groupg that are doing things that are not currently in the specification um uh during the meeting at ietf 115 no one seemed to be really happy about this but no one seemed to actually object to it either um it seems like this might be the way forward to avoid some serious interop confusion while I was writing up a the notes for this um it occurred to me that there's this prefix octet that's used that's different for different version keys and there's a question of whether we change it as well from 9A to 9B um you'll find in the merger Quest that's there the good points to emergency press 231 um but I did change from 98 to 9B as the side says there's an additional question about whether we want to move PK esk and sksk to V6 so that everything in this draft all has the same version numbers except for the seipd which is V2 um and the merge request does not actually currently move pkas to V6 although we could update it to do that um so I would like to hear from folks who are I would like to hear from folks whether they think they still think this is a good idea there seemed to be a consensus in the room in 115. that this was a good idea now there's a merge request for it"
  },
  {
    "startTime": "00:10:01",
    "text": "I don't know whether anybody has had a chance to take a look at the merger quest to see whether it looks right to them um or whether anybody has any new objections to this change uh Jonathan you're in the queue uh just to face up that I am one of those people who has shipped code that supports the V5 format um as supported by DPG onac out of the support back in 2019 based off the test key that was sent to the open pgb mailing list so I have a vested interest that we don't get the income part of elevating that we do to B6 for something that is essentially a different format okay uh thank you Jonathan that's good feedback yeah so I don't see people joining the queue let's I think we do need to decide this so can we ask it the other way around does anybody object to using V6 if you object using V6 please do join the mic line there okay so it looks like nobody wants to object to using V6 um and I guess should we just check your last bullet separately PKG uh yeah let's let's ask that as a separate question here okay so then just for the pkes-k and skesk does anybody object to moving those to V6 so if we're going to move those to D6 we will need another merge request uh made for that um I'm assuming that I haven't"
  },
  {
    "startTime": "00:12:00",
    "text": "heard any complaints about uh the 98 and 9B prefix octet transition as well um folks uh lack of feedback isn't super convincing um because maybe you're all just asleep um it's early for me but it would be good to have some positive affirmation here to do something here chat uh Neil you're in the queue go ahead yep I'm I'm definitely from Bloomington V6 and the other two things positive confirmation great thank you um okay so it sounds to me like folks here have uh our our core making this change yeah but we've heard no objections so I'm gonna uh move forward I will put as a to-do item for myself to make a merge request for the pkskn sksk to V6 um on top of the existing 231. um just just normally we you know we'll we'll Post in the meeting minutes to the list and then people can still object on the list because that's where the decisions get made um but bearing objections are rising on the list I think that we have a plan yep and if somebody else wants to volunteer to do the PK esk skesk to V6 merge request on top of 231 I would welcome it but uh I'm not holding my breath don't hold your breath I think uh we want to get it done quickly and right now you probably would be the quickest I think okay um the next item on the list uh this was raised in issue 130 by the memory open hour then Marie observed that uh in the current specification which is shown in the table here when you are making a V5 signature which will now of course be called a V6 signature"
  },
  {
    "startTime": "00:14:00",
    "text": "um uh assuming that we go through with that change it is entirely possible for a signature made from a V5 key to be made over the exact same data that would have been made for a V3 signature um but the same the data would be interpreted differently so what we see in this table here is the suffix of the string of data that is hashed for a signature for different versions so in a V3 signature the these blocks here are broken up as by octets so the V3 signature the last four octets are a signature Giants Tab and the octet before that is a signature type and before that is all of the signed data so the document for the star a V4 format um appends a trailer to the sine data and then the 0x04 octet and then 0xff and then a four octet length of the trailer itself that was appended to the sine data so this cannot be aliased with a V3 signature unless the V3 signature was of type 0xff which is not defined for V5 which we've added in the current draft it uses an 8 octet trailer length instead of a four octet trailer knife and the trouble here is that most trailers are significantly less than 2 to the 32 bytes which means that the fifth octet from the end will be zero which means that the actual sine data will basically be a time stamp will look like a V3 signature the thing that's signed can be transformed into a V3 signature where the length of the trailer is transformed into a timestamp and the signature type is zero is possible with an insane signature to have the trailer length be slightly more than two to the 32 octets in which case the fifth octet from the end would be a one which would Alias to a V3 signature of type 1. signatures of type zero and"
  },
  {
    "startTime": "00:16:00",
    "text": "one of course are um binary and text mode signatures um so uh so this is an issue because it means that if you are signing things with what are currently called V5 Keys it will be V6 keys go forward with that your signatures can be transformed into a subtly different signature over a sorry a V3 signature over subtly different data that is the the signed data and the trailer will be merged together um and it will look like a V3 signature we don't know what the consequences of that would be but it seems like not a great property of crypto system if people are still validating through three signatures so the proposal currently is to revert the five signatures from using an ADOT type field to a four octet field I mean that's in merger Quest 220. um the result would be that the 0xff D aliases V5 and V4 from B3 that merge request explicitly has uh it says You must not Define a signature of time 0xff and you must not validate signature of type it's your xff to ensure that the da listing works um and uh yeah and there's some discussion on that on that on that merge request about whether this is safe to do or not um in the possibility that a trailer is greater than 232 octets I believe there's reasoning on there that demonstrates that there is no risk of editing if the trailer length wraps um but I have not heard anybody um or something like that so does this make sense if people don't understand it please ask questions if you feel like you do understand it and you have an opinion on whether this change should be made or not please weigh in"
  },
  {
    "startTime": "00:18:01",
    "text": "um I can also enter your end of the tube go ahead hi I'm just wondering I didn't I didn't see anything like this on the ticket but I'm just wondering the dense uh uh since as Jonathan said earlier the um V5 signatures are already implemented in the wild is there a danger of her being here let's see the other way so for example it can can we ensure that nothing created using the current draft back could possibly be Alias to a future format including V6 potentially this is the problem with implementing pre-specified things this was not found until relatively recently any signatures that are made by the implementations that use uh the unspecified V5 are indeed aliens equal to V3 which means you can change the signature type uh to a binary signature and just have a weird suffix running off the end of the data so you know this is a good reason not to use the V what what what people have implemented so far um but I don't think we can make that we can't fix that where we can fix for the things that are specified sure but um the question is that given that it is already given that that horse booted uh so that that that's kind of out of the bag already um can we do something with V6 and future keys to make sure that whatever has already been implemented as V5 is not aliasable to B6 or V7 or whatever like is there guidance for that so so what is implemented right now is not eligible to V6 if we do this change to Visa if this if we make this change so that B6 goes reverts to the four octet width field"
  },
  {
    "startTime": "00:20:01",
    "text": "then there is no way that a V5 signature is aliasable to V6 because the V5 signature um as it is currently specified would have a um either a zero or a one in the fifth octet from the end and what we are doing here is we would guarantee that the Fifth Lock test from the end is is a CRX FF it cannot be a zero or a one uh and there's no way for a V5 signature even over a very large signature you know the largest possible signature for it to change that fifth octet to anything but zero or one so as long as um I mean we again we can't if people want to implement arbitrary things that are unspecified we can't ensure a deity isn't there and B5 as they're it's currently implemented will indeed be be alienable to V6 to V3 uh but it will not you know the specification in merge request 220 explicitly says you you know this is you must always keep the fifth octet from the end to zero xff and uh sixth octet from the end to be the version number for everything above version three um and so that is the it includes explicit documentation to Future specifiers how to avoid the aliasing how to avoid the aliasing for future versions does that make sense perfect thanks so um I'm gonna try to run a poll on this because I'm not convinced that people necessarily understand it it took me a long time to understand it um and even writing up this slide I felt like it changed my understanding of it so yeah so uh revert"
  },
  {
    "startTime": "00:22:01",
    "text": "uh trailer length heel six signatures from four eight octets for octets um so this is a so if you look in the poll uh I've got a poll here that says revert trailer length field for V6 signatures from 8 octets to four octets so please click raise hand if you want this to happen click do not raise hand if you think this is a bad idea and if you don't feel like you understand this just leave your hand you know don't click either of them so I'm seeing hands raised in favor of the reversion and I'm not seeing any hands raised I'm not seeing any anyone thinking do not raise hands so I'm going to end this session that seems to have stabilized at 7-0 um uh Stephen do you think we should run another poll that says I understand this or maybe we had seven people saying that they understood it from a from a group of 15 participants uh no I I um okay I mean you know I guess it's worth checking you know I mean just you know does anybody want to kind of speak the you know require more time or um you know it's nothing explained sufficiently I I"
  },
  {
    "startTime": "00:24:00",
    "text": "as you know because you might my brain has kind of unbuffered everything to do with open bgp in the last few weeks so I understood it I suspect others did too so but would you give people a chance to express a need for more information again bearing in mind that we still want to get done so but uh if anybody thinks they need more information about this now is a good time to join the white climb okay um seeing no further company we got positive feedback on the poll uh so I'm going to move on to the next slide here so uh yeah with the length of the salt um so Aaron Whistler raised his concern he sent his his regards and regrets that he was not able to be here so I'm hopefully representing these this proposal correctly um the question here is about the length of the salt in the B6 signatures um so uh Aaron's concern is that someplace Quantum algorithms will want more than 16 octets of salt um and the current specification for the V6 signatures says they only have that they have a fixed 60 knot cuts um The Proposal here is to bind the salt size to that hash algorithm used in the signature and it recommends uh this merge request 219 has this implementation and it also indicates the assault size of The Wire instead of leaving it up to each implementation to record that I believe that change was made in response to uses Spencer's concern that he wants to be able to parse a signature even if he doesn't know anything about the hash calendar uh this report says the question of what happens if someone makes a signature with the"
  },
  {
    "startTime": "00:26:01",
    "text": "um with the wrong size with a the wrong size algorithm and the this merge request says we should reject the signature it's made with a hash that doesn't match the salt size um I imagine that's going to require a bit of testing to make sure that people actually do reject the entries based on that but it says clearly what to do with respect at least and the one outstanding question in that merger Quest is whether we should specify assault size for hash algorithms that we do not expect signatures to happen anyway um so uh I'd like to hear people speak to this uh people feel like this is something that is necessary if they feel like it's unnecessary um how they feel about the salt size being on the wire or not and what if we do go ahead with this what should the salt size be for sha-1 and mv5 and what people are thinking just a clarifying question for me um do when you say a change on The Wire does that mean that this nobody has implemented this so far to put the salt size on in the packets none of the packets currently have the salt size embedded in them and so so this change would mean that all current signatures are yeah signatures that have been made from current implementations would not be valid because the first octet of assault would be treated as a as a size indicator Falco you're in the queue and so for the salt size for deprecated hash algorithms I think the simplest solution would just be to make it the minimum length which is I think 16 octet okay that's what the current merge request uh does it seems like we could"
  },
  {
    "startTime": "00:28:02",
    "text": "also put a not applicable in that field and say you know if you're making V6 signatures it should not be made over shot one or md5 um don't you know don't do this and then all the signatures would by definition fail because they don't match the recommended hash algorithm so those are those it doesn't seem like the two options that that would be reasonable I guess you could also do a zero yeah but that doesn't zero feels wrong to me as well so I think I think your proposal is is one of the two reasonable options that we have is there a reason thought code that you would want to do that instead of saying not applicable not necessarily you know I don't really have an opinion uh which one is preferable okay thanks for wearing it uh are there any objections to the fact that the wire format is going to change with this for a reason so yeah I was going to ask that I mean you know we're at a pretty late stage of the process and you know I I would hope there would be a kind of a high bar to changing the wire format well we're changing the wire format by moving from B5 to B6 anyway there is a wire format change yeah nonetheless but every additional change yeah create some other issue that somebody raises later that causes us to hit an infinite Loop um so I I I would I think it'd be great if people support indicating making this wire form a change and indicating the salt size I think that if they speak to this supporting that I think that would be useful Justice so I requested the the express price and the witnessed that we want to be able to"
  },
  {
    "startTime": "00:30:01",
    "text": "go positive cars the signature evening you don't know the hashtag button then if you don't know he has algorithm if you don't know these types so it's perfect so your audio was a little bit scratchy for me at least justice but I think I heard you supporting making this change okay so that you can skip over it more easily correct me if I'm wrong in the chat or an audio German and just as the um as the maintainer of the interoperability test Suite would you be up for adding uh tests that would confirm signatures are rejected if they don't match the hash sizes don't match and yes he says in the chat okay that's great um Andrew says do you have an opinion on what we should specify for the um uh for the for deprecated hash algorithms I see Daniel saying he's in favor of the change in the chat as well which is good to know I mean I I again I'm I'm wary of the logic that since we're changing something we can change another thing but so Andrew Gallagher weighs in in favor of deprecated being sent to n a that is not currently in the merge request so that might be something for recommended changes because I I guess you may have gotten opinions would you like care to summarize what you think the answer to"
  },
  {
    "startTime": "00:32:00",
    "text": "these the three questions on the slide are um and then we can take that to the list uh the so so far I'm hearing I think that uh people are in favor of indicating the salt size on The Wire specifically for the reason that this is articulated um they I don't believe anyone is objected to rejecting signatures if the salt size on The Wire doesn't match the expected size for the algorithm itself and uh the only person I've heard voicing a strong opinion that he has maintained on this all test for deprecated hash algorithms is Andrew Gallagher for not applicable Falco suggested you could just use the minimum one and then said that I don't have an opinion on it so I'm going to move on to the next slide um really what was this what was the last the answer to the last one there sorry all right uh the only person whose voice in opinion has been Andrew Gallagher suggesting that the deprecated hash algorithms should have not applicable in this column and do we you know is that something that other people agree with or I mean I'd like you know if we can bottom out and get it saying here's that if we can just say that you know this enter a meeting at least had a an answer that was acceptable to people that would be good I guess I'm asking is Andrew's answer acceptable to people or do people object to it nobody is objecting and so and so I'm ready I'm gonna run a poll right now um you're gonna raise your hand for choosing uh not applicable and you're going to choose do not raise hand if you want 16 octets and you're not going to choose anything if you don't understand the question so here's the poll the salt size for deprecated hash algorithms raise your"
  },
  {
    "startTime": "00:34:01",
    "text": "hand if you think it should be not applicable and do not raise hand if you uh think it should be 16 octets okay um seems to be stabilized we have six folks uh weighing in favor and Daniel has volunteered to update the pr to change that since Aaron is currently on vacation so I'm gonna end that poll uh thank you Daniel for volunteering to update the pr I hope that goes into the minutes um I think that's a pretty we have a pretty clear sense that that's the way forward next slide here contact signatures context parameter for signatures so we have proposed context parameters from a threat threads started by Marcus Brickman for both signing and for encryption we've been going through signing steps here and I'd like to focus specifically on a context parameter for signatures the next slide is for Conex parameter for encryption um so I'd like to focus on them separately because I do think they're separate questions the answers might be the same it is not clear to me whether we want to include a context parameter explicitly here or not if we do uh it's not clear how the signer who's making sure knows what the Codex parameter should be and yes V5 should be read as as V6 uh Daniel you're in the queue go ahead sorry I took you out of the queue but I meant for you to go ahead I thought you"
  },
  {
    "startTime": "00:36:00",
    "text": "would you turn on your own audio I think you have to turn it on yourself sorry can you hear me now okay sorry about that um yeah so I um so for signing specifically um technically it's possible to get domain separation using notation data supplicates right I think you brought this up at some point we could if we want to make if we want to bind a signature to a specific application and make sure it can be used uh it can't be used elsewhere then you could add a critical notation data Supply kit um and then when verifying check that it's there for example and um we have some support for that in our implementations but it's still a very manual uh thing that you have to do right you have to um manually add the notation data sub packets which we okay don't have great support for we could add that and then check that it's there when verifying um and um it it's um possible but in my opinion kind of uh"
  },
  {
    "startTime": "00:38:02",
    "text": "uh slightly hacky solution to the problem and it also nobody is really uh doing that at the moment I think the advantage of adding an explicit context parameter for this in my mind um is to encourage um new applications to use it um because if we had for example in our open PHP implementations a top level context parameter for signing verifying encryption and decryption although we will get to that later but then it's quite obvious that it's something you can do and probably should do right whereas adding notation data sub packets um kind of isn't um of course we could add more high level apis for that using notation data subjects but I think that um it's it would be good to at the spec level encourage um The Well encourage applications to uh use domain separation um um yeah that's that's essentially my position thank you Daniel can you speak a little bit to um how that would work with existing uh deployments my concern here is that the elevated API you know the more visible um context field as you said would encourage people to use it and then for implementations that um can't decide on what to use uh that it would produce interoperability failures signatures that could not be"
  },
  {
    "startTime": "00:40:00",
    "text": "verified because um for a non-green field implementation there's no consensus on what the what the um value of the context parameter would be um can you speak a little bit to how that would play out right so I think it's very specific to each existing application right so for email there was this concrete proposal to add a header um which would signal that the context parameter should be used although that proposal was focused on encryption but I think the same could be used for signing right and then for other applications um I would imagine that you also know so hold on the header would signal whether the context should be used for that message but when you're composing the message you have to decide whether to do that so there's a different there's two kinds of signaling one is was it was it was a context perimeter used and the other one is should I use a context parameter yeah I mean you might uh so if if we build this uh parameter in to V6 signatures then you um would at least be able to know that when using V6 the the implementation uh uh has to support it right I I'm not necessarily saying that that automatically means that when when using V6 that means that you can use it in like every existing application but that that's what I at the email level that's what we could decide right"
  },
  {
    "startTime": "00:42:00",
    "text": "um but what what would we decide at the email level that's when sending um messages to uh a V6 key for example or when generating vcx signatures that um you would use this context parameter and send a header to indicate that it was used for example and what would and what would you put as the value because the critical thing with the context parameter is that signatures will not verify if you do not know what the context parameter is right so what would you put in this it uh when I'm trying to verify the signature what would I put in the context parameter so the proposal for email specifically was to have a header that says which of the other headers to put there um so you could have like the the sender the recipient the the date header maybe the message ID I don't know exactly what they proposed but uh you would you know compile those let's say into the context parameter right but so hold on you're describing a complex scheme that's described in this paper right yes you're proposing folding that into this specification no no there's an email without this no my I'm explicitly saying like that should be discussed in the context of email and not in not here in the I mean that shouldn't go into the open pgp spec I agree with you that that was that that is a whole large ball of wax that we don't want to roll in here right so my question to you is what are you gonna do when you send an email my my answer is we should discuss that in the context of email but but if we roll this out and V6 signatures require a context parameter"
  },
  {
    "startTime": "00:44:00",
    "text": "people who are applying a Visa signature to their email messages are going to have to make a decision about what to do yeah and what are they going to do by default if we if we don't discuss anything in the context of email then you would put the empty the empty string as the context parameter and some emails are going to be out there with the empty string as a context and some are and and then in the future some are not I think for an existing application that's kind of unavoidable right well this is what I'm asking how do how do we how do we deal with um when you're making the signature knowing what context parameter to include yeah I think you'll you'll have to Define it at the at the application Level if the app if the application doesn't say anything then uh you just put the empty string right and then once it's defined for an application like email you put whatever the context string is plus a header saying that you're using it and how do you know whether to do that or not I mean once at the application Level we Define that this is a thing that uh you can do right I mean then of course email applications will have to uh uh work to support that and then um end up dealing with an archive of messages that don't have it yes indeed um I mean again like we could say at in the context of email that we bind it to V6 right"
  },
  {
    "startTime": "00:46:00",
    "text": "uh so you cannot make a basic signature until somebody has gone ahead and specified exactly what this should be well I I just as a slight interrupt I think we started we're beginning to start to head towards going around in circles I think um I think I understand the choice here myself um so I'd be interested if other people wanted to weigh in like I understand dkg's hesitance I understand the desire that Daniel has both both say about it um are there other people who'd like to weigh in on this topic as to whether this is something to include in V6 or this is something I guess to point to a male specification later I think those are the two choices of that is that roughly right Neil yeah I kind of agree with dikishi to be conservative here and I kind of like the notation thing the fact that it's not part of high level apis seems to be an API problem and not a spec problem so so you're basically arguing to say that this you know this is better addressed later in an email spec yeah I agree well okay I think Daniel's goal is to have domain separation between email and other domains um so it wouldn't just be addressed in the in the email spec but but um I think what Neil is saying here is that the you can do this outside of the email or across other domains via this other mechanism right so if we wanted for email we would need to also specify a separate thing anybody else want to weigh in on this so I think Daniel did you want to respond to something there yes I I just indeed I mean dkj sort of uh said it already but I don't think it necessarily makes sense to uh uh postpone this like postpone the whole topic to an email"
  },
  {
    "startTime": "00:48:04",
    "text": "postpone how to use it for email to an email spec but I think having a context parameter in the open bgp spec so that we can use it in email and other applications uh would be great um and then that also I I think it would be a good step towards being able to use it in applications um it it's true that technically speaking we can already do that using notation data sub packets but um I I don't agree that that's a better solution also because um to do to use that you need to put the actual context string in the signature right um in order for it to go in the hash whereas here the idea of the context parameter is to just add it to the hash directly without having it in a signature packet which obviously saves bytes okay that's not a huge um concern but the the other risk of putting it in a notation data sub packet is just to is that people will just verify the signature without actually knowing what the context is right having an actual context parameter basically forces you to actually compute it from the headers or whatever the context is Right which I think is better sure and and I think that the the the tension is between you're wanting that context parameter essentially out of band in order to make cross protocol attacks harder versus not knowing what to put in there at the beginning and having people who are verifying signatures go wrong later or have archives of signatures that no longer verify right so it's adding less"
  },
  {
    "startTime": "00:50:00",
    "text": "attention right um okay so do any other voices people who would I think it'd be good to get more voices on this so please please do chime in if you have an opinion based on the discussion Andrew hi it's uh okay this this is a bit left field but it uh it suddenly occurred to me there listening to the um to the discussion that we could have a third way in between the two which doesn't specify uh a literal an actual contact parameter in the definition of the signature but we use the um notation sub packet as previously discussed but you could then subsequently mangle the signature to make the notation sub packet the the explicit notations are back in the signature unreadable and then you would have to reconstruct that again using a similar procedure before you could verify the signature now that would be that that probably comes Under The Heading of abusive spec but um I just thought it was worth throwing in um if you want to make it unreadable you could also put a hash of the context in annotation data sub packets um yeah okay uh Jonathan just an investigating new voices I'm not clear I really see the benefit of separate context packet and I don't understand what we get over the notation sub packet now if we want to particularly say this is a context we're using can we not then have a particular flag in it I think from looking at the spec we only Define human readable and"
  },
  {
    "startTime": "00:52:02",
    "text": "the notation flag registry so why can't this just be a different type of notation right like an application contact or something under the existing packet type and so um Jonathan just to be clear then so what you're suggesting there would not require the context string to be actually in the package just an indicator but there exists the context string somewhere is that correct what I'm suggesting is we would use the existing notation subpocket and we would potentially Define a new um fly registry first octet of the notation subpocket would lie is to say this is a context um I mean you're getting down to something that is very much application specific right this is an application problem really then a protocol level problem so you're relying on emitter operation from all applications to understand that hey this part this this signature can only be used in this context um that doesn't feel like it deserves a new sub packet or a contact parameter on it it feels like it's a notation because things can't ignore it right there's no cryptographic verification in there about the actual thing is a notation to the application so I I don't see the value that a separate contact parameter adds I mean the the proposal here is is exactly to to get some cryptographic uh uh verification of that by adding the context into the hash that goes into the signature right so you're you're forcing each application to know the context which could be as simple as just like the name of the application right uh in order to verify its own signatures that it made to"
  },
  {
    "startTime": "00:54:00",
    "text": "ensure that it indeed made them itself that's that's kind of the goal Taco please join yeah thank you this is a simple example that just came to my mind so if I have a backup application that puts in a context parameter with its own name and then I verify the the backup the encrypted backup file on the command line will mean that I cannot verify my own signature right yeah I have to pass it you need somehow the the contact context parameter it implicates an API a significant API change to what uh open pgp signature looks like there's an additional parameter that would be passed to Signature making and signature verification so um I'm inclined to start a show of hands here um just before we do that [Music] um so there's a similar issue with with respect to encryption excuse me my question is should we discuss that before doing a poll on uh one or two polls on both or should we have a poll now on signatures and then only just discuss some questions uh a lot of issues are the same uh well they're they're not exactly"
  },
  {
    "startTime": "00:56:01",
    "text": "because there is nothing um well I I can hold off on the poll if you'd rather hold up on the poll that's fine as a suggestion I think that's maybe that's that's poll like dude one or two polls about these topics uh after the second one is discussed as well perhaps okay sure okay so keep your opinions uh to hand about signatures and let's talk about encryption um so we have the same question for encryption should we make encryption and decryption contingent on the encrypter and decrypter both agreeing on a context before beforehand um or outside of the actual decryption so we have one merge request that actually covers both of these which has worked for Quest 214 it is still unclear uh from the merger Quest how a signer knows what context parameter to use the idea here is that encryption uh and decryption would require economics parameter and your decryption would fail if you do not include it and this would be for seipd version 2 encryption only we would not be able to include the context parameter for the earlier you know already specified scitp version one uh it is subtly different here than signatures Daniel you want to speak up yeah just to say that for for encryption there is currently no way to uh rigorously provides domain separation since there's not an equivalent thing to the to the notation data sub packets right uh I mean there's basically no way to get something into the additional data um of the encryption and even if you put"
  },
  {
    "startTime": "00:58:02",
    "text": "something in the body uh there there's no guarantee that I mean however you structure the body someone else could have uh encrypted a message with that structure right um so I either accidentally by uh encrypting a specific file or or whatever so uh just to say that I think for encryption it's um uh yeah possibly even more important um not sure but yeah and so um Daniel maybe maybe you could speak again do you feel like this is the same situation that it would be in terms of Greenfield versus non-greenfield that we would basically be saying that there's a similar signaling Choice yeah I think so I think it's basically the same situation here Neil go ahead so I haven't read Marcus's paper or the group's paper but I'm deeply worried about the usability concerns this is going to make everything so much more complicated and it's already so hard to use encryption of all uh can you describe what you mean by complicated are you thinking it's complicated for implementers but it'll be complicated for users what's the can you give examples of the kind of"
  },
  {
    "startTime": "01:00:01",
    "text": "failures that you're expecting I think Falco gave a really good example beforehand with the having to verify a message on the command line all of a sudden you have to provide this additional context parameter by hand Daniel go ahead I I think there's a sort of underlying uh philosophical question here about who is open pgpe for right is it an API for developers or is it an API for end users or another API but like do we expect indeed um users to take a signature from a backup application and then manually verify that open pgp signature on the comment line or with with some open HP implementation or do we primarily want to design open BHP as as uh something that can be used by applications uh to well uh to encrypt stuff right and I think currently [Music] um open bgp is indeed yeah maybe more focused on end users in that sense which I think um makes it a poor fit for applications trying to use open bgp and I I think in the end if applications use open bgp and provide the the interface for the user to decrypt our data and so on in the end I would say the the usability will be better and we shouldn't expect"
  },
  {
    "startTime": "01:02:00",
    "text": "uh users to take out the signature from a backup application and then manually try to verify it somehow but um I agree that if if that is a use case that we want to serve then uh this will complicate it somewhat all right so Neil I think you're actually in the queue first so go ahead and then Falco right so I understand Daniel's Point um but what I'm concerned about is that um applications die and I still want to be able to access my data years later and then there's the operability interoperability concern like our are all applications sort of getting it right okay thanks uh falca yeah that would be my concern too and um moreover in the backup example it could be that even the application uses the path to the original files as context which I might lose at some point so it could be really obscure what what I have to put there and concerning encryption I think I really support the idea of having a context because it defeats some very yeah dangerous attacks that are out there for a long time are known for a long time and should be defeated but I think it should be something that that is optional I don't think there's a way to introduce this a solid way to"
  },
  {
    "startTime": "01:04:01",
    "text": "introduce this uh requiring the context parameter coming from outside I think your context parameter for decryption that travels with a message would be a at least for phasing in and maybe permanently would be a good idea okay juices so I'm also concerned about the complexity this brings to to apis so we have existing apis for example G mime and if we would need to pass in somehow in context parameter we would need to change all the the apis throughout the whole application and Library stack in order to make that work okay so so very roughly I think what I've heard so far is uh uh Daniel arguing giving good Arguments for including these kind of context parameters but a bunch of people pushing back for slightly different reasons um I guess I'm wondering is does anybody aside from Daniel I want to argue for these context parameters being included now according to the Mr the merger Quest so the kitchen I think you're muted thanks um"
  },
  {
    "startTime": "01:06:00",
    "text": "so um I can do two polls one is should we add a context parameter to V6 signatures and the other one would be should be added contacts parameter to um uh seipd V2 encryption so let me let me tweak your Apollo questions uh your questions should we add a context parameter now in this draft yeah so you know in the next you know should we accept this marriage request essentially I think I think it's it's comes out you know there's clearly people see some benefits to context parameters but introducing them is tricky maybe we don't have a you know maybe somebody will figure out a great way to do that introduction a little bit later on perhaps uh I can't remember who made a kind of a third third suggestion um I'm gonna fit in the signature discussion but yeah I think the question is should we do this now or should we kind of leave this to be something that we try and revisit because clearly there's some interest in doing it but how to do it well and introduce it well it seems to be the hard part yep just one last minute comment if I make I think the the question of how to introduce it is an application question so I I think that that's something that needs to be discussed in the context of for example email and if we don't add it here in the spec then we can't introduce it in email right and so I I don't quite agree that the order of things should be that we first figure out how to introduce it and make it usable in email for example and then add it to the spec because um we we can add it to the spec and it it can be optional and we can just leave it empty for email"
  },
  {
    "startTime": "01:08:00",
    "text": "and every existing application in fact if we don't want to use it and then new applications can use it and then we can start to think about how to introduce it in email right in my opinion yeah I think I think I would kind of agree except with one part of what you said I mean I think it is true that introducing these kind of context parameters in email is is hard to do but it's also hard to do in the general case as we're as I suggested by this merge request there are difficulties associated with doing it now as well and I would actually argue that it is not solely an application layer question because um yeah each application layer will need to Define some sort of mechanism to know whether or not to use it if it's totally Greenfield it doesn't but existing applications do um and um a signaling mechanism is something that open pgp is I I believe the certificate is the place where you would do that signaling um and so I'm inclined to say that the place to do the signaling is in this spec so that at least applications can know whether or not they can know how to make the signaling happen right because your goal is to Signal something for uh at least for encryption you need to know how to do the um you're encrypting to a key right you need to know whether or not you can that key knows how to handle the context parameter um not just the key but also the application right so uh if you're assuming that um the key is only used by one application then you don't actually need this domain separation at all because I mean using one keeper application is"
  },
  {
    "startTime": "01:10:02",
    "text": "in fact another way to achieve uh domain separation if we want to say that um you should you should only use one keyboard application that's that's also reasonable answer the advantage of having an explicit parameter for the main separation is that you can use the same key that you fetch from wkd for different applications right um so then you don't you you can't necessarily put the signaling in the key because you want to know whether the specific application is capable of using the context parameter yeah go ahead so you said you can't use the same key that's only half true Daniel because we have sub keys and then we have key capabilities and one thing that we've been thinking about a bit is adding different like encryption back ends so for Matrix or for MLS or or age and then one would indicate that by using a different flag um and the what do they call the key um key capabilities are you know the SCC ET thing like that I think it's called key usage uh key Flags or the usage it's called both because openpgp always has terrible terms or indeed you can have a um I couldn't understand what you said there is this maybe you want to try repeating it either louder or in text have a notation in the top key bindings I have a location in the sub key binding"
  },
  {
    "startTime": "01:12:02",
    "text": "signature yeah oh so okay you're gonna propose the poll then okay yeah let me just try to uh Praise Jonathan McDowell's question from the chat as well he says I'm not clear if the intent is to keep the data secret unless you know the context or just prevent an application from decrypting verifying something that was encrypted signed in a different context so Jonathan I think the goal is the latter um these context parameters were proposed in the context of um people uh munging existing encrypted data passing it to a mail user agent through the hopes that the end users and a user agent will decrypted and then do dangerous things with it go ahead okay if the intent is application cooperation and ensuring non-missuse of signed data then there's absolutely no reason why the over the wire format should change in the AED should change a notation packet that the application pays attention to achieves all of that if there's no requirement for actual inability to decrypt then a notation pocket in the harsh signed harsh area I think achieves all this unable to access your data should you not have the application I think for signatures I think that's the case I'm not sure that's the case for encryption um because the the concerns on the attacks for encryption is that someone can take a message that was encrypted to you in some other context feed it into email and then give it and then your mail user agent encounters it and does terrible things with it um I think"
  },
  {
    "startTime": "01:14:00",
    "text": "I think that was the um that was the primary place where the increase that was why I sort of wanted to separate out kind of expenditures for encryption from county square numbers for signing they behaved differently here and then the the paper that introduced this was specifically concerned with exfiltration of um exfiltration of clear text from encrypted data based on flaws and existing values or agents that's that's only going to work if either we have a contact specified for email or which is going to be incredibly hard to roll out right across all user agents in an interoperable fashion or every single application um uses a context and again if the purpose is the application protects itself against that exploit then that's something the application can do anyway without actual support from the protocol okay dkg do you want to use your super chair like powers to create a uh Pole or two yeah I'm uh I was gonna do two polls one is should be add account experimeter to V6 signatures as uh in this draft and then the next one would be should be addaconics perimeter to V2 seipd in this draft and I yeah and can I suggest a a third poll after those two depending on the answers is uh is this a topic the working group should revisit after we're done with the current Internet drives after 48 ate this um that seems presupposed what the outcome will be but I agree if yeah I I think I think it's worth asking because there is interest in addressing this topic I think yes there's concern about whether whether it's addressable now in the way"
  },
  {
    "startTime": "01:16:00",
    "text": "specified in the merge first so um so I'm going to say should we added contact the basically interested in this draft uh for Greenfield application only okay I mean I'm just trying to understand what the what the scope is here I'll say as specified in merge class 214 . so so we did the discussion so far hasn't really T are touched on on that Green Field only for signatures versus uh existing applications people were talking about the difficulty with existing applications or with applications that have gone away um right I I I if you add Greenfield only I think you're you're you confuse me anyway uh okay um so adding iconics parameter as specified in merge request 214 doesn't say anything about what the contents of the comics parameter should be yeah I know so should I say should we add a conics perimeter to V6 signatures in this draft without any specification of the con of what of its contents of its value that is the proposal of the merge request right that's the proposal in the merger press yeah so I think that's that's it then that's a good question to ask and I think I need a discussion has talked around that topic so so I think that's a good question to ask so as per the emerging yeah so should we add iconics parameter to P6 signatures in this draft without any specification of its value uh Michael Richardson and the chat says since this is a new version can't we say that the previous versions have an implicit email context but open Michael I'm not sure we can say that because I think openpgp has been used for many things other than email whether it's package signing or uh backup encryption or other things which"
  },
  {
    "startTime": "01:18:00",
    "text": "are not email uh so so I think the chat is starting to revisit the discussion that we've just had so right I I think we should move to a poll okay so here's a poll should we so this is signatures only should we add a context parameter to basic signatures in this draft without any specification of its value and raise hand if you think we should and do not raise hand if you think we should not and do nothing if you're not sure okay that got us the most the most active feedback we've got nine responses which are it's not uh 100 one way or the other we have two people saying we should and seven saying that we should not uh I am going to close the pole um and my next poll is should we add a context to seipd to encryption in this track for that community and again raise your hand if you think we should do it and hit do not raise your hand if we think you think we should not do it and do nothing if you're not sure so it looks like people are probably voting the same way uh on both of those polls with the same number"
  },
  {
    "startTime": "01:20:00",
    "text": "um okay so I'm going to close this poll um so so I think Daniel I assume is one of the people who raised his hand for those polls uh if the other person would like to speak and hasn't spoken to this already I think that might be useful information but if the other person chooses not to that's fine too I don't see anybody joining the queue um so um and just out of curiosity did anybody change did anybody vote differently in the two polls I suspect that uh looks like everyone voted I think those were the same the same okay this is yeah um I will follow up to the list with this discussion um and so so could you ask the third poll which is do we does the work in group one to address this topic in future after 48 Adidas and raise hand if you think it should be addressed in future and do not raise hand if you think it should not be okay so everyone thinks this is worth addressing um but seven of at least of people who are awake uh seven of the nine think that it probably shouldn't be done as converge requested 14 suggests but everyone does think that it should be addressed at some point I'm gonna close this poll thanks for your feedback folks um"
  },
  {
    "startTime": "01:22:02",
    "text": "so the poll says this topic but just for clarity in the notes this topic means context parameters I'm going to advance we've got a few points left we are over an hour in um so uh the version five ecdh pkes-k currently has more material in it than is needed um uh uh this is a merger Quest 223 and it basically says look um in the current approach for ecdh PK ask we feed some stuff into the key wrap input which is the symmetric algorithm the session key itself or the value that will be used to generate session key the two octet checksum and some pkcs1 padding um uh but ecdhq wrap itself has an implicit checksum because it is uh because of the way that it's being calculated um the seipd version 2 packet which corresponds to this V5 into the HP ksk already has the symmetric algorithm so that's not actually being hidden and it's known outside of this and all session keys are block size multiples of eight octets um so there's no need for padding and so this is saying look when we're using the ecthq app we really don't need to stuff all this other stuff in we can just make it simpler and put this thing in that makes the esk slightly smaller um uh more Compact and doesn't introduce room for potential failures there there's no additional checks and calculation there's no potential risk for a symmetric algorithm mismatch and I'm here to worry about the Panic so uh this is another change on The Wire uh"
  },
  {
    "startTime": "01:24:01",
    "text": "if we're talking about changing pksk from V5 to V6 there will be changes on the wire as it is um again I hear Stephen Stephen's uh point that this is not necessarily a great reason for making other changes but this has been proposed there's a merge request out there I don't believe in merge request updates the test vectors which makes it a little bit difficult to evaluate many people agree on the actual implementation but I don't think this is a huge change um have folks had a chance to look at this any opinions on it everyone speak up go ahead Daniel yeah so usually I'm not a huge fan of binding um the algorithm specifics to the version of the packet like I I kind of like having those orthogonal but that being said uh I do like this amplification and it's um uh much closer to using standards um we wrap which actually okay it's a bit specific to our use case but we have a as key wrap implemented in web crypto but only um that we could use with the new format but we can't with the existing one um and there may be other libraries that's that's offer that although I'm not sure so that kind of simplifies using it um so yeah I would be in favor thanks Daniel you assist go ahead"
  },
  {
    "startTime": "01:26:01",
    "text": "I'm also enabled I think and I like to find the rap I personally could be good working yes okay thank you can somebody repeat uh I didn't catch Justice point the audio problems again because you what did you hear I heard him say that he was in favor of this change uh that he likes The Binding of the um algorithm uh in use okay and he likes the simplification sure good so um uh this if we make this change it does seem to bind us to having all session keys for future symmetric algorithms be multiples of adoctets um and it only seems to have an effect for ecdh for other couple key algorithms just want to make sure that folks are aware of that I don't think that those are dangerous limits but I want to make sure that people are aware of those consequences um I don't know should I do a poll on this TV"
  },
  {
    "startTime": "01:28:12",
    "text": "but the call is shall we simplify V6 bcdsh pksk key wrap input so the poll is in play just click raise hands if you agree with the change do not raise hand if you object to the change and do not press if you are not sure okay I'm seeing it stabilized it's stabilizing at five we have fewer people actively engaged on the question but um uh there is at least a uniform no one is objecting to the change so we will add that feedback to the question follow up on the list enter the merge request um so we are 90 minutes into this meeting so I suspect that interest levels will drop away quickly if we don't speed up yep we have one more question which is relatively easy for us to deal with um which is the document title this is a bike shed that's the image on the slide the openpg message format is the current title but it is not just messages um if anybody has a preference speak up I'm leaning towards just calling it open pgp unless uh anybody has a strong preference for one of the other proposals or a different one that's there um probably the most descriptive one is the longest one here hope you get your new messages signatures keys and certificates that's that's bike on the list if needed um I think yep I'm not I'm not seeing anybody jumping into the queue"
  },
  {
    "startTime": "01:30:01",
    "text": "uh except for some trolling by Michael Richardson um okay let's let's do it I don't think it's worth um audio time for for that discussion I just wanted to see if anybody had any clear objections and it doesn't sound like they do so um if these changes are made as we have decided here are we done with the working group last call well we want to go ahead and ask the editor to make the changes and uh pass the document to The Wider ietf uh I want to hear some feedback from implementers when the changes are made I guess that we think that we have the capability to do it but I have not heard any additional changes that need to be made is there anything that we are missing here with these changes is there anything we're missing that we absolutely need to address I think is what you mean that's what I mean yes thank you enough uh I guess the plan then would be we'll try to get a we try to see if Paul has no Cycles to push out a uh a new rev with these changes actions then have a short pause for people to check that and then declare victory and at the working group level where we push it on to publication requested it goes to our ads we reviewed it goes to the itfs call it goes to the isg it goes to the RC editor etc etc yeah and I want to remind folks that our editor Paul is pretty strapped for time so the more we can offer him concrete merge requests that there is a clear consensus on the easier it will be uh I think for us as a whole and for him individually so you know the more the"
  },
  {
    "startTime": "01:32:01",
    "text": "more folks can step up and make sure that the merger quests are clean and that they can confirm that the merge requests that they're uh in favor of are you know if they approve of them that they work uh the easier things will be so um do we need to meet in ietf 116 Yokohama if we have a new draft out before then uh we could potentially use a meeting in Yokohama to deal with the effect that's come from the rest of the ITF if there is any we could potentially use it it's even saying no that won't have happened ITF last call won't have started before Yokohama because that requires the new new rev and AD review to have happened okay so we won't we won't be at ITF last call in Yokohama but the question nonetheless is should we do we want to meet I mean there are a couple of people who want to do Post Quantum things we talked about context parameters there's a bunch of things people might want to do um I think dkj and I had a call yesterday where we basically said we have to make a request for a meeting slot by tomorrow yeah it seems to make sense to assume that there's enough interest in rechartering to do those kind of the known things that people want to do to make it you know it seems to justify a meeting unless a bunch of people are going to say no that they either won't be physically present or can't uh participate because of time zones or something does anybody want to argue for not not meeting or does anybody argue for meeting now I would like to argue for meeting to address um next chart at work specifically pqc"
  },
  {
    "startTime": "01:34:02",
    "text": "was quantum cryptography we have a draft out uh the name of Aaron and yeah as soon as the working group is yeah done so far with the changes to this um this draft I think it would be interesting to attend to that in order to prepare already uh the minds and the generate some ideas on it so far we didn't receive much feedback that that could improve cool so can I suggest that just in we'd like to get done with 4880 bits so I I don't want to disturb that so maybe just for the moment if you have items that you would like to suggest to re-chattering if you drop a mail to the chairs we'll collate those and in the next kind of you know few weeks before Yokohama um will at some point kind of post to the list uh to to list those things that people have suggested that makes the location yep okay so if you have things you want to do include in a recharge or drop it to the chair as a mail we'll collate them and when we think it's not going to distract 48 NBS we'll take that to the list okay um that's the end of what we have scheduled for the agenda today and we are close to the limit on time um but we'll give you back at least uh 20 minutes um unless there's any other business does anybody have any other business Neil Daniel I just noticed that the designated expert discussion didn't happen is that right and there is a point on the agenda oh yeah thank you that is my mistake uh for I screwed up the slides uh and lost track um yeah so uh I posted a draft of"
  },
  {
    "startTime": "01:36:00",
    "text": "designated revoker guidance to the list uh man Paul sort of picked it apart my goal of posting it was not that I thought what I'd written was perfect but was just to try to get people talking so all at least had some critique if not concrete suggestions that'd be great if folks could weigh in on what they think is the right thing there so uh yeah okay so I think that the the outcome there is to take that to the list and discuss their um but you know do you have a specific concern about designated voter or the for the discussion that's that's happening there on the list already no just I'm typing the notes and uh notice that we skipped the whole paragraph thank you much appreciated and Daniel you're in the queue too yeah I uh completely unrelated but since uh Michael brought it up in the chat and I thought of well the the other um uh thing is that so uh werner's new draft that I think he published this week uh reps out EX I think and um purely from a perspective of uh if if we're looking at the differences between uh werner's draft and the crypto refresh and we're worry if at some point we have to justify those differences and uh what we put in the RFC then it might become difficult to justify having three aad modes right um and I"
  },
  {
    "startTime": "01:38:00",
    "text": "on GCM there has been a lot of discussion and we Daniel your audio dropped out for a second okay okay so I was saying that for GCM we had a concrete discussion and concrete reasons to put it in for OCB there's also uh uh um I mean we discussed making that mandatory to implement and so on and I think we had reasons for that but I don't think we ever really discussed ex or any reasons for having it there so I I know it's very late in the process as you said but I guess I would yeah uh just voicing out loud uh the question of do we need it uh should we rip it out so I guess again that's probably one to take to the list I mean I think yeah it is lace um even if we have even if people have relatively good ideas at this point we might be better off not actually new that's a possibility um but by all means bring bring to the list the other point I would make is um that kind of raises the prospect of the working group being vulnerable to a denial of service attack if changes are made just to to werner's draft proximate to the working group meeting and then we react to those every time then we never get finished I'm not saying that burner is trying to do that I'm just saying that you know making reactive changes in that way uh could expose us to that risk and so I guess probably want to bring to the list I think dkg"
  },
  {
    "startTime": "01:40:00",
    "text": "I I I'm not I don't know that I have uh particular perspective on that I'm I am worried about the um about terminating but I agree that a simpler draft and it is marginally simpler without eax is probably a little bit easier to review there certainly are fewer test vectors to verify if you remove one of the axes of variation um but I uh I don't really have a and we we have reserved code points in there for things that have been specified in the past that are no longer advisable so it could be doable but if you're going to propose it I would hope that you make it clear about the specific changes are uh kind of the easiest thing to do there would be there if you think it's a good idea and you want to push for it have a very clear merge request uh that people could consider so if you think it's a good idea and a good idea to do it right now with the risk that that we get stuck and never finish because that's a real risk um so I think I I think there should be a pretty high bar for even deletions at this point yeah I don't want to spend two months arguing back and forth about whether or not to to rip something out that certainly is not not a useful thing so so Daniel please um way in your mind how important such a merge request would be uh versus the possibility that the working group fails to finish again sincerely saying we should do it right it was just a question uh not necessarily a proposal I mean I can propose it to the list please don't propose it convinced that we want to do it we want to do it now it's not going to screw up"
  },
  {
    "startTime": "01:42:00",
    "text": "and cause us not to finish I I'm not convinced uh it was just a question so I'm also happy to drop it if you prefer or um I mean we can do a bowl or whatever but uh no no no no no I I don't think we should be doing polls for here's the thing we might do should we do it it's too dangerous that we end up with people saying oh yeah that's a good idea and then we end up not finishing at all this working group has been through this like five years ago or whatever it was well we have already got some Fork of the kind of draft versus burners we really should get finished yes I mean if we want to do it I'm happy to make a merch request with a concrete proposal and push that forward I I don't want to do that if we don't want to do it years yeah I would say that the only you should only be proposing changes that uh at this point you should only propose changes that you think are uh that you strongly believe in you should back if you're going to propose a change you should have a you should you should be you should be convinced that it should happen yeah that's the right risk associated now and you should be convinced that you will be able to have this discussion and it will conclude in a very short period of time I I'm not very strongly convicted on it the only point is that I see a risk if you're not convinced I think we're done okay okay can I just say I see your risk of if we keep it that there will be a lot of discussion even later about do we really why did they put in three aad modes and then it becomes an issue once we want to make an RFC but if you don't think that's a risk then I'm happy to drop it"
  },
  {
    "startTime": "01:44:04",
    "text": "I'm happy you're happy to drop it I don't think that we're going to get pushback saying uh given there's a register there um I don't think we're gonna get pushback saying why would you have added eax here we have historical reasons for having added it and um you know there's a registry somebody could re-specify eax um it's it's not I don't I don't think we're going to get the pushback that says there's too many modes here okay I I I think we're done let's let's start break being done if there's something to bring to the list bring it to the list by all means please but again only if you're convinced it really needs to happen it really needs to happen now it doesn't cause a you know a risk of the working group never finishing because those are real that's a real risk okay but please take your feelings on this stuff to the list we do want to make sure even if your feelings are like yeah I'm glad we're doing this let's like let's move it along this is the right thing uh confirmation on the list that shows that there is active participation you can say yeah I checked these uh um test vectors against my implementation and they check out all of that kind of confirmation is valuable on the list and moves Us in the direction of completion so please do weigh in that way we can't wait indefinitely on each open question of having clear answers lets us say you know we can move ahead with this or we can or we can not so thank you all um we will take next steps and Neil thank you specifically for taking those notes that's much appreciated in the days yep thanks for coming and uh Neil did you talk such good notes Neil you"
  },
  {
    "startTime": "01:46:00",
    "text": "get one last time go with Mike I just want to say you're welcome you said thank you I said you're welcome excellent you want to watch out you're going to be recruited again uh good stuff uh we'll take it to the list of the the minutes will be posted there and uh we'll organize Yokohama and uh the rest of the stuff so thank you and thanks for bearing with us for an hour and three quarters bye-bye bye now all right does anything have to happen with those notes or yeah thanks very much um we'll have a quick flick over them and then there's a button to press to publish them but I think that's all we need it looks so good I guess I don't want them to get lost okay uh oh dkg is gone too okay all right bye bye"
  }
]
