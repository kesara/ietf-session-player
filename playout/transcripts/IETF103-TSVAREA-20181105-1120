[
  {
    "startTime": "00:00:04",
    "text": "looks like that am I kidding game yeah okay um you say what did you cook here go I know how to do that but but yeah here we found the Clipper excellent so now that now that the area directors have noted where the clicker is for the advance the slides please note the note well we\u0027re learning a lot of things at the ITF apparently and we are not on oh that\u0027s right I changed it to morning session two but forgot to change Tuesday so we\u0027re doing that but this is our agenda would anybody like to batch they didn\u0027t know before we get going good not seeing any rush towards the microphones so this is what we will be doing we have some administrivia to do which we always do we\u0027re talking again and this is for the first time in a while but TST area is often doing forward-looking talks about things that may affect transport and the internet not necessarily things that we\u0027re looking to bring into the ITF at this point or bringing in to do they\u0027re not looking at things that we are looking to bring into a TSP or can group for Standardization at this point so we have we have three talks there which are I believe all more or less related to discussions that they\u0027re having in the art area about we didn\u0027t used to think mumble years ago that HTTP was a particularly good transport spoke straight but TC sorry that HTTP is not a particularly good transport substrate but HTTP has changed a lot since then and now we can now where we read thinking\u0027s of things so you\u0027re looking at like BCP 56 bits as draft names over there and things like that and I believe all three of these talks are kind of growing out of that conversation that we wanted when they talked about them in the art area of meetings people asked transport questions so we brought we asked them to come here and we hope that we will not be having transport people asking them art questions and then we we do have a we do hope to have some time for questions and answer and we always say it is not too soon to start going mean the outgoing area director hi I\u0027m mr. Dawkins I\u0027m the going area director for for the transport area and we wanted to recognize the review team and actually welcome Cory who has joined the review team now and recognize the people who have done reviews and a bunch of people have done reviews and we appreciate that including even one of the triage team members Magnus if we\u0027re still recruiting "
  },
  {
    "startTime": "00:03:06",
    "text": "additional review reviewers you\u0027ll see here that most of the people on this team have done at least one review since the last ITF meeting so you know that\u0027s they haven\u0027t done eight so you know it\u0027s not a desperate problem but it will be good it will be good to make sure we have spare capacity during in this honest review team we have our usual thing about our working group groups and what I\u0027m actually talking about for my groups is what we\u0027re talking about at this meeting so DT in Seoul version of the slides let\u0027s good let\u0027s let\u0027s come back to these so this is what we\u0027ve done publishing rfcs and getting things approved and things like that since the last IETF know this these are real old cool this is new so so a good thing a good thing to mention here is just this is the slide we put up in IETF 102 the NomCom has gotten nominations in four positions that they are reviewing and they are collecting feedback this week Adam Roach who is the I eat yet is she liaison to the NomCom came and begged me to ask everybody that I talked to to provide feedback to the NomCom this week because they\u0027re doing the they\u0027re doing all the nominee interviews this week and then they are and then they are starting deliberations like next week so the more that they know when they start talking the happier they will be in the happier you will be so I think we\u0027re ready to start I don\u0027t know if we have a note-taker we\u0027ll stop for a moment and then find a note-taker did I see a hand go back there but was somebody just stretching oh maybe this has his hand up we\u0027ll just get this guy\u0027s a superstar please tell the NomCom that so excellent so that would take us to and I will let you yeah there oh those actually yeah we do we have stuff uploaded them to present-- yeah okay perfect so I\u0027m just up with "
  },
  {
    "startTime": "00:06:06",
    "text": "some discipline church that\u0027s oh cool I think that I think that\u0027s right I\u0027m dragging this out yeah Catherine is the first yeah Catherine can you I\u0027m trying to get your make a choices all right uh hi everybody thanks for being here today I\u0027m going to be talking about proxy and hopefully motivating future work for UDP proxy in particular so this talk is related to a couple presentations that were given at the last IETF in Montreal I\u0027m Ben Schwartz gave a presentation on helium and dispatch and Lukas pardhu gave a presentation on hint NH Phoebus so if you saw either of those you might be a bit familiar with what we\u0027re going to talk about today but if not no worries because I\u0027m focusing mostly on the problem today rather than any solutions so I\u0027m gonna start by talking about the basic feature requirements for a specific use case and then I\u0027ll talk about how those requirements are met currently for TCP proxy but not necessarily for UDP proxy so the use case that I want to talk about is inconspicuous proxy now this is the the concept of proxying in such a way that you can\u0027t really tell that proxy is happening so on the top half of the slide basically you want the traffic that\u0027s proxying traffic between the client and the proxy to not be distinguishable from normal Internet traffic and ideally this is traffic on the link between the client and the proxy would look like typical web browsing activity we don\u0027t really care what the traffic looks like between the proxy and the destiny because in our threat model the middlemen that were interested in are on the link between the client and the proxy the second component is in the bottom half of this slide and this is where you don\u0027t want the proxy itself to really be indistinguishable from other standard Internet infrastructure so ideally it would look like a web server and I guess one other thing to mention here is that when you proxy traffic in a way that it\u0027s inconspicuous then blocking by middleboxes is harder and "
  },
  {
    "startTime": "00:09:06",
    "text": "this blocking could be either intentional or not of course when it\u0027s intentional this is the standard censorship case so on this slide I have a list of five features that are kind of you know the the basic requirements for inconspicuous proxy they\u0027re certainly not all-encompassing so first we want the traffic between the client and the proxy to be secured at the typical security properties you shouldn\u0027t be able to figure out the ultimate destination and a third party shouldn\u0027t be able to observe or manipulate any of the traffic between the client and the proxy second as we talked about on the previous slide the proxy traffic should blend in and ideally it should look like standard web browsing traffic the third the proxy should attempt to maintain similar performance characteristic for the characteristics for the proxy traffic as non proxy traffic would have so for instance if a client wanted to send traffic to a destination with UDP like characteristics then both the link from the client to the proxy and the link from the proxy to the destination to both have UDP like characteristics if either those links had TCP like characteristics then we wouldn\u0027t really be you know maintaining the the UDP light characteristics that the client really wanted okay fourth the proxy should have enough authentication mechanism this is pretty standard for proxies should be willing to transport or to proxy traffic from a client if the client hasn\u0027t authenticated properly v the proxy should be resistant to active probing attacks active probing attacks are cases where a third party sends a manipulated packet to a piece of Internet infrastructure to try to gain more information about it by looking at the responses that the proxy or the piece of Internet infrastructure returns we don\u0027t want the proxy to be identifiable as a proxy and ideally it would look like something else like a web series so perhaps that means being able to serve a webpage on port 443 so there are solutions out there that work pretty well for our use case for proxy TCP traffic and on the next few slides I\u0027m going to try to demonstrate how you can use an HTTP proxy to meet those five features on the last slide so let\u0027s say that you have a secure web proxy meaning that the client is going to perform a TCP handshake and the TLS handshake with the proxy before it sends its connect request I guess I should note that these "
  },
  {
    "startTime": "00:12:08",
    "text": "slides are for HT 1.1 but it\u0027s very similar for HV 2 because the TLS handshake occurred the connect request will be encrypted and assuming that the proxy does a successful TCP handshake with the destination then any data that is sent later on between the client and the destination should be encrypted at least on the link between the client and the proxy there could be an additional layer of encryption between end to end between the client and the destination if the destination is using TCP a TLS sir ok so that\u0027s that\u0027s basically requirement number one in securing proxy traffic now if we look at the traffic between the client and the proxy what does it really look like to an outside observer it looks like TLS over TCP / IP and this is basically what web traffic looks like now you could get more sophisticated and perhaps look at things like packet lengths or packet timing and then maybe at that point you could realize that this is proxy traffic and not normal web traffic but at least a some approximation and for some reasonable threat model this satisfies the requirement - that the proxy traffic is blending in okay for the third feature which is similar performance characteristics we\u0027re talking about TCP proxy in here so it\u0027s basically sufficient that TCP is being used as the transport between the client and the proxy as well as the proxy and the destination okay and the last two requirements that we need were proxy authentication and active probing resistance so typically if you have a proxy and the client issues a request and doesn\u0027t either includes no authentication information or includes the wrong authentication information the pricing will typically respond with a 407 error code requesting proxy authentication and this obviously gives itself away as a proxy all right so you know if you\u0027re trying to do inconspicuous proxy in here you can not send that process of an error code and you can act like a web server instead if you\u0027re wondering on the draft that specifies the 407 uses a should rather than a must and in this case so I think it doesn\u0027t actually conflict for the standard and for the proxy to act like a web server it should also be able to serve a web page and responds to a get request on port 4 with you okay so that was all for TCP proxy and without getting too much into the solution space what would a potential solution look like for UDP Rocking well first we would want UDP properties "
  },
  {
    "startTime": "00:15:10",
    "text": "on both the client to the proxy link as well as the proxy to the destination link we would want the trap between the client and the proxy be secured so perhaps this means using DTLS very quick we would want to active probing resistance and proxy authentication for the proxy and as we\u0027ve been saying ideally it would look like a web server and the traffic between the client the proxy should look like typical quick traffic so there are certainly solutions out there some standardize some not that deal with UDP proxy and I thought it might be constructive to talk through some of those and try to explain why we think they don\u0027t meet our use case and perhaps also help motivate why we want additional work in this area so first up is turn which has come up a lot in previous discussions around him and helium so to secure the traffic we would need to use DTLS overturn and perhaps this would look a little bit like web RTC traffic at that point there\u0027s a question though as to whether the entirety of WebRTC traffic provides enough collateral damage or enough or is it a sufficient cover for our use case certainly in the long run it seems like a better bet for us to blend in with quick traffic quick web browsing traffic also apart from what the traffic itself looks like operating a small turn server could look suspicious most what most turn server deployments are rather large and associated with a small number of well-known services okay then the next protocol we might consider is Sox which supports both TCP and UDP proxy there\u0027s a new version of Sox being discussed currently that would support DTLS but this would still be this would not blend in well with quick web browsing traffic at all um either the traffic component or the socks proxy but that wouldn\u0027t really resemble a web server and I think running both Sox and HTTP on the same court it would not be a good idea okay lastly there are various existing VPN protocols that support EDP proxy but these are generally finger printable so they wouldn\u0027t the the traffic itself wouldn\u0027t blend in with web traffic and the VPN would not look like a web server so for the basically the same reasons as Sox we don\u0027t think this meets our use case I\u0027d definitely be interested to hear though if you think there\u0027s an existing solution that "
  },
  {
    "startTime": "00:18:10",
    "text": "kind of meets the five requirements now so this is everything that I have for today so the five feature that my features that I\u0027ve kind of been harping on kind of represent a minimum feature set that we\u0027re interested in and there\u0027s certainly other aspects to this problem that we find interesting and if you\u0027ve seen the helium draft you may have in an understanding of what those are already if anybody has use cases that overlap with the features that we\u0027ve been talking about that would be very interesting here as well thank you yes thank you very much just I should have mentioned that before so we have two more presentations short presentations which will go further into detail and talk about more use cases so we can have like a high-level discussion about the general concepts after those three talks and we can have some specific questions to this talk right now but if you have like a more general comment and maybe hold up for after the next presentation well yes I mean you\u0027re presenting the requirements of POC seeing and we did a very similar exercise in the TRS working group when studying the requirement for SNA encryption and we have a draft that is in walking Pascal right now listing all the requirements for sni encryption and going in great details about ways to do that and I think that it would be very much related to what you\u0027re doing ok hi David\u0027s canasa Google I just wanted to say that this is really great work I find it really interesting and if there\u0027s any way we could make this working quick I think that would be amazing thank you thank you Eric Kinnear Apple I agree I think this is really interesting I can think of several use cases that would be that would be very helpful to be able to proxy UDP in a similar way as people do TCP especially as quick and and other similar areas start to kind of expand the usable amount of UDP in the world it would be worse that we may talk more about specific solutions later so I don\u0027t want to get too far ahead but it would be worth double checking on the some of the datagrams stuff in quick that we\u0027re discussing about how to send unreliable UDP ish traffic over quick the other kind of question that I had is when you talk about the HCP connect where you\u0027re doing TLS to the proxy and then potentially even TLS through the proxy and we talked about that as having similar performance character as its characteristics if it looks like HTTP a "
  },
  {
    "startTime": "00:21:11",
    "text": "lot of HTTP flows are fairly short-lived but the set up cost for that many round trips to get through that proxy all the way to the end can be very high on the other hand if you want a much longer lift connection now somebody who\u0027s fingerprinting it probably is not as convinced that it looks like a cheapie so it\u0027d be interesting to look at how that trade-off could be alleviated for other solutions that might be able to shave some of that time yeah yeah and that\u0027s certainly something that we would need to consider as being part of the front model or not you know do we want to their length of connections timing between packets length of packets you know all these sorts of things could absolutely be used to differentiate between different types of traffic even given encryption so you know it\u0027s just a question of how high we want to set that bar totally agreed and I think this is really excellent stuff to be thinking about okay thank you very much we go on with Lucas who is unfortunately not here and should join us remotely now hello can you hear me oh yeah we can go ahead come on because I am very jet-lagged so I apologize that I\u0027m in San Francisco and outside at protests related to the unions and the hotels so if you can hear some noise apologies for that yeah I changed the title of these slides slightly for what was on the agenda I didn\u0027t want to focus too much on on the tunneling aspects but more just on some of the they talked about quick which I had a nice prelude to you just then in the comment so if you could go onto the next slide please this is a very quick recap with images too small to see on purpose because I don\u0027t want to go into them too much what I did at IDF 102 was presented on a little thing called hint which is a very wide look at how we could achieve HTTP based tunneling for something like HTTP over quick that we can\u0027t do right now and looking at all the possible candidate solutions that I could think about coming up with and really what that did was look at initiation of a end-to-end Association or possible flow of things and then more of a steady state interchange of that data and that\u0027s really all that was as a presentation and with many slides that that really focus on the use cases here and as we just mentioned we\u0027ve got different security associations so we\u0027ve got a client to proxy one say a TLS or a quick security associate and went within the end-to-end we have another one there and indeed with with this kind of nature of HTTP proxy you can chain those proxies up so you might have in you know a worst case scenario "
  },
  {
    "startTime": "00:24:13",
    "text": "quick within quick within quick ad nauseam and and that might be something people want it might not be I don\u0027t want to focus too much on it but if people are interested in some of the visualizations some of the pros and cons just a flavor text on that ID I would encourage them to have a look at that presentation I did last time but if we\u0027re going to move on to the next slide coming away from that discussion I wanted to kind of really distill down the capability of what my focus was of the HTTP connect aspect of things so what what is it really what\u0027s it trying to do and my view is that it\u0027s it\u0027s a signal that is defined already that allows us to change the meaning of this client to save a hop from a it\u0027s alright good very quiet suddenly maybe you get closer to the mic okay yeah all talk louder so in HTTP 1.1 we just hold on you\u0027re getting more and more quite it\u0027s actually a problem yeah it might be might gain yeah can you like other we need to meet echo people or you can try to do something I don\u0027t know we can we good put the thing in me deco balance looked up volume level neutral greatest thing again is this any better no sorry you have to hold on [Music] yeah we already encountered contact with the meter your team if you can start talking again and we see what\u0027s happening okay so HP 1.1 we use the connect method to change the entirety of that HTTP connection in hate should be to if people aren\u0027t familiar it\u0027s the same method but it just reserves a stream for a particular Association and in HT to be quick it\u0027s it\u0027s a very similar mechanism but all it can do is reserve that stream for wrongful onward TCP use so this is kind of the the motivation for why I wanted to look at UDP proxying so we "
  },
  {
    "startTime": "00:27:14",
    "text": "could have a quick world that we can have UDP all the way through okay and so if anyone\u0027s familiar the the HTTP to WebSockets bootstrapping was was fairly recently standardized so this is our C eight four four one and this is a slight you know modification of what Connect means in order to enable that and there are few options there but you know Patrick McManus taking a view of the community decided that this was maybe the best way to do things so it\u0027s what it\u0027s trying to highlight is that\u0027s how things are done already and that\u0027s how I went into IDF 1ot but but having had some feedback and then seeing what was naturally happening in this space there\u0027s been a few things I\u0027ve seen no heared so if you move on to the next slide I just want to give it an overview these are kind of the the quick specific addendums that have happened in the meantime so some of the feedback is that these these new uses of stream if we\u0027re gonna reserve a http/2 or HP quick stream these are you know guaranteed delivery mechanisms with congestion and flow control and that actually there\u0027s use cases VDP that that may suffer from from those characteristics and that you might not be needed or impractical and and certainly you know I work in in video related things so unreliable delivery definitely has use cases here we don\u0027t want to be losing that capability just because we\u0027re tunneling so to that point both Ian sweat and Eric Kinnear and Tommy Paul II kind of both came up with this text dual ization of a message frame or a unreliable datagram extension for quick and that they\u0027re both very similar mechanisms just say is here\u0027s a frame type that can be sent within a quick connection context and it\u0027s it\u0027s good so I think there\u0027s has been further discussion and stuff going on they\u0027ll be presentation from Eric Tommy or David I\u0027m not sure exactly which one later this week at the quick session on this topic and there\u0027s some IDs there in the links I won\u0027t go into those I\u0027m not an expert but I think this is really good stuff and in this direction of travel and so I\u0027m really interested to see what happens this week on that I\u0027ve also had a lot of discussion or imprinted towards some of the stuff going on in tour and and looking at a case for using quick for tour and calling for a an end-to-end solution not something that just does hop-by-hop but to really get a better fit for quick for "
  },
  {
    "startTime": "00:30:16",
    "text": "tour that can improve some of the problems that they find with congestion control when it\u0027s not applied properly meanwhile we\u0027ve got Colin and you\u0027re looking at say real-time media over quick and what that might need from the quick transport itself again back towards these kind of unreliable deliveries whether that\u0027s a Datagram message or unreliable streams really trying to state some of the needs here not mandating the implementation of them and then a final point without any link here is is this idea of multiplexing different protocols so there\u0027s been work already in this area about how we might be able to multiplex different protocols at the UDP layer but recently is a bit of chatter in the quick space about how you might multiplex different application protocols so you know if you\u0027re doing something like alternative services could you say that this endpoint is offering HTTP and protocol other and that there\u0027d be some way to differentiate them within the quick transport which seems may be one way to do it or if you were able to assign specific meanings to streams or sub flows within the connection say or or to have these Datagram frames with a kind of sub protocol within them that might help avoid some of the practical problems there but it adds overhead because there\u0027s more framing those kinds of things but then finally just to draw some attention to the world of WebRTC and quick and taps and that is that there\u0027s been a bit of overlap say between different groups and and what they\u0027re trying to achieve and I think this is sort of been recognized in some of the mailing lists I just lurk on and so there\u0027ll be a bit of discussion on that in the tap session later this week I can find the agenda item exactly when I put these slides together but I\u0027m sure somebody can comment there towards that in the discussion so for about onto the next slide just to summarize everything the the IDS are both Ben and I presented at IETF 101 haven\u0027t changed so if you did read them they\u0027re still relevant we there\u0027s probably a few fix up from perspective but yeah that there as they are we\u0027re learning more stuff and there\u0027s more bit of momentum in this area which is a good thing and I\u0027m really keen to follow that on you know there\u0027s some related work going on be good to try and answer the question what is the problem exactly here that we\u0027re trying to solve the fall solutionizing it unfortunately I\u0027m not there in the "
  },
  {
    "startTime": "00:33:17",
    "text": "ITF this week I\u0027m a remote participant but if people have emails I\u0027d love to to follow that up and the thing I\u0027d like to kind of leave with is is can we continue to distill down things is there you know Katherine presented brilliantly stuff I would have said already so I try to commit at this from a different angle no is there is there some kind of features of multiplex flows within you know with an ability to pick congestion flow control as needs must or as desired within a single connection context that\u0027s always secure and that this is a really simple and performant way to initiate those flows with minimal overhead you know HTTP connect was one way to do it that requires round trips there might be a simpler way you know using more of a binary framing a native approach to these things that deliver some wins over the old ways of doing things and that having everything within one connection as opposed to distinct TCP or UDP connections to call them is there an ability ability to clearly relate those things have them more you know a higher barrier to entry to to track them or identify them but also make things easier from the application perspective that things that have a shared fate can can be cleanly toned down as and where needed and that\u0027s all I have okay thank you very much any questions on this point I actually go back to like one of your first lights for a second so if you haven\u0027t heard or read those two drafts please do so and provide transport feedbacks to the authors I think that would be really important I don\u0027t see anybody in the queue so Lucas if you want to join the discussion later you can join the media it\u0027s you again but thank you so far and we go to the next presentation I\u0027m going to talk about the impact of encryption on performance-enhancing proxies so in the olden days of TCP there used to be this family of little boxes called that I shouldn\u0027t know what what they are or if you want to refresh you know about them you might want to take a look at these to RFC\u0027s 31:35 3449 they\u0027re pretty comprehensive and in-depth analysis of "
  },
  {
    "startTime": "00:36:17",
    "text": "the whole space but in in a nutshell what the problems that they did is this box is solve is when you only have your your transport paths crossing one or more low-quality links and for example one without loss or a very variable latency or here yeah if you have highly asymmetric links for example with narrow upstream is the case of satellite then you put one of these boxes or two sometimes at both end of the of the weak link and that leave that it\u0027s splitters prove the TCP connection and perform a number of tricks that include ACK manipulation decimation reconstruction flow control manipulation header compression latencies plate and let it fix the problem then suggest to provide a concrete example of of these boxes what did they do in specific scenarios away I\u0027m coming with a mobile example but I suppose the satellite people would have you know hundreds of this example to provide in the discussion but but from a mobile perspective what what happens is that the often they the air interface phrases and then the upper layer see it\u0027s complete freeze of the of the channel because the there\u0027s a no congestive loss on the on the air and the and the lower link protocols in the 3gpp stack actively try to retransmit right so they operate on ten million roughly ten million trees by one two three times at 10-minute intervals and if the specific configuration so say your multipath fading situation or the obstacles doesn\u0027t within that short interval and what happens is that the the the freeze can last longer than the typical RT t and so the sender the TCP sender on on the other side of the world thinks that the path has lost the segment storage needs and this is using the P XI of this periods with transmission the losses being repaired then and then the other you have the other layer trying to repair again so completely waste wasted thing so what these boxes do in this context is they provide so what they do is they buffer data right from the sender they act the sender and then when the link is back to normal they smooth the data out to the receiver and and with this providing being pronounced matching right at the point where the mobile network in the wire link connect so without the pad the sender was probably protein so so you have a stolen the congestion winner or a reduction in collision and just in winners of the throughput and in general the group would decrease decrease so "
  },
  {
    "startTime": "00:39:19",
    "text": "these boxes are middleboxes of course so the typical caveat applies particularly optimize the current application at the expenses of the future applications and their precise behavior is not clearly specified right so that\u0027s the problem boxes they can break depending on how they are designed and built and operated and upgraded they can break the path badly but even more they can break paths only partially so for example if they if one of these middle boxes want to optimize always what happens is that it needs to understand the end-to-end semantics always and so if you are negotiating an optional bit of semantics on top of Europe there is the speaker nation and and and that guy doesn\u0027t understand that thing it will probably eat it up and this is very very it is precluded the EDD the information of transport wires being one of the major causes of ossification okay so so encrypted transport to D to the rescue if you have if you if your if your transport header is protected so for example if your transport is an encrypted transport or equivalently if you have a an encrypted and or authenticated encap for your for your transport that that means that the the PAP cannot do anything it does normally so it can do the other compression or actrix know our window segments not manipulation so the function are completely inhibited so we have this original problem that the pep soles say yeah problem one peps then peps create another problem then encryption solves this problem but doesn\u0027t so the other problem right so that the fee the top-level problem by itself a few questions to try and articulate a bit of discussion around this thing first of all is pep a valid approach still so in terms of the problems that it\u0027s all are these problems still relevant and if yes if these problems are still there can we solve the same problems we other techniques and if not or if yes but partially so if better are still needed so how does a modern pep look like from the perspective of the end points we know that it must be explained explicitly at this point in time because the it must have been a the security Association so it has to be visible to one or both end points and the second point is shoot the new transport take that into consideration at the same time doesn\u0027t seem to me that quick did this effort right but in particular the problem with quick is "
  },
  {
    "startTime": "00:42:19",
    "text": "that it collapses the two security Association the application level security association with the transport association is association so you cannot split the transport from the from the end-to-end and just close the loop with helium discussion there seems to be here space but that is worth exploring to understand what we can achieve with the hint and helium in this context and some research space in terms of to these two protocols we provide what we need from from the pet perspective so we are there providing the right primitives and if not what is needed and then the other thing which is more open problem for me is what is the interaction between the in there congestion controller so the condition controller from from from the end point to the episode the proxy and the any outer congested controller sorry vice versa and the other ND and the one from from the end points to the Obsidian from the end point from one point to the other end point in particular under diverse links and use a mobility models so this should be characterized properly before we can say ok this is a valid set of terms that we can use in the pepper context and third thing is one thing is it\u0027s nice in helium is this in band control channel that seems to be an interesting bit be used to exchange cross layer signals for example from 3gpp stack dip down and say in the air interface to to the transport that we very nice bathroom to provide these things yeah I think this is the discussion scheme that I wanted to provide hi Stuart Cheshire from Apple I had a minor point on one of your earlier slides I don\u0027t know which number it is you talked about typical round-trip time you talk about spurious retransmission there you go I wanted to point this out because this is a common misperception or maybe miss representational the way a transport protocol like quick or TCP works is it doesn\u0027t retransmit when the average round-trip time comes because if you think about it the round-trip time distribution is like a bail distribution or some shape of distribution and if you retransmitted every time you hit the average round-trip time on average you\u0027d be transferee transmitting too early 50 percent of the time so all of these "
  },
  {
    "startTime": "00:45:20",
    "text": "algorithms take the variance or the standard deviation into account so so if you have a link that is very variable that ought to be reflected in a larger standard deviation so that you have a broader bell curve you still should be tuning your retransmission timer to be two three standard deviations out so that there\u0027s false tree transformations are rare so now that\u0027s just one comment that are often often the way the salesmen who sell these performance in enhancing properties sell them is with this oversimplification of see how stupid TCP is we can fix it and the reality is not that simple my other observation is when ipv6 started rolling out in volume all the measurements confirmed that its performance was measurably better than ipv4 not twice as good but somewhere between 10 and 30% better performance and it\u0027s not it\u0027s hard to know for sure why our network is because the Internet but one of the speculations was that it performs better because none of the performance in the hansung proxy support ipv6 mr. Dawkins and speaking as a speaking as the former chair of the Pihl working group that produced the RFC on peps the day known that RC is 2001 most of the work was done significantly before I was published we could talk about why and like it seems like to me yeah I can have opinions about this but I think what I want to say here is that it seems like we could look we could talk about whether it what the right thing to do was every 20 years or so whether we needed to or not wait a second we\u0027ve been in between so we know hi all right can you hear me yes great so this is Ben Schwartz from jigsaw at Google and I wanted to agree and disagree with something that Thomas just said Thomas said that in a in a post PAP world or you know in a vision of pet for quick-like protocols the proxy has to be explicit I agree with that and he also said that it has to be explicit because it terminates the security Association at least that\u0027s what I heard and I think I disagree with that so I would like to I would like to propose that there are at least parts of this solution space where the security Association remains "
  },
  {
    "startTime": "00:48:22",
    "text": "end-to-end from from client to destination and there is something else going on that wraps around the around the encrypted transport and possibly introduces a second congestion controller in couples the to congestion controllers in the right way in a way that allows us to avoid terminating any any crypto from the from the end-to-end stream in the been so sorry yes this one when my mic boys get garbled I didn\u0027t want to imply that the end-to-end security Association is the read of the proxy on the contrary but it\u0027s there\u0027s an association that needs to be a terminated at the proxy and and then but it this doesn\u0027t have anything to do with the end to anything completely explicitly separate cool so then we agree on I also want to since I have the mic I want to just take this chance to say a little bit about this concept of explicit because I think there\u0027s you know we treat client often from the network perspective we treat the client as a monolith but clients also have components within them so you can imagine that I can imagine a world where apps for example aren\u0027t aware of the presence of this proxy but some deep system library or maybe even the kernel is aware of the presence of the proxy and it is making some adjustments in order to work Partin dude from f5 can you go to the next slide please I\u0027m sorry that whatever the question slide is there we go okay so I think the problems are still relevant these links still exist it is possible I mean there are certainly there\u0027s another way to approach it which is developing a a congestion control that is truly adaptable to all link types I think that\u0027s an open question if we have that or not but regarding the peps specifically and if they\u0027re needed so we\u0027ve been quick we\u0027ve already we\u0027ve you know we started with this no middleboxes approach we\u0027ve already bent the rules one and a half times well we\u0027ve already decided that that there must be some ability for stateless load balancers to do things and secondly work there\u0027s talk now about DDoS anti-ddos devices sending retry packets so we\u0027re trying to preserve this notion of explicitness is a couple other people have set rather than have it be transparent as it is in TCP land the other thing I\u0027ll say is this will not happen in v1 but there is talk about separating just chatter at this point about separating the keys of "
  },
  {
    "startTime": "00:51:23",
    "text": "between the transport stuff and the actual application traffic for reasons of diagnosing for a for the fact you can provide the the transport key to whoever is going to analyze your network problems without sacrificing your application security that might be a framework that would enable some sort of explicit TCP of sorry this some sort of explicit pep interference in in the network would the where the client to allow that could I ask a ad interrupt question is there anybody that\u0027s in line that\u0027s going to talk about specific questions on presentation or have we moved to open discussion you guys think you guys help specific on this guys they raise their hand I\u0027m just gonna I\u0027m just gonna poke the purpose wide this says we\u0027re on open open open discussion and gory Fairhurst thanks Spencer I\u0027m not sure with the answer to the question so I\u0027ll continue I was one of the original authors of one of the RFC\u0027s was put up and john-boy did the other and RFC leader and the PAP spec always said explicit was better so when when hilt madam talked about this they said experts it was better than implicit because then you know somebody\u0027s fiddling with stuff or doing things doesn\u0027t matter today I mean that\u0027s a good question so over the past few months we\u0027ve been trying quick over satellite links cuz we play with those among other things and then ninety percent of the traffic runs slower with quick currently just because probably quick was never designed really for satellite links with Bo D and RRM functions underneath now quick could be designed better and we could fix it here if we fix it here right Tom suggests what like yeah it\u0027ll be good if we don\u0027t fix it here then we got a problem because for some people ninety five percent of the traffic will be slower which makes quick undesirable so how are we gonna deal with this I mean this is times like an IETF activity I\u0027d really love to see it happen yeah I just like to echo that what what John said when he was talking to me back in London was that they were giving like an order of magnitude slower throughput right so testing them between quick and TCP so you know the easy answer there is just block UDP or just like quick you know and that\u0027s an algorithm and we were wondering if there might be better algorithms okay so coming back on that particular one and we got patch of three slaw john-boy who was using much higher speed capacity links hundred megabits which is "
  },
  {
    "startTime": "00:54:23",
    "text": "where we should be going so the problem gets worse as you get higher speed hey Colin Perkins so just to follow up quickly on that previous discussion I think we need to be a little careful drawing conclusions about quick performance compared to TCP performance at this stage because we\u0027re comparing very new unoptimized and unfinished quick implementations with TCP stacks I\u0027ve had 20 or 30 years of tuning so yes the quick performance will improve over time on the explicitness issue I\u0027d like to draw people\u0027s attention to the perc working group which is doing a multi-level encryption scheme to allow middleboxes to do semi trusted processing of some things which looks similar to someone I mean it\u0027s addressing a different problem but but it\u0027s in a way which seems very applicable to these yeah the proposals to allow the middle box is to do head of processing but not see the content the same ideas will probably apply to these sort of proxies as well so we have five minutes left I think we can cut the queue and please make sure that you stay in a few minutes well Lorenzo Cooley I am are the problems it solves irrelevant I mean yes I I wrote one of these for my home network because I I watch video over a 300 millisecond link you know so I had to write two of them put one on each end just like this says but and of course it only works with TCP now but to take a step back though if we go back to the previous two or three slides ago sorry which was be like - like what I wanted to come back was the the freeze is typically longer than the RTT that slide there that\u0027s right that so I admit and people are gonna start stuff at me because it sounds really stupid I submit that this is not a transport problem okay now this is an IP layer problem what we\u0027re trying to tell the sender is if you\u0027re curing packets to this destination they are gonna be delayed this has nothing to do with any particular transport session it\u0027s a queue management problem okay so if you know why is this not done at the why do you have to break the encryption why do you have to do it in an individual transport session you just need bear with me an ICMP message that tells the source hey this thing is backed up wait don\u0027t take this as loss right and it\u0027s just a hint right so you know like I said sounds really stupid think about it message existed and we "
  },
  {
    "startTime": "00:57:24",
    "text": "duplicated it yeah I agree but why but like we should look at carefully why we deprecated it and whether the reasons is still current today now that we know that you know middle boxes have really really serious considerations for ossification and for security and also on with that decision may not be the right decision anymore and we should if the facts of change we should change our minds right and so that to me you know one of the key things that you\u0027re just pointing to there is that this is a conversation we need we need to have and we need to not have it while we\u0027re trying to standardize a specific protocol so that you know that was the point in bringing this to TSP area so we could have the broader conversation with people who are not trying to finish quick in mumble months thank you for the observation and please talk to me in the hall about it cuz I got more to say Michael Abraham\u0027s can we go back to the asking slight or actually it might might go here as well I just like to point out that some middle boxes today there and why to use set MSS does MSS clamping on TCP for instance this is a signal from a network device saying I think you should do this so this is there are a few of these kind of signals the lorenzo\u0027s point here was was another one is sometimes she actually want devices on the way to be able to put bits or stuff into the packet as it goes by so having in transport header encryption where the network knows nothing well actually sometimes it might be good if you know something that the never can tell you something in the packet as it goes by so when you when you design a transport protocol I actually think there should there should be some knepper should be able to influence something as a fact it goes by and I think this should be something that is done in all transport protocols there was a tunneling protocol bus like a few years of back iso where which i explicit like this part the network just can see and the Old West is encrypted I think this is a good thing hi Gigi super Hughes I work for a satellite operator so I mean we don\u0027t want to have a MIDI box of path I mean it caused a money or resources but the problem is as you encrypt a trophy header and it\u0027s the performance degree significantly so with currently and a satellite show we show that with the TCB path the transfer ray can be up to 200 megabit per second if you run quick with the current congestion window or 2000 packet you can do the limited and it turns out that only 20 megabits per second it\u0027s a one order of magnitude slower so I did the solution I mean we "
  },
  {
    "startTime": "01:00:24",
    "text": "don\u0027t want pair for MIDI boxes the solution should be I mean Chris should be designed such that it works for all types of link including a satellite link satellite RTT even the physical layer delay is 600 milliseconds but in a busy hour it can be a strong at 1 second and there\u0027s two issues one is the congestion window and you can fix with the adaptive congestion window you that mm packet is not enough the second thing is a packet loss it\u0027s too late I mean RTG so I\u0027m the best for us is quits can accommodate a design such a I\u0027ve also worked for satellite link - thank you so we did cut the cue we\u0027re at the end of the time of our session we would quickly like to announce before everybody\u0027s leaving that we have office hours later this week which are on the slide now so if you want to talk to two of us you can do this later and if and if you want to if anybody wanted to talk to us about possible BCPs on peps or anything like that just in case anything like that entered your mind in the last hour we might both be very interested in that conversation so if you really want to go on with questions we can do that but like the break office officially started now yeah and I actually need to leave but talk amongst yourselves you got all week alright well people are looking at me so I\u0027m gonna make my comments anyways you can get up and leave I I my feelings won\u0027t be hurt Aaron will always do the right thing whatever that is so I want thank Orenda for his comments because it made me think that one thing that\u0027s really changed since we did this 20 years ago is queueing in the network is getting smaller you know buffer bloat I think that\u0027s a substantial change you know and that that really made the problem worse in the TCP sad days another thing that we\u0027ve been talking about more recently that\u0027s relevant to this is the spud PRG notion of you know signaling from the network to the ancestor which i think is a little bit of what lorenzo was hinting at or at least it\u0027s related to it and so i think this might be a topic to take up in the PRG but i think i think that this is a good time to revisit this topic yet again and so my ass to the ADEs is you figure out where the best place to have the conversation is so that we don\u0027t have to have it in every working group this week or indefinitely we would be unhurt by the possibility that this conversation happened on the CSD area list to is to at least start there sure Nalini Elkins I\u0027m gonna keep it really brief come to IP p.m. because our PD M\u0026M PDM or really concentrates on this so advertise all right Aaron made me get up a lot of second so wanna I go back what what Stewart said earlier right so that nobody\u0027s debating that peps help in "
  },
  {
    "startTime": "01:03:25",
    "text": "certain cases where it is there\u0027s ample evidence if that nicotine you to help the problem is that many of them get put in and then they rot and so you do not know whether there\u0027s a pep that actually helps you on this path or where there is a pep that limits your performance on this path right and that\u0027s sort of the fundamental problem and and if we can solve that right I think people would be very happy to talk more what Creek and pep can do in the future but but you can\u0027t no really right and everybody wants to believe that the network is well-managed and these things are carefully orchestrated do not not all of them you know this so large an explicit way to configure your pepper use cover your pen and touch to your pet would be the solution for this because you can disable that the the explicitness of the pepper yeah as marco coil one of the quarters to report to report the one of the key messages that we made there is that tips if you use the news should make them explicit it\u0027s great i still even if i know that it explicit I don\u0027t know whether I should use it or not well you can you can measure so I think we are in the break right now so if you want to keep discussing just thank you very much everybody see you later this week for sure "
  }
]