[
  {
    "startTime": "00:00:03",
    "text": "Last session of the day is it? Well, there's a few Tiena so will be here in the room after us Wow All right, I'm going to take notes All right, can you? see how many? do we have anybody remote beside you? Yes, we have Austin is here. Oh, hey, Austin We have a couple of other people, yes. Okay oh, yeah, 12, and we got five. Okay all right Thank you Mark is time slicing, I guess I'm going to let you do the end Rich, because you've probably heard it 101 times and know it off my heart"
  },
  {
    "startTime": "00:02:09",
    "text": "All right let me get chat chat. Did you say you want me to do the intro? Please. Okay All right HTTPAPI and I scared them off All right. Two minutes after, we'll see Dr. Lucas wants to know if you're drinking blue ink Mountain Dew Liberty Chill 50 flavors. All right Okay we'll get started. Welcome to the beach API group If you haven't scanned the QR code, it's in the back of the room there I'll be taking minutes rich salz, Chair, Darrell, remote code co-chair. The session is being recorded Okay, next slide, please This is the note well it is a reminder of a pointer to all the policies that you agreed to when you register. Just like the you know just like you accepted the online license when you download it some software. This is the, again, it's just a reminder. You should have probably looked at them by now. Again it was part of the registration process Next page Okay, meeting tips"
  },
  {
    "startTime": "00:04:00",
    "text": "probably don't need them by now we're three what's today, Thursday, four fits four-fits through the meeting day, okay resources again, probably don't need these now, but it's part of the standard package of chair slides that we get various links. If you have a problem, email supported IE IETF.org, see the people on the third floor, you know in the blue shirts, basically next the mis trivia. So we just did the note well, again, that's a reminder of the policies Meeting tips, minute taker, agenda bashing I will do the I'll take the minutes and then post them to the data track and to the IETF list, I mean to the working group mailing list brief the notes are on the link there and second bullet under administrivia they all sort of follow the same scheme so if you know the working group acronym hello, Sean, you can find the working the notes the link template header is in the RFC Editor Q queue deprecation header field We sent it to our AD franchise we got it's what midnight over there so she's probably not here. We got some feedback Oh, is she? Sorry. She was. Yeah, sorry Didn't mean to short change you, Francesca deprecation, we got some feedback back. Sanjay, the author has made some changes and we'll read resubmit a new draft and put it on forward to the IESG API catalog, I think we have what was, I'm just looking for the mail Kevin Smith there is one we have the"
  },
  {
    "startTime": "00:06:03",
    "text": "shepherds write-up that Darrell did. The shepherd's write-up is the supporting document that goes along with the draft for IESG to review and so on. There was one knit about a long line length. We can fix that in the editorial phase at the end So that's it for Kevin. He can't make it hear from London API catalog we're going to send on it has been sent on to the AD Five lines are too long, okay, deprecation header we have, I think Sanjay has made fixes for all but one issue We just left it open that. Let's the IESG worry about it it says it says it says deprecation that a server should would lowercase, perform the same as a non-deprecated API We'll figure out if there needs to be wording changes after further review Those two other items, the waiting on response I added is a new status, just because they have been long open items, and I believe you, Rich, pinged a month or so ago, sort of saying, is this okay? Are we all? happy? And there hasn't yet been a response. So i'm basically assuming these items are closed unless some shows up at the last minute and say, wait, wait, wait, hold on Yeah, I think once we get the IESG reviews back, we can then go through the issues list and see what needs to be open to closed them all. Okay next page Item potency key, this has a bunch of issues but there is really only one that we need to discuss. I don't think we'll come to any consensus here, given the small number of attendees. And I don't"
  },
  {
    "startTime": "00:08:00",
    "text": "think any of those who participated are present The issue is if you have an intermediate between the requester, the client, and the origin can that intermediate do all of the idempotency? requirements? I think this came up because striped does that they have an item potency server which obviously that kind of thing is real important in payment system where you want to make sure you don't get double or triple charged so they have a general service that handles, you know, at most once semantic And so the question is what changes need to be? made? There's a very extent discussion I don't remember the issue number, but we will put it in the minutes so we would like the working group to let's see if we can close this issue off by, you know, by September 1st. I guess that's a deadline that we'll try to do Does anybody here have any opinions on? item, item potency? and an intermediate doing the services It's like a complicated thing. Okay, Austin you're up. All right, Marius, great good to see you guys guys I think I had some comments on that was I don't need to repeat here, but Your audio is a little low. There we go It helps have hit the mic switch I had some comments on that thread, which I don't need to repeat here, but I think there's a, my question with the spec is mostly I think, what is the scope of it going to be?"
  },
  {
    "startTime": "00:10:00",
    "text": "You know, we this is something that could easily get growing scope creep, you know, to new HD to be? You know, this is something that could easily get growing scope creep, you know, to new HTTP methods, maybe if we need it, someone on the HTTP working group just suggested, you know, if we need a IDM potent post method, like its own method. But I would like to say suggest maybe, you know, we should figure up and prioritize what is the scope of the work on this going to be you know maybe it should be just constrained to to to like defining it media type independent parameter for um the application servers Perhaps if you have a post end point that accepts either ping images or JSON blobs, that's a case where it wouldn't really be appropriate to have a ID and potency key field in your post blob So that would help determine if this intermediate box would be in the scope of the spec or not Did you say that's independent? of whether or not the intermediate boxes in it? or I mean the left? Yeah say that's independent of whether or not the intermediate boxes in it, or I mean, if, depending on what? because I don't, I haven't seen a very good explanation of what the scope is you know, I don't they're, so the original doc document, I can answer that question. The original document and up until recently, it was client and server, no intermediates, no generic service of item potency enabled Somebody opened an issue, I forget the number, that says, well, could we support this because it's in use? in many places about the idea that you have an item potency server that would handle all of that work?"
  },
  {
    "startTime": "00:12:00",
    "text": "before forwarding the new requests onto the order? origin Okay, yeah So this is an additional scope and the question, you know, it's got a fairly, lengthy discussion in GitHub um i just want to, we just want to draw it to a close probably not necessarily here in this room on the list, but if people have opinions they want to express now as a good time to do so And I'll also point out there is some overlap with IDMPOTEN have opinions they want to express now as a good time to do so. And I'll also point out there is some overlap with ID and potency key and, for example, the braid work that's being taken up in each deep working group and some other things like that. So I do the braidwork that's being taken up in each deep working group and some other things like that so uh i do foresee a little bit of a little bit more scope creep coming up just to put that on the radar Okay. Did you say braid or how do you spell? Yeah, just braid braid Because that deals with a version numbers and things. And yeah Hi everybody. I'm a bit surprised to hear that Stripe used the intermediary approach to implement the right impotency as I would have imagined that financial transactions require you to implement item potency at a much more fine or ingrained level in your application logic But if that's working, that's great for them And overall, I think for many applications that don't handle such critical transactions, implementing item post them. And overall, I think for many applications that don't handle such critical transactions, implementing item potency via an intermediary is a really viable and practical solution So I would be in favor of including those solutions into the draft"
  },
  {
    "startTime": "00:14:00",
    "text": "I think that would be a great change to allow also those implementations or to consider them That's just my point on this question. So you are in favor of including them or are against including them? I am in favor of including those in the scope Thanks scope So taking chair hat off I think a big chunk of the feedback on this spec was around the fact that it didn't really define an intro interoperable solution. It requires very heavily on proof pre-understanding between client and server as to how these things were going to work And we expanded scope when we introduced the idea of being able to have a client just arbitrarily send it, even if it doesn't know whether the server can support item potency And I think going even further and trying to enable this middleware type solution just requires a whole bunch of knowledge about the back end. I'm creating a resource. Do I have to provide an identifier for it? If the back end assumes that it's going to provide its own identifier, that going to be quite difficult for an interview to know which way around that goes So I just, I think we're just going to get a lot more scope creep and we're not going to be able to achieve our original objective of trying to produce"
  },
  {
    "startTime": "00:16:00",
    "text": "something that will enable interoperable solution if we just keep adding more capability So I would be a vote to no, not to try and solve this into intermediate service problem Thank you All right Anyone else have comments? or on my interpretation of the GitHub issue? All right, what we'll do is we will post a summary and a pointer to the mailing list and allow a week or two, a couple weeks to conclude and then we'll make a consensus call as to what the working group, you know, wants to support Thank you all Next slide Okay Austin, do you want to say some things about bite range? Yes I would be happy to. Bite range patch as you probably know, it's a media type just to write to specific ranges of an existing file or maybe even create a new file It's sort of the inverse of a partial get So you should be able to do a partial patch and then do a partial get and get that back the same contents I posted a draft before the deadline this time with some changes mostly around how you do indeterminate length uploads So that sort of clarifies that the upload is not considered complete by the server until it knows the final length of the document because the client doesn't necessarily have to provide the complete length at the beginning So you can provide that complete length"
  },
  {
    "startTime": "00:18:00",
    "text": "at the end if you're streaming an unknown length document. Once you hit the end, then you can tell the server, by the way, the end is the last bite I just uploaded. And I also have a web browser and server implementation which may be handy in some tests which I have to publish so I hoped to get that done a little bit sooner but also, I saw the INA consideration comment. So I have a revision that can go out just changing the title of that section heading And other than that, just a few questions and things I don't particularly like the name of the trend transaction preference or the values for that. So if anyone would like to bike shed some other ideas for that, that would be fantastic and general ideas for if this integrates well with reasonable uploads well with reasonable uploads and braid that that would be fantastic and general ideas for if this integrates well with reasonable uploads and braid and other ideas in the going around in the HTTP environment right now Any questions? mike bishop So I saw the bailing list there was some discussion of other units other than bytes for this And I wasn't deeply involved in the pieces of that but I can say that in previous discretion of the HDP working group we have attempted to use other units than bytes and they typically don't work very well with deployed servers So I like your direction of match the syntax so that other units might be used but in practice it will almost always be bytes If you could drive new usage that would be interesting"
  },
  {
    "startTime": "00:20:03",
    "text": "I will say that one area where we have wanted to use a unit other than bytes in the past is with content encoding where I get request, arrange request for something that is, say, G zipped, is doing bytes inside the GZP representation And sometimes people would like to be able to retrieve bite offsets of the uncompressed thing and there's not really a way to do that in the HTTP space so I suspect Patch is not going to work very well with GZIP anyway. So you're probably acting on the actual resource as it is. That may not be that's actually an interesting point definitely the actual resource as it is that may not be that's actually an interesting point I've never thought of that before yeah Thank you Marius? Yes don't want to repeat my comment from the mailing list regarding the range units, but just want to point out if the draft continues supporting different range units it might be worth renaming it, right? Because that's not for bytes only anymore but maybe a bit more generic name Yeah um that is open to change actually i was also just thinking the name of the draft could even be renamed to emphasize its uses rather than how it's being implemented You know, maybe rename it to partial rights or something for sure"
  },
  {
    "startTime": "00:22:00",
    "text": "Okay, so your plan is to post a new draft at some point and then post maybe post your questions to the list Would you do that? Yeah Okay Thank you. Thank you So that last issue on this slide was just a call out that we got a early review from SecDear of the authentication link the repo in GitHub for authentication link has no open issues on it so if you have opinions on it, that's where you go open issues Yeah, we should put the sectia review into the issues list because they were Okay. Ben found problems. I can ask him to it. Yeah we'll put that in yeah Ben why my journal? blank on his last name but yes Benjamin we got it last minute early security directory review from him Interestingly, I was the next one on the queue, and Tara decided not to give me the draft Okay Okay, so that brings us to our next slide uh link hints there are a number of open issues on this although I don't believe I saw a whole lot of activity is Mars around to comment? on progress No, I don't believe he's a elsewhere. Okay Okay, well then moving on So this"
  },
  {
    "startTime": "00:24:00",
    "text": "brings us to the media type registration for the Open API MediaTal type, and Jason schema We are trying to move the Rest API one forward. Some work has been done on that for the Open API specification, the blocking issue with regards to security considerations as been resolved. I believe this draft is currently expired. We need to get an update to that But I don't believe there are any real blocking issues other than possibly thoughts around suffixes. And if any of you were in the meeting the other day media man about suffix there is some questions about the future of suffixes so it's kind of put about the future of suffixes so it's kind of putting up in the air whether or not we should register and open the API plus Jason and an open API plus YAML and whether we should have an open API that doesn't have a suffix and whilst there is some uncertainty around the future suffix, it does beg the question as to what is the best step forward with the open API registration The Jason Schema one is bogged down in a bunch of other more challenging issues so we're going to try and get the Open API one out first Okay. So what are you going to do with that? open API and the suffixes? Do you know? yet? No"
  },
  {
    "startTime": "00:26:00",
    "text": "I'm not sure waiting for suffixes to be resolved is the right solution either because that been a little bit of an ongoing issue But if anybody has any opinions as to whether or not they think there should be an application slash open API without suffix or whether we should only have things with suffix i would love to hear opinions Okay moving on Yes Removing chair hat I have taken over from Roberto on the rate limit headers I unfortunately online Austin, didn't manage to get a draft in in time I have performed, done a significant number of updates that are currently in a PR to address comments from previous call meeting There is now a quota unit property. We now have a way of specific a scope The scope property is currently called a partition key with the concept that whenever you define some kind of quota policy there is some kind of partition of how much that quota is a available, depending on who the client is what resource they're accessing, who the user is, who's using that using that particular application The real, this is, quite a common pattern on the server side for doing rate limiting where some kind of key will be constructed"
  },
  {
    "startTime": "00:28:00",
    "text": "in order to be able to uniquely track the use and what is remaining What has never existed in the past is a way of communicating that key back down to the client so that the client can predictively say, oh, I'm by about to make a request that has this particular partition key and therefore I know how much is remaining for this particular partition key Previously, the idea of using scope had or actually implementing in the spec, the notion of scope had been kind of put off for a future or it was, well, we'll let people use extensions to do that But based on a bunch of conversations, I think that might be one of the reasons why we don't see a lot of generic implementations because clients can't do anything predictively in order to limit requests because they have no idea whether it's going to be rate limited or not because they don't know which partition a particular request falls into So hopefully I will finish writing that up fairly soon and I would really approve feedback around there. I think the biggest question in my mind is this partition key is made up of a bunch of different values And I don't know how to communicate those set of values to a client in the right way So that's what I'm going to be looking for a bunch of feedback on Can I ask for a fortnight? unit? The latest proposal is a"
  },
  {
    "startTime": "00:30:00",
    "text": "registry. So there would be a registry of quota units Okay Okay finish my excuses for their right limiting movie on to somebody who's done some work Marius Yes i guess i have to stop sharing right yes there we go i have stopped sharing sharing I believe you can now share your... There it share your there you go yeah okay um yeah you very much this is a brief presentation of some work regarding problems types for digest fields that we do together with lucas pardue and also quite some involvement from Roberto Poli although he's not here today to briefly freshen up, Digest feels is a pretty real RFC that allows especially requests to include integrity fields that then contain one or multiple digests. In theory, this works on any message, so also responses, but for this work, we're particularly looking at requests There's the representation diaries header for representation data and content digest for the message content And on the right hand side we have one example where a client might send a put request and along the request content, it also includes the representation digest, which is a shah 256 of the message content or the represent And this is pretty handy the server can validate it, they can make sure that they're"
  },
  {
    "startTime": "00:32:00",
    "text": "talking about the same representation But whenever there's a problem arises with this, for example, let's assume the digest doesn't match the representation that the server receives there is no standardized way of reporting this problem back to decline And this was intended left out of the RFC because it didn't want to specify just want to specify a method of communicating digest but not how to handle those However, if a server now wants to implement this, there's no really standardized way of reporting those problems back if they want to use it standardized approach Luckily, we nowadays also have the problem details RFC, or a new version thereof which provides a machinable machine readable description of problems that can either be encoded in JSON or XML. One example response we see on a the right-hand side, in bold we see the custom content type that's used for this it's a jason object in this case and includes a few interesting details There's the type, which is a unique identifier for the problem at hand For example, in this case it's about an entity being out of credit It also includes a title and additional details like what was the balance and was requested, stuff like this So really handy format And this is also applicable to our situation So we can use those problem details for communicating problems related to integrity checking. So for example, on the left and side we have a request. It's similar as before we see a put request, but in the context you can see there's a few bold values"
  },
  {
    "startTime": "00:34:00",
    "text": "indicating that the content was changed somehow by somebody, some entity, and now the content doesn't match the representation digest anymore And then the server, hopefully, detects this and can then respond with a problem detail. We have a type for now that we propose about a mismatching digest value and we can then use the additional members of a problem detail to provide more context of this problem So what was the algorithm that was used? Because in theory, there may be multiple digest in the request. What was the digest that the request provided? But what was the digest? that the server calculated? This can be really handy for debugging to figure out, okay, what was the actual value? that the server received or computed that digest? on? So yeah, this is an example response. This is just one of the problem details that we have thought of But overall, with this draft, the idea was to define a small number of high level problem types. So for now, we've thought about mismatching digest value about reporting that the server might not support an algorithm that the client requested or maybe about an invalid digest value So, for example, the digest generated by shah five, always has like a specific length If the length doesn't match, you probably don't have a SHAR SHA-5-1-2 There might also be other problems details. Some of those might not be specific enough to the server own problem type. But the general idea is that those are just building blocks"
  },
  {
    "startTime": "00:36:00",
    "text": "for other work, either inside the IETF or outside People can then use them. People can require them to be used in specific cases We don't want to force people to use digest a specific way. We just want to provide a set of problem details that they can use if they want to use integrity fields in their applications There might also be a some interest in defining problem types for HTTP signatures because it touches on similar topics with alcohol rhythms and signatures not matching so maybe that's also a sensible extension, but we'll see where this goes. But yeah, this is the idea we had, and now there's the question to the working group, whether this is something of interest that this working group would like to consider or if there's any other feedback on this topic So you also presented this at HTTP, right? I didn't present it there I just posted on a mailing list. Okay But there was no dedicated presentation All right. I just wondered we can avoid stepping on each other's toes, but I just wondered if you know, if they were clamoring and said, yeah, yeah, we want to do this, then we'd let them do it. But if, you know, it hasn't been you have a preference as to where you want to see this It's a pretty good point I thought about this as well. The I just fields is a product of the H.S BIS working group, if I recall correctly But this feels to touch a bit more on the API side. So I can imagine this belonging into the API working group a bit more Okay, so just a couple of questions. Could you just go back to the previous slide?"
  },
  {
    "startTime": "00:38:00",
    "text": "Yes Maybe I'm missing something, but you tell me it's a miss mismatching Digest value, but you don't specify whether it was in the representation digest or the content digest, but you do tell me the algorithm but the algorithm is in the digest header It would seem like it would be the other way around that you'd want to tell me which digest it was and you don't need to tell me which algorithm It's a good point that we could probably also include information where that was the content or representation digest, a pretty good one The motivation behind the algorithm was that in each digest header field can contain multiple different algorithms. So you can provide SHA-256 as well as SHA-256 And then this server can report which of those digest identified by the algorithm was not matching. Okay But we would probably also benefit from a field for either content or presentation presentation Okay. And so the only other question I have is I mean, problem types of themselves are an IANA registry So is the, is the intent? of writing or the desire? to write an RFC here basically just to formalize the description of those parameters, those additional parameters? that are in the problem type? Yes. Okay Cool. Thank you. Thank you Lucas? Yeah, I as a co-author here, I don't have much more to add than Marys already spoke to, but"
  },
  {
    "startTime": "00:40:00",
    "text": "I will. So with the signatures draft in particular, I wasn't sure how much this working group was aware of that work So that's an open question I've got I spoke to justin richer, one of the co- co-authors of the signals of draft earlier in the week before I got ill. And Maris and I had spoken to him off list as well effectively what you have is that this represent these integrity digests are good at protecting message content but those head of fields themselves that carry the digest could be manipulated. So if you did have something in the middle in the path it could change the things. The signatures draft explains how you can protect HTTP metadata so the head of fields themselves and sign them and how different parties, adding them or changing them on all sorts of clever stuff both of the drafts kind of take the approach of creating these building blocks and being unspecific about what to do when validation phase failures happen. And so the discussion that we were having is whether we do this as kind of a joint effort of defining some low-level building blocks for the kinds of failures that are like to happen for people. We don't specify what they do with those, but that they don't have to go and reinvent the wheel and think through exactly the kind of question you just said, Daryl, which is, I'll do this Oh, no, it didn't quite work because now my deployment works slightly different to somebody else um don't think it's that much work um when we should do the work as is kind of another open question I have, but it would help in some of the scenarios we're having in HDTP on the resumable uploads work And so, you know, maybe they should be working group is a better place for doing that but I kind of get the sense that people who are working on signatures and digest and using those working at like an application"
  },
  {
    "startTime": "00:42:03",
    "text": "level way above either of these work groups. They're going and specifying, you know, open API based banking work an application level way above either of these working groups they're going and specifying you know open API based banking workflows and stuff like that so trying to effectively get the best venue to encourage those to participate and give us some feedback if these standardized problems are used But I think that's what we'd be looking for Well, and this is the work group that did the HP problem Biz, at least, right? So registering problems that correspond to HP problems seems like a reasonable location to do here here Just a quick poll of the room and online do people feel, have any strong opinions? yes no about opinion yet on whether we should adopt this cage match with the HTTP chairs to see who gets to adopt? it? Yeah, Charles okay um markus amend Lucas I think we can make a call for adoption on the mailing list. This seems like a neutral fit here but like you guys were pointing out, it also seems like it could fit in the HTTP group, although maybe a little less naturally If it's okay, if you're fine with HTTP API, then we'll make a call for adoption and encourage people to read the doc. It's pretty short It's just a few semantics on adding a new entry to the registry Yeah, Lucas I think that'd be reasonable for sure I would like us to consider whether signatures should be in scope for inclusion or not And when I spoke to justin richer in the week,"
  },
  {
    "startTime": "00:44:00",
    "text": "I guess I wasn't sure if this group is familiar with that work either and that maybe what might help is if you know Justin could come and give his regular short feel about what that protocol does, you know, which might help answer the question. Or even if we don't need that ahead of adopting something, we could do it next time So make sure people really understand what we're trying to do Yeah, I think that would be really good if we could get either you know either a point well a pointer to the doc on the on our mailing list and also consider having him present at the next time in Dublin to talk and whether it's you know one small whether it's two small documents or one slightly less small document, I don't think it matters very much much But yeah, okay, so we will do a call for adoption starting next week And I encourage people on the list to read it. Anybody opposed? Austin, go ahead Oh, yeah, not in opposition by any means, quite the opposite. This is seems very well thought out, and it makes me wonder if there might be, if maybe after this as like, if this is an experiment sort of, if there might be opportunity for taking this idea to other HTTP failure modes like you know if I make the wrong kind of post request with an unexpected content type or something That might actually have a standard header, but there's some other things in HTTP that don't have standard ways of reporting. This is exactly what went wrong And maybe that would also be in scope for the working group here here Yeah, we can talk to Francesca because they're both in her area and C"
  },
  {
    "startTime": "00:46:00",
    "text": "but sure I'm not opposed. I mean, we've got a lot of documents coming out of the pipeline so let's put some more stuff in Okay Thank you Marius. Yes, thank you Thank you as well I would re-share my slides but the slide says AOB on it. So I'm not going to bother Which leaves us to, does anybody have any other business? Nobody in the room Nobody in the chat All right. Thank you We'll probably request next time the same hour. See, jonathan kua know, jonathan kua talk to Phil. Thank you all very much for coming Enjoy the rest of the week and see you online and in Dublin And everybody say happy birthday to my co-chair because it was his birthday Saturday Saturday Giving is optional. Okay definitely. I'm going to go have a beer now. Good night folks. Thank you. Bye thank you everybody"
  }
]
