[
  {
    "startTime": "00:01:40",
    "text": "is Monday yeah all right for the people who are remote uh can we get a confirmation that the audio is coming through"
  },
  {
    "startTime": "00:02:06",
    "text": "hello that bodes poorly oh we have gory hello that works brilliant thank you for joining us okay so we have our other edmer chair uh or program lead rather you know okay I think we're good to get started um and I think we're scheduled until 9 20. we want to be respectful people's time going to the next sessions Etc um you can you can join oh yeah I guess there's not a on-site cueing tool it's fine I we we don't normally do a blue sheet for program meetings all right uh welcome everyone to our meeting of uh EDM the evolvability deployability and maintainability IAB program um so just as a recapture some of the work that we've done in this program over the past um uh mainly been focused around a couple documents that Martin had actually started previously we had our uh use it or lose it uh draft uh that talked about the importance of active use and mention things like greasing that I think are still coming to the discussion today and then very recently we finished up work on the protocol maintenance draft and we've had some Lively discussions along the way but I'm happy with how uh we have improved that document some of the other stuff we've done is trying to work on"
  },
  {
    "startTime": "00:04:00",
    "text": "how can we help encourage deployability via implementation testing and understanding status and tracking and that relates to some of the stuff that Charles is going to talk about um we've done things you know some minor initial steps like you know adding tags to data tracker so you can track implementations Etc um but I think we want to continue that discussion so today uh for the agenda we don't have any slides so this is meant to be very much it's an open discussion so we can kind of go around and talk about things but the kind of three high-level topics that I wanted to cover were uh first kind of continuing discussion we had last time in a virtual meeting about greasing and just kind of understanding you know where are we at with it is there anything that we can say about how effective it's being um or if there are useful things that can be done to understand what are the right ways to use in best practices beyond what was said in the user or lose it draft uh there's another topic that I don't know oh Lucas you're here um another topic that Lucas and I have been chatting about and we said ah this may be interesting to raise up to EDM um talking about you know how we validate kind of our Intrepid deployments in different types of network conditions and how that can reveal different sorts of bugs and then we also have an update from Charles who's written a document on how do we find code in seven so we want to reserve the last that's you know 20 minutes or so for that discussion so if that sounds good dude oh yeah you go go for it yep and just to remind everyone the note well applies we don't have it up on the slide but it's never a big enough font that you can read it anyway as a reminder everything that you say in"
  },
  {
    "startTime": "00:06:01",
    "text": "this meeting is covered by the iitf.well which means that the IPR policy applies and the code of conduct applies so as usual be nice to one another and have a friendly discussion even you Colin mm-hmm all right um so let's get started with uh the greasing discussion I'll just try to summarize what we talked about um on our last call um and then I have a couple thoughts and then let's just kind of go around and chime in what we think and tell me where I'm totally off base so uh last time I've kind of been raising some questions um so specific degreasing so greasing um because everyone's familiar with what we're talking about for greasing yes I imagine so I would say 9170 just go and read it yeah there you go um for the remote folks that was RFC 9170 if you want to be more familiar with TLS Greece exactly um so last time we were talking about you know what protocols are actually using greasing and I have actually defined it um we talked about you know are there ones that are not doing it that maybe should start doing it um we raised the question of how do we measure if greasing is actually effective or working and we talked about some of the limitations of you know there there's only really a certain category of issues and ossification bugs that greasing can help with and there are lots of other things that it does not um some of the specific examples here uh I think we talked about things like MLS which has been kind of you know recently completed I don't think in that uh document or in the MLS documents they have anything explicitly about greasing but something interesting where potentially they should have some reason or we could"
  },
  {
    "startTime": "00:08:01",
    "text": "have some extra documents that talk about how to add it I think it's important to note from that previous discussion that you know greasing code points specifically of using random values that you send every now and then um is only one dimension of greasing uh there are other things like the order that you do of you know TLS extensions other types of Behavioral changes which also are important to Greece if you want to prevent ossification and we also talk about the fact that uh some categories of greasing um like if you're greasing fragmentation can be very harmful to Performance and not something that you actually want to do in practice for real users and so that does put some limitations on it so I think the question that I have and we can you know people can discuss any part of this they want but is you know is there something beyond what we already have in TLS documents or in user to lose it that would be useful to write down as advisor Insight essentially some guidelines for greasing effectively um that can make recommendations for how we do uh allocation of code points if that is what we're doing explaining that it's not just about allocation of code points that you want to change other behaviors Etc when you are greasing implementations this could be something potentially that we could refer to instead of just pointing people back to the TLs document if we're trying to tell them to use this in lots of other ways um we can also Point people to use it or lose it but it's not quite as Direct on practical advice for just specific protocols so what do people think you can just grab a mic or if you're a remote you can jump in the queue David so I just had some thought that popped into my head because I kind of forgot about this one last time we talked or it"
  },
  {
    "startTime": "00:10:00",
    "text": "probably hadn't happened yet uh was so MLS is almost out the door and when we had our ADM call we noticed uh we were talking about Greece and we went and looked at Ed at MLS and they didn't have any Greece and we had a conversation with the authors and they they added it which I think is really good but it took a lot of back and forth to kind of explain exactly when and how you grease like there's a GitHub issue um and I realized that for folks here that have implemented Greece we know exactly like how to do it what it means but it is not crystal clear and I think the the TLs document doesn't explain in all of the details such as um like you do not treat grease code points differently on the receiver as a fundamental value of Greece and that's not as crystal clear as it could be so I think there might be some value in in adding that personally or as in in writing that up somewhere what do you mean specifically by not treating it differently um so when the part of the conversation they were saying so you're saying that in our code if like if value equals zero X grease value then you know break out of your switch Loop and continue which is the opposite of what you want for Greece um and so uh tools like j3 do exactly that but also they're holding it wrong and that's kind of maybe we don't need to dive into that detail because their whole point is not to implement the protocol properly go ahead Martin you just mentioned ja3 I think that's probably that's enough but I think that that fits pretty well with my experience here as well in that um I've I've reviewed a number of changes that involve Greece at some level and often it's the people implementing"
  },
  {
    "startTime": "00:12:02",
    "text": "Greece that write the code and the tests and the tests need to know about Greece but the code doesn't and often what happens is the code is taught about Greece as well not just to generate it but to to do something special and receipt and and I just read through 9170 and it unfortunately does not address this point either foreign sounds like there are things that are not clearly stated that we're having to you know go and remind people in GitHub issues ETC so maybe having something to read that is succinct and helpful could be useful other thoughts people have as people get in the queue on another amusing um some folks in the quick Community might remember when I did chaos protection um and that is something that might be considered Greece or might not so let me explain so in quick the First Flight that the client sends uh is not encrypted while it's encrypted with keys are in the specs so you can consider that not encrypted and so it sends this TLS client to load in a crypto frame which is just kind of it says this is a stream here's your offset into the stream and the length and then here's a bit the way everyone implemented that was kind of theological way where your first packet contains exactly one one frame and it's a crypto frame we've offset zero and length the length of your client hello and then we had a bug because um some vendor was complaining that a change we made uh"
  },
  {
    "startTime": "00:14:01",
    "text": "uh broke their you uh their YouTube zero rating which uh I don't personally love as a concept but that means that people then talk to my employer and complain to me then I care um and it took us a while and we finally got in the room with the people who had written the code and they said oh yeah we look at the TLs Sni so the name of the server you're talking to and how do we find it it just had a fixed offset in the packet like Wait no that's not where it is at all this is a whole sequence of tlvs and frames and you're not parsing it you're just looking there so I got very annoyed because of course this escalation made my life very difficult for a while and I said well how do we prevent people from doing that so then I got creative which is always a terrible idea but often fun um I took the crypto frame cut it up in like a random number from 2 to 12. uh so that you would have like uh offset and links and it's just cut up then I randomly swap them put a bunch of padding here and there a ping frame because I could and then I put that in the packet and so that broke all of those implementations but by the time they were fixed we haven't had a problem since and so that was a fun thought exercise and we had people show up on the quick def slack saying hey is this packet legal um and it was really funny because a bunch of the quick enthusiasts jumped in and went Wallace is bizarre but yeah checks out that's a legal packet um and I don't know if that that's not really grease in the sense that it's not about the Registries but it kind of takes the joint that we have of that packet and just turns it in every direction make sure it doesn't break um I think that counts as the stuff that is grease yeah so Colin says Bacon fat and I like that lard it's lard all right lard much better but I'm I'm sure there are a bunch of other techniques in the space that could"
  },
  {
    "startTime": "00:16:00",
    "text": "qualify if we decide to write a document about this topic um of things that are useful so highly related to that uh just mattress meta so we have similar problems um not zero rating but uh we just we so first off our quick uh does not we don't use the standard version so we've kind of deliberately not switched to version one uh mostly as a we were like oh this is a good thing to do because we don't want people to assume that everything is version one so we we have like you know our own code point that we were on the internet and we're like yes we're very proud of ourselves we're doing this blah blah blah but um so we occasionally run experiments where we will switch the version because we can arbitrarily control it on our clients and most of the time this worked fine but then uh sometime last year we ran an experiment where we switched the version and the ver that the new version wasn't doing anything different uh the only thing it was doing was it uh was just we were just swapping the version it didn't do anything functionally the code is the same but when you look at the metrics for this experiment everything was wildly improved and things were amazing and like videos were playing so much faster and all these great things were happening or like what the heck is going on and it turns out what's going on is that uh when you're a large content provider people will apply policies to your traffic based on Sni and if you if you change things in the in the initial that like say the version or the salt or things like this all these boxes that are applying these these policies no longer can apply them so this sounds kind of amusing in principle but it also is actually kind of existentially bad to a certain sense because if we want to for example get deployment experience with a new version of quick that actually has functional changes we can't do that unless everything in the middle is going to treat it the same"
  },
  {
    "startTime": "00:18:01",
    "text": "as everything else that came before so for example if we wanted to experiment with like a quick version for right that has some crazy changes that are functional uh we have to get cooperation from everybody in the network to say oh yeah you got to throttle this too and you have to understand the Sni because or come up with a different way to throttle us and it's not even just version it was other things like we started attaching the token to initials and that broke a bunch of metal boxes um and broke throttling and so it's like it sounds weird because like we usually think about ossification as like oh you're going they're going to start blocking quick and that's bad but this is actually the opposite they start they stopped throttling quick but it's equally bad and so far as we lose all of our signal about what we actually did so if we did something bad in the new version we don't know that anymore we can't tell and I don't really know how to how to reconcile this because the only solution is like basically you either have to get everyone to it you know throttle differently or do with their policies differently or you have to just use you have to accept that you know you anything that's in the clear is in the clear forever and you just have to leave it there so this kind of fits into Greece which is that like we are greasing but actually when we when we grease like we we we it doesn't actually teach them anything right the the feedback loop time is way too long like it took it took them over a year to fix one of these problems they being the random vendors in the middle so but it's very similar to the points David's making yeah I think it's really interesting for both of these points that it's Greece sorry Dave you need to there we go how about now there we go um I think it would be useful to have a"
  },
  {
    "startTime": "00:20:01",
    "text": "uh document on uh I'll call it lard right which is more than just the Classic greasing stuff we've heard a couple things here 9170 is of course uh fairly uh uh short and only covers a particular case we've heard a couple other cases here and of course going into details about you know TLS is very TLS specific and so if there's something that talks about lard in general uh the other uh topic that I think would be useful to discuss besides the ones that I've heard which I think are all great um like David's example was you know ordering which is not changing chord points is you know maybe changing the order of extension headers or whatever it is that's relevant in the particular protocol um but I would say the relationship to uh fuzzing right because a lot of the same questions come up uh and fuzzing is often thought of in an API sense but you can fuzz test protocols right but the um often people think of okay if it doesn't crash then it's good right and so if you say there's some things that greasing is meant for like us to ensure extensibility there's things for reliability but they're all related techniques right because if you can close test a protocol you might be Focus testing in a particular way that it also counts for greasing or of art or whatever and so I think having a common document talks about greasing changing order is changing other things and their relationship to flows testing because it also helps you for reliability and securing these other things would be a great extension to a document for this group to do so cool I I was just going to make a meta comment here that um across both of these examples it's interesting that we've normally thought about um greasing for like you know ossification of things that are just like blocking but you know both zero rating and the stuff that Matt was talking about for uh throttling our performance related like something that you wouldn't even necessarily notice as you know one connection being broken Etc"
  },
  {
    "startTime": "00:22:02",
    "text": "it's just like ah everything is just slightly changing behavior um so I think it's worth calling out Do You Want To Go furniture yeah well what we end up seeing our customers doing is because they tend to own and control the application that lives on a lot of the devices that do this is they actually do a lot of this uh they do a lot of their own Telemetry uh either from you know if it's streaming or you know or whatever to go and get the data on it and I think there's a there's an interesting question of do we want to be looking at standardizing some of those Telemetry methods as part of um you know these success you know whenever you're going and changing and extending your protocol and actually be uh just have passive data that's available to understand what those characteristics are because it's generally a performance degradation or as mentioned a performance Improvement because it bypassed the zero rating which may have ended up in a different um you know Quality Service bucket on the service provider side uh that went and you know it's the ways that these types of things are being discovered and so it may be worthwhile to to have that not only available from a research perspective to do that but you know to be General guidance for these are the ways to detect when things are not behaving in the way that you are truly expecting and having a lot better access to the lower level protocol statistics and and make sure that those are actually more available in a standardized way so when somebody's using the library to interact with it they can actually understand you know yeah we corrected for all this underlying loss that may have existed from the network side or this is a performance or this is actually the bit rate that was perceived and actually make recommendations around these these may be uh valuable apis that would exist for for these purposes rather than you know hoping that somebody might eventually correct for them uh and the reason I mentioned this I think is something that's very important for this point in"
  },
  {
    "startTime": "00:24:01",
    "text": "time is that what I'm finding is that the subsequent generations of people they're not familiar with looking at the wire level of many of the protocols and they're not very familiar with uh actually even thinking about or dealing with systems that may not be Memory safe anymore you know anymore because they're always using a higher level programming language and so they're not spending a lot of time down in down in the bowels of these protocols or bowels of the operating systems to go and get that information which may be available if you're down at that layer um but it's really essential you know as mentioned from uh you know uh you know from uh gentleman over here from meta is that uh that's that's how they detected it is hey performance actually got better um and that's that's how you quite often you know or it's just not working at all and that's how people are detecting these Pro these uh uh underlying things that need to be looked at how to detect these things and react to them is always super tricky because like in my case in many cases uh it's uh a colleague of mine calls it the ouch ouch protocol it's when someone picks up the phone and tells you your thing doesn't work and uh there's like rarely a way to do that in band um but but I see your point that's that's interesting uh because some of it can be done inside the stack and a lot of the when you're in the stack you know how it works and you can you're better equipped to um do some things but at the same time you don't necessarily know like the bytes that are flowing what does it mean whereas what what the application cares about is yeah what is your video bitrate that you're seeing and the quick segment might not necessarily know that yeah it's not necessarily about what the video bit rate is because you know people likely don't care what the underlying application is but what is the throughput of that stream and that's something with you know you take TCP and"
  },
  {
    "startTime": "00:26:02",
    "text": "you do the math on the stats at the end of the period for the number of you know uh segments transferred and the total bytes and where where the windows went to and stuff like that um that data is helpful to understand what the underlying performance characteristics were of of that and so if you see something that is substantively different and there's you know you know I can set aside all the stuff about how to anonymize that data or whatever but when you're actually a participant in one of the endpoint in the endpoints of it either from the client side or the server side you have a lot of data available in that moment and calling out that that data is valuable uh in the Pro like in the protocol development part will help ensure that when uh implementers are writing the stacks that they don't go and hide that so deep that it's hard to instrument later all right yeah I really feel this is important for future protocols yeah yeah for sure oh no we did quick we're done now haven't you heard the one protocol to rule okay so it sounds like we do have some interest in saying some concrete things and there are some very specific things we can point to um probably propose we can move on to our next item since I like it sounds like we have a thing to work on we need to have a dedicated discussion we can schedule a call for that more um but this is very helpful I think yeah just one last thing before we move on it sounds like there's interest in there being a document and there's a space and like some uh the scope of it seems quite clear to me at least uh is anyone in the room interested in writing it and holding the pen here um we would probably have some of us IAB folks involved it might be on the IAB stream but if anyone's interested in"
  },
  {
    "startTime": "00:28:01",
    "text": "working with us on this um here's an opportunity I see Lucas hello Lucas party Cloud I have interest in helping but not being the only pen holder sure you probably want at least one IB pen holder but we can have it would be fantastic to have other pen holders consider me volunteered great and while the chairs will take an action item to schedule like an EDM interim to maybe focus on this particular specific topic um I'll say the same thing is uh not the pen holder but I'm happy to participate thanks awesome similar awesome thank you cool I love collaborative work it's good all right um so before we get to the stuff about finding implementations there's one other point um that Lucas and I have been talking about recently that I just wanted to share with this group as kind of an anecdote and see if there is if there's something interesting here that we want to pull on um so it's actually about a bug that we found in cloudflare quiche uh through some testing recently yep unfortunately there are bugs um and it was a case where we were catching um in some tests in some lab environments we were catching some uh RFC protocol violations in quick um I think it's been around for ever probably probably yeah probably yeah um and so not to dive too much into the quick details but essentially uh we had we were closing a stream and when you closed the stream there's like a final size that tells you how much they had been there and that was being sent by the server incorrectly and so uh the clients were aborting the connections because the uh server was saying that uh it had sent fewer bytes than the client knew it had because the client had received more"
  },
  {
    "startTime": "00:30:01",
    "text": "um so that should never happen um and you know specifically this is something that was difficult for us to uncover and we've been running a bunch of tests in um kind of simulated profile environments where we were kind of like the India China network profile of like something with a super high loss reordering um based on kind of some real world measurements we had done and then recreating them simulation and in that type of environment you see it a ton and without that environment you don't see it and then we looked at kind of the real Telemetry because of eventually so like normally you don't see this show up because the error rates are super super low it's like everything in the world is fine but if you look for this problem you do see it and it's only some what Eric you remember what was the percentage point zero zero one percent of connections but it's still significant at a global scale and we do know that there are people in particular Network environments who are going to be hitting this very commonly um so you know a lot of that's just kind of a deployment and how do we test our implementations robustly but I think there is some intersection here with you know we do interrupt matrices for quick and we have these requirements um and we can miss these things for a very very long time and so I mean one approach would be when we're writing down some requirements we say look you know this final size of stuff it matters for cases where you have a lot of reordering like that's what it's for and so if you want to test this if you want to make sure that you're doing the interrupt right on this you need to make sure you have a test Suite that does enough of the reordering ETC so I don't know if that's useful but it feels like um something about the deployability and Global deployability making sure that we are doing the right thing by people in very different network environments and not just assuming it's always like the"
  },
  {
    "startTime": "00:32:00",
    "text": "perfect networks you have at home is important to make sure as we're deploying something new uh uh Tommy I think that that speaks to the the need for a lot of these statistics um you know that we're talking about is we need to know what percentage of the time uh somewhat if you're going to build a test environment or something for these uh you know and look for that even if it is rare that you see reordering um there are obviously cases where you're gonna you know where you might see that um you know and we often see things like duplicate packets and and stuff like that as well um and then and on our CDN products we actually have stats so I can go and look at on a per Network link basis you know how many times we talk to like a client and saw a you know TCP retransmits or retransmits of something you know of some sort which is helpful to understand is there actually a network loss problem and is it a localized problem on our side or is it you know uh farther away on the client side so I think understanding that for that you know for what you're talking about the test Suite um I think speaks to the need for the uh you know for better data at least minimum data sharing when you're actually you know doing the the testing interop of the protocols to ensure that when you see these uh Network behaviors that are not amazing shall we say uh that you know you're not having a protocol going to grade to the point where you know either performance is poor or something else cool Dave um just brainstorming um one of the purposes of the hackathon is interop testing and so uh brainstorming is there anything we can do and say future hackathons looking out of ways to encourage more interrupt testing for example is there any way that we can because it's a sponsored event right so you could have people that are sponsors to help create things that you can't necessarily do in other situations and people are in the room trying to test their protocols right and so could there be in the future you know various networks that do um you know reordering duplication packet loss and so on to encourage"
  },
  {
    "startTime": "00:34:00",
    "text": "people that are at the hackathon to do interrupt testing over these various weird Technologies and things right so just brainstorming and I know uh Charles you were saying um you know maybe we need to get a better bigger room and stuff and if you actually had some sort of a connectathon type component bring your stuff here and connect it with these weird networks and stuff then you probably would um but that's my brainstorming as to maybe uh future ways to make the hackathon even another level of more useful than it is right now which is already useful right but if you have uh ways oh here's how to get on a a network that does packet loss reordering during you know duplication whatever it is then I wonder if people use it so that's my brainstorm thank you love it Lucas oh follow on point yeah that's fine wait okay uh yes so Charles eckel um in case people don't know what the hackathon we do have the ability to to set up these special networks not only for you to use in the room but to allow someone who's not at the ITF meeting to plug their server whatever their equipment into one of those special sort of isolated networks and so we should be able to create these things we will advertise right now so yeah and uh and maybe to like um you know when you try to use something maybe it won't work quite as well as we think it does but it seems to work pretty well and uh it'd be great to try this out and just push the limits of what we're able to do and and I'm sure we can make the capabilities we have better if we have people using it because a knock has been really really helpful here look hello uh I got a couple of points um just on the walk over here I was thinking about this this issue in the broader context like that's gonna happen we don't want them but that they can happen and I think this isn't the only kind of bug specific to quick that's related to stream handling and and kind of resetting and the way that interacts with retransmissions and flow control and all that stuff but like that's kind of just boring details like the thing I was wondering is like is there some kind of funny curve when we're implementing"
  },
  {
    "startTime": "00:36:00",
    "text": "these protocols where we're very focused on the functionality and correctness in the first phase where you need to you know create connection with a connection-oriented protocol get the basics correct you very much focus on iteration of the document and keeping up to date with those things then you hit a point of kind of I don't know good enough and then from that point on you need to focus on the optimization to actually make this thing Deployable because it works but it's so slow that uh you know it's it's not that great and then you get to the point where it's kind of good enough uh that you can deploy it properly and then you interact with real use cases real applications are actually trying to thrash the protocol and use all of the features we developed and then you start hitting these kinds of issues uh one of the examples I can think of relates to like how uh Progressive MP4 Works in certain web browsers and how they do this weird interaction thing where they open a stream they reset it uh you can try and design the tests for those things but like no one did like the test was just run the thing and and see what breaks but the way it broke is really hard to diagnose and you just many times I've heard the things have stopped working and we don't know why and then you need to go and investigate and debug these things so um this is like uh kind of fractal thing where you're trying to get to the edge of the universe the end of the universe but is this like increasingly smaller and smaller steps just just the amount of effort and I think that's just the way it is but anything that can help can help during quick you know we we have interrupt tools uh lots of people did develop some things like uh tooling to drop packets and certain intervals or or Arrangements like that but we we lacked like applications trying to use a thing for real trying to saturate the connection trying to soak it or thrash it at the same time as trying to probe at all of the the gnarlier bits of the protocol because it's too easy just to say let's"
  },
  {
    "startTime": "00:38:01",
    "text": "do a request or a response um the the quick and drop Runner does have a high multiplexing test case which is great but it's Santa Henry bytes and you know we have these humongous numbers in quick and I'd be very curious who like who's tested a flow that's sent petabytes of data I'm sure there's people there and it probably works with the deployments that they have but then you just Chuck in some other clients and then I don't know there's all these other things so uh that's that and then the final Point like with regards to the statistics like something when I used to work at the BBC in the public service we've had this idea of reachability of like again how much effort do you need to expend to get her like 100 coverage on the internet and all the possible ways that the the universe could work it's like an infinite amount it's it tends to an affinity so you can draw a line at some point maybe or try to about what is what is decent reachability and that's not maybe in terms of outright numbers because you know no point not not one percent this is still people who can't do stuff potentially and the impact there is is still too big and in commercial settings sometimes you that line can be well huh you know but in in the settings where there's no money to be like made anyway you kind of have a mandate to to get reachability to a certain population so um rare bugs happen all the time on the internet and um it sort of to me this really just highlights how um that is definitely that's always the case and um if you have if you've deployed anything that's less than perfect you you someone will be affected by that and I don't think I can agree with Dave here on this one I don't think anything that we can do with hackathon or anything is going to fix this problem I"
  },
  {
    "startTime": "00:40:01",
    "text": "don't think there's anything that with metrics that it's going to help this problem other than helping us discover that this has happened um I I just think that cloudflare needed a better unit test for the code and it's that prosaic um I I discovered a similar sort of bug that required some incredible combination of reordering and packet loss and various other things and only discovered it by fuzzing so um yes it's unfortunate that that we do get to this cycle and I think Lucas you identified it really well we have these sort of Cycles well can we get it working can we get it working good enough and then good enough allows us to move on to the can we make it perform it and there's that sort of natural progression in the in the development of a new implementation and often that good enough point on the implementation side of things lets you get very long way down the path and you can potentially miss a few things and unfortunately that's just not good enough really in practice and and we need to I guess exercise a little more engineering discipline when it comes to these things and I I it's going to happen to everyone uh that's the other thing we've we've had massive catastrophic you know every the world locks up bugs that affect a lot of people because of those sorts of things as well so uh I don't know that there's anything we can do here other than commiserate together because this is this is just how the world is unfortunately David yeah happy Wednesday everyone someone get mine another coffee um first I I want to just bring a bring anecdote to like hammer on how these"
  },
  {
    "startTime": "00:42:01",
    "text": "things happen so Google has had a quick stack since uh well since there was quick uh and you know the Google Quick back in uh what 2012 or 13. and we thought we had a bug report a few years back where like you know so because we've had this stack for so long with so many tests and so much Telemetry and you know Chrome has a wide user base and so do Google servers um we've gotten it pretty darn bulletproof um or at least you'd think um and we had this bug where someone was uh I forget even what it was I think it was a website that allowed you to Flash Android devices or something using the crazy web USB apis but that doesn't matter too much and all of a sudden they're saying like hey our thing never works like half of our users are complaining like all of a sudden then this this doesn't work and it kind of coincided with us switching to a version of ietf quick and it took us a while to like track it down because everything was working all our Telemetry was Green um but it was a very like similar to the bug that Lucas and Tommy were describing where if you reached a case where your flow control blocked in a specific way that happened like twice in quick succession the you would lose the second unblock event and you would end up just the the client would just sit there being like um not telling the server I could send more and the servers like well the client's not telling me anything and it took quite a while to debug because we don't have like the you can't run those the server like things are anonymized we can't say oh give us"
  },
  {
    "startTime": "00:44:00",
    "text": "anyway all that to say it was super hard and but now we added a test for this uh that specifically once we figured out what the problem was recreates the exact situation and before the fix the taste fails with the fix it passes and I wonder if like one of the things that I consider like I consider there are two values of EDM um apart from music is one is we write these documents about how to do things better and another is the work that we do outside of the documents so for example like adding implementation notes and things like that um a lot of these bugs are found after publication and having maybe a place to say here's a you know list of fun stories of people blowing stuff up in creative ways that someone who comes new to the RFC can look at and say oh I should probably add a test for this in my test infrastructure might be something that can help I remember that there's no way to solve all of these that's just the effect of life but you know small things that we can do that aren't that don't have an insanely high cost might help and I think you know this is a very pragmatic or um group so just a thought thank you all right and then Chris and then we're going to switch over to our last topic um yeah so uh I have a a lot of thoughts I'm not able to sort of like clearly articulate them right now because I'm pretty wiped but um in general I think everyone here is doing making like a good faith effort to like implement the protocols that we specify correctly like that goes without saying um however like it it occurs to me that it's as we go along like specifying protocols and like"
  },
  {
    "startTime": "00:46:01",
    "text": "doing experiments interrupt tests and whatnot like at some point we just kind of uh give up for lack of a better phrase and and um like don't try to do exhaustive testing and rely on like you know just acceptance tests of A Sort before we ship things because we're facing lifetime pressure in in the real world to like ship products or ship software um and like I wonder to what extent it to use quick as like a relevant example if we if we did not have this time pressure to like get this protocol out the door would these bugs have appeared in production Yeah well yeah and more importantly if we didn't have time pressure the protocol would never have shipped then it wouldn't have value not to mention that without production you wouldn't have been able to foresee a lot of these conditions because we can't foresee like every condition that happens in the world whereas you throw something at billions of users and billions of situations and you're like oh wow that's there's a lot of stuff that happens on the internet well for sure for sure like I guess what I'm observing and very poorly articulating is that like quick is like uniquely complex compared to a lot of other protocols that are developed in the ietf the state I I like people are shaking their head but like take like oblivious HTTP as a comparison like that is a very very simple State machine very very simple to implement very very simple to test and like this is this is an example where we did not exercise in tests in our particular case of cloudflare it's like like all the branches that need to be tested like which is fine like that's the real world because like you know we can't exhaustively test everything but like the the complexity of the protocols as we specify them um I guess just seems to make this problem like you you pretty difficult in practice to deal with and I I don't really have uh right now at least"
  },
  {
    "startTime": "00:48:01",
    "text": "um like coherent thoughts as to how we would like go about trying to do anything meaningful here to solve the problem other than like you know uh stop publishing or like shipping software until it's like completely tested which is not feasible um for the reasons that match us like described um and uh I'd like I don't know I just I I I I maybe I should like put the mic down because I'm not really making sense I feel like but um uh yeah I'm gonna put the mic down because I feel like I'm not very making much sense but we can keep picking this up later yeah sure um let's switch over to our last topic um Charles has presented uh prepared some slides you wanna share that uh David are you able to approve okay let me check yeah sorry I see that you requested the screen but I do not have the power yeah this laptop can but they've intentionally disabled the mouse and keyboard for it so we don't do that oh no um I mean it's uh there's nothing technical in the slide so I could just talk to it without uh people seeing it on me can we just plug your machine into this yeah does anyone have a USB keyboard Echo oh yeah we did unplug from there yesterday and I know we're not supposed to but we put it into a different uh I don't know if that'd work for the Mi Techo session actually it would end up on the screen here can we get help in three one eight g318 yeah all right we put it in the chat too so"
  },
  {
    "startTime": "00:50:00",
    "text": "maybe Charles start and then if we figure out the technical bits we'll get them up for you okay so um you know as was mentioned earlier the idea here is to make it easier for people to find code and oh sorry yep so the idea here is to try to make it easier for people to find code related to uh the work we do on the ietf you know more specifically uh internet drafts and even rfcs you know that have already been published and the the definition of code here is pretty broad uh looking just taking some of the examples from the hackathon you know it could be uh what people would consider a reference implementation it could just be a little tool that helps you with doing some some testing for a new protocol um it could be a a lot of things um and really any code that's going to help you at any point through implementing the protocol deploying it maintaining it you know seeing how it's working on the the network um so to make it easier for people to find that and specifically people who know about this association between say a draft and some code to make it really easy for them to share that knowledge and kind of create a linkage so that those who are looking at the draft have an easy time finding the code or those who happen to find the code on GitHub have an easy time you know finding the relevant draft and to get more participation that way and to also speed up the whole um uh standards process of defining you know the new protocols and the implementation process of getting it deployed so um really that the requirement here is that the the code meets kind of that that type of use case that I just mentioned that it'd be publicly available and ideally open source but it doesn't even necessarily uh need to be because it could still be useful without without being open source so there there's various uh processes that we already have in place and in the"
  },
  {
    "startTime": "00:52:01",
    "text": "ietf you there's the implementation status um section and an ID uh we have some stuff around uh using uh get uh and GitHub right for collaborating on drafts and so you know we're already kind of making it easier for our developers to work with us that way and then we have the hackathon that obviously is focused on working on code and oftentimes people will put links to drafts and code in their project description so it's right there in the hackathon wiki but there's problems with all of those uh specifically with the hackathon those wikis kind of become I mean no one updates them afterwards and not many people go to reference them except maybe me when I go looking for things so it's useful for the hackathon it doesn't have that long life after that really helps people and is useful for people so uh the the draft um if you want to take a look at it it it just lays out a ski like a procedure a proposal for for how to do this and it has to do with you know first of all setting up a GitHub repo for your draft for collaborating on it um uh in the readme you can then uh have some information about where this Associated code is and you can continually kind of add more information about there about that then in the data tracker we're we're making use of the existing additional resource functionality to add tags which are specifically for related implementations and that's really the key thing there I think that's where you you put this Association of either to point people to your readme or to point them to a specific implementation um then of course the implementation status in the draft is a useful thing um to you know you can put information there as well and another thought was for rfcs it may be handy to do uh use Errata to be able to update this after the fact after an RFC is published you can even help people find it that way although in the"
  },
  {
    "startTime": "00:54:01",
    "text": "data tracker you know the other mechanisms still work too assuming people find the draft through the data tracker which is also a big assumption so the slides show a bit how to do that if you're interested how to use the related implementation field and how it shows up in the data tracker um I invite you to take a look at that if you like uh I've been just kind of tracking with some help from uh people familiar with the data tracker apis to see how this is progressing how much use we're getting the numbers aren't as nice as aren't as good as I would hope when I asked at ietf 114 we had 14 occurrences of this uh ITF 115 we had 27 just yesterday we have 40. so it's increasing I mean but it's not like I don't know I expected it to increase faster and more 40 is not bad but uh so I think uh all the feedback I'm really getting is pretty positive people think yeah this is a good idea yeah it was helpful but it still hasn't caught on quite as much as I would hope one stumbling block that I've run into is if it's an individual draft you can just go and edit it yourself if it's a working group draft or an RFC you have to go to your working group chair and I don't know if it's even necessarily that people are not not comfortable going to their chair or maybe they just like oh I don't see how to do this Charles explained it to me but it's not working and they just forget about it I think it's more the latter um which just makes me think maybe I can talk to the data tracker folks about adding something there but I think the problem is you don't see the button that's like to edit it so anyways um you know I wouldn't say what's laid out in the draft is perfect but I think it is gaining a little bit of traction I would really appreciate people's thoughts on like do I just keep kind of plugging along or is there do people have"
  },
  {
    "startTime": "00:56:00",
    "text": "thoughts on a way to make this work better and accelerate it Dave Taylor thanks for writing this this is awesome I'm one of your early adopters and stuff we use uh related implementations in other working groups that I'm active participant in um the um the thing that I want to comment on uh the the phrase and you talk about this a little bit the code must be publicly available in preferably open source um I think and so we may want to have a discussion of like you know a working group cherished lunch or something whether it's this ITF the next iitf or the one after that but I think since you're running the draft what might be useful is guidance to chairs as to how to decide whether to accept a request to add something into there uh when it's not open source right because is this like a product uh list or something like that because you know once a draft has been out there for a while you can still update it for rfcs and stuff right um and so when if you're working your chair and you have some company that says oh yeah we have an implementation of this particular RFC please add us in a great implementation should we do that or not and so really there it's kind of you know Wild West there is no guidance for that right it's kind of you know figure it out make some policy and just having something uh whatever the best practice is um what I don't know what it is yet right but I'm saying among working group chairs that are using it given that we have a bunch of them A bunch of us that are using it now maybe we can come up with something and I think your draft would be the right place to to do that discussion um and then maybe it's a PCP or something I don't know so thanks yeah cool I'm glad glad to hear you're we're using it more I mean I know 40 isn't a ton but it's going up and I know we haven't done like a ton of advertising probably Beyond hackathon and working group chairs list um definitely agree about the tooling um and I don't who do you remember who who's being the uh tools team liaison now for IAB so we were just talking about who's"
  },
  {
    "startTime": "00:58:00",
    "text": "um oh we talked about this I forgot who volunteered yesterday yeah but we'll follow up and I be like because I think by the way we just got the slides approved so now you can click the button you you could pick which one you have Charles uh a bit late but or you can you can do your screen share yeah thanks yes the ideal is one of the tools this team sounds like uh yeah Chris do you remember who uh doesn't remember either all right well we'll take an action item Cindy knows um so I guess what do people think about kind of adopting this um Charles if you've had the document around for a while it's fairly straightforward but I think there is it we don't need to have this be a com a complex or super deep document for it to be something useful so do people think it's uh worth you know having something written down here that we can just share with Community that's a way for people to be um be more aware if yes absolutely um although the question is what does the IAB stream is the right place I don't know if the IV can do BCPS but I might actually argue that this could if they're depending on the content it could even become BCP and that's probably easiest thing I ETF stream um you know 80 sponsored or maybe generate I'm not sure right uh but is it valuable absolutely it's great already so right now it's informational right but yeah yeah it could become DCP yep absolutely great um I mean certainly we can have things that we're working with this program they're not IB stream we can right have a BCP that's ad sponsored yeah that's great okay so I think we'll take a follow-up to talk to the rest of the ivy about it"
  },
  {
    "startTime": "01:00:02",
    "text": "we're going to have a EDM program review tomorrow anyway and so we'll kind of figure out the right way forward but I do think what we're hearing you know this is useful and we're getting some traction but having a BCP would be a better way for people to find it and know about it yeah yeah that's great all right thanks cool um so 15 minutes until the next yeah I would say the only thing that I could imagine somebody arguing against the BCP is if somebody was saying oh no this changes so much it should be in a Wiki page or something like that but I think there's enough content that probably is stable enough in my opinion that it's worth a BCP even if there's some portion of it that goes into wiki page instead so you know some of the stuff you were pointing out Dave was in here right now is right right about uh you know guidance to chairs on what links to include and that type of stuff I think is going to even if the details of tag names and stuff change that advice is something worth writing down in a more Evergreen Way right as a working group chair I would rather not be the person that's this that uh somebody else is coming to to say uh by the way please put my thing in there and I have to try to figure it out I would rather have something to fall back on well you know we talked about this in the iitf and the general consensus among among all the chairs even if you went to a different working group you'd have the same answer it's a lot more defensible if I disagreed if I did not want to put something in there it's a lot easier to have text to fall back on than me trying to argue about it and then it sounding personal so uh and of course if we said it is fine right then then it gives me guidance that says okay well I'm in and I'm not I'm just trying to say if there was some case that I thought would not be appropriate because I didn't think it was publicly available and they said oh yeah but we handed it to our five friends okay and says well okay it's written down it says publicly available okay well what if we publish it as a product or what if we put it up on on this link that we don't advertise whatever it is right so I'd rather have something that's actually written down that I can refer to and fall back on so"
  },
  {
    "startTime": "01:02:04",
    "text": "awesome thank you all right so uh 13 minutes until sessions begin do we want to just wrap up here I think we had some great uh discussion input and we have some work to do so that's great thank you really appreciate everyone coming do you have time for one other aob type thing what's up um so there's something that I've been observing that's been uh that's that goes on especially for those of us who have uh end up putting uh Hardware filters in our networking devices and what similar to talking about like the low level protocol and like hex you know type stuff what happens is I was I was in mpls uh and somebody was talking about mpls oam thing and wanting to allocate a new port number for some new something uh and it is helpful in a lot of the hardware filtering things if the port numbers are clustered especially on bit boundaries because then it takes up less space in the hardware uh for any filters going into the control plane and this seems like something when we talk about you know the evolvability of protocols and stuff like that if we're going to allocate port numbers and stuff you know I know people love hey I'm going to pick this cute number for my protocol and stuff but there's also help in kind of banding them especially on bit boundaries because if those are things that need to end up being pushed into a hardware filter it takes up less space in the hardware and a lot of the devices these days only have a limited bit space to go and push those types of filters in to permit things so this is like in this particular example because there could be you know mirrors examples of course players yeah yeah is like an Ianna registry that has what type of review and allocation process yeah is it like some well there's some"
  },
  {
    "startTime": "01:04:02",
    "text": "expert yeah exactly but when but when we're talking about you know if you're going to do you know some sort of extension you're going to add something new into something if those port numbers are bounded if there's a kind of a pre-allocation or banding of it uh that makes it a lot easier um than us having to say oh well I need to permit 22 for SSH and I need to permit you know uh 443 and then oh I need to do that also for UDP so I need to Match multiple protocol numbers you know and stuff like that and because Windows get compiled from the configuration into the hardware they take up more space depending on how they get populated in there and so if we think that if you think that in the future there's going to be need to say oh well we need to go from this to a you know a range of ports for any new protocol uh it's going to be helpful if those port numbers are potentially adjacent because then the filters yeah the filters will be able to be efficient in the hardware I know I know a lot of people are used to not dealing with resource constrained environments these days but yeah there are still resource constrained environments my initial impression is you know it sounds like for whatever registry that is that's good you know advice to whoever the experts are um but this does involve the ability to extend a protocol in the future if we're going to add some oam or measurement or something or you know whatever it is yeah I don't know if you should want to take up go in a minute but yeah that's thanks for picking that up I was going to say it also suggests a weakness that could be exploited for good or for ill yes yeah yeah I I put these really high valuable highly valuable protocols in a nice block yeah and then put an extra protocol in that maybe the network would rather I not yeah use right in the right in the slot do you wanna uh if you want"
  },
  {
    "startTime": "01:06:02",
    "text": "um so we can discuss whether you shoot an email to the list too with your thoughts on we do have mailing lists we don't use it much but we do have them yeah yeah this is just something that kind of came up yesterday I haven't had to send a message on but I wasn't you know it sounds like that the Privacy area of the ietf will have a problem with that um and so the issue is that uh for those of us who are actually securing the network devices uh that means that uh we won't be able to do that unfortunately if somebody's going to say oh well you made it well known alrighty I think that's it first then thanks everyone yeah thank you oh my next meeting is right next door yes you want to point out one of them could see you again okay understanding your yeah so it doesn't need to be to a GitHub repo that has code yes"
  },
  {
    "startTime": "01:08:02",
    "text": "that's perfectly fine"
  }
]
