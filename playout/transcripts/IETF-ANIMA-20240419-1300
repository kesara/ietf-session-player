[
  {
    "startTime": "00:00:14",
    "text": "okay I think uh we'll have a start good morning everybody this is the ITF uh Ana 20241 interim meeting and there is one mandatory slide I need to show which is the ITF note well so this is a meeting of the ITF everything you say will be used for the benefit of thef and it's public and you know all the other things um and yeah the agenda is very open we wanted to talk I think about two uh main things um first I think we wanted to spend about half of the time or so on seeing how we can uh work through the um open um issues uh of the documents um that are in working group last call to move them closer to ad and then discuss the uh discovery of um core LF um for um the bruski discovery as well as the constraint and voucher and proxy where they are um all the main Discovery mechanism so with that being said um I'd like to um hand off maybe to um well where where is he I I think Michael wanted to to um lead that but uh I don't see him right now who was in here morning tus good morning so are we having some problems with the participants for for the first"
  },
  {
    "startTime": "00:02:03",
    "text": "part Michael there you are again do you want to take it from here for um the the open issues um that you think we uh could make a progress today can you folks hear me yes we can okay still not getting um any Good Vibrations from Michael here let me see maybe only on the chat link to I don't know for let see if there's something coming on email"
  },
  {
    "startTime": "00:04:29",
    "text": "okay okay so if Michael has issues um stepan is there um anything from your side that you think we can make progress on for U item number one right now otherwise we may need to move this to next Tuesday or so if we don't have Quorum today we can't hear you I think you need to enable your audio first click on the microphone button nope can't can't hear you yeah same for me I don't hear him one way audio okay okay isn't technology wonderful wow well we're waiting tus have you had any luck uh beating on the xfrm people uh no not yet sorry it's uh right now all all the document work and uh unfortunately not not getting to any coding there yeah okay but uh I think the workaround U that we discussed um in in in email I mean if if if if that is something feasible for you to to start"
  },
  {
    "startTime": "00:06:00",
    "text": "trying uh with um that that should be working and uh I think that wouldn't be you know requiring any any more than just you know getting a right xfrm config to work right does it work now we can hear you now I think okay yes okay perfect I'm I'm not quite sure what went wrong on my side here so I've I've um actually I I prepared two slides basically that is the that I tried to discuss on the mailing list um based on the questions or based on the comment from from Caston during the uh last ietf meeting so if you if you open the slide I I I think it's a it's not a long issue to to discuss but I haven't seen any did did I overlook you you're trying to propose them to uh otherwise if you can just share your your your screen or so uh yes let look where the you confirmed the slides already this morning so uh they should be on the okay let me see but it's no problem I I I can share my screen T because I think that's probably faster yeah I'll just uh just want to make sure that they're stor but just go ahead please okay what do I need to do to share screen um I think just the share screen but I mean I can I can share the slides for you they seem to be I think uh okay yeah right so uh when you go to the next slide that was essentially one question regarding cddl um so to make a long long story short we we uh utilize cddl to describe every every uh function every prototype um for which we didn't have"
  },
  {
    "startTime": "00:08:02",
    "text": "any young module and uh specifically for the trigger messages and and we try to to make that in the same way as it has been done in brusi for the status uh messages uh for the Telemetry messages that are uh there so uh in bruski PRM we are having an addition to the status messages we have trigger messages and we have one to trigger the pledge to create CSR a certificate signing request and for that we had defined this type of trigger message and the intention is actually to allow not just a single enroll type but to to have something like an enumeration where we have a single value that can be put into the enroll type so this is basically the goal that we are trying to reach and cust last time during ITF you said that it's probably better to Define it in a different way and if we look on the slide on the next slide and this is what we discussed in the uh in the to us if you can click to the next slide then perfect so this is actually the outcome what we discussed in the uh design team meetings that usually happen on Tuesday so the proposed uh cddl approach would be like here in the uh second bullet point to have the pledge enrollment request trigger to have the enroll type ER and something we didn't use the map we use the enroll type string uh to be able to Define how the enroll type string is being uh filled so in the case of bruski PRM we we would Define enroll generic thir that is the intention of PRM uh and that would leave the possibility or the flexibility to Define other enroll types for other specifications like specifically uh if there is further specifications that"
  },
  {
    "startTime": "00:10:00",
    "text": "would like to bootstrap certificates for an application then they could Define something like enroll ABS so the the first question I would have before we go to the CDD this is supposed to be a registry or what what kind of allocation policy do you have for this so we we describe the the functions in in the in booske PRM so the the different function types and then uh oh you mean regarding the enroll type string no we don't have a registry so it's it's basically defined in in PRM uh what this value should be filled with and we came up with this type of formulation to to have flexibility but we haven't thought about any any kind of registry where those type of strings can be registered yeah so that that really would be the the the thing you need first need to decide before we we can discuss the the CDD um so this is not for constraint environments right uh no in the first place not but it may be used later on for constrainted environment but right now we are using it with uh Jason okay um good so you want to have uh Json object object that has a single member which has the key enroll type and a value and that value really is just an enumeration right yeah uh but you you do want to fill this enumeration with strings it's the usual thing would be to to use numbers but of course you can use strings okay may maybe in numeration what what the was the wrong word here so we we would like to use strings in the Place uh and so we"
  },
  {
    "startTime": "00:12:02",
    "text": "need some some way to to be able to specify those strings one of those strings is is uh specified by pan with is enroll generic Ser okay so basically you don't need to open another Json object right so the the these inner braces are unnecessary you really want what you had on the previous slide but but allow other values Y in addition to en Ro generic set um so let's lose those those inner braces uh since what you have there is a single value uh you really want to have a type socket and and not a group socket so you lose one of the dollar signs and now the the remaining thing is that you want to give the initial value that you allow but by putting in something like dollar arbitrary enroll typ string SL equals uh enroll generic set as default value oh okay it's not the default it's the first end you define and if you define a new one you write an RFC that simply Updates this RFC and provides an additional value that that you can put in there so what is the typical cut over between doing this uh RFC by RFC versus registry well with a registry uh you you the new document you write doesn't have to update this document that that's really the the main difference of course you also have to decide what the registry policy will be so can anyone come in or do you have RSC required or um do do you actually have a standards action requirement uh on this um so this would be the the usual things you decide"
  },
  {
    "startTime": "00:14:01",
    "text": "when you do a registry um I I was right now just focusing on on how to put this into the cddl and uh make the extensibility of this value visible while at the same time limiting it to enroll generic SE for now okay okay yeah that is that is very helpful I think we we currently I don't see a need for having for having a registry because essentially we will have two different values which I would expect one is generic CT and one is an app specific CT uh right now I I I can't think of anything else uh So based on that I I I think avoiding a registry is is perfectly fine yeah I'm I'm taking this as notes okay okay so that that actually answers my question uh thank you very much Carson that's so I put the the CDL I have in mind in the chat so I still need to test this but that oh there's a double double quote here sorry um so um yeah let me just ah I'm very typo heavy today sorry well it's Friday perfectly fine should be fine that's that's what I was about thinking as well if I take the"
  },
  {
    "startTime": "00:16:01",
    "text": "typos so with fewer typos it looks like this okay okay perfect so I I I will use that one and and go forward then in PRM that was a missing piece so dollar just means it's kind of a variable to be filled with one of those Val values is that kind of the syntax on cddl um it's actually it's best if you actually read the the text from from 8610 um but it's essentially meant as a socket so you could can put in new stuff so at some point when you define your new stuff your your enroll whatever s um then you just add a line uh and uh put other things into the same socket so this this now is a choice between two values well because I don't remember that we have done that in RFC 8995 um or other um older um enema documents where we also had things where we um did think about extension points right well for instance you have dollar transport Proto equals IP Proto TCP MH so you you are using it in at least one place in 8995 um but that's what we have provided for these these extensible uh mechanisms in in city so I think the the um but that was I think inherited from some place right so when we added new extension points I don't think we uh did did put uh dollar um at them so is is that basically something"
  },
  {
    "startTime": "00:18:01",
    "text": "we we we should be doing more consistently when yes okay right so the the the point here really is that uh people can can uh have a cddl file like the the second my second to last message uh in the chat and then add the the final line I put uh in the chat and uh then just get an extended definition so you don't have to touch the original definition because this is uh identified as something that is supposed to be extended uh you can just put this extension into a new document right don't have to touch the old one and the kind of fact that uh this is adding to some I mean there there is no registration like in Yang for for for the actual object definitions right that's still kind of just uh text elements in Prior rfc's that are been informally referred to so you still manually need to kind of pull together together this the cddl that that you want to use if you want to create code yes and and there is a document the modules draft that that provides a way to do that and we are discussing that right now in the C work group and probably will we will ship this to the isg within a couple of months or so okay"
  },
  {
    "startTime": "00:20:00",
    "text": "what what toas what just comes up in my mind is what we could also do is we could Define in PRM enroll generic CT and also enroll appert and just explain for what enroll generic CT is used and leaving it open for other documents to explain what enroll app sert is used and saying this this is foreseen but it's outside the scope of the specification sure I don't think IED that but maybe maybe if you can put that in the notes if if you don't want to forget it m might get some some push back from isg on this Oh you mean to to to be ahead of the own specification yeah I mean you want to say this is extensible this is meant to be extended but saying here is the extension but we are not going to tell you yet what what that means um that that might ruffle some feathers okay I mean you could even explain that a document could have dollar enroll type SL equals enroll absur as an explanatory information to that but I I wouldn't put it in because then you have an open hole in your space okay that that perfectly fits with uh I I put on the slide with additional explanation and in the additional explanation and the last statement I basically provided this as some some kind of motivation example why is this uh why shall this string be be variable being defined also by others okay okay so I would probably do a register here and make sure that each application that defines a different kind of uh s actually defines different string uh for that but that that's a"
  },
  {
    "startTime": "00:22:00",
    "text": "protocol design choice and I'm not not trying to make comments on the protocol design here okay shall we advance a slide well that's the last one oh that's is the last one okay okay then thank you cast for the explanation and for the discussion that's very helpful okay so shall we move on to the Discovery part okay so we submitted that um that document uh after um acceptance by the working group after last ITF just to give a quick background here um we want to do discovery of um proxies by pledges um which includes also the cases in constraint um bruski for which will be normal case we don't have proxies but it's simply the registra itself um because the uh pledge doesn't really see a difference whether it is talking to a registra or a proxy but then when we do want to build proxies we need to separately discover regist only and not just you know other proxies um because we want to have a single stage uh proxy set up typically in networks um and different registr will have different variations of the bruski protocol so we want to discover them and then the regist the proxies should be able to um announce to the pledges the variation of the registra um"
  },
  {
    "startTime": "00:24:00",
    "text": "and do that automatically so that we don't have to upgrade um proxies just because we've got a new variation of the bruski protocol um and so that's what bruski Discovery um brings with different um Discovery mechanisms grasp DNS SD and uh now the the thing that was missing from the text so far was the core LF so we started to add that um that's in the 0000 01 and so there there there were a couple of questions that came up so the constrainted vouch and constrainted proxy uh drafts already had Corf um functionality that will stay in there but we're trying to um make it similarly to other bruski drafts the minimum necessary to get um an interval implementation but uh put all the complex um variations into the discovery mechanisms and then likely also remove grasp and DNS SD uh texts from a constrainted voucher and constraint Pro uh uh proxy drafts so that uh will uh keep them as simple as possible so what we're discovering um really and looking for are a combination of what I would generically call service name in um Corf it's called resource um so what we have defined so far um that for bruski Via Gras we we can discover a and join registra with TCP a and proxy with TCP and then for constraint bruski it is a and join registra with UDP a and join registra and that's kind of what I just added to the Discovery draft undor JPY which is the um stateless variation um and uh we had that previously called uh um rpy but um I think it would be nice if"
  },
  {
    "startTime": "00:26:02",
    "text": "we are consistently using the abbreviation JPY because that's kind of what we call the stateless protocol header and so uh that's that's what I've been trying to fix up also in the discovery document um and that would um uh go through all the different mechanisms DNS SD very similarly um just that the strings have a minus sign instead of uh an underscore in the name um so so that's the existing Discovery mechanisms um and uh so those were just a minor changes that I did for the 01 version so now when we go to um core LF um what we're discovering here same things they're encoded into the resource Target parameter um what I'm been putting into the 01 draft and and that would be have to be consistently also done um fixing up the strings in constrained voucher and proxy is uh brusi JP for the discovery join proxy which is what the pledges Discovery so that is um what the constraint voucher document already does today and then the two variations what a proxy can discover as the registra is R JPY registra join with the JPY protocol um and then RS for stateful registra so those two strings are up for a discussion um that's just what I think you know might might might be nice um to have um so then when we do co uh Discovery with Corf um we would be doing for example multicast so ff02 uh colon colon FD would be link local scope IPv6 uh for core that's the assigned multicast address well known and then we're asking for the joint proxy so this is what a pledge would be"
  },
  {
    "startTime": "00:28:00",
    "text": "doing and uh for example here what we could uh return um would be um in one case uh coaps um bruski doj JP so the First Response line would be for um C bruski constraint brki and the second one would be standard bruski right so that would be um the the encodings of them unfortunately it seems that uh we need to that's that's what um Esco was was figuring out from reading the rfc's we need to include the whole IP address if we want to indicate the port number and so that's one of um one of those questions Carson is is there any you know simpler way to to formulate these answers than including the full you know I IP address when we just want a signal a port number I haven't checked this but I would expect that's uh not fible you actually have to okay address them yes I agree yeah also the scheme needs to be included and I think this this is one of the issues with link format as it is defined today so you cannot say okay it's on the same server but on a different Port I also Host this resource so that's giving a bit of problems but yeah the scheme is at least uh different if you have unsecured Discovery pointing to secure resource then you also need to include the scheme on the line just taking notes um I don't know anything about the"
  },
  {
    "startTime": "00:30:00",
    "text": "formatting here but uh these things that start with co-ops and htps they have a a carrot but there's no matching carrot anywhere no the there is the mat number there it is it's after for 8 84 85 okay so the link format is is a key value uh thing with one exception if you have a u in there then you don't use key equals value you use open angle bracket U closing angle bracket that's something we just got from RFC 5988 that we copied here sorry which which RFC was it copied from which RFC 5988 yeah and now now it's 8288 which has replaced that but still has the same syntax yeah and so I was I was asking a question down there right so would it be you know appropriate to hack around this this this long encoding if we added something like you know another attribute P equal Port yes um I mean it would be be a very special thing you would be doing there I mean um the the the point here is to to provide a web link and the web link has a u and uh yeah Christian says it's no longer Linkin um okay I think you so if if you wanted to to work around that what you could do"
  },
  {
    "startTime": "00:32:02",
    "text": "is um provide more of a self description so not just not provide a link at all but describe what you have there already what you're discovering and then put hints in there that say and by the way um here are these and those things that are related to me it doesn't really fit in well-known core anymore but at least then it's not violating the link format anymore so it's like don't try to talk about the thing you are pointing to try to talk about the thing you already have discovered like this the the part that is on on regular Co-op and then attach metadata to that maybe right so we we we wouldn't put the the scheme um I mean yeah so ultimately if we want to want to say the scheme and the port number that that would be then you know know additional attributes but uh so it it it sounds like uh we might rather not want to start having that discussion because isg review would be painful even though it may but there needs to be a strong enough I think deployment reason not to have that size that's that's what I hear yeah so again as as Christian wrote in the the chat this is a an issue with uh uis specifically with u references or relative uh uis and you can uh change certain things in a u reference but you cannot change others and changing the part number is not something that that was considered and uh I very much think 30 years later we know why we would want to do this but it it's not something"
  },
  {
    "startTime": "00:34:01",
    "text": "that uh was provided yeah I agree with Christiania yeah there was actually some uh work uh started couple of years ago about a more efficient more compact way to encode the same link so you could kind of maybe compress this IP address in a very efficient way because it's the same IP address as the one responding so but I think don't think that work ever continued for until completion right that that that work is approaching completion but it's still using the same Concepts as a u so there is still a relative CRI reference which inherits from the U reference that you can't switch around scheme or Port without switching around the host well we could put yeah compress something better maybe we could put in a mechanism into the CRI reference resolution uh to to take the IP address from Context could this would then be different from the UI reference resolution which we are not going to change there yeah but then it could be dangerous if you have prox in the middle so it's maybe not the general solution yeah they they would have to resolve the relative reference before passing it on because it's not a valid URI but it doesn't work if it's encrypted or signed or whatever but this case it's just link local communication what you see here so in this example so yeah link format link format breaks apart anyway if it is temp but with like if there is a reverse proxy that doesn't"
  },
  {
    "startTime": "00:36:00",
    "text": "understand what is going on um then then links do break it's the same as with with um web off through web off through R proxy okay yeah so at least here is in this example there's no uh proxies uh right happening in this right the other question on the slide was that uh you know are we fine that in the query we um I guess cannot filter whether we're interested only in the coab or only in the https uh options right um is that is is is that true that I'm saying we can't filter in the in the query and if so what would would we feel that limitation is good is is is acceptable for for the multicast discovery it's not specified that you can filter there when looking it up at the resource directory you can say RT equals bruski JP and H equals coops Coop s col wild card um there is be legal there is actually for uh core link format Discovery also the query defined I think it was a 6690 the thing is that that query on the query of 6690 that is being used here is only defined for single query argument and does not state that multiple query that multiple queries are ended together yeah that's only for a single one that's correct but this case we are querying a single elements here but we would be querying multiple elements if we asked for uh for Co-Op s"
  },
  {
    "startTime": "00:38:00",
    "text": "or just https resources unless that we're somehow encoded in the RT yeah but but maybe the the underlying question is so if you have a resource type um so that seems to be not only for Co-Op resources then but also of HTTP resources that express the same thing that's the assumption that was made for this example is that correct so that that you can use RT and also for HT resources I think so okay I'm sorry Christian you were not audible I think I think I think it's okay to have the same resource type for multiple transports all right yeah you um okay H yeah so chrisan I didn't get uh can you can you write that in the chat how that filtering by the uh schema would be in resource directory oh wow welcome to webbland yep nice I think you can leave out some of the the special characters there I don't know whether we would need to quote the thing yeah like HTTP star would be"
  },
  {
    "startTime": "00:40:04",
    "text": "sufficient HTTP okay all right thank you so let's go to the next slide um right so one of the things I stumbled across uh looking through all that coab stuff was uh that the registrations for coab were also done for TCP uh which made me think that there is a uh um coap over TCP or TLS yes no maybe and if so what are the schema for that I couldn't find any schema for that well it's RFC 8323 uh the URL scheme uh we Define for that is uh coab plus TCP okay or coab S Plus TCP okay and that's something that we woefully regret but it was the right decision at the time and Christan can you add the the link to the internet draft that explains how to do this in general thank you so meaning that the answer is also yes yes yes yes but just don't use it well you can use it and and then you have to use coab S Plus TCP or coab plus TCP uh but it's I I want just wanted to add this is not the general solution it's the solution we specifically did for TCP and T TLS and we are working on something more General and Christian just put in the pointer here right so that's the co-op variations thereout Maybe"
  },
  {
    "startTime": "00:42:01",
    "text": "and actually that that's a late response to to an ad comment at the time we completed 83 23 that this was ugly and uh yeah 10 years later we are solving the problem well okay so wait a second so but now there there are two different things right one is the URI encoding the other one is whether um coap s over TCP is something that would be useful in deployments or not I cannot answer that question okay so uh I mean there is something called DNS over TCP and that has similar considerations so you you may be able to to transfer your views of DNS over TCP to whether you should be using coip over TCP or not okay but it's I think short of anything where we would say we need to be worried about considering support for it I think everything we're writing wouldn't exclude it but we simply be well off right now by not creating more variations um by explicitly considering it yeah Kristan points out that we also Define Co over websockets and I'm pretty sure you don't want to do Co over web sockets yet yeah um yeah so if you are talking about the constrained situation where you are not really sure how well your network is working and so on um I think the UDP based approach is the right one unless"
  },
  {
    "startTime": "00:44:00",
    "text": "you have to to send around really big pieces of data which which post Quantum crypto might Force you do to do at some point um but uh for for today I I don't think you need it now big amounts of data is I think um the simple distinction and I think we're all fine on the side that that we don't have that all right good so that was that next slide okay so now we come to the actual variations um so when we do make a bruski transport connection um we'll we'll pretty much have in that connection three type of variations that can occur um Al together right so the first one is whether the you know registra acts in responder mode or whether the pledge acts in responder mode um how the second one is how the voucher is encoded signally different encoded CMS kose Jose um and then there can be different uh enrollment protocols EST CMP and the future you know various other ones sep comes to mind as as as a legacy one that people may want to have and there are there are other variations so um now even if implementations support multiple options here they may not support an arbitrary combination in single transport connection right and so when we started to um uh Define for DNS as and and DNS SD and grasp how to signal the variation supported by registra um there was Implement a worry um for kind of parsing complex descriptions of these variations so the the outcome was pretty much that we wanted to have you know for every"
  },
  {
    "startTime": "00:46:02",
    "text": "that simply you know uh represents one particular combination of options that the regist has support um so for example the string rm- CMS D EST would be the combination of exactly you know one choice for each of these variations and that's exactly describing what RFC 8995 is doing um and uh then um for example just cozy would be constraint bruski that would be you know the same RRM the same EST just you know replacing uh CMS with Coy um and so those strings would be maintained in registry um and that means that um we can in the registry easy add things uh based on different um you know mechanisms on expert review different type of specifications so that we don't necessar have to write rfc's for any of these combinations that may come up so that hopefully then the variation schema um through the registry creates less implementation overhead or less process overhead than when we wanted to go with full RFC on each of those right um so Esco is just pointing out that um we are uh using constraint EST so now that was that was actually one of those uh possible questions uh whether we actually need to you know use a different string um when the transport um being used um implies um a different variation of a protocol right and so far I've I've been um thinking that that we don't need to do that if if I'm signaling in a variation it's EST and the transport connection is coab then it it is clear and that of course needs to be"
  },
  {
    "startTime": "00:48:01",
    "text": "appropriately specified in the registry that the string e does refer to a constrainted EST and I think the registry already does that if if if others you know Esco like you or so feel that that we should explicitly use different strings there that that's fine I I don't have strong opinions on that you be okay reuse the Stream over the registry would give semantics to the full string with all three components so when you register RRM Coy EST you tell people this is the EST that works with constraint bry right yeah exactly yeah exactly and so one of the things I was doing for the 01 version I push pushed yesterday was exactly separating out the registry that a should see right now which is really only those variations for which we have done those specs and then you know you know more informationally something which we may even remove from the RFC possible variations that could end up in the registry where we haven't done exactly that validation do we really feel that we do have an explicit understanding how how each of the variation pieces works in the context of that particular transport so now to the core LF um so pretty much the string would go in the new attribute BV equals string bruski"
  },
  {
    "startTime": "00:50:03",
    "text": "variation and then here on the page is the list of the discovery of in this case uh the registra variations um because they're of course more interesting um there there are more of them than um uh for for uh when a pledge discovers a proxy so the first one coap s um without any string um any bruski variation string that would be you know the Backward Compatible version with constrainted voucher this is what constrainted voucher um would be specifying then we have uh bruski do R JPY which is what uh also know bruski variation string which is what the constrainted proxy um would be looking for um when uh the registra supports the constraint uh protocol then the third one would be uh for um 8995 um and that BV empty is because we've we've uh so so these strings have logically right now three components but then in the registry um the defaults are shortened out because otherwise we can't make extensions right so if we figure out oh we do a variation of Brucey by separating out one part of the protocol that we haven't varied so far um and we're starting to um uh create say oh we're creating new variations out of that then all the old implementations will not have that variation substring right so to do that con consistently in extensible fashion we are shortening this out so that that means that the brusi variation string for RFC 899 5 is really empty because that's what you know older implementations would would have all"
  },
  {
    "startTime": "00:52:02",
    "text": "already done um I hope that explanation makes sense always feel that that's quite painful um so then the brusi AE variation um RRM Jose and CMP um that that would be um brusi variation equal CMP um and uh wait a second is there a oh sorry this is duplicated sorry Buck in the slide so we would have pm- CMP for uh the PRM variation um Jose right so and yes I think the last one the last one is one of those questionable ones right so I don't think we have uh the ability to do coy inside of https so that's I think one of those things that that we haven't specified today but and I'm I'm not sure if it would even work without new specification right just just a question uh pa um I think we discussed it on on Tuesday those those variations do not exist currently right right right so so so so these these these last H darn I can't edit of course here right so the the the last two ones would would need to I think in the um uh in in the 01 version I already put them into a different uh example and table as uh potential future ones and and because Al the the one on the S line from the from the bottom uh PRM CMP uh while it could be done it's it's not defined yet okay uh right right right yes yes so those let me just so who is doing the discovery here is that the proxy"
  },
  {
    "startTime": "00:54:16",
    "text": "yes here mcmp right uh so right so this is pretty much oops what what I had so far um and um yeah if if there any more concerns about the um the the core mechanism so I haven't gotten to the point of of wondering is there anything additionally that uh we would need to consider I think I've I've been missing to write down one or two questions here so let me bring them up here um so we haven't thought about anything specifically for uh core resource directory is that something that we would assume should be able to you know just work with the definitions that we have um or are there additional considerations to to support core resource directory um for for our Discovery mechanism at least from the Rd point of view everything that works on link local Discovery should just as well work kind of out of the box for for the Rd as well yeah so the link local is part is only when multicast is used by the pled typically so the pledge discovers link local proxies after that the proxy has to discover registar and typically there for that second one it needs to look further away than link local l so maybe site local or go through a central"
  },
  {
    "startTime": "00:56:00",
    "text": "Discovery server like Rd or DNS server so I think for the ID part we want to use for the second part so that's when the proxy needs to find the registar how how does the registration actually work right so when we do a um resource directory then um the resource would need to register itself with the directory right yep so is that that is a different format right y also the registration it's different from the the lookup basically yes but the um especially when especially when doing the the simple things that that Rd provid um if the device registers and just does the default thing that is send basically the content of its well-known core file up as part of the registration which it might even be doing a which might be automatically part of the registration itself um then whatever is there in the well-known core file will also be usable through the resource directory so it doesn't need to kind of there should not be a need for a different kind of statement right the contents you can reuse in that registration action yeah so it is the same content it's just you know sent to the resource directory as opposed to directly to the user to the to to to Consumer yeah and it also needs to discover a resource directory and know or know where it is that's another aspect otherwise it cannot register the same is for the pledge sorry the proxy it also needs to find the resource directory before it can query itself so right that's another point then you"
  },
  {
    "startTime": "00:58:01",
    "text": "need to know where is the resource directory and they could be different methods to get that IP address well yeah I was I was just thinking you know how much should we really write about uh those options as opposed to letting this the choice of whether to use multicast which type of multicast resource directory to you know specific deployment uh uh considerations right so so that's that's I think the big question mark in the ACP we ended up with a 150 page document so so any it seems difficult to um to figure out something generic unless you know the specifics of particular deployment Target is there is there something like you know a typical well-known reference coab resource directory deployment example type of network or so that that actually is being used in the ietf as a reference kind of something with six or or you know any of these other um low power other uh working groups the most widely deployed um in uh instance of resource directory that I'm aware of is in lightwe M2M they're not using like the full interface but they're using registrations um I don't know of any wide deployments yet of of Rd as it is of the full Rd inside ITF or in in ITF proximity Al lightweight M2M is outside of ITF and so so you're saying that is a subset of of of resource directory um"
  },
  {
    "startTime": "01:00:00",
    "text": "yes they're just using the registration part and for lookups they using their own bespoke mechanisms okay yeah and how do they discover the uh Rd for for the registration for the the the the Rd server they have their own mechanism of pre-provisioning the devices and then they basically talk to their bootstrap server and register there or talk to the server that is configured through the bootstrap server and register there so they take a basically configured address okay so that is not redundant it might be a set of configured addresses I don't know that okay all right so yeah that's that's still going to be um an ongoing issue all right cool thank you very much I think we're um at the top of the hour um any anybody else something oh okay thanks a lot then we can close the meeting down Shang anything from you no I'm fine um all right yeah thank you see you all next time bye bye bye bye bye"
  }
]
