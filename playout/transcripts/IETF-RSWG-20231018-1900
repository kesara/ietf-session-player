[
  {
    "startTime": "00:00:11",
    "text": "okay by my clock it's one after so uh let's go ahead and get started uh remind everyone that this session is not part of the uh ietf but rather a broader Community but we want to follow the note well uh we agreed to uh to do that for this group um so please recognize your rights Privileges and responsibilities uh under the notwell and second is that uh please we're going to treat everyone with respect feel free to attack ideas but don't attack people in other words be kind and respectful um so uh as I sent an email um only maybe a half hour ago um the focus of today is going to be whether it's okay to make changes to the XML as we update the tooling and um we need to tease apart whatever uh issues are intertwined in that statement and hopefully then get the documents updated uh in time for us to reach some kind of consensus coming out of the face-to-face meeting Paul go ahead sorry sorry to jump in so quickly but when you say update the tooling do you just mean the tools or do you also mean the 3.1 the actual format that we are doing the XML so uh I do mean the schema and the tooling so so okay thank you changes to"
  },
  {
    "startTime": "00:02:01",
    "text": "the tooling that are necessary to implement an update to the schema or to fix bugs great thank you y okay so so that is the topic of discussion one agenda item that I expect will have many issues that we end up teasing apart Pete anything to add before we dive in Noe I uh will be taking notes in the little hedg dock if anyone cares to join me and help me with that but other than that I'll let you Russ lead the little parade here today lead the parade okay so who wants to begin by raising issues uh we we know we have a couple documents that suggest it's okay to make these changes and we'd like to hear uh support or concerns Elliot go ahead well again a very good afternoon good evening uh thank you chairs for for setting this up um as I said in email I want to extend a special thank you to Paul and Martin uh for taking darts on on a really tough set of issues um I think I want to just start by asking that Mo the the list that I uh mentioned in email just being Incorporated by reference if you will so you know we can go through them one by one if you want um but maybe we can issue track them through uh to to make sure that they get addressed I I I want to stress um that I view the document relatively positively um I don't know if we'll quite finish by uh uh Prague but I said stretch goal let's but I don't think it's um an unworthy goal I I don't think it's a I I think it's a stretch but not a ridiculous one so right"
  },
  {
    "startTime": "00:04:00",
    "text": "um let me stop there for the moment and uh you know let uh others talk okay Jay you're next thanks Ross um so I I I want to just open this up with a little thought experiment just um briefly okay um imagine that we took the existing RFC XML documents and to each one of them we added a section at the top that was Dublin cor metadata compliant um metadata about that document um if we did something like that where we're simply adding something to the RFC we're not changing anything there do we have to think in terms of that then replacing the previous one you know this is the the question for me is it possible for us to start thinking about multiple XML documents that do different things or in different ways the the example I gave in my um email just now was what if we had one in Spanish for example um I think part of the problem we've got here is this view that we're always replacing something else and um having to get rid of something else and that's driving some of our thoughts around this whereas we can possibly consider a um you know a broader approach and that and that perhaps might make our life easier anyone want to react to Jay's comment you could I but but in okay um yeah actually Dublin core is kind of a not is not a great example because those actually would go in the in the rendered HTML version but you know but I take his point but my impression is there is some significant disagreement on like what is the point of having XML and what is the"
  },
  {
    "startTime": "00:06:00",
    "text": "point of rendering stuff and I talk to a lot of people or I get it is I sort of get the impression that they think the idea is like we got all this effort to to create the XML and then we come up with and then we come up with the rendered versions and then we're done and the rendered versions are all that matter you know which I think is profoundly misguided because the the point I believe the reason we switched to XML in the first place is both so we can put in more semantic stuff than you can get in just with enroth but but equally so that you know we can we're not stuck with the rendered versions we have now you know the obvious example is ePub you know it's like I read a lot of stuff on on an e-reader and having having having an UB version of of rfc's would be nice you know and if we have a consistent you know if all of our rfc's are in a consistent version of XML which implicitly means like if we change the XML we're going to we're going to do it infrequently enough that we can retroactively update the old XML so it's all in the same grammar but assuming we do that then okay fine you know somebody writes an somebody writes an an UB renderer and we render them into UB and now we have a new format you know or you know or 10 years from now people are using I don't know you know brain implant glasses or something and it's a brain implant glasses format we want to be able to to to to render into that so that I guess what I'm saying is Well I think we need to make some changes because you know partly because there's some of this some of the changes some some of the details of the current versions of this current XML are just weird like the fact that you got the name of the document in multiple places you know but I also think that it's not it shouldn't be that hard to figure out what's what's worth changing and change it in a way that we can keep all the XML um consistent you know and and which probably means limiting the changes to ones that can be updated automatically"
  },
  {
    "startTime": "00:08:06",
    "text": "I I'd like to hear more about what you mean by limiting changes to ones that can be updated Auto automatically by that I mean limiting changes to the XML or limiting changes to publication formats which did you mean oh do the exit mean the whole point of the publication formats not being canonical is like you want a new publication format fine you know or you or know if we if we took the if we took the earliest XML rfc's and and ran them ran them through the current version of XML RFC and looked at the PDFs they would be quite different okay yes which I think is fine because you know the PDF is you know the everything that's in the PDF is supposed to be is supposed to be derived from the XML so what I what I particularly had in mind here was like you know you know my my my favorite brok my favorite bit of Brokenness which is the the postal addresses I mean I believe we can write a script that will mechanically take the postal addresses in format they are now and turn them into a a more stable one where it's just it's just it's just lines of text you know and I don't think we can do that for any possible XML document that anyone might ever write but I'm quite confident we can do it for the ones who've already published you know and similarly it's like up at the top there is a field which currently has the name of the draft that it was the name of the draft appears in two places the first place it really should be the name of the RFC again that's something that we can we can do mechanically so it's that kind of stuff and then beyond that we might add new stuff you know carsen wants all sorts of things to be able to do you know more flexible embedding of of of different kinds of elements which which would be which if if they just add new options you know then there's nothing to change but I I'm kind of rambling did I answer your question you did thank you"
  },
  {
    "startTime": "00:10:01",
    "text": "okay Robert so implicit in what John was saying and what I had originally thought was going to be a clarifying question is now a point um I believe John is saying that we have to tightly couple defining the grammar we want with whatever we want to do with republishing all of our RF C's because all of our XML rfc's need to be in the exact same grammar from the beginning to the end of time and anytime we were going to change the grammar we would uplift all of the rfc's that were in RFC XML to be in that grammar um I'm not I I'm not sure I agree with that view um I would like to see a world where we can have incremental Improvement instead set of huge waterfall change every time we identify a thing that we want to change I John used the word it should be relatively easy to several times and I point to the large number of months that have gone by since we have had known Brokenness that we could relatively easy fixing the code but we can't go change the code because we haven't changed we haven't built an agree so this um yeah stop Russ Russ you're on mute but I'm assuming you said that I could speak next sorry yes I called you so I am having talked to lots of consumers of rfc's I am of the feeling that it doesn't matter if uh the"
  },
  {
    "startTime": "00:12:02",
    "text": "XML the the XML document changes over time that is there are essentially no people who will care about that um and for the small number of people who I shouldn't say essentially no there's an exteme and and I apologize for that because there are some people who do care for the very small number of people who care about that um if they know that there's a chance that the XML that they're holding right now that they are using for some development or something like that might change if they have an easy way of getting the new one seeing the diffs and such like that that would suffice for them which means that for everybody else since they're not looking in the XML they're looking in the derived formats um it's fine to do this um as as long as there is archiving if there's archiving and some way of finding out and such like that this is good enough for the vast majority of the users of the of the RFC series it's not going to work for everybody and that's okay Russ once again you didn't unmute uh it's early um so I think that um one of my disagreements with um Paul on in the last couple of days on this topic um didn't really talk about this this idea of can we retroactively change or not but um was more about um the the way in which we bind future cells"
  },
  {
    "startTime": "00:14:00",
    "text": "to to do a particular thing I think there's there's any number of things we can decide to do uh in this space we can decide to change the format for only future rfc's uh and Julian points out we could decide to make extensions and and the example of that is the discussion that's going on about having some sort of way to put mathematical symbols or equations in documents and so we could decide to do that for for future documents only or we could decide to backport it to some of the existing rfc's that have mathematical formula that would potentially be a manual process unfortunately so I'm not sure that um that's necessarily wise so we could simply decide to draw a line in the sand say all future rfcs get this feature and and the previous ones don't that's an extension um the sorts of things that John was talking about with um address tags and whatnot are fixes that I think would be reasonably applied retroactively which would get us close to the goal of having every single C XML being the same and being able to be processed with the same tools um which I think is a fine goal to have but not necessarily A a constraint that we need to apply to ourselves in the future so um I'm sort of wondering why we have to talk about this in the abstract when there are specific examples that we can we can use and different decisions we could make in the future Jay thanks I I this this binding ourselves to the Future bid is the really key bit to me um if we imagine that we're 10 years down the track we have another 3,000 RFC XML um rfc's published um do we really want to uh if we at that point if we decide to make a change to the um uh to the XML have to"
  },
  {
    "startTime": "00:16:03",
    "text": "go back and edit three and a half thousand or more you know 4,000 rfc's in order to to implement that change um and if if we okay if people say yeah 4,000 is fine at what point does it that become ridiculous is it 5,000 10,000 or something um I just to me it's unsustainable at some point we have to just accept that there will be two versions of our r f cxml that are the definitive versions um and at some point future there might be three and at some point later there might be four so the that then leads to the second question which is are we then going to maintain tools forever in 10 years time you know 20 years time are we going to say we're going to have a tool that can still reproduce the version um the the publication formats that were used 10 years ago from the 10 year- old version of RFC XML um and my answer is no no of course I'm not going to do that so I think that this is actually quite important we we we think sometimes thinking about rfc's as if this is some kind of software process you know um as as if we need to be able to demonstrate that that that that the code still runs almost you know that publication format I don't think it is I think we are this is an informational format we're getting something out and once it's done it's done you know we don't need to go back and change it so um which is why I'm equally of the view that if we change the RFC XML to fix the address problem that John once changed and which I do as well we don't need to regenerate the output formats as a result of it because we don't have to prove that we can so th those are to me some logical conclusions that we come to if we start thinking how's it going to be like in 10 or 20 years time okay okay"
  },
  {
    "startTime": "00:18:00",
    "text": "Elliot yeah uh great conversation um everybody's making good points um one of the things that occurred to me is that um it may be you know if we're going to make changes to you know ex to to the to the document suppose we have to change the output format or we find if we find a bug or or if there's an improvement that seems universally good um you know the I I think I mentioned this on the previous call I just want to restate it because it may be something we could find Value in which is to borrow from the publication industry and uh use uh the um uh you know the print uh there there's a printing number that's on every book now it it's not very common that you would see this in on a web page right uh per say because web pages are generally considered to be quite dynamic in nature um but but for our purposes um what we need in the brand is stability but a reprinting is not something that that that that people would view as an unstable thing so we have some tools in the toolbox the other thing I wanted to mention is that I thought that um uh and I said this in email but I I'll bring it up again here I thought that Paul's initial take at least on Section 4.1 in in adding constraints to change I thought was was was a pretty good take and um I think it needs a little bit of more specificity as I said but um I think it's well on the way in in the direction that I would go to so we have some tools we have some some reasonably good text um and to Jay's point I just want to say that I I generally agree with what he's saying it could be that we want to change certain adornments in certain publication formats over time we have to change those backward compatibly it may make sense to do so if you think about uh having a a heavily linked"
  },
  {
    "startTime": "00:20:03",
    "text": "system in which you're bouncing between rfc's and you want to keep say the sides if you will or the you know the frames uh coordinated you might have to make certain changes there um I might be even okay with that we just have to be I think somewhat careful as how at how we do this and and that we uh walk you know crawl walk run on this and the last point I'll make is that we get to do this again that is to say whatever decisions we make and let's make some we can update those based on operational experience we don't have to have perfect be the enemy of good we can decide what we agree on at least move forward on that and continue to discuss uh things that we couldn't yet come to agreement so I I'll stop there thanks go ahead Paul this is actually a question for Jay I didn't understand the last bit of what you said um if there's an agreement and I think that there is that we don't have to change all of some existing set of rfc's if there are changes to the uh vocabulary um or if there are changes as Elliot just brought up to the desired out the way that the the desired output looks um and and we've seen that already just as a side note when we went from plain text in the plain text format now um it's not paginated we didn't go and unpaginated the you know the 8,000 rfc's that are already published so we do have um history of doing it but Jay I didn't understand if at the end when you said well we might change the the XML in a way that would not necessarily appear in"
  },
  {
    "startTime": "00:22:02",
    "text": "any of the output formats and therefore we don't need to regenerate the output formats is is that what you said um sort off so what I said was that if we make a change to the RSC XML that we in expect or intend not to have an effect on the content of the output format then it doesn't we don't need to regenerate it's actually to me we don't need to regenerate which we don't need to regenerate the XML or we don't need to regenerate they don't need to regenerate the output format so specific the example I was giving was the address change okay we are not going to change the data of the addresses we're going to change the way that they're held in the XML with the same data and they we are not into I mean way that that is then output in terms of The Ordering of those data objects for for an address may change without us doing considerable effort to ensure it's exactly the same output okay but ultimately none of that matters to me the fact that we have an RFC in XML with a set of data objects that are the ones that are in the output format is fine the fact that we haven't generated that output format from that RFC XML doesn't bother me in the slightest it is the output format is still correct it's just got a slightly different ordering of the address objects which is Trivial as far as addresses go so okay so wait wait stop I I I hear what you're saying but I want to point out something that I have said and other people have said on the mailing list which is if we change the XML and we don't change the PDF we've broken a promise that the PDF holds the XML if we change the PDF then we need to regenerate the the HTML so either we"
  },
  {
    "startTime": "00:24:03",
    "text": "stop making the promise that that the pdfl if you recall I have a sneaky trick around that which is we simply edit the PDF to take out other people on the list pointed out that that's a horrible idea that is not necessarily going to work why why do that instead of just regenerate it because regeneration is ultimately a very risk thing to do because we have no way of validating that the content has not changed it's it's difficult it's a hard problem for PDFs we can potentially do it for text files okay but for PDFs it's a hard problem okay so I disagree we will'll have to have this one on the list I I fundamentally disagree with the idea that you edit a PDF even if we believe it safely to change the XML and not reject generate the PDF I to me that that sounds horribly risky given what I know of the pdfa format but okay thanks that that answers my question so okay Pete I I have a question I think mostly as chair to try and get my head around what's being said here because I haven't heard something that uh John mentioned earlier discussed if we want to publish a new rendering format UB an audio book that is um uh um you know automatically generated not read from the text um etc etc if we decide that we need a new output format what does that mean for the XML do we go back"
  },
  {
    "startTime": "00:26:05",
    "text": "and are are we going to have to recreate tools for old XML or in order to generate the new publication format for the old rfc's do we not generate new publication format for the old rfc's or do we adjust the XML so we only have to build one XML tool I'd like to know what the thoughts are on that but Julian can go and make his comment I see others coming so um starting with your question um when you say audiobook maybe you have some hints in the XML in mind that would affects the rendering of the audiobook like something affecting the voice I mean um we should be able to produce Audi books without these hints but adding those hints probably the idea probably would be to make the quality better so that would be just an extension of the RFC of of the XML form right and not necessarily be needed in old EX in an Old Source Code anyway um what what I wanted to say is going back to Jay um I I think the idea of trying not to regenerate publication formats because we think we don't need it is horrible I currently spend like 80% of my time doing working on technical depth where people thought it would be a good idea not to update the dependencies in a large project because the old ones did"
  },
  {
    "startTime": "00:28:01",
    "text": "work and then suddenly we find out oh we need to update and then we find out oh um since we updated last there were 100 changes that we didn't like and what do we do now do we for the project do we build different libraries with different versions of the dependency and so on this is where Madness starts so if we think that we have a change that will affect the renderings we absolutely should generate everything and try to write tooling that verifies the output but assuming that if we generate the PDF with with version n and then skip versions n+ one to n+ 9 and then find out that we want to regenerate it with version n+ 10 but we've note that we have tons of changes that broke it in between but didn't notice then we have a hell of update problem so break break things early so that they get detected when we can undo things just saying we are probably not going to regender this sorry rerender this one and then 5 years later we find out we need to rerender it but all the changes we made in the tools have undesired effects for that specific RFC then we have a forking problem and um I absolutely don't want that and keep in mind I'm talking here from the perspective of one of the authors of the grammar one of the maintainers of a renderer and as an author of multiple not that unimportant rfc's so I see it from all potential perspectives I"
  },
  {
    "startTime": "00:30:00",
    "text": "think so you really don't want to skip pre-rendering if you don't have to for what is worth um we recently had an XML to RFC update that undid a change that broke output and I actually catch that because I'm rendering all the XML source files that I have with that tool I only catch it too late but if we would do that in our production of RFC XML we render everything and check for diffs that change wouldn't have G gone unnoticed that was a completely avoidable breakage so sorry for the long rant point a clarification um I think I'm going to kind of thread the needle and agree both with Julian and with Jay I think in the short term um there's some changes we would make like to fix to fix the mistakes and there also there's a certain amount of for historical cruy reasons there are elements that can appear in one place but not another place that that you would think would be the same you know so I think that we could do B using what we have learned from V3 over the past year I think we could we could do one change that would clean up you know the mistakes in the grammar and you know and come up with something clean and and extensible you know and to the extent that wasn't that change stuff then we would mechanically fix the XML so going forward call that 3.1 so now everything is in 3.1 and we continue to publish in 3.1 and if people want to add new stuff like the improved math stuff in ways that's backwards compatible we can just go ahead and do that and update the tools and we don't have to change anything because the old 3.1 continues to be valid and this is this is what we've been doing all along along I mean if you look at the earliest XML rfc's"
  },
  {
    "startTime": "00:32:00",
    "text": "there's all sorts of features that's there there there's all sorts of backwards compatible additions to the grammar that aren't used in the early rfc's but it doesn't matter because they still render now at some point I imagine we'll get to the point where we're like wow we've learned so much that we're going to change stuff completely then we have a V4 you know at that point I think then we need then we need to decide okay is is it is it practical to mechanically turn v you know v3.1 plus into V4 or you know is this going to be like V2 to V3 and simply say okay we're start we're gonna we're going to start over with a new version of the tools but I think that's not going to happen for for for a very long time so I think in the short term sort of fix the mistakes fix mechanically fix the XML so that everything's now in a format we like and now also we have a pro and now we can go we can establish a process where we can make backwards compatible additions which is what most people are asking for in ways that don't break the old XML don't require rendering and the tools continue to work on all the stuff that's published so John I think I hear you saying we don't have to uh deal with the bigger issue now let's deal with a pragmatic make things more consistent and then once we've lived with that for a while we can consider whether we want to uh open the bigger pan of worms yeah I mean the one place that might not work is with um diagrams because the current the current diagram grammar attempted to specify exactly what elements can be used in one combination which turns out not to work what it should have done is simply specify sort of the out so for example I mean what we want is the diagrams have to be black and white and so it specified you can only use like a one bit pallet and in fact the tools all use bigger palletes but they only have two colors in them so we need to go back there and say well what you can do is"
  },
  {
    "startTime": "00:34:01",
    "text": "you know basically specify in terms of results rather than than inputs and we can probably do that in a way that's backwards compatible but I simply don't understand XML Graphics well enough to know whether that works so with that caveat I'm basically saying yes to your question okay Jay before J goes just a quick reminder to people it like um John if you plan to speak repeatedly go ahead and just use the local mute button in the lower right instead of turning on and off your mic because you get clipped at the beginning sometimes thanks P so just to to reply to Julian I'm not saying this just because we don't need to render the PDFs um and render any of the the extra formats it's because because the risk of doing it is so high because the formal verification that nothing else has changed except what we expect to have changed is such a problem now in the particular case if if Martin's correct and there should be for the address change and there should be no change to the ordering um what we're doing then is we are rendering something to prove that absolutely nothing changes um and I don't think we need to republish you know a thousand whatever rfc's with nothing change to prove that nothing changes to be honest so that's the big bit it's the risk and if somebody comes up with a a nice way of saying yes we can be certain that we can take the scale of a large set of PDFs and verify those against another set of PDFs and say that the only thing that has changed is the thing that we think should have changed then I'll change my my mind on that but I'm a long way from hearing that that's possible um the second thing is we're going to get to this point"
  },
  {
    "startTime": "00:36:00",
    "text": "eventually we're not able to continually always update the RFC XML of old rfc's for every change that comes along at some point we just going to have to stop you know and say right we and effectively at that point we do Fork it and we have two sets of things so my my point of view basically is that we should accept that that's going to happen and plan for when we want that to happen and that is you know I fully agree with John it's a pragmatic choice we don't have to do it now we could do this you know the the the effectively the back porting for version 3.1 3.2 3.3 and maybe do it for a version four or something like that but at some point we need to expect that and then um incorporate that into our plans Elliot all right so um what I would just add uh in listening to Julian right he he he he spotted problems uh during doing his own rendering which I think is great Julian um what I what I wanted to know was whether you felt republication was necessary in those cases even in addition to rendering because I think everybody agrees it's fine well I don't know about everybody but certainly I agree that it's fine to render everything when you make a change but whether you republish that rendering I think is a separate decision Jay's point I think is that there's great risk in that sort of mass republication and um to me I I see that risk as well I think it is I think it is an issue at least initially um and I think I want to avoid Mass republication immediately but I would like to see for instance uh the a distinction made between essentially doing cicd on the"
  },
  {
    "startTime": "00:38:01",
    "text": "rendering which I think is a reasonable thing to do and the republication and with that I if it's okay for Julian to sort of jump the queue I'd like to hear from him personally so yeah you're right that rendering and republication are not the same thing but I mean the the interesting thing here is there are people who say that there's a risk that if we re render things we will not catch subal bucks but then they will go unnoticed if we don't republish so that goes back to what I said earlier if something is broken we better find out as quickly as possible instead of years later when it's very hard to fix so that's why I absolutely think that republishing everything is actually the best thing because if he break something the probability that somebody will notice that and that we can fix that early is much bigger than if we do not republish um the thing that I wanted to say when I jumped on the Queue um regarding non-compatible changes that we might do in the future um maybe it's um makes sense to look at what non-compatible changes we actually made in the past between V2 and V3 and the biggest ones were actually um the grammar for lists that was very different from HTML and we just adopted essentially what HTML has and tables were ex where essentially the same happened so um these were areas where um the special way of XML to of the RFC XML"
  },
  {
    "startTime": "00:40:02",
    "text": "grammar was needlessly different from HTML and that's why we changed that and we back then as the old format was only a tool and not an official ITF format we said it's okay to um make an incompatible change if you have a conversion tool um so these as far as I can tell these are the two big changes we made from V2 to V3 that actually required a converence step nothing else okay John sorry that's an old hand Paul so two things things and I recognize we're getting close to the top of the hour um the first one is I disagree that um that there's going to be a great risk uh if we mess up the PDF format uh the number of people who rely on the PDF format not the others at least from anecdotal information is extremely low and we already know looking through through some of the PDFs right now that are being generated today the way we render as PDF is highly non-optimal if you look at page breaks some of them are really terrible um and yet we don't hear complaints about it so I am way less concerned about rendering PDFs and the risk of them um it's it's just it I consider PDF to be the mind format among the among those formats again with"
  },
  {
    "startTime": "00:42:00",
    "text": "respect to the people who we care most about who are using the RFC series I just don't see developers going oh I don't care if there's an HTML version of this RFC I'm going to read the PDF instead that that that just seems super unlikely um I agree that there is is definitely a risk that will screw things up I don't agree that the um effect of that risk is very high at all um so I would like us to I would like us to worry less about it I really would I and we know that there are tools that we can do you know cicd type checking for the text and for the HTML we can we can visually rerender HTML and you know do comparisons very easily that that's a a very well-known um system already um and then the other thing I wanted to bring up and I and this is there's way too few people on the call for this um so I would like it um high on the agenda in Prague is do we want the 7990 update document to actually be an update or an obsoletes meaning right now and and Martin brought this up when I you know when he and I were working on the current draft of the the patches that I have are incomplete and they don't really go into enough effect they're good enough for understanding but not really you know the whole thing but if we want to do a whole one no I I'm not going to be able to even get a a new version out before the draft cut off on Monday so um I think that's a reasonable thing to ask in Prague um and if we do want to do a full update we need to ask Heather you know whether how how she wants to do with authorship on it"
  },
  {
    "startTime": "00:44:00",
    "text": "okay go ahead Martin yeah so I I agree with Paul about the PDF uh I I think Jay's zero tolerance to to any sort of risk of change on these things is um to my mind unreasonable I I think that we have tools for managing that risk and uh we should employ those tools but uh uh the way that I I framed it in my draft is that um the the this group is responsible for understanding the scope of the risk and uh making a decision based on on that understanding that's it that's the uh that's the extent of our responsibility and it might be that I mean Jay will argue that such changing the PDF in this case is is too risky I I don't agree uh I think there's a number of ways in which we can we can manage that risk to um reduce the the the problem I actually think that uh the the idea that we have professionals reviewing PDFs in in great detail is is probably an expense we can uh we can skip but that's that's a separate thing uh I wanted to follow up on Paul's question uh about documents um so I think there's there's there three ways we can we can update documents and um I don't much care um but I do have some some opinions one is we could we could produce a replacement for RFC 7990 and attempt to rewrite it I think that would be a lot of work I I in in having looked at it and Past Times with with respect to Heather and the people that put a lot of work in on that document I think it's poorly written I don't think it suits uh the our needs right now the the second way is the way that Paul has attempted to approach the updates which is to to look at the specific pieces of text and replace those specific chunks of text and again I think that carries a risk that that you make what is effect a"
  },
  {
    "startTime": "00:46:01",
    "text": "be inconsistent and and that um that carries risks as well I prefer the third approach which is to say we are changing 7990 and we are making the following specific change and describe the change but don't talk about uh specific changes to text and say where this new document uh says things those are authoritative uh if it disagrees with the and don't worry about that and that's essentially the approach that I took uh with my draft uh and this is I think part of the the substance of the disagreement between Paul and I although I think we were we were having a number of uh different discussions about the the nature of how we how we make those changes as well so um it'd be really good if we can get a list of those issues out and I can probably uh volunteer to to write a list of those because I already have that sorry that was that was too much at once okay Paul I think you want to respond I do and first to say no that wasn't too much I think we need to do that you know we we need to have that discussion um I I agree with Martin that those are the three options I actually think the entire rewrite of 7990 um is a worthwhile exercise now um even though it is biting off more work because someone who's looking either at as Martin calls it and I think legitimately my patch file um or his issues list where we say just in general this is definitive they won't be able to uh lay them down on 7990 that that well even now in this working group we are seeing um confusion and disagreements between"
  },
  {
    "startTime": "00:48:00",
    "text": "what our beliefs on RFC 9280 says and means I think the rpat is even having some of those internally um therefore the uh the effort of writing it down getting consensus and nailing it down is in fact the correct thing to do even though I'm volunteering for more work um even though I'm volunteering for more work I'm in doing in saying that I'm volunteering a lot of other people to do more work um Martin is also correct that the a lot of the wording 7990 um seemed good at the time but uh did not age at all well as we started actually implementing the new model and therefore a document that says this is the way you know with our current understanding of the new model to me seems a better way to go g given that Jay is absolutely right we're going to this will come up a at least a few times over the next decade either with additions or or um changes to the vocabulary or additions of new formats that the ietf uh does or does not want to support or quite frankly that one stream does or does not want to support I think having a solid document you know that says this is the way it is in 20 you know 23 or more likely 24 um is the best way to go not not that I think it's worth it today unless we think it's going to be pretty quick but there is a discussion going on about abandonment of the PDFs which needs to be surfaced at some point in Prague if not before okay so um that uh links by the way Pete to the issue that I mentioned about the"
  },
  {
    "startTime": "00:50:00",
    "text": "archival of text currently not being clear um but I I wanted to just highlight something you said Paul because I I thought it really showed the the possibilities of this effort and and the strength of the way that we've done things in the organization in the past which is you know we wrote 7991 based on the previous operational experience now we have new operational experience and we're just applying that so running code if you will is what's driving us I just I thought that was some something worth noting so whether you you know as you saw my preference is a is is to just do an obsoletes um but that's always my preference and and I'll remind Russ that the moment he became ietf chair I said go try to read all the uh the process rfc's um and uh somehow or another he did but I think it's easier if we try to not spread things out across documents when we don't have to I know it's a bit more work for this group and I wouldn't insist on it it's not I'm not insisting but I think it's a nice preference and if it's something that we can do would be great thank you okay observing that we have less than 10 minutes um Pete you've been taking notes do you see any form of consensus or just disagreement we we seem to be moving back and forth um but I guess I mean I wouldn't mind doing a a small nose count on people who lean toward Jay's View and people who lean toward um I I don't want to call it well let's just call it uh Martin and Julian's view for some people um so uh kind of we we have that that tool but I'm not"
  },
  {
    "startTime": "00:52:01",
    "text": "sure right but the question is how do you word it do you agree with Martin or Jay there's not a yes no question what does the tool currently look like um you know we can make it's it works best if you ask a yes no question yeah uh do you agree with Martin maybe would be a way to put it well I look how about just click on click on raise hand if you are leaning Martin and click on do not raise hand if you are leaning Jay just to pick random does that work okay please about yeah I'm writing now raise hand if there we go okay do you lean towards Martin yes or no there you go and there's only 10 of us here we could probably have done it by voice interesting um wow two3 oneir yeah not not not a screaming uh uh you know obvious consensus but actually okay the numbers are not um uh entirely what I expected so that's at least some piece of useful data Paul yeah but I would not call that consensus no by no means no and this is totally the wrong form to do that in you've got a bunch of active participants in the working group who are not on this call no we're just trying to get a feel for the room this wasn't the consensus call absolutely absolutely no that was just I I was not getting a feel from the notes where where things were swinging um and the answer is there is no way that things are clearly swinging"
  },
  {
    "startTime": "00:54:00",
    "text": "so um yeah interesting go ahead Paul this is a question for the chairs is it your intention to try to get this discussion active on the mailing list pre Prague or to wait for Prague I I would you know certainly when I post the notes I think it's going to be reasonable to um say here here's the open question um and see if anybody comes out of the woodwork um I don't see any harm in doing that pre prog prefer if you did it as two things here are the notes and here is a question because the notes you know what we've done in the last last hour covers a zillion things and I think you have a specific question y so starting starting it with that I think would would be better and that way we'll have a stronger feeling going into Prague Jay thanks so I I've put a a slightly different text in um into the question into the chat um which Martin has just slightly disagreed with um but the the I was given some spe specific examples of where we don't have to rerender and so I was trying to get to that principle there do people believe that there is a principle that we always have to render all the publication formats when the underlying XML changes because if we to my view it appears if we have some people who think that's a principle and others who think it isn't a principle but have differing views about when that might you know it isn't a principle and so we could perhaps test that that was just a suggestion AB yeah I my inclination is to"
  },
  {
    "startTime": "00:56:01",
    "text": "um for Russ and I to knock heads together a bit ourselves and um I I'm having trouble formulating what the issue is across people right um that I think you're right some of it may be this issue of do we always rerender is that a principle but I think there's other stuff going on underneath um uh for some folks at least and I want to it may end up being multiple questions we asking can I just come back Pete I yeah of course I I think yeah I think I think you might find that actually that there are you'll get a better set of figures around where the consensus is about that requires or not because it is as far as I I can tell we just not many of us believe in that principle we just disagree on the circumstances and the the rules and policy about when we can do that you know and so that's why I'm turning it around rather than you know that no I get that here here's my issue and and it comes down to Elliott's comment earlier right if there's an always render but don't republish principle you may get a different kind of answer um and we want to be clear about what Ren always render actually means to people yeah sorry mine mine was always render and publish and republish right yes and republish that's that's what I that I you know that's the principle I think needs testing interesting okay no taken under advisement"
  },
  {
    "startTime": "00:58:01",
    "text": "anything else in the 36 seconds remaining so raise your hand if you think we should always rerender and publish it's the same it's the same split so I'm not sure Jay okay in the other direction that's lovely yes very interesting thanks Jay no I'm I'm [Laughter] teasing all right with that we're out of time thank you very much um need to ponder what all this means but uh we will start a discussion on the mail list uh ahead of Prague in the hopes that that will make Prague uh more more productive thank you all thanks"
  }
]
