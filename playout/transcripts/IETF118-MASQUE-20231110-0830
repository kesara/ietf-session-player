[
  {
    "startTime": "00:02:31",
    "text": "Alright. Quick audio check. Much success. Let's get this show on the road. Welcome to mask at IITF 18. This is Friday session 1, as you may have noticed from the sparseness of the people in the hallway as always, this session is being recorded for IETF Hybrid Meetings. Make sure that if you're in the room, you've scanned the QR code to join with the on-site tool and then enter the queue by pressing the queue button. If you're remote, do the same thing, but also you have buttons for audio and video since you're not physically in the This is the IETF note well. It's Friday, so you should have seen before, but if not, make sure to take some time to actually read it all the way through. These are the terms under which we participate in the IITF. and this working group as with the rest of the IETF so please be spectful and treat each other well. You can come to the chairs, the AD, or the ombudsman team, at any time with any concerns. We've got some helpful links here, and you'll notice there is a difference in this slide from normal. We now have a. 3rd chair joining us. Welcome Dennis. And we also have a chair sadly leaving us which is Chris."
  },
  {
    "startTime": "00:04:01",
    "text": "Chris has done a huge amount to help mask and go getting it off the ground in the very beginning with a bunch of the early charter discussions and all the way through with with all of the documents that we've published so far. So so I know David also wanted to say a few things before we all clap for Chris. Man, way to root my surprise. Everyone. David's Kenazi, OG Mask enthusiast. So when we started this party in March of 2020, We were all planning for this BAF, and actually a bit before then, My good friend Chris stepped up and decided to be one of the bath chairs. And so We'd spend some time, and we're gonna have this great meeting in Vancouver. Then there's some something on the new happened in February of 2020. I don't really remember what, but then, Then we got stuck at home. And Well, I I won't give you the long version because It's really long, but Chris was there through all of that, like, really helped us and patiently watched as we figured out how many variants did we need at the beginning of the datagram frame and such fascinating topics, and really got us to where we are today with the 3 main documents published, that took a lot of work, and it was really nice of him. So I know he just boarded his flight, so he's not listening. But, thank you, Chris. And if I if Anyone feels that this is a Good assessment. Please join me in clapping for Chris. And while we're at it, welcome to the party Dennis, Can I have around a clap for Dennis? Because he's gonna do a lot of work too. Thanks, David."
  },
  {
    "startTime": "00:06:00",
    "text": "And, Eric, you're fine. You'll get claps later. That's the spirit. Love it. We got some claps in the chat too. Thank you all for back. Very much welcome, Dennis. Feel free to add come and and chat with both and and either of us. We're gonna be be bringing him up to speed as as we go, especially as we get dig deep into the next phase of fun mask Or should I say enthusiasm? Alright. This is our agenda for today. We've got, 3 slash 2 Currently adopted documents for extensions, and then have what is less of an extension and and more of a a main document for proxying ethernet. Which we will talk about at the end there. Before we get too far into that though, I wanted to call everyone's attention to the fact that we have previously published 2 of our core documents. And That has now been recently joined by a 3rd core document while we're in the mood for clapping, let's do one more round of applause for all the work that all of us have put in to making the skull. Alright. With that back to our agenda, the first thing up is Tommy with Quickware proxy and using HTTP. I'm sorry. Eric, agenda bash, we gonna do the loop thing before quick proxy? Before he talked about solutions, That is a very good point. Okay. So should I approach the market? Well Up to up to Tommy, do you wanna do that before or after? I I think so I I saw your slides. I think the loop stuff is"
  },
  {
    "startTime": "00:08:00",
    "text": "somewhat orthogonal. So, like, the, the presentation here just about, like, the design team's thoughts on encryption and attack models. Excellent. Okay. So I think there are 2 separate topics on the I don't think they're Alright. That's fine. Whatever you think. Let let's insert that after after this, but before listener, That's what happens. Alright. Take us away, Tommy. I think I granted slides, but I can turn off mine if that gets in the way. Yeah. I'd like to be able to choose the slide deck area. Okay? Alright. Hello, everyone. I'm Tommy Poly from Apple, and I'm going to be presenting a slide deck that was built by committee, which is the best way to make slide decks. In seriousness, this is the, initial thoughts of the design team that was formed since the last TF. To be clear, this is, an update. This is not like the final result and the final recommendations, but we wanted to give a status update on what we were thinking. I think we've made a lot of progress I'd say in about the past month we've met, 4 or 5 times. And definitely names up here are the people who've been participating in that discussion. So let's talk about what we're trying to do. This is not everything about the document, Martin's gonna talk about some other things. Interesting about quick where proxying later, But the scope of design for this particular Zion team is talking about the threat model. For the forwarded mode proxy versus the standard connect UDP mode, which we're calling tunneled in the document And we're trying to work on proposals for how we add encryption, and then also analyze how these proposals and who the the standard forwarded mode, That's currently in the document."
  },
  {
    "startTime": "00:10:02",
    "text": "Impact security and privacy properties and how they compare to the tunnel, Okay. So overall, here's a summary of what we've done so far. So we've talked a lot. About the various passive and active attacks that you could have for both standard U2B proxy, and forwarded mode. We've, and particularly Ben Shorts. Has done a great job writing up a proposal for an extensible re encryption model for forwarding. So this is, like, a way you can specify when you're setting up the proxy what type of re encryption scheme you want to use we can define one now and potentially have new ones in the future. And then we propose one now. Which we're currently calling scramble that is just encryption without adding any extra bytes. Okay. So let's go. And as we go along, happy to have any clarifying questions, other discussion. Okay. Let's start out with the threat analysis. And I'm not gonna go into detail on everything that you're gonna see here on the slides, But this is gonna be some good background material. So first, our overall threat model that we're assuming is that we have an attacker whose goal is to break the privacy pro properties we're trying to get by doing connect to UDP in the first place. And they're trying to learn what a particular client is trying to access. And Because that's that's the conceptual goal when you come into, like, the reality of this it's equivalent to a attacker trying to learn the mapping between the connection ID that's seen on one side, for example, like the proxy to target path and the connection ID seen on another side. The client to proxy path. And these may be one to one mappings, many to one mappings, but"
  },
  {
    "startTime": "00:12:03",
    "text": "We assume that if the attacker is able to very assuredly correlate traffic from one side to the other. They have achieved their goal. For the purposes of this general tax base. Okay. So with the help, particularly of Antoine, I wanna thank him a lot for though, background he's brought from other systems like tour and the, academic research that's gone on there. We ran up a bunch and The overall categories of attackers that we wanted to distill down to are global passive attackers and global active attackers. Passive attacker being able to observe traffic on both links, and active attackers being able to inject or drop or copy or delay or somehow modify the traffic on one or both links. And we found that it, Essentially, this analysis should cover kind of most of the cases based on the literature that's out there. Are here some examples of the typical approaches, to performing these attacks that you have for TORE and other systems, you're trying to observe the pack of metadata between both sides. You're trying to also also, correlate traffic across this. And as we'll find the, the traffic correlation using timing or packet size is much harder to protect against And I think we found his somewhat orthogonal to our re encryption problems because that these problems largely exist whether or not you were doing forwarded or tunneled mode, and they need other mitigations in order to protect against this. Okay. So let's go now through"
  },
  {
    "startTime": "00:14:00",
    "text": "what we've done as these are initial pass on, for how the passive and the active attacks apply to UDP proxy. I will appreciate if there are threats that you can think of that are worth mentioning that we have missed Please bring them up. Okay. So for the passive attacks, So just someone who is able to observe, there are 2 main categories here. One is just recognizing the bytes in the packet of, like, Hey. I saw this entire packet on one side. And Look, the exact same packets on the other side. Or disconnection IDs on one side, and it's not on the other side, or the the payload after the connection ID is on one side, and it's also on the other any of those things. Like, you just recognize a pattern in the packet. So the tunnel mode doesn't have this problem because have your encrypted channel to the proxy, and then you have your end to end encrypted channel. That's being tunneled through that. And the current forwarded mode, even though it swaps out connection IDs, isn't re encrypting the full body, and so you can recognize the body of the payload after the connection ID There are also this These other attacks that are based on timing or size and mentioned on previous slides, From our understanding, both tunnel mode and forwarded mode, arc, equally vulnerable to this at this point. It is possible to do mitigations for both of these with other techniques and extensions of adding padding, adding chaff, and lots of other things you could do But that's not something we've specified or analyzed yet. And is is, like, another exercise separate from the conversation we're having today. Ellis. Alex Nehanovsky, Google. I'm not sure I went a 100"
  },
  {
    "startTime": "00:16:02",
    "text": "percent understand the claim that the existing RFC 9298 is inherently vulnerable to the timing or packet size 1, because isn't it the case that you can mull easily coalesce multiple packets together. Sign multiple data grounds in one physical packet. When you're getting responses, like, yes, I agree in one direction. There is necessarily going to be Well, actually, no. It shouldn't be able to do that in both directions. I agree that the naive implementation is obviously vulnerable. Yeah. Yeah. I I I think Right. The naive implementation, yes. And You need to go out of your way. To do something to either coalesce packets for change the timing to quantize things or to add padding or add CHAF and, like, yes, in some cases, you could coalesce packets that's assuming that your data grams are small enough But also, like, you still have a timing problem. Like, if I Yep. Yes. I'm sending. I have 2 small act packets or something. They get coalesced And now you see at a predictable timing two packets that add up to the size. Like, there's a whole realm of analysis that can be done here on, like, what are actually viable ways to protect against these attacks. And I I'm just saying, like, the it it is not a solved problem of where we have like, oh, here's just the check this box and now you are no longer Yeah. Couldn't be analyzed by passive attachments. I I I think that's true, but I guess the concern I have with this particular presentation is that I think that it does a useful thing. Of of giving you a yes, no checkbox, but I think that a slightly more useful view might be look at the gradations and also connect it to back to regular connect TCP. Because I think that the threat model here sort of changes as you're not fair model. The analysis of the fair model changes as you compare all of these technologies because I think"
  },
  {
    "startTime": "00:18:03",
    "text": "unless I'm mistaken. I think in the forwarded mode, right, the timing or size issue is a little bit more exacerbated without doing some of these mitigation and possibly changing the way we're gonna specify this. Compared to what I think is true in the tunnel mode, because I think you have a little bit more ability in the way that we have formulated the connections So, like, I think that I think that the category is not just yes, no, is it vulnerable, but rather how much effort is it going to be to apply mitigation? I I agree. I agree that it's interesting to look at the effort to prevent these particular attacks. And I I think it is the case. It, like, the naive approach in both cases is both have the problem we can talk about obvious ways that you could try to solve the problem for the tunnel mode. I don't think there's been analysis of like like like like like like like what would release of it. And I, I think Yeah. While the approach for forward rent, There still are approaches that apply there as well. Yeah. Yeah. I'm not supposed to be written down like they the process to solve that need to be written down for both, both, because both of them by default would not be Yeah. No disagreement there. I I merely was trying to make point. And and I'm not sure if this is true or everyone agrees with this, but, like, the claim that I am making based on my understanding of this problem. I believe more effort is gonna be required on the forwarded mode. And I think that that means that we need to spend that effort on both. Both. And make sure that we're getting sort of similar properties if we're even going to bother with this. I So I I think that's something for the design team where whoever else to go back on because I'm not I'm not convinced that it is necessarily easier on one or the other. I think, like, said They're both difficult."
  },
  {
    "startTime": "00:20:00",
    "text": "But there are some things that Ford And Mode makes it easier to play may have could have been also part of the 19. The point here is that we decided to not consider that in the design team because as you just said, it's analysis that we need to do for both, and we decided not to do it yet. So if you wanna do that analysis, then I think that's probably a separate design team. And I do agree. It might be easier to mitigate the problem in tunnel mode than in forwarding mode, but I also want to mention that this is like this is something that we did discuss. This is like one of the most used attacks against things like tore or whatever. And these attacks are very sophisticated. So even if it seems like super easy just add some petting or whatever. It's not that easy in both cases. Martin Duke, linkability enthusiast. Guys. To just, I mean, having thought about about this a lot in quick help be, And I think you're alluding to this with the checkbox thing, but essentially, there are no guarantees here. There's, like, a continuum where on the left hand There's one client connected to the proxy, and you are linkable no matter what magic stuff you do. And it like, the the right end of that continuum there's, like, their infinity clients and, like, even having very few kind of measures. Like, you're not very linkable. And whole objective of this thing is just to move from the left end to the right end of that continuum that's kinda best you can do, but it's all just a probability game and And it's not like encryption where you are, like, safe or not safe. It's not a binary in that sense. Yep. And I think it's important to communicate that in that discussion and and and security considerations when you write them. Yeah. Exactly. And and To be clear, the design team agrees that it needs to be a lot written in security and privacy considerations here. None of that is predicted. At we have slides. Be common. Colin James. I mean, this whole discussion always ends up this way. It's for the literature is filled with failed attempts to do this, but there's one"
  },
  {
    "startTime": "00:22:00",
    "text": "There's one point that's actually fairly solid, which is constant bitrate protocols. Achieve a certain level. So the question that I think would be interesting to ask on these is just simply a check mark and say yes, no, which is, you know, can we ease is it is it obvious how to do a constant paper version of x, right? Like, that's that gives you a simple design point near an end without doing an crop load of analysis and without trying to come to consensus on whether a given set of attacks. I mean, I totally agree with Martin's characterizations of the spectrum. And and, you know, it being very difficult. But, We've seen time and time again, constant bet rate is generally a a very solid point on that spectrum that's easy to understand, and it's easy to analyze whether you can do it or Right. So I would I would ask maybe do that level an a set of one checkbox? Yeah. I I think that's a good way to phrase it. Like, and in this case, my understanding is you could, you could, if you wanted to, absolutely do a constant date, right, with either approach, you would need to define some way to negotiate it to agree that the other side wants to do conce a bit rate or tell it to But it should work the same for both. I don't know who's next in queue. Yeah. So also what we It's me. didn't look at the design team, I think, is solutions that would add more bits to the packets because then you go into all kind of other until you promise or whatever. So I think that was kind of also a little bit the scope And I just want to mention in that sense, like, if you you go in that direction, then, like, the question is what's the point where you just say instead of using forward remote, I just, like, go back in this connect UDP because then I can like, actually better properties. David's Ganazi. To answer Alex's point, part of The reason we kind of phrased this this way and maybe, like, the the checkboxes wasn't the right way to do it, but our what we realized in the design team is we were looking at specifically forwarding mode and the attacks on it,"
  },
  {
    "startTime": "00:24:00",
    "text": "a bunch of them were like, wait a minute. You can do that same attack on regular connect UDP. And we have to draw that line and say, okay. If If you can do that attack on Connect GDP, the regular 19298, modified then There's no point for us to solve it here. Like, the goal here is to develop a solution where they slightly, weaker security model. But we were we first before we do that, we have to define the the previous one. And so in particular, like, an attacker injecting packets on the target to proxy like to the proxy that can control the sizes. Can do some traffic analysis on the other side. Things like that. You're jumping ahead on my slides. Then I will stop talking. Yeah, me again, one thing I I I I do also wanna endorse kind of Alex's thought just what is the difference between this and tunnel mode, which results what your slide is. And One thing that that strikes me is that, padding is quite straightforward in tunnel mode. And in proxy mode, unless you're gonna load the target, which is probably not ideal We I I won't see what your scheme is, but you would need something kind of special to, like, cost padding and that we thrown away at the proxy. So I'll I'll I'll, I guess, wait for the rest of the slides. Thanks. That And As as we all get into the proposal that is still very early on for Benoit would allow essentially negotiating what you're doing for your encryption. And so, like, you could have a version that says, you know, I don't want extra padding or, like, I do need extra padding and, like, you agree on Like, we've talked briefly about it. It's not like all fully fleshed out, but it If you're negotiating this anyway, you could say, like, also add random pattern using this algorithm and then just Yeah. Yeah. I actually I don't wanna design it, Mike, but I think padding UDP options that are super easy. Mercical. Okay."
  },
  {
    "startTime": "00:26:00",
    "text": "Alright. Let's I think we're drained the queue now. One other thing, just just to explain on the slide, Crazy as well Alright. You go have your chat. Mira's last word was easy. Yes. Yes. Is is it Trent? Okay. So the the mappings this is just like a difference. It is not clear to us if it's, like, necessarily a good or bad thing, but one difference. Is that generally when you're in tunnel mode, the client path is gonna have 1 or relatively fewer connection IDs, And the forward path may have more if you're talking to many different targets. And if you're doing forwarded mode, there is a more one to one correlation, although that is not necessarily the case. So, like, There's going to be different correlation between connection ID seen on both sides. Between the two different schemes. Unclear in all cases, like, whether or not that's a good or bad thing. Also, for cases where we're doing just like multi hop proxies, it's probably one connection anyway, and so it doesn't make a difference. We just wanted to point that out. Okay. So won't go into all the details here, but Ben has risen up a PR which you can see there. PR 87, that's, sketching out this scrambled encryption mode It's essentially, just a way to Scramble all the bytes, change the CID, and then be able to decrypted on the other side. The key that's used to encrypt any given period is sent across within the, requests of being declined in the proxy. So it's fairly straightforward. It should work for pretty much all quick versions. Like,"
  },
  {
    "startTime": "00:28:02",
    "text": "it it it requires a certain, I think, like, 16 bites of entropy. Know that's gonna get, if you had some quick schemes that didn't have that long of like a tag size or other Randomness, then you would have to come up with a different model for this, but the proposal is that you you would have a way to say what are all the different re encryption schemes you would support. And so if someone ever invented a quick version, that doesn't have that much randomness in it you could adjust. For that. So, go read that I won't go into the details more unless people have very specific questions Okay. So the goal of that was to just say, like, hey, for that first one where we definitely had a clear regression let's fix that. And we think that this does a good job of fixing that. And we can go into separately the stuff we were talking about before about how you would be able to add padding or other types of things. Okay. So now we get into attacks. And these are super fun. So this is listing the main ones we thought of. So just to quickly go through these, there are a couple There there's several mainly on the client to proxy leg. Are problematic. And then a category that's on the proceed the target leg. So There are a couple different ones that only forwarded mode is vulnerable too. So and that that's because it's not doing authentication or replay checks. Unless you because we have to do authentication or replay checks, you would need to add bits. To the pattern. So an attacker could inject a packet the client to proxy with a CID that it's watched go on that path."
  },
  {
    "startTime": "00:30:02",
    "text": "And be able to recognize it based on timing or size coming out the other end. And so that is something that an arbitrary attacker with normal tunnel mode couldn't do because it wouldn't pass the, integrity checks there An attacker also could just take a packet that observes and, like, replay a bunch of it. So I could say, like, you know, I'm gonna see your packet. I'll just send it ten times. That, of course, would not work with normal quick. But if the the forwarder, if it's naive, would just pass that through. You could add a basic like, obvious anti replay mechanism into the forwarder logic to say, like, I solve this back. I'm gonna have to send it again. But that requires much more state on that thing. So the, However, there are also attacks that do apply to tunnel mode. You can corrupt of the packets, and then see kind of, like, in the stream packets where you are seeing drops. So, like, if I'm observing a lot of traffic going by from many different clients, on both legs. And then I want to say, okay. I'm gonna attack this one client to try to identify which flow is on the other side, I corrupt the package that are being set by it, and observe which ones don't come out the other side so, like, which ones don't match the timing pattern. And now Like, which CID is dropping packets on the other side. And now I've identified the correlation between CCAD. So That's actually a case that only exists in tunnel mode and doesn't in forward it mode because the forwarded mode is naively passing it through. So the active attacker that's capable of attacking on this link can equally tap both get the same correlation. And then both of these are vulnerable to other direction because there is nothing that the proxy does to really check the packets that are going from target to client, So you can just inject whatever you want there and recognize timing, or you can drop whatever you want there and recognize timing you can add"
  },
  {
    "startTime": "00:32:01",
    "text": "burst of Exactly this size packet and recognize on the other side. So If you are an active attacker, from what we see, you can do the correlation no matter if you're doing forwarding or not. We also discussed some, like, congestion based attacks where you can, like, suggestion and see who reacts based on different things, but that gets very complicated. I'm not gonna go into that right now, and there's papers on tour you can read if you wanna read that. Okay. So that's bleak for active attacks. So based on that analysis, we are inclined not to try to do very complex things to try to make, forwarded mode look like tunnel mode in terms of these checkboxes, One could imagine, and we did talk about for a while, like, okay, you could have scramble with, like, some really short authentication tag and some, like, Aerie Short. Like, replay counter, to prevent the obvious attacks without expanding the packet size too much. But It's not really helping. Against an an actual active attacker so it adds a lot of complexity. It's just getting it to be more and more like quick and you're just reinventing the wheel ahead and and we don't think that's the right thing so and and to some degree, if if people are worried about difference between those attacks of someone dropping packets versus adding or replaying tactics, like, packets. If you have a scenario where One is possible and the other isn't for some reason, maybe that determines whether or not you choose 1 mode or the other but it's not clear toss that there's, like, a the policy. Obvious definition of like, oh, yeah. An active attacker wouldn't be able to drop packets. But they are only able to inject in certain"
  },
  {
    "startTime": "00:34:00",
    "text": "Alex. Alex Schroovsky. Of the things that I think might be a useful framing, because I do agree with your conclusion, is to compare it to what the status quo would be, which is a completely non tunneled connection. Because I think A lot of these things look very bleak Only until you compare it to a non tunnel connection, right, At the end of the day, the question for this this whole mode is what additional properties is it getting you over the baseline? And the baseline is not necessarily just connect UDP tunnel mode. It's it's not having this thing at all. And The evaluation function is the difficulty that we have imposed upon an adversary to extract this information. Right? Like the type of active attack that you're talking about here is you're talking about an adversary who has the ability to observe traffic on one side of proxy possibly both sides of the proxy, and to manipulate the connection. And They're very powerful. That's that's a very powerful threat model. And, like, I want to make sure that while we are acknowledging that the amount of effort it would take to mitigate one of these attacks is high. It still has substantially raised the bar to you can plug in your ethernet cable into someone's network and completely mess with something, for example. So I think I think when we are finishing up the text for this, I would suggest we look at the framing against the true baseline of not having this feature at all, not just against telling. Because I think it will help better set what capabilities we are getting and what trade offs it produces. Thank you I also appreciate that you are predicting our future slides as well. So thanks for that. Martin Duke, Google. Two things. First of all, I agree that, like, the authentication tag thing is just pointless."
  },
  {
    "startTime": "00:36:01",
    "text": "Not just because it's it's complicated, but because you cannot impose any requirements on the target. And actually, I think the target is packets coming from the target are, in many ways, more dangerous or pretending to come from the target. In response to Alex's point, what I think is different from just having a normal quick connection is that there's a proxy that in practice is going to impose potentially some congestion control limits, but also flood control in, like, proxy buffer limits, on the flow, and there's, like, some potential for doss attacks that that essentially just steal somebody's capacity to interact with the in that sense. Now that's also true in Connect UDP. Because you can just you can inject, like, you can spoof the target and, like, fill up the channel. So it's not a diff from connect UDP, but it is sort of a threat to deal with. That that's that's unique to having mask versus connecting directly to the target. What? Okay. We've trained the queue. Alright. What do I have next? I think this is the last one. Yeah. So I I actually really like how Alex raised it. So maybe that's a better way to put the whole thing. But I wanted to end on like, what are we protecting against or, like, what are we actually comparing to? And I I think this is important when we're looking at all of these in general, And I, I think, you know, with scramble, we're actually able to Get it. Get to more or less the right parody, Modulo mechanisms for allowing padding and chaff and other timing correlation attack prevention. However, It's useful in all of this to look at what is the correlation tech actually getting? So in cases where you are trying to use Connected UDP in, like, a 1 hop scenario and the client, And the target they're going to are very sensitive. Like,"
  },
  {
    "startTime": "00:38:02",
    "text": "I am a particular user, and this is my entire browsing history. Like, that's a very sensitive thing. And if you get correlation of that, you have honed a lot of information. Now you also have to contend with the fact that that one proxy hop also has visibility into thing. And so it's a very vulnerable place so that if you just get it to log, what it does, now you have a lot of correlation. However, in cases when you have multi hop proxies, and essentially the target is just another proxy hop. Especially one that's, like, kind of like the generic second hop. For something. The correlation check also isn't exposing all that much. So I think it's important, and we don't want to Minimize that. However, like, in those cases, you're really just learning another hop to look at to go and try to attack. You haven't necessarily learned anything about what user activity is. It gets gets much more into, like, the full tour analysis. And another point here is that you know, the One of the most powerful attackers here is kinda like the next topic tacker itself because it is able to inject whatever it wants. So, like, if that attacker as this the second hop wants to observe traffic on the other side, it could do a lot of correlation attacks, So just things that all need to go into security privacy considerations. For all of this when we're thinking about it and what deployment models are appropriate. Because I think that's ultimately where a lot of this, the privacy comes from as what parties are you having involved in this. How protected are your links? What are the relationships between the parties and the trust model there? Okay. That's all we had. I think this has been useful input Please let us know if you think any of the directions we're going in or the conclusions we're coming to so far are really out"
  },
  {
    "startTime": "00:40:01",
    "text": "WACC. So far, it seems like the main thing we want to do is Add more discussion of how you admitted but not the full mitigation for timing attacks. But the the knobs that would let you do the equivalent things to what you could do when you're in this forwarding mode. Now we have the Q Chandra. Tianjin, China Mobile here. Have you when you are designing, this is a highly since, protection protocol, have you ever considered some light weight, weight, weight, proco because, for for some part of your it, you may have, like, a controlled domain. Like, for example, in the wireless side, That is the, the the access And then it's a fully controlled, and there are a territory but we run the proxy, the connected UDP proxy and the egress router. We call the UTF for 5 g. And then beyond it is uncontrolled. So both ways like you initially, you are connecting UDP from inside. Taught outside or vice versa. Have you ever considered this above lightweight? Sure thing. Removing the overhead of the re encryption there. I don't know. It's just, you know, I'm I'm I'm looking at the, you are no design here, Casa, in in the scenario, we have the real, requirement cuts for the rent, and, for the access. Basically, from the client proxy is within the control of the domain. So we have full control. There's no, listeners attacker from that side. But beyond it, who knows? So have you when you are diva, have you give some, like, a recommendation for this type of the light or one way Only. Know, So Not sure if I fully understand the question, but what I will will say is this."
  },
  {
    "startTime": "00:42:01",
    "text": "Like, the overall point of the quick wear forwarding mode is to allow the proxies work to be more lightweight to have to do less processing, have less overhead, both a pack of size and processing. And as it stands, the current definition that's not doing full green really, it, like, allows you to Like, you just have, like, a quick handshake to your gnat and then you have a gnat. And, like, so it's extremely lightweight. So I I I think the point of doing quick words to be very lightweight What we're trying to do here is protect against passive correlation attack by adding some scrambling re encryption. One of the open questions, which we didn't get into, in this deck is within this negotiation mechanism where you could say, yes, I want to scramble or I want to do scramblev2, Do you also allow people to essentially just say, like, the null encryption and just like, do what is currently defined in the draft and say, I'm like, this isn't actually all their privacy sensitive I'm just trying to route through an app. And, you know, the next hop is just like don't care who sees that. And so I think for your use case, potentially that's an argument then to allow that. And then it would be up to both client and proxy agreeing on that and agreeing that, yes, I don't think this is sensitive. I am okay just forwarding these packets and allowing correlation fees. I either I don't think there is an attacker, or more likely is no information to be gained by correlating this. I'm just going through the proxy so I could get the benefit of proxy. Okay. Sure. Thank you So, note your hat, just speaking as a participant. Some thoughts. Like, in the talk community, you know, there's a long history of looking at this as you you referenced I think global is maybe a little strong. Like, Tory in general doesn't even talk will not help you against a global even passive adversary. But quite often,"
  },
  {
    "startTime": "00:44:00",
    "text": "you're interested in an attacker who is willing to go to the time and investment to say sit between the proxies on that middle hop and then sit near a target. And then try and do these kind of tagging and passive correlation of tanks. There, I think, you know, a slightly more granular analysis would probably pick up quite a few more details. They're important. Maybe you don't want to go that far. Then it's good to say, you know, we're not gonna go beyond. This point of protection. For what you consider. And then On the solution side, there's like a gazillion academic proposals that are kind of stronger than AES counter. You know, to give you not quite authenticated encryption. They don't blow up that the ciphertext size. But they will provide stronger protection against kind of attacking attacks and stuff. I don't think anyone has ever shipped them. It would be good to, you know, say We looked at these, and they don't work. For for reason xyz just to just be able to That's a title of an event. I I also think, another solution rather than saying, we looked at these and they don't work is We we don't know if they work yet, but here is the mechanism where once you define it, you slotted in here instead. Absolutely. Absolutely. Yeah. Great point. Yeah. It could have been again, just on this point. So I'm we could do that work, but we should do it then for forwarding and connect UDP because it's for post relevant, and we didn't do it yet. So I think it's actually a separate point. I just wanted to come back about, your comment, where the baseline is, and we discussed this last time. And so, basically, the forwarding mode is somewhere between just plain quick and connect UDP. And I think what we try to do in the design team is 2 things. 1, find the right point in between. That we wanna choose. And the other one is also this type just widened the difference between those two things. So if you want certain properties or if certain deployment scenario, you can actually pick the right thing. Were Yeah. That's the next step. That's fine."
  },
  {
    "startTime": "00:46:03",
    "text": "Sorry. My my make wasn't mute. To answer Denis's comments, I would be delighted to have a pointer to the works that you mentioned about the encryption production made in tall because think it would be candidate for alternative to the scrambled mode that, Ben has designed as part of the design team work, and, it we could consider we can consider it as an alternative for stumbling. So If you have a specific presence in mind, I would be really happy with that and see how it can apply here. Sure. That's that's actually in Zealand now. Great. Okay. I think that's it then. Martin, do you wanna do your loopy loops do you want me to Yeah. Martin Duke. I I've spent, probably far too much time thinking about a completely different class of attack, which is based on the idea that in really any of the connects our protocols The client has the ability to dictate its own routing through the network by chaining proxies together. For a while, I was focused on the very, like, straightforward attack of Making a path that, like, cycles through the same proxies 200 times, 300 times, and just creating the amplification effect TLDR it is somewhat more vulnerable than connect UDP. Quick proxy is somewhat more vulnerable than competed that. Actually no worse to connect TCP, at least I've convinced myself of that. I'm not going to, spend a lot of time talking about that because I don't wanna be up here forever, but feel free to, like, talk about this afternoon if you would like. But actually in thinking about this, I did stumble on something else, which think is fixable, but we have to make a design trade off somewhere. And,"
  },
  {
    "startTime": "00:48:00",
    "text": "I'm certainly I I've no strong opinion what how we resolve this. Next slide. Okay. So this is a, a path that a client could dictate that includes the same proxy twice. Whether or not this is like a good thing or not is made orthogonal because a a core Like, value of mask is that you don't know that a target is a mass proxy. And so there's no way for There's no way for these chain proxies to realize that they are, in fact, just connecting quick proxies to target. So, with with the way that the CID scheme currently works in the draft. So the client will open a chain of of of, mass connections through these proxies and you know, you set it up using total mode, then you convert to a forwarded mode. But, at the end of the day, what is going to happen not once everything is all set up, The client will have have, advertised CID 0 to the target as it client connection ID, It will then inform via capsule. It will inform P3 that it wants CIB, incoming CIB 0, from the target to be translated to CID 1 because, as written currently, the client controls both connection and these, although it can be rejected due to duplication at the at the at the proxy, it should presumably be rare. And then, so it knows that CID 1 is gonna come out of P3 in the client direction. And so it tells p 1, to look for CID 1 and translate it to CID 2. I guess I had the arrows backwards on this chart. Sorry. But, Anyway, and so on. So, basically, CID 0s where you see re in the CID 1, if you're written to CID 2, so you're written to CID 3, and finally rewritten the CID 4 and arrives with the client. So this is completely legal, completely, fine. I don't know if anyone's bothered by this, but, like, To me, no problem. Next slide. Sorry."
  },
  {
    "startTime": "00:50:03",
    "text": "Okay. So now I'm a, a, for, a malicious client, and what I'm going to do here is as I go through this, the the reason this is numbered 0 to 4 is that's the order in which they're they are dictated. So, when I'm telling P2 what to do, instead of telling it, oh, like, when I when you CCI did CID 2 sends CID 3, which is what P 1 is looking for. Instead, I'm gonna say, instead send it out to CID 1. And so I if you think about it for a minute, you'll see that when when p 2 sends a packet to p 1, with CID 1, p 1 may misinterpret that as arriving from P3. Based if it's looking solely at the CID. Next slide. So there's an obvious mitigation here p 1 to actually look at the source IP address. So the attacker's countermeasure to that is to picked a P2 and P3 are actually part of the same VIP. So it's some sort of low balance So they come from the same target IP address, And so you So p 1 is no way to disambiguate package from P2 and the package from P3. And in fact, we'll misinterpret the backups from from P2 as being from P3 And so we will continually loop in this p3p, rather, p 2, p 1, p 2p1p2p1 loop. And, of course, you could make that loop arbitrary long if you want. And this will actually go around infinitely. Because as it stands, quick proxy does not have any sort of TTL decrement Okay. So are there any clarification questions about the attack here? Okay. Next slide. Oh, yes, Tom. Queue wasn't working. So Right. If"
  },
  {
    "startTime": "00:52:00",
    "text": "If p 2andp3 are, like, actually the same proxy. Yes. On the same IP, then they would recognize That's correct. But instead Or or or put another way P2 not allow the issuance of CID 1 a second time for its egress. Yeah. Right. But instead so they're they're they're 2 different boxes running behind the same VIP. Yes. That are being load balanced. Yes. K. And when the client has made the request to p 1. For both cases, right, because it's made 2 different requests to P1 through this, like, nested chain Yes. How is it identifying Yeah. I guess is it asking to do a connect Flyip not, but, like, does the client have a notion of these things being different. Like, are they different proxy names that I, like, am I, like, What I'm asking P 1 to connect to P 2 and P3 Yes. So so p 1 needs to either be the same device. Or alternatively a like, a a pool of devices that have a relatively Well, and and he's a he can share a target facing socket here. It needs to be doing socket sharing. Like, so I I'm trying to figure out, like, you know, what what is convincing p 1 to have the same socket to both p 2 and p 3. Like, it it needs to think From P One's perspective, they are identical in every way. And it has no idea that there are different things. That's correct. I mean, okay. So the client in this case is doing all of its connects, like, by IPs, saying, like, I want you to go to that particular equity, because, like, if it had 2 different names, Or Well, I mean, it could be a domain. Like, if you need to be 3 shared domain, it results same IP address. Okay. So so it also right. This also can just be reduced to"
  },
  {
    "startTime": "00:54:04",
    "text": "from the client's perspective and from everyone's perspective, p as far as anyone knows, P 2 and P 3 are the same thing. They just happen to be behind a load balancer. Yes. And do not coordinate. So, like, I've deployed Okay. And in fact, one mitigation that I, don't have to put in the slide come down later is that if P2 and P3 share all of their connection ID states, that is a mitigation for this. It doesn't sound super practical and scalable to me. That is something we could we could force. We could mandate. As a as a way out of this. You for reminding me of that. Stated. Just to when Tommy was saying, don't do this. Like, this isn't a case of you know, doctorate hurts when I poke myself in the eye. The, like, way our quick servers are employed, and I'm sure a lot of others are. Is this, a load balancer and then other servers and you can't have all of these servers constantly share state about every connection that's just way too much traffic way too much shared memory. So they coordinate in terms of their connection ID scheme with quick. I'll be all that. They have coordination. They agree on some things. But they can't, like, I I just thought about this attack specifically, they would need to share every CID that they know with all of the proxies in the same load balancer domain, and that's just way too much traffic. Going around. Like, that's not practical. It you would in fact need p 3 to send to share CID 1 with P2 faster than the client can can configure this chain of of stuff. Which, like, I mean, I haven't I haven't, like, timed it out or whatever, but, I'm skeptical. Global State community exchange that correctly. So so large, I got a casual mascot server. So looking at the slide, I don't know if I'm in routing area or where I am because so so we're we're rediscovering all the problems that we discovered over 30 years of trying, you know,"
  },
  {
    "startTime": "00:56:00",
    "text": "tunnels for quick fixes over the internet. And then we generalize. And then this happens. Right? So so I'm sad about this. Right? But but it's every time we do this, right, stuff gets really, really complicated when you to have arbitrary topologies and I nobody has solved this in the IETF, but it's always getting this complex. Right? I mean, this this exact slide could be an SRV 6 slide. I'm I'm not kidding. Am I turning basket SRB6? Yes. It's, you know, loop some routing and it's hard. I mean, to have state and Will there be a mass routing protocol at some point? I'm I'm sort of sad that we are we are trying to generalize, it's so much that we have these problems. I've kind of wish that mask would have stayed at the center level. So so the happy news is there's a solution to this, but but I I would like to turn around, Lars's, thing does just kinda make the call back, call of people. So this is like one person who's transport 89 security guy or a routing guy. That, kind of spent a few hours and then forgive us out. So there there might be other stuff around here, and I would really encourage those of you who are security experts are security curious to, like, think about it a little bit on a white with a whiteboard because it is, interesting, and I'm I would like to feel better that was the only one. Ted. Ted Ted Hardy, whiteboard enthusiast. And I I I got up because I kinda disagree with Lars. Right? There is actually a whole bunch of mitigation work that's been done as we've gone through this same poop, so to speak, multiple times, And the most common of them is actually having something in there that you can decrement. It doesn't have to be a TTO, but if you introduce anything, that you decrement, then you can determine exactly how many passes through the loop you're willing to go. By setting the value for the Yeah. The the top of that decrementing counter. And it seems relatively obvious that we will"
  },
  {
    "startTime": "00:58:02",
    "text": "immediately need to tread that ground here and then go and borrow all of the other things which have been done to keep. So so so the so the queues building, I did ask for Claire issue questions about the attack. I do have some mitigation slides. Certainly, I may have missed some, but unless people have other questions about how this works, can we move Okay. Next slide, please. Okay. So there's some there's some Do you have a clarification question there? I just you said this is a theoretical scenario, but I really have problems to like, see when that ever would happen. Like, like, Yeah. This this is a malicious client, not something that I No. No. I understand, but it's Okay. Well, talk talk. So so P2 and P3 is something that I think will will have the P2P3 is shared bit thing. I I won't almost guarantee what will happen in Google's network if nowhere else The the p one thing does require either like a single proxy is load balance or a load balancer with very poor entropy. Which, you know, maybe we're all gonna do a great job with our load balancer entropy, but maybe not. Anyway, next slide. Okay. So so there's some, things that, I I I've label them as non remedy. Some of them can mitigate, but they're certainly not cures for this. I Again, as I mentioned in the other talk encryption authentication, first, I was like, oh, that solves it, but, no, it doesn't. Because this is these are packaged from the target. And again, we cannot change anything to tar we cannot make the target add an authentication tag that violates all the requirements of mask. Controlling the target facing CCID is not relevant to allowing the proxy to control the the client facing connect the client connection ID from the target, doesn't actually I mean, if you kinda work it out, doesn't actually change the logic here at all."
  },
  {
    "startTime": "01:00:03",
    "text": "And then lastly, TTL documenting, it doesn't mitigate it. I don't wanna dismiss it. But it doesn't really solve it. It's not super satisfactory till they have it go 255 times. It's much better than infinity. Just the top of the catcher lower. Set it to 30 the way ID goes. Pick whatever you like. Okay. That is something we could do I mean, it's I certainly agree there's probably some can put a I'm not disturbed by putting a cap on how many proxy helps we could we can have if we find a way to enforce it. David's Ganazi. IP enthusiast. No. So What caused the infinite loop here was that we the the the naive way of implementing this or any, you know, sorry. The logical way to implement this is, you know, user space with sockets. And if you Read from a socket. For a packet here and write it there. You've lost the the hop count or the TTL for the at atp layer. But if you look at this and think about it in a different way. This is a net with a little bit of magic, a nap that twiddling the quick stuff on top of the IP and UDP stuff. And then that respects the IP TTL field. It doesn't reset it because then you would have similar problems. And so As much as at first, I was like, it's not a great solution, but it it does work to just make sure that when you, you know, read from one side, set the socket option to say, hey. Give me the GTL as I'm reading it. Propagate it as you do your work and then write it the same number minus one on the other side, and that kinda solves this. So, like, we don't need a new TTL field. We have them right there in the packet. But maybe we need to say If you're on a platform that doesn't give you access to this socket option, like,"
  },
  {
    "startTime": "01:02:01",
    "text": "then you're not allowed to implement this because Hilarity might ensue. Well, there there are other solutions. Next slide, please. This is just what I was able to come up with. So if we just have one socket per connector quest, which is what happens in connect TCP in Connecty. Connect UDP, then this problem goes away. Because he wants connections to P2 and P3 will be distinguishable by the ports. Like, that is that is a like, being able to reuse these sockets is, a thing in the abstract as, like, a benefit of doing this, but if it's on a port benefit, you can just this problem. Could give the proxy to control over the virtual client connection IDs. This the one coming out of the proxy, think David made like a, like, a principal argument against this, but I think practically it would work. At least for this particular attack, and this is again why I would encourage other people to think about these sorts of loops. We could eliminate virtual client connection IDs. Has a linkability thing, but that would be an option We could, somebody, I think, mentioned we could force the use of server for it to address if you're load balanced because that would mean that the proxies would have distinct IP addresses and not have this bit business. And maybe there's some others that we have. I mean, certainly setting a much shorter TTL than what is normal would would solve this problem. And, that's all I caught. So I think any be interested in any comments about like, what is the least painful, least compromising way to get through this problem. And that's all my slides. So I'll just open this up I don't have a strong opinion on how we solve this. Personally. Tommy Polyapple. I'm leaning towards some flavor of the TTL type fix. Demi just going through some of these, I I think eliminating the virtual kit."
  },
  {
    "startTime": "01:04:01",
    "text": "Connection IDs, like, makes the correlation problem Yes. Like, the opposite of what we've just been talking about. So I think that's a regression we don't wanna take. And Yeah. I think it's very problematic to give proxy to control over the client connection IDs. I think the particularly weird thing that makes the client do is, like, starts out with a connection ID it tells the server about and then immediately, like, immediately has to change connection IDs to the target. Which besides being kind of like an extra dance because, like, it's, it's getting its inbound connection ID now from the proxy. And so, normally, thank you. One with with Connected UDP, you're able to do, like, a fast open. So you're you've you've generated your quick packet to the target before you've ever heard anything back from the proxy. Well, well, wait a minute. So k. There is a No. I I don't I I don't think you're thinking about this correctly. So, obviously, it's a negotiated internal mode. Yes, you have a client connection ID that has been already negotiated to the target via tunnel mode. Right. And then you send the capsule to the proxy saying, here is the connection ID, you should expect to see from the target. What was the virtual connect? Right. Which which which which which the proxy can reject, in which case you can't use tunnel mode until and you can't use pro forwarding mode to you to resolve the conflict, right, by changing. But, yes, so ideas when you ask for it, and it could be rejected from the target. And you can't go to forwarded mode until that's all resolved. Anyway, So it would it would it would not like, you can't You you Like, until until you get the okay message or whatever it is, you can't go to model mode because you don't know what connection IDs to use. And so, right, so part of it is just like a principled thing of now you're receiving on connection ID that you didn't determine. Yeah. But I guess also I'd I'd need to think it through because"
  },
  {
    "startTime": "01:06:01",
    "text": "like, the order, if you're doing this many hops of, like, when do you tell because, like, you have to tell that virtual client connection ID that you got from this proxy to the next proxy that's gonna be receiving on it for its mapping. Yes. So, like, it makes you a little bit more lockstep I think then of how you do it. Anyway, so I I I think maybe a solution would be like, do the TTL thing. And if you can't do the TTL thing, like, don't let don't let you share sockets. Like, if you detect that the TTLs aren't working, then Yeah. I mean, if that would work, like, I don't know. If you hold a gun in my head and force me to to select one. I I think like, oh, in the VCCI make the proxy just allocated VCC ID is is like seems to be least least painful. But I said, leave it to the authors and to the in tech. Ted Hardy. Actually, I came to the same conclusion as Tommy. My my reference would be One second per connect request should be recommended. As good practice, and the TTL should be detrimenting should be required. Then I think you get a little bit of suspenders in belt there, which is very similar to what he K. Because you are because of Hooks, so I'm not actually sure if, TTL works here. Because it has a privacy concern. I mean, we've had previously this saying that every that has to be scrambled because they become a privacy constraint. The previous presentation. Then we are saying that there would be a clear text field that's being documented for each pop. So it creates a correlation vector. That we are trying to eliminate. Alright. I'm, way out of time away over time. So, like, I I I know waiting for that email was kinda horrible, so, like, hopefully the kind of publicize the problem, and we can discuss on the list or on the GitHub."
  },
  {
    "startTime": "01:08:02",
    "text": "Just find whatever solution works best for all of our use cases. Thank you. Thank you, Martin. I think we have I've been mixed Yeah. Alright. Hello, everyone. My name is Abby Singh, and today I'll be presenting the mask connect UDB listener. So, I'm not gonna go through the whole mechanism of why we need it, but effectively what it is is is it allows you to use to connect to multiple targets over the same connection with traditional connectivity, you would have to do a connection per target, and also this enables you the ability to listen from other targets that the client hasn't necessarily specified So how it works is to create this field, and in the request header, the connected to the listen field And And so, as you'll see here, we we add the IP version IP address and UDP port in the in each quick frame, to indicate where we'd want to, send the packet and And so here, those I, the IPN port information From the client to the proxy, it's It's the target, target IP and port. And from the proxy to the client, it's It's the source IP and port that's trying to connect to the client. And So"
  },
  {
    "startTime": "01:10:00",
    "text": "So I do have a question there. If we want to validate the source packets on the on the proxy. So, I do wanna spend the session mostly discussing, discussing some open issues and what what things we want particular from this from this draft. go over the first one, which is we discussed this the last time, which is I'll Let's change the name. And I see here here's the few that I saw on the mailing list and, like, because it's doing binding. It makes sense to have something like connected to be binding. Personally, I'm I'm in favor of connectivity binding, but if people have Thotsun, other names, please do let us know. And we do have a an open issue on GitHub where you can participate in the discussion, but also here how would people 4. For now, but how would people think about, what would people think about connectivity binding extension as as an option Alex, Alright. Alex Schanowski, Google. I'm actually confused why people want to rename this because way I'm looking at it is that this is more analogous to the listens this call. Then the binds is cool. Unless I'm completely mistaken. So in that case, I feel like Vine is the worst name. Certainly, it's not the worst name on here. I think mirroring Here's the one that I absolutely would say does not make sense. But I think my preference is to leave the name alone because, I feel like the others don't correctly convey the class of capability that you are getting here. Like,"
  },
  {
    "startTime": "01:12:02",
    "text": "to me, buying sounds like you're selecting an egress IP and port on regular connect UDP, not the ability to receive incoming packets, which I think is the more interesting feature we Debit. David's Ganazi bike shed enthusiast So I I don't have a strong opinion on this because, like, names matter a little bit, but not that much. Question for the chairs. Do we does the MediaCO tool support multiple or is it just binary, because I only used it for binary in my sessions. Janet. Yeah. No. No. It would just be great to have a quick of hands and then pick 1 and then we move on with our lives because, like, I I I guess all I'm saying is can the chairs help us resolve this quickly? And if anyone has a strong opinion, Then why it's a name. Coming. Oh, my polyapple. I don't think a bike should here is the good use of the working group's time. So I don't think we should vote on it here. I Let's just move on. Like, if you have an opinion, go on the issue it's not time sensitive. Doesn't really matter. I think what you have is fine. The one thing I would comment is when we are thinking about naming overall Well, while we are talking about UDP here, there is connect TCP And one could very reasonably have a listen mode of TCP through the proxy in the same way. So I probably care more about consistency and being able to have the similar approach for both. And so something that sounds correct in both TCP and UDP is preferable, which think it's kinda berson but whatever."
  },
  {
    "startTime": "01:14:01",
    "text": "Alright. So I'll actually move on to the next issue if people have, thoughts on this, of course, the mailing list or, the the issue mentioned there, please, I encourage people to interact but that's there. So the second one is allowing allowing the proxy to send the public IPN port to the client. So once the client connects, to the proxy, the proxy should give its, public IP import for the client, then This is, you know, useful in several protocols for the client as well. Such as WebRTC. So Right now, the, proposition I had was we create a response header which is just proxy public address. And David did mention that it should be more than more than 1 IPM ports. So Perhaps, this could be a list of IP IPN ports in the headers fonts. And another issue that, I was, pulled up is would there be one the ability do we want the, the proxy to be able to have midstream changes. So if the server wants to migrate to a different IP and port If so, we would need perhaps some sort of a capsule to communicate this, Tommy? So I I I like the general idea of giving the client information and about what it got. And potentially, Potentially, we could even put this in, like, the proxy status header"
  },
  {
    "startTime": "01:16:01",
    "text": "I think one of the parameters of, like, hey. Like, I I'm telling you what your instead of telling you what your remote IP and port are, I will tell you what your local one is. Like, That seems like a place that we already have now it's not part of this, but it's a header that you can get back in the response. So we don't necessarily need a new response header given that we already have proxy status. That's one comment. The other one for, like, the list and particularly the midstream changes seem very concerning. If I'm a client of this, I absolutely do not want you to change my local port that I sending from because that is, Very weird. Like, if if I am sending and receiving to a given peer, At least my assumption here is that I have been allocated a port on this proxy, and not gonna, like, randomly between one packet and the next packet switch what port I'm sending to because that there's I have no idea how that's gonna, like, actually work with the other side. Right. Now I I can see, like, committed jump in. Sure. Sorry, David. It's gonna ask you jumping in to clarify as co author. I think, yeah, the intent here and correct you if I wanna be sort of when I said this was having a list of IPs in case you have multiple IPs, but it could be a single port. Right. So if you're suggesting to change that, I'd say, yeah, let's just do that because you're totally right. So I'm very concerned about multiple ports. So if you have it one port, Cool. Cool. For the IPs, I I get why, like, you know, similar to how on a positive system, I can like, bind to a port, but still have it work for both V Four and V Six. That's great. So please support that. Yeah. Yeah. But maybe we want some limits on, like, you get 1 before address and one for you? Like, not not necessarily, but, like, would be good to have some determinism or understanding then Like, if it's gonna be random, Like, if I have, like,"
  },
  {
    "startTime": "01:18:02",
    "text": "a whole slash 64 that I've been allocated here. Now I start wanting to know on every packet, which source address I have. And That's right. Like, so you need to make the entire scheme more complicated. If it's just 1v41v6, then we don't need to change anything because I assume that I get the v 4 address, what I'm using v 4, and the v 6. What I'm using? So we need to make a choice here. Otherwise, it changes the entire scheme. Plans What? See. So Tommy just made the point that if you have multiple views addresses. Like, we have a whole range you might wanna know which IP it came in think that matters even for V46 because if we're doing UDP, you might need to know the MTU size. You're gonna have a smaller MTU on D6. Oh, no. So the the the the the capsule here is like the datagram format. Rather. Contains in it, the IP version is the very first field. So anytime I am sending or even I know what that is, and so that disambiguates it. Yeah. I do agree on perhaps a single IP before NV6. I think that should be, get Yeah. Come. Right. Right. Right. Magnus, Westland. Oh, this result. Don't understand why you need to actually get multiple addresses. If you need multiple addresses, do more requests to set up more ports. It's that simple. Isn't it? Yes. And more addresses too. Oh, yeah. So so to clarify, my intention was to do exactly what Tommy mentioned. So I think an NIPB 4 NIPB 6 could be a Yeah. But even that this, I mean, Okay. If it's very simple, otherwise, it's probably as easy for the client to just ask I need one to be 4. I want to leave 6. Long as it knows that they are available. I guess, it's the information, but but, yeah,"
  },
  {
    "startTime": "01:20:03",
    "text": "Just like, I may want to be able to have of V4 and the V6 on the same port. And since there's not a requested port here, I just get allocated to the dynamic port. It feels like allowing me to have one of each on the same port is convenient. Okay. Yep. But, yeah, I mean, this is clearly that you should send provide the address back to the client. Otherwise, he has gonna do done or something to figure figure it out anyway. So it just doesn't matter. Do you have anything else, David? To n? Kashi. Okay. This might exactly what I'm looking for. For the control domain, throughout the uncontrolled domain part. Cost, here, if you look at the contango UTP proxy part, And if you, initiate from your client's end in the control domain to the profit, and to the outside. But now the thing's like, what I'm looking for right now there are some real requirements from the 3 gbbs side, from the other small there are market postings, people are constantly considering right now. And then the initiative of, well, I may propose this one, that the initiator is from the uncontrolled, the client in the outside. So it has been bothering me how the prague say node may expose. It's a proxy IP proxy port to the uncontrolled site. But now since you are giving some solution here, Right. Thank you. Okay. Great. So we have Tommy. Tommy Jensen, Microsoft, So I agree with what's been said about having a single port would be much better. And probably scoping down the IP addresses as well. I don't think we actually need to support having IPV 6 prefixes because I agree you could set up new connection for each. But it might be worth having some consideration text to say that"
  },
  {
    "startTime": "01:22:02",
    "text": "this draft is aware of some of the prefix allocation work going on elsewhere and why we're not Okay. Yeah. I I think that's about it. Alright. So I'll move on to the the next issue here. So, yeah, this has been debated for a while now, but, a law allowing, restricting accessible IPs. So for us, like, at least me and David are leaning towards by default, letting all traffic through and adding a a security consideration that, oh, the client is going to receive, all the traffic that's going to be received that that I import on the proxy. And I think it kinda makes sense because we're trying to replicate the listen function of, of a UDB port, which kind of does the same thing. You have to deal with that. I have seen some people say, oh, maybe allow client to specify IPs and IP ranges. Are do people have any, like, strong opinions in favor of that. I do think if there is a need for that. Perhaps it could be a separate extension. Okay. So Jonathan, Yeah. Jonathanix. I mean, I do worry that these mask list, listeners that support this mode are going to be a very tempting target for griefers to just, spam with, huge amounts of packets across the whole port range in hopes of getting something interesting through. Or just you know, but so I'm I think some sort of blocking or even I don't know if there'd be allow deny lists or allow lists or what you want, but"
  },
  {
    "startTime": "01:24:03",
    "text": "some sort of block that I think will will probably be necessary. Okay. Yeah. Enjoy it, Tommy. So I know you haven't gone on to the compression slide yet. Yes. But I wanna bring it up. Because I the way that seems to be going is that we would have like, like, I think what capsule negotiation of, hey, there are different things that are special. It's like, hey. I'm aware of this other remote IP in port, and I wanna make it special and put it on context ID Fu. It's One way to block is to potentially say, like, I am aware of this remote IP import, and I want it to be dropped. It's essentially just a convenient way to get the proxy to drop and stuff sending it all the way the client to avoid doing work. So may may be as we are designing those capsules, You can Sure. Solve this problem. At the same time. Sure. So my thinking was, there by default, we enable all And then If the client wants to be say I just want this range of IPs to be allowed we create something like that. It and perhaps we could add that to that capsule protocol that we were thinking. I will move on to that before, Mike. So if the if the client wants an allow list functionality. Once it knows the remote IP address, It seems like maybe there should be a way to hand off to a separate connect UDP, although you don't have port number control. But, like, that's, thinking anonymously to Syscoals. Like, you can get a separate socket off of your listen. Yes. But, yeah, I allowing everything and passing it"
  },
  {
    "startTime": "01:26:03",
    "text": "feels like an attractive nuisance because then attackers can just thrill, thrill, large amounts of traffic between the client and the proxy and you can't really do anything about it. But, oh, oh, a way to say, I really am talking to this client. Or to and to this incoming connection, So maintain that. And drop these that I don't care about as I see them. That feels like the right balance. I don't know that it has to be in this draft. It could be an extension but I also suspect anyone who implements this draft is going to want that extension. So maybe worth going ahead and doing it in one document. Sure. And, David, But I wanted to say, like, these Denal, you know, Denal Service attacks there's don't know how prevalent it'll be to just I send large amounts of traffic to the proxy. And then all it'll do is send them to the one point. Like, that doesn't do much because you could just do the same work by sending that directly to to the to the client. So having a very elaborate way to prevent that which would then require a nice like thing to allowing real traffic would be very difficult. I think the the idea of, oh, you know what? This one IP is sending me garbage. Please block that one. Sounds like maybe the right middle ground, so I'm in agreement with folks here. Okay. Yeah. Having a block list instead of an allow list. That's also an option, I think. Tell me. So I have a comment that I was going to leave to the woman compression But then Mike, fisher, essentially brought up the conversation about closing the main listening and say, like, hey, I have"
  },
  {
    "startTime": "01:28:02",
    "text": "people I wanna talk to, I don't want to get anything more. And this is of a problem that I I raised the issue recently. On already. And so You know, that suggestion was kind of, I think, what Mike was saying like, okay. You know, we have our main list in UDP. Can I peel off a connect UDP that shares its port? And I agree with the comments on there that, like, hey, we have this compression thing where we can just have capsules negotiate different context IDs I think that is cleaner. However, the one problem that leaves you with because I've I've know, I've been trying to implement this over this week. And one of the things that at least our API is a And I also sockets do allow. So if you're bridging sockets into this, you have this problem, is that Like, I can have you know, a listener on UDP or, like, a bound socket I can then create more specific connected sockets or for us, like, connections off of the listener, And then I can leave those open and close the listener. So, like, That is something that is expressable. Today that I can say, I don't want to receive anything else. I I'm going to close this port set for these things that are now open. So one way to solve that would be in addition to what I suggested earlier of a capsule that allows me to say just black hole this one other address. I think I'm under attack, maybe more interesting is to say I've established these particular compression flows where I have acknowledged these specific peers on these specific ports and addresses. And now I want to close the context that I use for arbitrary packets Yeah. Once I do that, now I can express something equivalent to what I can express today in sockets. And so it's a very clean API mapping. Go for it then. Yeah. It's Ganazi jumping in as So cute."
  },
  {
    "startTime": "01:30:02",
    "text": "I'm gonna be the queue. Wow. See you there. Tada. Sorry. I mean, I I look kinda love that we're designing the protocol in the mic line here. But with the PR that Abby has said we're eventually gonna get to that next slide. If we if we eventually add a way to say, okay. Close that compression context. You could just say that and say to close the main one, and then that's exactly that. So all that kind of just works. If let me close the main one, then you Yeah. Okay. I I think we design. We landed on a good design. I'm quite happy. That Go ahead, Pritesh. Katesh from Apple. So the example use case you mentioned was WebRTC. And today, WebRTC uses turn for something like this. Actually two steps involved. There's an alloy and then a bind. And then, Alok means this give me an IPN port that I can send to someone and bind is where you you kind of match them. And after that is only when, like, packets start flowing. Right. Right. Right. So it's not like a open list in where I can receive any arbitrary packets from anyone. So it basically it prevents this problem where someone can, like, spam you with packets, right, So is are there other use cases you're envisioning for this, which are non WebRTC, which care about, like, receiving arbitrary users, UDP packets, which you've not talked about here. Not per se, but if someone's wants to use the tunnel as a server perhaps, right, and for get everything forwarded to them. That's a desirable case for them. Okay. So that's like a non WebRTC, some future use case. Okay. Sounds good. The other thing I wanted to, like, respond to David where you mentioned that you know, a user. Like, someone can spam a user anyways even if they didn't have this, I guess, like, that's what, like, the Nat will prevent you. Right? You have to, like, punch a hole through the night for someone to send something to you."
  },
  {
    "startTime": "01:32:01",
    "text": "But this is giving you, like, a So it's not the same, I feel. Like, this is opening up, like, a new attack. Okay. Thank you. Okay. So I'll move on to the next feature question. Just in terms of timing, we need to be pretty pretty fast here and when to take any discussion to the list. Okay. Yeah. So, one the thing, Tommy was deleted. Leading to. It's, we since we're sending IP important in every single packet. That does add some overhead and we can can simply just compress away, but, with context ID, which is already a field that we're provided connects you to be Here, I'll show you. So the the client can send a capsule that says, Here's the context ID that that I'm gonna register and this the IP and port, So anything so that, then the proxy acknowledges it, And then from here on the client and, proxy can send each other data while omitting the IP and port information from every single data grant. So that's, kind of, the proposition, the PR I have. They have the PR linked in the slides. So feel free to comment on that. It People have any strong opinions on this. Yeah. And I guess that's it. That's that's all the open PRs we have. We If there are other things that you would like us to consider, please through the mailing list and also through our GitHub I encourage people to interact with this. Okay. Great. Thank you so much, Abby. Okay. Thank you."
  },
  {
    "startTime": "01:34:01",
    "text": "Okay. Except me with Alan Drew? Do you want me to do the slides tonight? You know, It was after okay. In that case, we've just got them, so let me take them back. You might need to reject it unless I can figure out how to Sorry. Yeah. Apparently. There's no I know where the puts in usually is. That Yes. Yeah. We're just we're just stuck here. That's that's Yeah. Would share, and then you can Troller. Sorry. So I'm I'm I'm locked in this chat. And says Eric and neither of us can take back There we go. Okay? We're in business. Folks. 4. So I'm, back again with, Connect Ethernet. Not really much on this slide. Next slide. I think Eric is driving here. Alright. So it's kind of adopted. We still need to finish re chartering. So assuming all that goes well,"
  },
  {
    "startTime": "01:36:01",
    "text": "Connected, then that has been adopted by the local group. I'm excited. Thank you. Next slide. So while I was doing some revisions and talking to some folks, I'm trying to limit the scope of the draft, to basically make it like a patch cable. It's not gonna be implementing the full features of, say, an ethernet switch, that should be delegated somewhere else. If your server wants to implement that cool. If he wants to delegate it to, like, some other piece of software that's fine, but I don't think it needs to be in the protocol self for how to send the frames across. And that means, like, don't have to worry about how multicast works, you'll just send those frames and something else can deal with multicast groups and whatnot, not next frame. They're slide. We've already heard some interest from some folks, on this list. If anyone wants to tell us a bit about, what they want to do with it, we could expand our motivation section and make the draft a bit stronger, either here on list It'd be awesome I'll give you all a moment. Is not a one. Okay. So I'm gonna actually answer your Martin Duke, AD. I I, I'm not answering your question. I just wanna take this opportunity to have what I think is an important disclaimer. Is that we are re chartering to Okay. Well, that yeah. Alright. Fair enough. Well, anyway, so I do wanna, like, I don't think this is a bad use"
  },
  {
    "startTime": "01:38:01",
    "text": "of working group time, but, I, I do wanna caution people that This work is still provisional on the charter being, re charter being adopted. Yep. Thanks. Okay, chair. This is I am not able to get into the queue. So if I'm on-site, Yeah. So something for the tech tips. Yeah, I mean, Nokia is interested in it. And I think, the use case there is basically we have and 3gpp we have this ATSSE use case file. We would like to also Correct. The in the way it is, the draft is talking about about connecting as a Ethernet line. So it it it makes, If it is okay, I think this draft, actually, lead and a strong modifications even if I'm saying, like, we're interested in, I think should actually really be writing why we are doing it. An ATSS could be one use case. You can describe your use case, but this draft really need good motivation to get it done. Yeah. I agree. Largely good. If somebody works from a store to another one connect fiber channel, That's what that was a bad joke, but, You know? So so but in all seriousness, since we're slicing and dicing what ethernet means here by eliminating broadcast and multicast has anybody asked 802 if they're cool with that because the IETF is typically very upset if another SEO starts saying, well, we use SRV 6, but we're not really gonna pay attention to a deployment consideration. But the IETF has set for it. Right? So it's It the answer might well be, this is cool, but we should definitely ask 802 if this is a, an acceptable cherry picking of the ethernet standards. Yeah. I'm not saying we're dropping Multicast or broadcast. I'm saying that We'll carry those frames. Yeah."
  },
  {
    "startTime": "01:40:00",
    "text": "Like, Your patch cable does not care if it's carrying a multicast or broadcast packet. Like, that will be delegated to something that's speaking it into maybe then don't call it ethernet. So Ask ask 802 is what I'm saying. Connect layer 2 is also another option for this to write exams. So, Jihad, again, I cannot be in the queue. So I think this is a good good good point, and, actually, we should put it in this coordination call we have. With IEEE. So then then basically you have some, feedback, direct feedback because this has popped up. So I'm gonna jump the queue to just say, yeah, like, so There was a discussion on whether the current charter Cadillac enough weasel words to do this work. And the reason I wanted to recharter was to have external review and, and, like, formally request all these alternate stakeholders to have their say about this. Whether I don't object to the coordination call, but, like, Charter would be recharting as a formal process but Corey Ferris. Maybe we've all said it, but, I mean, this has been done in Ontario. Many times, and there were pitfalls I'm we could just learn. So re chartering might actually bring an interior AD into look at this, unevolved eye tripling. So Tommy Jensen, Microsoft. Seeing is how we used to got into the questions anyway, because I saw I have a question side, but here we go. If this is intended to be like a patch cable, And the security sections currently talks about the risk of an attacker sending arbitrary source MAC addresses and trying to imitate devices Assuming that Ethernet standards owners are okay with it as we define subset. Is it not reasonable to have a way for the client to"
  },
  {
    "startTime": "01:42:02",
    "text": "inform the server what its one MAC address should be out side of the special ones, like the all zeros, used for other protocols such that an unexpected other device MAC address could be treated as a protocol error. That may be reasonable for a, like, point to network or point to point connection, though. You can also be bridging to networks so you might not have just the one MAC address. But, yeah, in that case, such a thing should be possible. Tommy. Oh, that was you Alice. I'm Alex from Hopsky Google. One of the things I wanna quickly focus on here is that I think the analogy here with where this Capability falls on the spectrum of link cable to switch two router. Is sort of what we get to choose from the working group's perspective, right, And we're seeing the same thing as we saw with Connect UDP and Connect IP. And now with Name debated, connect UDP List and draft. We have analogies in each of these capabilities to some some existing capability, right, whether it's a SIS call or a flow or a connection or what have you. Right? So we need to basically decide where along spectrum, we want our capability to start and end and what the security consideration all these things are. I think in this particular case, right, like, I think there are some cases where you would want to do something straightforward and say, no. It's completely a link cable. There are no security considerations, but that will basically affect the playability. So sort of to largest point of, like, you know, have we asked 802 where we need to sort of hit the balance of building something which does not trample on existing standards, but at the same time, actually make something deployable. When we talk about capabilities like Mac filtering or"
  },
  {
    "startTime": "01:44:03",
    "text": "MAC address, masquerading, rewriting with eb tables. Right? These are all capabilities that already exist in the road road road road road road question is how much do we want to mandate as must be implemented to to have something viable. So we should be looking at a lot of these things with that eye for both Distract and the others because while we can totally do a kitchen sink, we can be on this working group for the next 5 years. Don't think we should. Let's build minimum viable thing. Let's figure out what our extension points are and make sure that we give ourselves enough room going forward to build something useful. Tommy Polyapple. So bouncing off the earlier discussion for if, if, if, point to point versus point to network and network to network. That is very, very similar to the conversation we had for connect. I fee, there's a mechanism in there for, like, the limiting request scope, which is essentially, like, you can either choose to set up as a wildcard in the request or to say I only want one particular target, it feels like We should try to be parallel in mechanism there. So, like, you know, That was essentially your I template variables you could fill out if you wanted. Having something similar here would be natural. So, It it's nice when all of the the mask family protocols seem coherent together. To what you said earlier, Alex. So so I'm I'm it's it's cool that, you know, that we are convincing ourselves that we're using ethernet in a form that is kosher. It's not our call to make. It's it's really 802's call to make, right, similarly to how when the you decides that what they're doing with IPS culture is really our call to say, Yes. It is or, yes, it isn't. Right? So so I'm I when I actually don't think we get me wrong. I don't think we wanna, like, do all of ethernet here. I'm saying is that the subset of ethernet we're supporting here"
  },
  {
    "startTime": "01:46:01",
    "text": "they're okay with, and we can call it ethernet. If that's what it determines we wanna use. Yaroslav, first of all, one area that I think we should either leverage here or explicitly discourage is use this as a transport for EVPM. EVP on traditional has been using VXLAN or and the jury, which are not authenticated. Think this could potentially be strongly encrypted or syndicated transport for data center interconnect. Or if we don't want to do that, then probably we should explicitly state that this is not designed for that. Otherwise, a little bit confusing. You may as well jump to the next slide, although I think we've basically been there. Can you close to the mic. Oh, Can we Oh, thank you. So as far as what's next, besides all of the things we've just been talking about, like, We also need more implementations. I have the 1 in Google Quiche, nice to get some interrupt going. Next slide? And, Yeah. Any other questions? Magnus Pestcon. How do we do with support of the full full basic ethernet frame size. 1518, at least. It helped be any vLAN tax. That I mean, the reality is that, I mean, to my understanding, to support Ethan properly, we would need to be able to support"
  },
  {
    "startTime": "01:48:01",
    "text": "Ethan frames of 1518 bite size. And, unless you have an IP MTU of 1518 plus quick headers plus all the other things. You you can't transport it. Unless we have a fragmentation mechanism for connect the Internet. So I read my question. How are you doing with fragmentation? And reassembly. Right now, I have no plans for that. It's possible that if you need that full MTU, you might need to be transporting this over something that hasn't even higher MTU to cover the extra space. I know that that's true of a bunch of like like like, different It's internal networks for places. Of the Internet. I'm just done stuff with a lower MTU because that's what you always get when you're tunneling things. So luckily here, like, we have our Datagram frame that you know, as you know, has an DU limitations, but we also have our Datagram capsule, but doesn't. And so I If the idea is that we need a way to support those longer frames. But in practice, we won't use them. Then we're golden because we have a way to send them just that they'll be central liable. And If you decide to send all your brackets like that, that'll have poor performance, but in terms of, like, it being correct, it will work. And so if you the the idea, and we definitely need some considerations in the document explaining that this virtual patch cable that we created you should set it sent to you so that it fits inside Datagram frames instead of diagram capsules, but we're there. No. No. This is what my point is saying. Like, this patch cable that that you're using,"
  },
  {
    "startTime": "01:50:01",
    "text": "were just you can say Like, you're gonna use it for something. Right? You're probably gonna run IP over it. And if you're crazy ipv6, I don't know. And like this is a consideration for whoever's building that stack. If you the package will still get through. Like, we can send arbitrary length data gram caps. Bye. Yes. To respond to that. I mean, back to my quick. I think the question is we actually supporting ethernet. Are we maintaining assumptions that ethernet have, like ordering, delivered, etcetera, of the frames that arrives and things like that. Think we need to look a little bit and think if is this really easy that we're producing. And it can be produced, isn't it? That's fair Again, this is not the first ethernet tumbling, potential technology VxLAN and few others has been around for quite a while and I think most of them decided not to bother with fragmentation or assembly, leave it to upper layers to decide what to do with smaller MTU and adapt accordingly. I think before making these decisions, that would be good to look into what other protocols have been doing in this space and why. Yep. Got it. I think that last 10 would come at minus 1. I'm fine. 1. Oh, well, that grained faster than I expected. So if anyone else has more questions, I just to the Marietta, like, let's just say I don't know how much I don't know about ethernet. And, We"
  },
  {
    "startTime": "01:52:03",
    "text": "definitely wanna make sure we don't get into the pitfalls. And if the simple solution is to say to knock to change the name and say, like, this is the, you know, a dot 2.1, I think, Maclayer format because that's what really what this is. Like, we're saying that what's getting fur ferried across is 6 bytes, source address, 6 bytes destination, or the other way around. I never remember Yeah. Then that might make things easier because I agree that if we start really opening up, like, what are all of the features of Ethernet. Like, for example, in order delivery, don't know if Ethernet has an order delivery. I don't wanna find out. And, so maybe, like, reducing the scope there to we'll make it just as useful, but we'll make it less scary. We will definitely have delays and Lars is coming. I mean, oh, I'm I'm running away. Running away. So you're asking to do a standard here. Right? And you know, coupling something that that works in your deployment, fine. Right? Go do it. If you wanna have a standard here, right, it's it's you can't just say, you know, we're gonna slice it and dice than, and ignore things like, you know, maybe we're not carrying full Ethernet frames is if that's what 802 is actually requiring us to do, which we don't know yet. But I really encourage you if you're don't understand ethernet really well. You probably wanna get people on board right now that do because otherwise we're gonna be in a world of pain in this working that. And just to state, like, I'm not the author on this. So luckily, I don't have to. But to like, in the previous point, let's take a look at what the IETF has done in the past for things like L2TP. We have our, like, GRE. Like, we have multiple IETF standards. That have a way of carrying frames, and I think probably that we should do the same to avoid, but Yeah. We we will talk to 802. I don't think anyone has said, don't talk to too. I think we're all on the same page."
  },
  {
    "startTime": "01:54:02",
    "text": "And I think the next thing that we're about to talk about is the charter, which we'll talk about that. Tetra, I really think the idea of trying to limit the scope of this in a way that claims you're just using a specific frame type, but not otherwise meeting the expectations of Ethernet is probably not the right path forward. And I agree with everybody. Talked 802, talked to the interior where they've done this multiple times, But the reality is the people who will want to use this will come in with the expectations that they built up by using ethernet full stop. And know, the number of people out there who buy products, which are labeled frame type 802dot one 3 or 1 without the rest of the stack is pretty small. I haven't checked our catalog to see whether Cisco sells anything of that type. And it's a pretty big catalog. So there might be. I could investigated people really care. But I I think strongly, we we we should be meeting the expectations of the people who will want to use this as a transport for their ethernet as a replacement for their patch cables. Let me put it that way. If we're not doing at least as well as the patch cable, we should stop. Great. Okay. Thank you, Andrew. I think Eric is gonna talk a bit about the charter change now. I would have a little bit more to continue much of what we are Alright. Kinda hear you so well. So this is current proposed text that we have. It essentially adds this sentence talking about connect ethernet. Did doesn't currently one of the the main things that I think is is a"
  },
  {
    "startTime": "01:56:01",
    "text": "A task for the chairs right now is to organize making sure that we get the right eyeballs and the right kind of review on this document, and some of that is is going to be liaising with other standards organizations, some of that is going to be having some nice chats with some of our friends and other IETF areas. And making sure that we can get internal ATF eyeballs on this kind of thing. I think we've got a couple of minutes here one of the things that I think we we have is a a action that we need to take is to add, add additional text in here just like we have at the at the end of the charter for the other groups we will coordinate with, we need to extend that list a bit. But if there's other feedback or or places that we should put something, now is a great time to discuss it briefly. We will then take all of that to the list and, formalized things there. Lars. Yeah. A lot of echo. So I think the rechartering will need to wait until we've to 802. So that we know what to write here. If anything. Because it would be unfortunate if we charter re charter now, talk to 802 figure out that it actually doesn't allow us to work on what we wanna work on, and then we have to recharter again to take it out. Lars, do they not get external review, or does that not is that not set us? Okay. That's good to know. So we would We we need to go to new it goes to new work. I don't know if they're looking at it. Decision, it it needs to go onto the coordination call. And and we can actually initiate one for this. Right? So this does not necessarily mean a long delay, but I would like to stagger it out that way. Yep. I mean, that's actually my question, but you actually want because just on the coordination you might also I mean, this is not an authoritative call where people can just say, this is fine. You get thumbs up. Right? What I if you look for something more formal, you have to send a view"
  },
  {
    "startTime": "01:58:00",
    "text": "message or whatever. I'm not sure if we want that. Or, like, first step I think is actually just sending it to the coordination dating, just just meeting people aware about the return. Expresses. So we we should we should have a crisp description of what we want to work on, right, which is probably a little bit more than that the sentence year. On the The trust is I bet is not understandable by 8 or 2. I mean, this is about HTTP and how we move stuff. There's nothing about how we deal with addressed families, whether we're doing LLC Snop, whether how we're going to do with MAC addresses, which protocols were involved, whether it's a bridging extension or whether it's framing extension, etcetera, etcetera. There's lots of things that 2 understands the art in that draft. So 80 to is not a person. Right? Somebody has to read it. Exactly. Yeah. So and the people on the coordination list are the people that work in both organizations so they know a little bit about the IETF as well. So I think the first step is to send the draft there and then figure out if they have any comments or they need further feedback. The comment what to what Corey said, the comment will be you're not talking enough about the ethernet specifics for us to answer the question you're asking us. And so either we can add those specifics into the draft or we can add those specifics and an email. But just So So what's the question we are? Exactly what Corey said sort of The What? Type how much can we limit ethernet for this use case and still call it ethernet. Is it okay to not carry full length frame, or have an option for it? Is it okay to have no discussion of all these things that Goray talked about? And can we still do it? I mean, Think of it the other way around if there's a Thank you. One other, if you don't mind to take getting some of those, and and it's not just you. We'll wanna collect, but but some of that in GitHub Yeah."
  },
  {
    "startTime": "02:00:03",
    "text": "I think we we have a good path forward here, which is to start a conversation with them of like, hey. We're building a new way 2 carry ethernet frames. Are you open to a conversation? Because we're not asking them to, you know, take the draft as is and put a stamp so we can publish it as RFC tomorrow. That's not what we're doing. Right now, all we're saying is, hey. You open to a liaison relationship as we build this going forward? Or or do you have some, like, crazy concern where you think we should absolutely not have a new way to carry Ethernet. And I think that should be solvable using a liaison, and discussing that on the call. Right? Oh, Yes. Alex Nehalowski, Google. I I I just went and looked at the RF for GRE, which is 2784. And the only thing it says about ethernet is that it reuses ether So I'm currently very confused. Right. And so so so what I'm currently confused about is if we look at our existing IETF protocols, which allow you to deal with ethernet like things, we don't say much about Ethernet. But for some reason, we're currently having a very in-depth discussion 10, 10, for this draft for doing approximately the same thing that has been done in routers for ages. I'm I'm currently very confused why we've moved the bar. And if I'm just missing some historical context, I really would like someone to fill me that's we are at time before I think we go through and and detail all of the answer to that. I I think the the point is very well and which is which is that we do want to make sure that we're doing this with with both knowledge of advice from and the the relevant folks. So we will certainly get coordinating on that and and make sure we do that and I'll have a quick to help better or take exactly what we are we are needing this for and with it."
  },
  {
    "startTime": "02:02:00",
    "text": "Yep. Jahed. So I I I understand that because I want just make sure, like, we have the next step. Right? So they, I think, the next step, we can do 2 things. We can work on the details on this, all the things that we have been discussing here on the draft and go for it. Or we can initiate the discussion saying like, hey, we are planning to do this. We need your help. And reviews, and are calling it the ethernet, but we're actually going to target a very subset of of it if it is the case. And have the discussion, going on, and we can start with the coordination also sending to the Coalition National Ruses. Right? We scored down our next week. Rasta's calling him. So sending a mail to him like, planning what exactly we're we're doing here. And start to have the discussion there. And then see, like, where we go. Like, like, last has very good point. Like, we're calling it a Ethernet whether it's we can really call it an Internet within all the reduction and all this thing. Those I think I would like to hear from the guys and our routing to come and tell us rather than we try to figure out. Las Vegas to the to the point that I like to make. So I'm not saying we're moving the bar here. Right? I'm I'm very sure that particular document and all other documents that we have to on Ethernet have been liaised and discussed in the coordination call. When when you say that particular document doesn't say anything other than the ether type is by implication, that means you can stick any frame in there that is valid. Under 8 2. Right? Which I don't think is the case here because we just talked about all the different things that we don't want to support. Right? So this is a more limited format then what's there? So I don't Well, Let's figure out Yes. Right? We are well for time. Yeah. We're we're over. So, yeah, I I think my takeaway here is that I am going to, like,"
  },
  {
    "startTime": "02:04:03",
    "text": "sit on this chart update for a little bit while we work out some of these issues. And then, talk with the ISG about what they wanna see in the charter check specifically beyond this, because I think a lot of these 802 details will not go in here necessarily. But, I was hoping for November 30th for for charter review for start the ISG process, but I don't think that's probably possible anymore because there's some There's some meetings that have to happen first. So, the bad news for the officers is, like, we're gonna be in limbo for a little longer. Yep. Thank you, Martin, and we will, get coordinating on a on a bunch of that. So so out for that as it comes. But, yes, I I think here that this will take a little bit It's totally accurate, and we will get there. With that, we are well over and q all extra thanks to Nope. Welcome fun meat there. Happy masking, and enjoy the Best of your last day of IETF. Thanks everybody. Alright. Wouldn't Martin go girl."
  }
]
