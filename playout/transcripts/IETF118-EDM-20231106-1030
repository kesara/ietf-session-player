[
  {
    "startTime": "00:08:06",
    "text": "Alright. Now that we have slides, we will begin. Alright. Hello, everyone. Welcome to our EDM program meeting. And so, as a reminder, this is a Yeah. It might be. Yeah. This is a IAB program. So it's a function the Internet Architecture Board has for technical discussion and and trying to develop some technical documents and, explore different areas. This is one that we've been running for several years now. We've produced couple documents and right now, we are working on discussing a document about greasing and trying to make some of the more either, more abstract things that we had in, like, like, previous documents like the user, lose it, draft, I forgot the RFC number that they got published as. And also things that are more concrete to specific protocols in TLS Greece, and try to find a a middle ground of how do we have concrete recommendations for protocols going forward and so that's what we're gonna be discussing today. That's kind of our only agenda item at this point. We're thinking potentially for, like, lifetime of the group, we may wrap up this program after kind of this item develops. There are some other programs that are, also starting up within diabetes so you can follow those. Alright. So if you wanna go to the NASA side, Yep. Great. So this is a meeting under the note. Well, So please be familiar with the terms of participating NightF,"
  },
  {
    "startTime": "00:10:01",
    "text": "and you know, if Of course, we also wanna have good, friendly, and productive discussions here. So and we appreciate all of you showing up. Great. Do you have any other floods or Ah, yes. Our agenda is Greece. Yes. So we have a document which is, drafted. What what what draft EVM protocol greasing, that Lucas has, very kindly authored for us, Yep. If anyone would like to come on board as a coke or anything, I'm I'm more than happy. That that was my original understanding. Volunteering to help the desk. Siranda? Yep. I hear you. So last IETF meeting, I said, asked me in 2 months. I had a bunch of things that I thought now there's been 2 months, I'd be willing to do it. Great. Thank As long as you, Dave. you're fine with me putting in the stuff that we talked about last meeting, Keep up kinda nodded and said, yeah. Sure. Yep. Become a co author. So Yeah. Sure. Month, but between this month, between now and next IATF, I can probably help contribute stuff. Wonderful. Thank you. I will take note of that. Great. So I I I think, a couple of things that it'd be good good to cover on this document. So a couple of us have done reviews, and so we can kinda go over some of the points and talk about how we want to develop it, Also, I think there's some discussion of, you know, procedurally, like, you know, do we want co authors on this. So thank you, Dave. Also, I Ivy did discuss yesterday actually, like, formally adopting it because it's not on the IB stream at this point."
  },
  {
    "startTime": "00:12:01",
    "text": "And that's something I I believe based on the discussion that we would like to do, you know, obviously acknowledging that it's an early version, but being able to part of the process there, for adopting an IB document is that like, a notice would go out to the community of the Ivy is going to intend to you know, work on this document, and then you get kind of a community wide feedback period, and then IV could vote just like, yes. We think this is worth doing. And then then we just, you know, kind of go along as normal So just wanted to confirm that that is good. And maybe what we'll wanna do is take the feedback that we have in this discussion do another revision it may be, you know, Dave, if you wanna come on board then, and then sometime in this cycle before you know, the next IETF meeting at least do that properadoption process. Yeah. That sounds good to me. The the the current draft is reflects discussions to this point. But it clearly some editorial work and some additions. And would wanna ask for community feedback right now because there's so much low hanging fruit yeah, I think we really wanna make sure the community input is valuable to the audience decision making. Yes. And, again, procedurally, like, There will also be a, like, you know, last call equivalent community feedback period. So Plenty of time. Great. So maybe let's kinda dive into some of the discussion of the actual technical need of it. Maybe if you wanna just for all of us here. A main trip please. Just quite quite briefly. I'm looking at the note taking tool. Are we using the note taking tool, or are we using some, note somewhere doing notes somewhere else and if not, is anyone picking us I was taking some notes of overall action points. If someone else"
  },
  {
    "startTime": "00:14:01",
    "text": "would like to volunteer to take notes, I would, deeply appreciate that. Okay. So you you maybe you could copy Yeah. If if you wanna just start now I paste anything you have over there, but I'll work on the pad. Yeah. Then I I can merge stuff later. Thank you. Great. Okay. So maybe if we could start with just a if you wanna just stop summarize what's in the document so far. Like, the intent, and then we'll go into some of the review comments and other people can bring up their thoughts as Yeah. Sure. So the the elevator pitch here is that a Tommy alluded to already. We we do have some documents, already. Who don't have the RFC numbers right in front of me here, but, they talk very specifically about certain aspects. And there was a feeling that there's a kind of a those for example, Greece talks about TLS greasing and how to use co points for some betterment of some thing. We don't don't need to go into that detail right now, but that that's great. And something like quick took across some of that recommendation and did its own equivalent too. And once you have, like, 1 or 2 or 3 instances of this. Is that a pattern that is useful, useful our best common practice, and it can vary by the the specific nature of the protocol, but is that something we can extract? That is gonna be, useful to other people. That's just one element. Greece is very focused on code points. And if you have a large base of code points, trying to to use some of that in a nutshell. But there's other aspects that we've also experienced, and this is where we need more examples or use cases because because because my view is tainted by quick and and that world, where I say we've had various kinds of inter interop issues, because of expectations built into how implementations work So for example, the certain specific ordering of or timing of packets or frames or units of the protocol that communicate with each other."
  },
  {
    "startTime": "00:16:00",
    "text": "And how varying just the size of those things can sometimes throw off the receiver such that they behave in a way that is not great. Could say, well, that that's just interrupt testing. But the the issue we've kind of highlighted in discussion is that this thing will work for an age until maybe somebody new comes into the ecosystem with a implementation or somebody tries to change something to fix a bug. That they found, and then suddenly the the the internet breaks because of unfortunate side effects. And so this document was was pitched at kind of filling the gap between some of those documents, not duplicating them as much as possible. But trying to give some concrete recommendations to people. For example, if you have all of these code points, and you need to register them or provide some framework for iona tables. To refer to them. What's a good label to give them so that we're consistent. And that's one of the specific feedback points Tommy had in his latest review. We say we give an example of how you could do this, should we just be more concrete and say, do this. I said that it's clear that people want to do. Great. Thank you so much. I can summarize. Cool. Cool. I guess But before we talk about, you know, specific review points or things that we would like to see, revised or added Did anyone have, Okay. Questions or thoughts on the scope or the purpose or kind of clarifying what are we trying to do here? I I know, you know, Wes, when we're talking about this, on Sundays, like, How is this different? So I guess Do we think we're being clear in the purpose here based on, like, That love that. I yeah. was my ignorance from not having read the document. So the I Please"
  },
  {
    "startTime": "00:18:00",
    "text": "I'll press that. I can just state your name. Okay. Yeah. Hans York from Rodrigo. So I may have some stupid questions because I just became aware of the session during dispatch and jumped in here. So apologize if there is, you know, misconception. So what let me hear basically is, like, you know, one seems I'm seeing constantly about this, like, looking from a developer's perspective, upper arms or work of CITF, and how that can be reconciled in a better way. And a constant personal frustration, not blaming anybody here, but it's like how's the data, the how's the RC stuff works in the data tracker and so on. It's very much, focusing, you know, as a document, and it's it's very hard to figure out, you know, so there's related ROCs, but with is a recent one where it's test data, these kind of things. There was a meetup in a recent, I think, in the San Francisco IETF on open source community building with, within the, IETF, there was also syncing gen in in in gen in the gen meetings, there was a proposal, I think, in ROC about also open source is, and and and just wonder how this fits together in here, Yeah. So is it the right place here, or is this in scope? I feel like that a little bit. Right? Or it's I feel this is something of related, but I'm I don't know the history of this group here. So, yeah, that's my first question probably. I mean, I think probably applies a bit more to you know, the group and the overall discussion and maybe this particular document. But, Yeah. But I think What What we're trying to look at here is that intersection between you know, what you need to practically do to deploy things, make sure that you can still evolve your protocols and maintain your protocols and have them work well. And how do we aid that by what we put the documents through the Sam's process and how do we,"
  },
  {
    "startTime": "00:20:02",
    "text": "predict those things better. So I think, you know, particularly with So greasing what we're trying to do here is like, hey. How do we distill advice to the people writing the standards documents to make things more clear for implementers and easier for the implementers long term when they need to deploy a new extension so that things aren't broken from the beginning. So I think that's the that's this focus. I mean, if if there are other particular gaps also that you would like to highlight, you know, maybe outside of the scope of this document discussion, that'd be great to hear or, like, have those on the list. We have a EDM at IB. Dot or list. Yeah. I don't wanna occupy the meeting, but I I would have one more note probably. And so one observation I have so my my home home base is, migration. In a way, a possibility of data. And one of my, my, one of my observations is that, in a lot of, you know, IETF focuses a lot of interoperability which is Sorry. Really quickly. I see some hands up. If everyone wants to join the queue in Mexico, it'll be a lot easier for us to know who was there. No. Go keep going, but for everyone else. Sorry. There's there's no queue right now, so So so so one of the things, like you were mentioning could be part of such a template and I don't know if this draft another one is like a recommendation to consider just, you know, short term interoperability for certain, drafts, but also this aspect of, like, what may happen in 5 years if systems implement these protocols, and might there be implications, you know, set might need to be included in the protocols or data structures that might help out not help set to to give you an an an examples like in the caledaring standards, So there's methods like, you know, organizing an event. But these methods actually, for instance, will will instantly, if I invite you, we'll instantly send you an email, like, you know, you got invited to the"
  },
  {
    "startTime": "00:22:00",
    "text": "this event. So it works well in the life interoperability when I create But if I recreate it in a later, you know, migration of portability scenario, many systems don't allow you to block this. So you will if I migrate your legacy data where you got invited in the past, you get new emails for that. This kind of thing. Yeah. And I I think that type of thing is definitely within scope for discussion overall for me. And then, you know, particularly on the aspect of how do you deal with things long term over over time, one of the documents that we published out of here you know, he's trying to talk about, like, protocol maintenance and stuff. So that if you wanna read up, That's Rfc9413. Yes. Up. Alright. Alright. Alright. Alright. We're gonna cute. TKG. Hi. So I think a document like this is super useful, not just for the people who are writing the documents, for also for reviewers, And I wonder whether we shouldn't talk about, both for, you know, chairs and directorates and things to ask there are concrete questions to ask, not just about code point increasing, but about, you know, if there are grammars, does the do the documents define behaviors for when things don't quite meet the grammar. Or for unknown things that show up in a grammar Mhmm. So you've got co you've got code points. You've got grammars, and then you've got for online protocols. Know, you have like, you know, re out of order delivery or or things like that that that that come in. So I think I I think it's useful to say when you're reviewing a document like this, there been any effort to has Right? Like, that's really what the greasing stuff is about. We we have a we have a we define how things work today, and there's some space that's ill defined because we know we don't know everything yet. And You know, I I think you said that's just interop testing."
  },
  {
    "startTime": "00:24:03",
    "text": "We should be doing more of that. Right? We should be explicitly asking folks what sort of interrupt testing has been done. And Right? That we should have documents that describe what a good in or out test suite looks like. You know, I I'm I'm co chair in the open PGP working group. We are finally getting that draft out the door. And We have Thanks to a bunch of implementers. A good interop test suite now Great. That we never had before. That's finding bugs and implementations from RFC 4880. Actually, probably from RC 2440 because both of those documents never contemplated, giving guidance for what to do when you reach stuff that's not in this document. Yep. Yep. Yep. So, So I I I mean, I think we should be talking about you know, the running code aspect of things with with interop. Not OpenPGP interop testing is completely different from online protocol interop testing. Know, we we have there's there's different things that we need to deal with. But we you know, the communities never had that before. And it it's been super useful. So I would love to see documents like this advance with a goal of describing what the reviewers should be thinking about, not just what the folks who are writing it. Yeah. I I I really like the point of you know, giving these requirements or criteria for that audience of reviewers as well as the office of people developing it. To the point of, like, the running code, because I also think there's something we've discussed here before And I'm just, you know, wondering about kind of, like, you know, scope of document or how to talk about these things. Because, like, you know, we'd have the other discussions about do a better recommendations on how to Find code or, like, talk about if if you have interrupt test matrices, how to make those more part of a working group process or protocol development. And so, like, are are you imagining that being something,"
  },
  {
    "startTime": "00:26:02",
    "text": "you wanna see folded into this effort or, like, more just like parallel. Thing. Like, what what is the right way to actually promote these intrav test because I I see them in some groups and for some protocols. But then there are, like, large swaps where the tooling isn't there, practices in there, and it's like the the startup cost to do that. Seems to be too high. The start up cost is high because Right. Just like for, I mean, if you're a software developer, if you try to do test driven development, you're, spend the first couple months of work writing your tests that all fail in the And it's super frustrating. People outside say, what have you gotten done? You say nothing. Nothing works. Right? So but We need to I mean, we can say this is part of the development process. Right? You do need to to spend those costs if you wanna convince people that you that you've thought through the issues, right, I I mean, if the re if the reviewers say show me how you are thinking about the stuff that's not in this document. Me what, you know, do you have guidance for that? Do you can you show what happens to your tooling? The other piece that, you know, is supposed to be a bad word in IITF is that is is API work. API work builds, whatever. You can't do interop testing without functional API. Work. And as long as we pretend that we don't do API development here, we're not gonna facilitate, good interop testing. All all good thoughts. Yeah. Let's move on, Drew. So just to answer to your question earlier, there was a document, about an EDM. Also, it was discussed about finding related implementation, so we have a document. So even if you have features like that where you think the data tracker can improve, We can discuss it here as well as we can take it to tools team with ideas, and you can file them and get GitHub as a request as well. So even even those meetings are open, if you have ideas on improving this piece, continue to"
  },
  {
    "startTime": "00:28:02",
    "text": "sorry briefly for the last time. I'm You mentioned a document could if you could track, file that on the chat. Thanks. But Got it. Yeah. Yeah. Thanks, take forever. So, I just wanted to since there's actually quite a few people here that weren't here at the ATF 117 to repeat some of the comments that I made there as to why I volunteered to become a author on this one because people said, yeah. Sure. Cride provisions greatly accepted. So two easy ones is there's discussion and 2 other IAB documents that are relevant that are right now and I wanted to add in, references to them and to scrapped a relationship. One of those is 8170, which is planning for protocol adoption and subsequent transitions, and there's some relevant discussion in there. And the other one is 9170, right, which is the long term viability of protocol extension mechanism. Both of those being IV documents that have guidance systems I consider to be like, another one in that same series of things, right, which are other, like, EDM type documents. Right? But then the technical things that I wanted to add discussion of is right now it talks about, increasing where the if all you do is what it talks about right now, I mean, the scope is to prevent the receiver and our middle boxes from crashing. I mean, that's basically what you get if all you do is what's in there. And I'm saying that's great. But it should be water scoped than that. In particular, If everything drops, all the everything you try to agree since what never actually makes the other end Then, of course, nothing crashes, but you haven't necessarily helped situation. Right? So I wanted to add in text that talks about should the receiver detect log or whatever, the lack of receiving and increasing Should the receiver do something if it says, I never got any degree stuff. Right? That's an interesting signal that says something is wrong here. What should you do in that case? I wanna have some text. Have people have ideas of what one one might"
  },
  {
    "startTime": "00:30:02",
    "text": "say, please let me know, and I will happily, you know, craft some text on that topic. Then the follow on to that one is say, okay. Well, if you can detect it, should or should you not, if you're doing protocol design and adding increasing, Should you have a way to have any feedback back to the sender about whether you're greasing made it to the other end? What are the considerations around that? Is this a good idea times that you should not do this right now at silence in that topic, and I think it should actually discuss that consideration. And so, ideas in that topic, if you have other people have ideas, let me know. Because I'm happy to write text, be the author of the text for the section talk about that to widen the scope just from getting the creasing at the end but to do something with the lack of policing and detection and and reporting which can actually help improve the situation of making things go through so that you're creasing actually says things are actually extensible, not just the fact that I can lack of extensibility Good. Thank you just just to respond to that one. We do have some protocols with extensibility mechanisms that involve intermediaries that are allowed to to to drop those things without the protocol failing. So, a very interesting idea, Dave, we we want I just wanted to discuss more with you. But I do wonder how how you square the circle around. Greasing is something that's, like, like like like like should be ignored. And that you're explicitly not ignoring and and and then trying to create another feedback channel to to send out back. Yeah. We kind of had a little bit of that discussion of IITF117 among several of us and the example, because we kinda know quick or whatever, but he says, okay. Let's see. You're gonna apply the same example how would it apply to say ipv6 extension headers? K? Which is in the case that you're talking about there. And so what, you know, the compare and the contrast, how would you have done stuff if you were designing it from scratch now you don't end up with the same situation we have with the IPV's extension headers, what would you do? What would you do differently if you're on the next thing or whatever. And so that's the thing that I would love to have some, additional sections and stuff in there about that topic. So that's what I'm volunteering"
  },
  {
    "startTime": "00:32:03",
    "text": "So, yeah, any other comments, talk to Lucas in the It'll show up hopefully by next day, if you have Alright. Gord. Well, okay. We do do APIs in the IT app in some places. And we and we should be doing it. So, let's spread the good news. But what it comes to this, last time I was was was looking at it, and I was wondering, I think network based measurement is important in getting employability So if got MAP, our g person here. And I think I think this thing has to be considered when we do the greasing somehow. We still have to know whether the tests we're doing actually go through the network so we know what works so that research which can build big datasets over time. And there's a tussle here because Greeceing kind of ophisticates that or maybe exercises that. So I think it might be worth figuring out how the network wide measurement thing will get some useful data from greased core points when they're visible in the network. The network itself. My hasn't shot up. hand For interim. My hand also shot up as soon as somebody said, we don't do APIs in the Yeah. Results summoned So I actually I actually wanna say something kind of like what Gore said, but with slightly different words, I did a a control f fuzzing on the current version of the document in in protocol variability says this can kind of thought of as protocol fuzzing. And one of the things that I noticed in this conversation in a little bit late. I think I came in at the right time. Is we're actually talking about something that is it can't kind of be thought of as protocol fuzzing actual fuzzing of the distributed system made up of the protocol in the network. Dynamically in real time."
  },
  {
    "startTime": "00:34:00",
    "text": "And there's literature on this. And I think we should probably, you know, I this should not become a draft about fuzzing the internet using your endpoint protocols because that is that is a a a ocean that is probably better differently boiled. I think that we can like, it'd be interesting to see that, you know, can be thought of as a kind of protocol fuzzing is, like, actually, let's go all the way down that rabbit hole and see to the extent to which we can use some of their literature in this space. Do you have Would you like to share suggestions for some of the literature you're thinking about? I just came in and this just occurred to me. This is, like, send it to me. Like, send an email to the list of that. Yeah. Yeah. Yeah. We've done that. Yes. This week, Alright. People need to get people out of the queue. It's fine. Alright. Chris? Yeah. To file on to what DKG was saying, PPM, the PPM group, Also, we spent some time trying to specify APIs that enable better interrupt testing. In fact, there's a draft that's being advanced alongside the actual working group draft. It's not even adopted yet. That describes, like, basically, the API for interrupt test runner, for MPC like protocols, which is complicated, but necessary. And it it proven useful for some of the initial implementations that are out there. It'd be great if there were more people that did this sort of thing. I'll drop a link in the chat. But PPM, IPPM is inappropriately named. Please expand your acronyms. That's a joke. Also you you mentioned that, like, people keep saying we don't do API work. I I haven't heard that in a really long Is that still something you you're genuinely here. I I have heard it, but I'm not hearing it in this room, and that makes me very happy. Okay."
  },
  {
    "startTime": "00:36:00",
    "text": "That's Please. I'm curious. The context so I was one of the people that used to say that in some cases still do. And just to give you the context, it's when we say that. If somebody is going to is this it first came up when, the ipv6 working group at the time, whatever the acronym was at the time. I think it was IPNG. Want us to define new sockets APIs. this is for ipv6, right, new new socket APIs. And For we actually have an RFC that does that. And it's informational. And the reason that's informational is because the sockets APIs are part of the deposit standard, and the IETF doesn't know the deposit standard. The deposit does. This is the the proposed standard variation is part of a different group. And you say, okay. Well, what about Socket's API? For JavaScript. Oh, but those are owned by W3C. What about for C plus plus? Oh, those are owned by ISO. The point is that, formal language libraries are owned by other bodies outside the yeah, there exists one for many of the languages that are out there And so what the IETF doesn't do is it doesn't do the proposed standards for languages that are owned by other bodies. Okay? And so he says, here's the C API for doing, you know, the know, TCP, the new version of quick or whatever it is. Well, if you want those to be part of this is not the place to do that. That's when we say it doesn't do API doesn't do APIs when there's some other group a natural place that actually claims that space. K? It does do things like abstract APIs. You could argue GSS API is an API. It has no language binding. Right? There aren't language bindings, but it's not in RFC. Right? But GSS API is an RFC you could say that can be proposed standard because it's abstract. Right? And so the IVA IETF does do abstract API So things like taps that I talked about in the taps working group when it was created, we should be doing abstract APIs so that the appropriate other bodies can do the seedbonding the JavaScript binding, the c plus plus binding, and so on. So that's the long version. Makes sense? Alright. I got in queue"
  },
  {
    "startTime": "00:38:01",
    "text": "Partly to ask for a clarification Dave, on the kind of the greasing feedback loop, proposal you had. So, like, you know, think thinking of some of the examples we have, like, in the case of quick itself, with, like, quick frames or other Doug. Transport parameters. There are cases where at least, you know, end to end between those endpoints, we have mean, not only is it authenticated with integrity checks. We also have acts. And so, like, we kind of implicitly know, like, if you act this packet successfully and the whole thing didn't fall apart, You got my frame. So I I wonder if in the discussion of these feedback loops, we can also be precise in, talking about cases where that is implicitly done versus it's not done, like, in, you know, v 6 extension headers, there is no automatic end to end feedback mechanism, or in the case of HTTP intermediaries, when you don't know how many layers of abstraction you're going through, and how many, you know, people are really on the path that is end to end and then maybe kind of divvy up those categories there. Yeah. I don't already have something in mind, and and I don't think there's anything that I would necessary. I think it's Unlikely, but not but but possible that I will come up with anything that would be in the here's what you should as opposed to here are the considerations and here's what's been done and the problems has been come up and say, because as you mentioned, there's a bunch of different cases. I don't think there's ever gonna be here's a one size fits all per script shit thing, right? But having the considerations be there that says, okay, if you're designing a new protocol, you should do creasing, and here's the consideration so you can think about which case applies to you is would be a good scope for the document life Great. So, yeah, everything that you said and probably other cases too would be worthwhile to point out without necessarily having a, by the way, here's what you must Right. Okay. Cool. I, you know, I imagine here for some of these cases, And, you know,"
  },
  {
    "startTime": "00:40:02",
    "text": "Sometime else we could talk about, like, what is the perfect version of V Six extension letters and how should we have done it. But, That was the example that somebody else brought up last IATS. And I said, oh, that's a good example. We could use as an example of learnings. It is. But I, you know, I wonder, like, for some of these cases, it may sound onerous to say, oh, we need to add some feedback mechanism here. Potentially pointing to you know, of requiring an integrity check or some other thing may be another way like, saying, like, you have to decrypt this entire thing and process it all at once. To to kind of guarantee by side effects that the greased code points were processed and used. Cool. Alright. I I'm sure I'm gonna miss some of that when I craft text. And so I'll be looking to you to review and suggest missing point. So Christian, Christian, Christian, Christian, Hi, Kristen. I'm just I'd like just to say, thanks for doing this because I've started working on Greece for ad hoc some time ago and there was a lot of input there here that is very valuable for that. You'll make my life harder, but in a good way. And, I I'd love to see if if there are specific things. It was like, oh, yeah. We wouldn't have done this anyway. It'd be good to highlight those so we can elevate them in the document. So so, like, for specific things, what I would have done is the the so in ad hoc, this is a key exchange protocol. Everything's authentic cater, and, like, things can't be dropped. You can just, you can just be completely removed. The the complete message removed So what I would have done that already was like, grew up every code point that I can that that that that where this works. But what I didn't think of was, like, what what you mentioned about keeping track of even the points where things fail completely. So if we have phone extension mechanism like methods, methods, methods, if I picked a method that is unavailable, then there would not be any successful that I could work on. So I was like, unsuccessful anyway."
  },
  {
    "startTime": "00:42:02",
    "text": "But, yes, keeping track of the there was an unsuccessful attempt and responding with yes, like, I'm failing this, but I'll let you know that I've done it. It's kind of valuable. Okay? For it. Okay. Lucas? So claim I hurt. I've just been collecting some points of clarification questions that that the enlightening discussion here. So the first one is, like, interrupt casting is is great. That we we did a lot of that in quick. But I think maybe back in Yokohama, we were discussing an actual interop bug we found in the fields like, they could use kind of online testing, vision, and stuff. And the the interop testing can only go so far in in things and it's they tend to be in my experience, anyway, quite pointed at we're gonna test this aspect of the protocol, the speech, this exchange of frames, Obviously, you might need a a connection to get to that point, but then you're gonna do tests. If I send this, it gets hacked, and then we're gonna tear everything down and move on to the next test. In in real life, you end up with connections last hours or days or whatever, and these kind of accumulation of errors can So I I'm a humongous fan of interrupt testing. I just wonder why it into the the either d or the m of this group Is it part of the the mobility is in a it's good criteria to get to to deploy because effectively for the quick working group, we we have continued interop running, kindly run by Martin Seaman, and his structure, but not isn't getting that many new tests. It's getting testing new features as a posal for multipath quick to add some testing, which is fantastic. But, after we saw the bug in interop, we didn't go back and update that integration testing framework and and so, so the amount of effort and reward is is something wanna muddle in a bit more. Digit Well, so sorry. There's a a draft called RTP of a quick which is defining an application, mapping"
  },
  {
    "startTime": "00:44:01",
    "text": "of RTP over quick. For example, which is great. And and I've been watching along in the group that that's been standardized in, they wanted to define some error code points. And they they needed their own registry for those code point and in quick hours can be, valued between 0 and, like, 2 to the 62. So that's a humongous space, and they only had 5 error codes. And this is a great example of something that you you might start with an outfit to use case and and you wanna add a new error code in 5 time, and then everything's gonna break. So, for me, because my brain thinks this great. Yeah. My suggestion was you need to be thinking about Greeceing. This is exactly the kind of points we should be making in this document about how to do that. But what's what I find amusing is quick. Self doesn't actually say Greece anywhere. It it it heavily implies it in a roundabout way, about all reserve these code points for the purpose of testing that when you receive an unknown thing, it doesn't break. I don't I don't find that as helping these kinds of discussions because giving a name to stuff makes it more tangible, and then you go and look in the document, and and you don't find that you know, like, Brian, look for fuzzing and he finds something to do with fuzzing. And then and I could kind of index off of that and then come up with some ideas. So maybe some guidance on use of terminology these things could could help to. Yeah. I think that goes to To to some degree, that one of the review comments I've made on the list of if if we're gonna make a recommendation for how to reserve this, like, let's have the term we recommend. And, like, potentially that expands beyond the IAN at registry reservation terms. To saying like, hey. If we wanna call it Greece, call it are like, you know, just come up with, like, here's here's the thing. And also allow you know, these other protocol documents to point to this Yeah. RFC eventually to say, like, we're meaning this thing. Yeah. We we had suggestions of other acronyms We're back. We're back."
  },
  {
    "startTime": "00:46:01",
    "text": "But lard. Yeah. I wasn't a big fan of that one. But but, yeah, and then just a final point, Colin sent some feedback to the list. Thank you. Like a week ago or so. One of the points that's relevant right now to this one. That's the the stuff we should discuss, but, you you you said fill in that you and I'm paraphrasing, but you you weren't convinced that a wide set of Greece code points, were were needed when a small set could provide the similar kinds of functionality. I was wondering if maybe we could pick a thought because extension points have different code space points, and it is a bit subjective. How much of that maybe limited space do you wanna waste on this greasing thing that doesn't provide any functional value. Even though it's a good thing to do. And and if you have a humongous space, how little is to to is is enough. And I I don't have the answer. Yeah. I was just really curious to Yeah. And look look. Let let me start with my thoughts on this very naive. People in this working group have been thinking about a lot longer than me, but It seems to me that if the application is trying to Actively just blow away and ignore the greasing. It really doesn't matter. If you say this whole range is reserved for Greece. They'll just be like, yeah. Anything in this range, we instantly is grease and then don't handle properly in a greased way. So it seems like to me, that for the most part, you need the application to not be trying to sort of wipe away all the greasing effect as far into the process. And that anything that tries to do that, like, what if the applications wanna do that, you're not gonna And so if you reserved a few code points or 25% of the code point space you know, if the application was writing, this range is out of scope. We we basically ignore it because we know it's greasing. It doesn't really matter how big that range is. So I was and my comment was more"
  },
  {
    "startTime": "00:48:02",
    "text": "I didn't find the text in the draft compelling to convince me against this. And I wasn't arguing that maybe there wasn't an argument for that, just didn't get it out of the draft. That was sort of where it was coming from No. And and and that that's that's the thing I would wanna see what tax can we make to make it compelling. And maybe it's because we don't actually No quite yet. It's been based on draft orders who've come up with a gut feeling. Effectively what we want is people not to hard code the grease code points in the their thing so that they create a function that does patent matches and says, what exactly is that anything in this stuff, just ignore Yeah. Alright. quickly, sir. As chair, we're about to close the queue. So I think maybe that's not very you wanna hop in and hop in And go yeah. And now. So let's go back to the queue. And then we had a diversion because Lucas had clarifying questions. Mean, I actually think there's an open question about whether reserved code points for greasing makes sense. Because of what because of the the risk of what we're talking about here. And I mean, I don't Like, I hear Collins concern about, you know, over allocating that space as one example of saying, should we be allocating any space at all? That is reserved for that. Because it because it does create this sort of attractive nuisance. Just respond quickly to that point. The the danger is if you don't reserve them, then people unintentionally come in and define a new extension that's in that space that people will explicitly ignore. Then we'll have interrupt failures. And this is this this has happened when people like me, have naively just, like, because the way quick does this is weird, but you kinda go in and you pick a code point and then like, something I wanted to do is is make some tooling maybe like a website where you can say, o Give me a code point that's not taken by Anna and also isn't reserved by Diana. And I need 5 of them for my extension on it because might pick something just before, and then you're gonna span and it it's it's terrible."
  },
  {
    "startTime": "00:50:00",
    "text": "But that's my point. You you don't wanna be in a position where You especially for extensions that can be optional, like, if you receive the extension you would ignore it, unless it supports an annual response I'm not I'm not making much sense, but Let's let's chat some more. Briefly coming to that, Kristen. But that means that it works. Right? So if if someone is using if if use is using a range that they are actively ignoring and your extension is hitting that range, then breaking things is a kind of that think Greece working because it shows that someone is ignoring the range rather than ignoring the option option. Okay. Let wanna get back on queue. So Gory. Yep. Yeah. I'm I'm still struggling with greasing, lower layers when we talk about heads and things like this. And I think I'm understanding a bit more why I'm troubled by I'm troubled by the Debit in deployability because at this layer, when it's below the trans support. It breaks in a particular place, and we need to kind of know which part of the AS path this is breaking in to be able to do anything bout it or understand it, I think. So perhaps we need to pick this a little bit or increasing when it's all invisible to the network is one thing, and it we kind of know a lot about it boosting below where we it's visible or it's being used for routing and other elements the network becomes a little bit more interesting to work out what we should be doing. 7, Very good point. Alright. West. Thinks, at the risk of this being a little too high level. I I find a lot of this conversation fascinating because the TF as a pendulum, like every organization, and we have swung from one direction to another over the course of years And there there are 2 things that have sort of come up in this. 1 is API's, and the other one is is why we're doing increasing in the first place. Right? For API is we always have done APIs"
  },
  {
    "startTime": "00:52:01",
    "text": "but it's always been, you know, low level stuff that has to have a common code base it's gonna be so widely deployed to many, many applications. GSS is one of the other ones hasn't been mentioned for authentication or sockets for for network connectivity. Otherwise, the protocol, if you're gonna talk about interoperability, should only be done on the wire. If you want applications to do their own, it depends on how much of a of a common code base you need. The the other interesting one, of course, is way back when we had, you know, multiple levels of of RFCs. Right? We had proposed. And then in in order to get to draft, you had to do interoperability testing. And And that was onerous and hard, which is why we got rid of that requirement, and it was onerous and hard. And we had these, like, gigantic checkerboards of, like, every implementation on one side and every bit on the protocol on the other side of the table. And and it was even that if you couldn't demonstrate capability, you know, by multiple vendors in this field, then you know, you were encouraged in the draft version to remove that field from the protocol, like you know, just leave it blank now or something like that, right, or all zeros non greasing. This encourage, you know, stability so that especially for core routers and things like that, that's actually important at the very cost of ossification. So greasing is like the opposite end of the extreme. Right? Now we're coming back into how do we do this? And the the funny thing is you know, most of the world has moved to continuous integration and, you know, pushing instead of static code, we're doing runtime checking. Right? A lot of languages are doing that now. You don't, you don't have an error until you actually are trying to do stuff. That to me is sort of the point of greasing. And, you know, I think these sort of concepts would be good to put into the top of the document saying, know, that this is why we're doing this is that we we are enabling the the market the the ability for the market to move at a pace is that it was just never able to before. So high level, apologize for that. Lucaskin? K."
  },
  {
    "startTime": "00:54:02",
    "text": "I jumped in, oh, you have a slide request. No. I rejected your slides I think I think my phone is greasing the the echo Alright. I didn't hear myself. Back when, We're having a clarification question to Colin. About, you know, do you need too many points? You know, I I I think The document does and it it could be clarified. But a good job of explaining why we need more than 1. Like, if we just have the one code point, then everyone's be like, oh, I'm gonna ignore that one. But I agree that, like, you know, it doesn't necessarily need to be 100 or, like, this huge space. So I think we could be Yeah. Do a bit of just, like, analysis on here of like, based on it's almost like based on, like, the frequency of how often you're sending greased things to just make it such that you can't just, like, easily filter the And so, like, depending on the size of the space and how frequent it is that should somehow influence the the amount of things you reserve if you reserve at all, because I think, you know, you know, it's good to have that debate. If you even need it, I think there was discussion within mean, if you're like, greasing HTTP headers or something like That's clearly not a space where you can just, like, allocate from strings. So that would need a very different approach. So I don't think it's, like, sometimes it's appropriate to allocate, but not always. Just respond to that one quickly. I there was some discussion. I think Martin Thompson was in in the last meeting or the one before where even even though in in quick, it's that the space is allocated at regular intervals, way that we encode those numbers on the wire means is actually a bit unfair in terms of"
  },
  {
    "startTime": "00:56:01",
    "text": "of how things are done. This all seems very competious ironacy to me. Like, I wonder if someone would wanna take a task to go away and maybe you could come up with some kind of algorithm that says, you know, it's fine to pick 2 until you have this much space and then do this thing Right. And maybe a few variances of those based on all of the different ways that the IETF defines his protocols. Cool. Okay. David. Yeah. I think, there's an interesting tussle here because on one end, Let's say if, you know, your approach to Greece was just, oh, do something random, if you have any bit field, do something random might end up colliding with something that's in use and then hilarity will ensue because you just send random garbage in some very important security field. And on the other of the spectrum, you have the fact that if you say, okay, every even thing is for greasing and everyone in the code said, if the if it's even then ignore, you've accomplished exactly nothing. And so it's it's kind of tricky. And I think that That specific question and the fact that this is, like, subtle and nuanced is why we need this document in one of our earlier EDM meetings, were talking, I think, about Gracy. And it was, I think, probably the first meeting where we discussed this document, was when we're like, well, what's new protocol? What's hot off the press these days? I'm like, oh, MLS is in working group last call, are they doing greasing? And I, like, felt an issue. Should do greasing. And I ended up having, like, many back and forth in many conversations about, oh, no. No. No. Not quite like this. You have to it like that. And you also can't do it for the field where you don't understand the extension, then you fail that like, joining the message group because then all of a sudden your grease breaks everything. And and then I realized, oh, we need to write this down because the questions in multiple Tracy were 100% valid."
  },
  {
    "startTime": "00:58:03",
    "text": "And I was kind of making up answers on the fly from having spent time working on quick. And so I don't know if there's an answer that completely precludes the like, a determined implementer who wants to, like, single out receiving Greece values. If we make it just subtle and hard enough to say, like, no. No. Really don't do that. We can still pump or something, even though a silly implementer can do silly things, and that's just always gonna be true. Alright. Then allied. Allied. Allied. Allied. Allied. I My comment is a Can you speak in the microphone for the remote? Sorry. My comment is not about Greece. But I can wait until we conclude on these Okay. I mean, I think we're kinda at the end of the q and time I wanna let people, if they wanna be able to grab lunch, do that. So I was planning on wrapping up here. Anyway, yeah, so let's have his comment and then we'll do the math. Sure. Yeah. Okay. Let's go for basically, what I wanted to say is you commented that after Greece's work, you over you plan to rep the program. Now Potentially unless unless there's all the good stuff to do. Exactly. So when I look at your mandates, of evolvability, deployability, maintainability, see. I see that there is a connection with sustainability you know, there's a new sustainability program. And have you looked at your tasks or let's say, scope with a view on sustainability because everything this, would do to let's say add longevity to protocols and implementations building to making them more sustainable in the sense that you can reuse and rebuild and repurpose things and that's prime Sustainability topic. So"
  },
  {
    "startTime": "01:00:02",
    "text": "maybe there are things you can take on board or maybe discuss with the impact program. To see flagged, my my inclination here is, you know, since both our IB programs in the that that that discussion sounds like it's great to bring up within e impacts. If if we think that's applicable, I guess if they're concrete, things, in that you have in mind, for example, like sharing it with both lists, I think, would be interesting. If we can just kinda see where that picks up. And trip Chat to that. I think what makes IB program successful and working groups in general the ATF is a very tight scope, because, otherwise, kinda goes all over the place. So that's why we have those 2 separate programs with separate scope that said, if there are topics that are between the two, having documents that consult between them is something that happens So often, definitely, we're working groups, and we can also do that here. So I would say I wouldn't increase our scope to put that in, but if some some discussion happens halfway between both, that's totally fine. Great. Thanks. Thanks. Yeah. I just want to quickly add that we have these programs because this is the topics that are of interest from for the IAB, and we want to have more input from from experts, but at the end, all this input will come back to the IB and that where everything together. So I think, like, trying to have the discussion and impact is probably in the right approach at this point. Fex, Alright. I think we wanna wrap up here. Thank you for all the discussion and input. I think We have lots of things that can contribute to a revision of this, So and and thank you for taking notes. We'll kind of compile those out, send them, Thank you, Dave, for volunteering to help. On the document. So you know, both of you, please, you know, send stuff as you're working on that"
  },
  {
    "startTime": "01:02:00",
    "text": "thinking about stuff to the list, about what you're thinking about or send out, you know, the PR etcetera. And we can all chime in and follow-up there. Thank you. And see you next time."
  }
]
