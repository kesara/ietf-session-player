[
  {
    "startTime": "00:00:15",
    "text": "someone else has taken off the responsibility of breaking things possible deniability what'd you do the projector was off so that power oh it was the wrong color light fans fans are for off projectors when they're cool they should be fanned all the time right but i think since the fan was only okay we're looking for a meeting a note taker we'll wait for people to trickle in um anybody interested in taking notes uh you don't have to be in the room you can be in the room"
  },
  {
    "startTime": "00:02:00",
    "text": "who wants to be a notetaker notetaking is a excellent opportunity to to now be part of the process anyone on online who wants to be a note taker it will give you a great sense of uh participation you can if you'd like to you'd be more than welcome somebody else can do it when you're when you're up does that sound like eric you're interested it's a once-in-a-lifetime yes go to meet echo and there is a note-taking tool um yes trying to try the click on the video all right we'll try and find somebody i got you but i will i won't leave you hanging let me see here how about uh if you take notes i'll take notes while you're presenting he said try to find somebody else and use you as a backup hold up hold on a second let me see if there's one person but uh is"
  },
  {
    "startTime": "00:04:08",
    "text": "a lot of people walking around look around run away [Music] i want to take a walk jake um would you have any interest in being the note taker sure and when you're up talking uh eric can take take the all right i don't i mean i think max is mostly driving okay all right cool we're good okay we'll wait another minute for people to come back from lunch switch to the um go back to the i'm less familiar with that interface that's the online tool uh do the do the remote one i'm sorry click click on the um video link from the agenda video and you should get an interface that looks like this and then on that little box with a pencil sticking out that's the note"
  },
  {
    "startTime": "00:06:05",
    "text": "cookies and it's an online note-taking thing so you and jake can work in tandem if he gets up okay we ready to get started okay how's the room you guys ready all right look at that the energy is just overwhelming there we go we got one yeehaw all right so we're gonna plow right through this food cola um all right we're gonna start taking off for this flight um so uh here's the note well um it should bear striking resemblance to all the other note wells you've seen at the beginning of every meeting um so uh just please read it uh and be aware of uh what's the the what is noted well in participating meeting tips um you know for for those uh who are just arriving today and haven't been in any of these uh previous meetings even if you're in the room please do join the meet echo tool because that acts as the blue sheets and it also enables you to participate in chat and any polls that we have just a reminder please wear your masks unless you are actively speaking at the mic and you think that"
  },
  {
    "startTime": "00:08:02",
    "text": "that can help be a little more clear and remote participants keep your audio and video off unless you are presenting here's today's agenda we have a action-packed agenda um let me know if we missed anything or if you'd like to bash this agenda otherwise this is the plan actually where's warren was supposed to be here is warren in here warren with a w um okay yes we missed smart warren all right um yeah is there any other ops area meetings are going on right now i guess we'll just cut him in if he shows up yeah he must be a dns dns ops i guess we know where he we fall in his hierarchy of interests um or he's still at lunch um all right so uh status of working group docs um yang models uh document um sandy are you on and sandy would you like to speak up uh about um any up do you have any updates or anything you'd like to say about the yang models uh draft sandy are you there i see you in the uh yeah okay sandy let us know if you have"
  },
  {
    "startTime": "00:10:00",
    "text": "uh if you want to jump up um the telemetry draft uh how how you will be presenting on this um and okay yeah so that's been a pretty consistent thing so um please do if you're interested if you have interested in passions in yang or even if you don't um that's a draft that's been sitting for a while and needing uh needing comments so please speak up uh so please take a look at it review it and reach out to the authors with any comments you might have the redundant ingress failover draft this has been adopted since the last since vienna so that's a new working group document um do we have any authors co-authors want to speak up and say have anything to note about that draft any updates or is it just the same as from uh when it was originally submitted anyone no okay are you a co-author on that one okay do you have any comments about that one here i owe them a review okay okay um jake uh do you want to come up and give us an update on your um multicast to the browser drafts um the dorms ambi cbac and mnet i should note uh dorms just went working group last call we've we've heard some comments i would encourage others please speak up on list if you want to see this document"
  },
  {
    "startTime": "00:12:00",
    "text": "advanced to iesg does that work yeah uh thanks lenny this is jake um uh so most of my time since uh since 113 as i mentioned there was on the uh it was on the quick work um so i i did like do my own self-review of dorms before uh before poking you about last call uh and i think i think it's okay so yeah i'd love to see it go forward um probably next on my list is mnet um and uh after a round of reviews and i i kind of because there's a dependency on dorms i want ambiency back uh you know to to make sure that those are gonna be uh unimpacted by any feedback i get on dorms uh but uh i will wanna get uh reviews on those from security people and transport people respectively um at some point but that'll be coming up soon uh well soonish i hope maybe especially and i think there's been a number of networks that wanted to use that so i'll probably want to want to push that forward and then c back probably more than ambi because for for the end point authentication quick will also cover that so ambi might turn into just a sort of forwarding for the network uh which is still important but probably not as important as the endpoint when i thought it was going to be using that so um uh yeah so these are still uh still i intend to to get them over the line one day um thank you uh talk about the clustering are all three four being"
  },
  {
    "startTime": "00:14:00",
    "text": "clustered and you have to cluster them at the same time like how do we yeah so i i actually asked the rc editors this uh earlier this week so they get auto clustered apparently when they reach the um if there's normative references between them uh when they reach the rrc editor's key but i can also just send a note and ask them to to the rsc editors so i might do that uh mnat is not part of the same cluster i just have a cluster or i just wanted a cluster for dorm's ambience see back because they're um they're all part of the same uh protocol basically all right yeah thanks great thanks um so again we encourage uh everybody take a look at speak up on dorms and take a look at uh and review ambience back so we can work on advancing those as well soon and those are all the active working group uh documents um so uh we'll move on so um warren was supposed to be here and i believe uh if i might steal his thunder i think he was saying that his term as a.d is expiring soon and he wanted to encourage uh others to consider becoming an a.d if you're interested in becoming an a.d and being his successor and have questions about that please do reach out to him and if he does come in we'll see if that's what he says so next up is the telemetry draft uh how you"
  },
  {
    "startTime": "00:16:10",
    "text": "oh okay yeah this is how you song from future way today i'm going to give you a brief update and recap of this on-pass temp tree uh using iom for multicast on behalf on behalf of our co-authors next slides please so first uh updates of this new revision uh we actually several technologies uh this document is based on have been uh goes through the uh some of them have been published as rfc and some of them is in the last stage for publication so uh now is a good time to make sure our scheme is actually comply with the existing standards so for example this technology this scheme is based on one of them is based on the iom trace option which already been specified in rfc 9187 and another option scheme is based on the iom direct export draft that will be published soon okay next slice uh first the problem we want to solve in this draft is uh to apply the unpassed telemetry technologies in for multicast we think it's a useful uh to monitor the multicast traffic so the so-called on-pass temperature means we insert the instruction and the telemetry data in user packet itself so by doing that we can collect the"
  },
  {
    "startTime": "00:18:00",
    "text": "real-time performance uh on the experience of user traffic and it's also very useful uh in the in terms of multicast it can help us to reconstruct the multicast tree from the data trees we collected but but the issue about that is if we just use iom trees option it will introduce a considerable data redundancy um because uh each destination node will collect the trees of the entire past you can imagine uh in the in this tree uh you know many sections actually are overlapped from the root to each node but if you get all those data and all the uh leaf nodes that will there will be a lot of data redundancy we want to avoid that so we can have a two solutions to uh to to solve this problem the first one is still based on the iom tricks option the second one is based on the iom direct export option next slides please so the for the trees option uh the trees option means we just keep adding the telemetry data in the user package on the folding path so you can see this uh this is why it will introduce a lot of redundancy data in a multicast tree so the solution is we basically combine the iom trace option and the postcard based telemetry we don't try to collect the data trees for the entire path actually at each branching node we just configure configure node to export the the data we collected so far then we clear the trace twist and on then on each branch we can do the"
  },
  {
    "startTime": "00:20:02",
    "text": "data collection again this option there's no need to update the rfc 9197 it only requires the data plane configuration next slides please so this is a figure to show the show an example you can see this multicast tree and to node b there will be two branches and node d there will be three branches then we configure the node b and the d to let them know and this point they need to just export the data collected so far then we can clear the um the data part then we can start over again on each on each branches and [Music] but to reconstruct the multicast tree we do require that the node id data is a mandatory that must be collected and also so each each sections trees also need to include the branching node for example the the node d it explore the data must start from node b so it's a cover the section b c and the d in this example next slice the second optional solution is to to use iom dx as a direct export option um so for this uh each package only carrier instruction header to tell you what data to collect and then uh each node will just send a independent [Music] postcard package to send the collected data to some collectors"
  },
  {
    "startTime": "00:22:01",
    "text": "so therefore the the data never goes with the user packet so there's there will be no redundant data because each each node will only export the its local data but the issue here is that for in the case of multicast for the postcards mode we need to correlate the postcard data this is especially challenging for multicast because we also need to identify which branch this data is a postcard data comes from so to solve that problem we need a new data type we call that branch branch id or branch identifier solutions that the branch identifier can combine contains two parts the first part is a node id this is identical as specified in rfc 9197 it uses three three bytes to hold the node id then we use one more byte to hold the branch index so if this is local assigned index for each output port of the multicast tree so therefore we can support up to 256 local branches so by combining the node id and branch index we can uniquely identify each branch and to each branching node next slides please so uh left side you can shows a frame format of this uh [Music] direct export instruction header uh we will need to allocate a flag bit"
  },
  {
    "startTime": "00:24:01",
    "text": "we call that m to indicate uh this is uh for the multicast um use case uh so if the m bit is set to one it means there will be a optional data field the multicast branch id included in the data part you can see there's a third optional part which includes the branch id we just introduced so with this such information information it allows us to easily reconstruct the multicast tree on the right side you can see an example in the bracket the item is just means the branch id you can see in the node a the [Music] postcard send package includes the a0 as a node id branch id and and followed with a telemetry data collected at the node a and at the node b it again it sends a branch id a0 than the local data collected but you can see in the following node there are two branches the upper branch will be the branch identify b0 and the lower branch will have the branch id b1 so with this information it allows us to easily identify where this postcard comes from then we can easily reconstruct the multicast tree next slides please okay so this is a brief introduction about this and"
  },
  {
    "startTime": "00:26:01",
    "text": "so far we think this document is already pretty mature and therefore we ask the working uh group to consider the working group let's call for it thank you any questions i think you can just you can just walk up there it's a small enough room we can we can manage yeah jay colin um uh do you have any implementation status to to share on on this work it looks pretty good i think we don't have an implementation for this multicast yet but uh we do have a uh implementation for the iom uh in general and is that in in what the open daylight or in uh is a i think in the product um yeah uh okay great thank you and um uh i haven't looked at the latest version of the draft do you talk about um uh the index stability when when interfaces come up and down like when new interfaces are added and and is it relative to the current fanout tree or to the interfaces that are available or like how are the how are the local index indices assigned if you could speak to that a little bit or just tell me to read the draft if it's all spelled out there um not sure i understand your question you're talking about the interface uh up and down yeah so the uh the branch id is i understand it in the dex version is a local interface identifier of some"
  },
  {
    "startTime": "00:28:00",
    "text": "sort is that yeah we locally assign uh id for each interface so we can you just use the one byte value attached to node id to identify the unique branch and then as it changes uh while while flows are in progress um are you specking out how the how the ideas change or how to re-aggregate those basically i i i expect that can be static because it doesn't matter the only use of it is to help us to reconstruct the multicast tree so because we also have the node id innate so as long as we can distinguish the different branches that's uh okay so you see this as a as a static assignment on the interface essentially okay great thank you it's vancouver dr telecom um basically uh jq and uh you asked half of my question as well um so when i was looking at the data scheme that you provided i think two or three slides back my question is are you actually distinguishing which interface receives or sends the multicast on the node or is this purely monitoring of of the node id as such it's a you know the the node id data is already available to be included so but if we think of think about the multicast case uh if there's no branch id then for example the next node from the uh from the branching point uh you will you they both send the postcard package then you will you will note no you can you cannot tell if uh if they are belong to the different branches or correct so with that information you can tell so so rephrasing my question i have 2 000 multicast streams in my network and i have um a"
  },
  {
    "startTime": "00:30:01",
    "text": "router a p router in my network which has 350 multicast activated interfaces okay how many postcards will i receive oh so it yeah each each tree might you might be able to aggregate that explore data but it's easy to distinguish the different multicast tree because in addition to this uh branch id we also have the flow id and i've got the the in the figure we have some other information to tell you which flow it belongs to so you can easily attribute the data to different multicast tree they will not mix together so the um danny could you go back one or two slides please um excuse me no lenny yeah this one exactly yeah flow id and a sequence number yeah flow id basically uh tell you it's a unique number and they tell you the that's the multicast stream right yeah yeah the the s comma g okay sequence number tell you the order of this uh this package and where in this information do i find the interface to reconstruct the tree or is this not included in the postcard is this is a come from the every packet then then and uh and each uh each node will um a sign that writes that part that's the multicast branch id because i just you need to use that information to tell uh to reconstruct the tree okay so the flow id is is respect is this is corresponding to the multicast group oh yeah the low id never changes the start from the source and yeah and also the sequence number never change and the multicast branch id reflects"
  },
  {
    "startTime": "00:32:02",
    "text": "then the interface id is that what you're saying yeah okay so back to my original scaling if you have 350 interfaces you would receive 350 postcards from one router right one router i said uh based on the current scheme is support up to 256 um different branches oh yeah okay so that was exactly where i was pointing at so um 256 i don't know for a large iptv that is already narrow on on our p routers for example we have more than that but on the other hand um it's it's a good start and a good approach what what i would like just like to point out is that the um that the interface is really key and needs to be included in in in this postcard because otherwise you you will have hard time because of the sheer amount of postcards that you will so you think that uh eight bits is uh to to to view are you uh um i can only say for us it wouldn't be enough but i don't know if um if this is really representative of uh itf uh or operators yeah yeah yeah so okay thank you dino um this is dino thanks for the presentation um i just wanted to say i support the idea of wanting to solve multicast telemetry at the olympics they want the the u.s broadcaster wants to look at data on the tree both downstream and upstream and what we did in tokyo is we use the the lisp control plane to to find out um things like rtt times on each branch one way hop count"
  },
  {
    "startTime": "00:34:01",
    "text": "forward and reverse latency forward and reverse and uh the advantage we had with doing it with an overlay is that we didn't have to touch the underlay routes at all and we were still able to get that granularity of information and i was thinking maybe i'll present that next time at the next mmt if you want yeah thank you but you know like definitely for solving this problem all right so um just quick show of hands uh who has read this draft thus far yeah uh use if you could use the tool uh the the poll the question to the crowd crowd is who is actually who has actually read the draft the most important thing if you have please raise your hand uh if you haven't you can either abstain or not raise your hand we can do the math all right so um it sounds like there's a lot of interest uh just needing more folks to read the draft so please do please do take a look all right thank you thank you okay jake you're up or no i'm sorry max max you're up get your size i'm gonna bring your slides up there we go um the call is set up"
  },
  {
    "startTime": "00:36:12",
    "text": "all right hello everyone i'm max from the berlin and i'm presenting um the multicast quick extension [Music] yeah uh jack presented already at quick just before lunch and now i'm going to present it to you um so let's start with the basic idea next slide um but yeah the idea is that we still want to get multicast into the browser basically and we're looking for ways to do that and since browsers have quick implementations we thought one way to do that would be to use those quick implementations to find a way to get multicast into that so what this extension does it basically uses a quick unicast connection as a sort of anchor or side channel from where a client starts and it can say the client can say i support multicast um and these are my limits basically like this is my maximum maximum supported rate etc and then the the server could tell the client over the unicast connection some multicast channels basically and tell the client to join these multicast channels to receive data so it's server driven the server picks which ssm we only support ssm channels the client should join the client can then decide okay i'm gonna try to join these ssm channels and on these ssm channels the client will find quick frames quick packets which contain data basically um if the client is unable to join these channels the server could then"
  },
  {
    "startTime": "00:38:01",
    "text": "decide to also send the data over the regular unicast connection which means that the client so so no matter if multicast is supported or not the client would still get the data the idea is also that it's transparent to the overlying applications of course they would have to set a flag to support multicast because obviously for some applications they don't want multicast but um from that point on it would just see normal quick data arrive basically on connection okay so what quick also gives us is a way to um encrypt and use integrity so each packet no matter if it's sent on the multicast channel or the regular connection is encrypted obviously the issue is that every receiver gets the same packet over the multicast channel so it's not a high bar to decrypt because the key is sent to everyone the same key so that alone isn't enough to to guarantee integrity so we also send integrity frames which are basically hashes for each packet that guarantee that when the when the receiver sees a packet over the multicast it knows that it's a valid packet right so the the client also acts the packet that receives the packets it receives over the multicast channels over unicast so the server knows which packets arrive which packets get lost so in that way we have reliability and um the flow control and congestion control are obviously different so the as i said before the client sets its own limits and the that's the way congestion control is done of course the server could also do something that sees that a lot of packets get dropped because it doesn't"
  },
  {
    "startTime": "00:40:00",
    "text": "receive the x then it could also tell the client to leave some channels um right it only works from server to client so obviously the the client can't send multicast and um do you know sure yeah i just want to ask a clarification question and it only requires a yes or no answer i think but could i change the terminology just so we're on the same page when you say server we mean source when you say client we mean receiver joining the group is that right okay great so what if i'm you're a source and i'm a receiver what if i want to join the group but you haven't opened the unicast connection to me that means i can't join it is that true so you have you have control the source of who joins is that kind of the architecture well you don't have control of food joints right anybody could join the send an igmp you're still underlying that you system will they get the data if they do that they will get the data but they can't necessarily decrypt it or um check the integrity so it's not useful then well but again the the key is shared with everyone right so like a bad actor could it's funny it's fine i just want to know what the trade-offs were in the architecture and so that that means you're actually putting some access control this is really a source initiated multicast communication and the source really has control of who joins the group okay sounds good okay i'm not i shouldn't have said sounds good but okay okay um right as i said the the the packets arriving over multicast are for the application they they don't differentiate yes jake yeah again just to clarify the from a multicast channel perspective you're right there's a source in a receiver but uh since this is like maintained in as part of a quick"
  },
  {
    "startTime": "00:42:01",
    "text": "connection it's uh this is why we chose the terminology server and client in it's in the quick context that we have a server and a client uh and in that context it's sort of incidental that they happen to also be source and receiver for multicast they don't have to be somewhere by the server uh please repeat the question on the mic if you you can or jake just repeat his question for him that was a really interesting comment so can you have the server do the unicast control plane with the receivers and the source be some other node on the network yes that's uh that's going to be common we we expect for truly scalable solutions yeah because you're going to need to anchor it with a unicast connection yeah kyle rose i mean the i think the one of the important things about this about this uh this proposal is that it's it's not um it's not a general multicast mechanism it's intended specifically for the case in which you already have you have a relationship with a with a quick server and we're just providing an alternate means for transmitting data that might be shared among many different clients so you don't have to unicast replicate over the unicast quick channels okay now another thing that's correct okay so another thing i thought about it might be hard for me to join the group because since the control channel tells me yes comment g is i may not know it i could guess it but i may not know it so it would be hard for me to join receive on encrypted data that i can't decrypt is that you agree with that okay sandy jeffrey yeah"
  },
  {
    "startTime": "00:44:02",
    "text": "this sounds pretty cool um just one thought i had is in in the beer working group they are looking at stuff where a source can send to certain clients without the client having to join first so it's really the membership is driven all by the source and they're looking into doing using it for http in some cases so i think this could fit well within that of course beer is not that used much used yet so you want to solve it for multicast in general thank you jeffrey from juniper clients x a x each packet over unicast let's say you have 10 000 clients and how does that scale well um right it scales better than having 10 000 clients receiving the data over unicast altogether right i mean you're gonna have to we we're thinking we were thinking about not always acting stuff right and you can use but yeah it would be some of the violation of quick yeah so in in some sense it still scales linearly but the constant is a lot lower is it fair to say the control plane is scaling the same but it's the the actual data packets are where you're getting the benefits of multicast right and and because of the way that quick handles acts it's probably sublinear anyway um assuming that you're not losing a lot of packets but um yeah i think this is one of those things where like we have ideas about how this is going to behave but we're not really going to know until it's in practice and we're experimenting with it so but i mean you know we're open to to you know uh helpful analysis from other people as"
  },
  {
    "startTime": "00:46:00",
    "text": "well or thoughts on how this might work out yeah i actually don't know much about quick so my questions let me be down but i guess uh the one difference between this and 10 000 uh separate the unicast sessions or the different differences there is that those 10 000 different sessions they are separate ones and here this is one this all these eggs are for the same session maybe it's not the problem maybe it is i just don't know stick with us uh maybe a stupid question i don't know quick really but but you have to act like send an eck packet for each packet you act or can you just act a lot of packets in one one message check yeah go ahead yeah you can act one in many but uh to come back to the general scaling questions uh uh i would draw an analogy to norm uh the existing uh knack or unreliable multicast uh spec so this one talks about a single server scaling only in the tens of thousands uh for for the reasons you were talking about but we think we can distribute this over multiple servers in the same way we do uh other kinds of uh unicast distribution things they'll have to be linked in some way because they all have to be able to handle acts for the for the multicast data but that that's the intent for how to scale it and it should be compared to quick unicast not compared to like flute for example for you know receiver agnostic one thing that might be on the table if we get some deployment and sort of operational experience with this would be adding nack frames to quick if it turns out to be actually useful but uh that's not part of this spec at this time also like fec frames if it turns out to be useful and maybe we can do more aggregation of max of the ax or an ax or"
  },
  {
    "startTime": "00:48:00",
    "text": "something but right now we're trying to be as vanilla as we can in a quick context so i have a bunch of detailed questions i want to let you finish your presentation but actually i think jake answered half of the things the broad statement i want to make have you guys looked at norm the answer is yes looks like he looked at next because i was going to say did you look at the early van jacobson work and the work that the cisco's guys did in the 90s on pgm pretty good multicast these are all various forms of reliable multicast transports and the questions about returns the high-level questions about re-transmissions repair neighborhoods all that stuff are you trying to do that avoid that and and you kind of said some of that but i'll let you finish your presentation so i see how it works all right um yeah so speaking of retransmits the retransmit could happen both so you could have quick datagrams so you don't have retransmits but if you have stream frames um the retransmit could happen over both multicast if enough clients or receivers lose the packet right or you could um individually retransmit them over the unicast channel as well is it okay if i ask questions you want to continue the presentation i don't want to yeah what do you recommend do you think um do you think you want to finish the presentation and then take questions or is this helpful because then we'll be yeah we'll be educated more after you do it um sure okay okay let's let's finish quickly then um yeah next slide and just uh just a note uh gory mentioned on the uh chat that quick does not need to hack every packet right okay uh right that's the the problems we solve um but yes as i said already we want to get it into the browser um we're going to have encrypt like encryption for the packets we have integrity checks like ambi users as jack said so envy isn't yeah um right um"
  },
  {
    "startTime": "00:50:00",
    "text": "okay i think i said most of that already um right the scalability is in the data and not the control plane yeah okay um right the concept of the draft we already on version 3 we had some reviews internally and from lucas and from kyle and the for us at least the current structure seems clear in the architecture and we don't see any reasons that make it like impossible to actually get it deployed and use it and or things that are in violation of the security draft for multicast um so we got some feedback from the quick working object do you wanna yeah i mean there weren't many people who commented uh lars had some positive things to say i think alex uh questioned whether it should happen in quick um you know i think that can be discussed on the mailing list uh martin duke said he was he found it technically interesting and would be doing a review so i'm looking forward to that um you know i i i expect that a lot of people in quick remain skeptical some of the offline comments i've had say that uh that there's some skepticism that we will adequately solve the sort of origin security model for uh for for counting as non-mixed content in browsers um i would like to dig in more on that claim with with people who believe it probably not in this form but this is we're trying to address that with the multicast security considerations and we think that so my opinion is that i think it can be addressed but uh there are some some differences i think"
  },
  {
    "startTime": "00:52:00",
    "text": "that they are minimal enough that they can be addressed especially if we consider things like uh so apple talked about uh how they they sort of treat a joint of a multicast group as a under the same rubric as sort of local discovery things as a potential privacy exposure that requires a user input so this kind of thing i think if it becomes more normalized can contribute to protecting users against inappropriate privacy violations and could and i think that that's the main difference uh in terms of security um although i'm not sure that i that i've fully captured everyone's objections to it or that they fully thought it through honestly because a lot of them i would say maybe don't really want to think about it too hard yet i think that will change if we can manage to get a decent deployment that does something but it's going to not be in a browser first it's going to have to be like in a fat client that's launched from a browser if it's going to address uh web video for example but but we would like to do that in our you know with our demo yeah that's kind of where we're headed first and then one day maybe into a browser all right sure so this is dino so i'm getting a really strong gut feeling that this is a really good architecture i just there's all these positive vibes going through my mind so i think i'm really happy and i'll explain why you solve the source discovery problem because it's done at the source that's really good the fact that you're mixing unicast and multicast means if you wanted the unicast connections to go on an underlay and you wanted multicast to go on an overlay this could happen with this architecture that's really cool at least for me because i'm an overlay guy these days now i have a detailed question um so in pgm"
  },
  {
    "startTime": "00:54:00",
    "text": "there was next that came from the receivers when they saw pack it out of sequence and the router's intermediate would build these lost neighborhoods so when the packet was retransmitted it would only go to the lost neighborhoods and not to the receivers that received it so can you explain i i realized that if you want to retransmit a multicast packet that has been lost somewhere on some branch somewhere that you could you may not be able to you may or may not be able to identify where it was lost and you could certainly retransmit on the unicash channels which could be inefficient if the lost neighborhood was really large right um so that's my question what are you guys thinking about how to do this and i do you just re-transmit on multicast and let the guys who got it drop the duplicates or because there's we did a lot of research with this on pgm and we thought that the knack neighborhood and having router store state about lost messages was worthwhile turned out to be complicated and maybe an over optimization yeah i mean yeah we're not sure exactly how to do it yet i think that's like one of the things yeah i would say we're we're not sure but in terms of the architecture and the document this would be a server implementation decision so it's not going to be routers i'll tell you that much it's going to be endpoints so it's going to be a server endpoint and in a deployment model we would expect probably to have uh you know servers co-located in a network and to maybe like i'm not going to give you this on the first pass but one day if this takes off yeah we'll have servers that are sort of dedicated to a particular network and when there's loss that's correlated across that network i would expect the servers to you know as an optimization to prefer to retransmit over multicast for that network and if there was anybody who got it they would be able as a natural part of quick to discard repeats that shouldn't be a problem yeah but you know that's that's sort of optimization for later yeah so what what ended up happening in pgm"
  },
  {
    "startTime": "00:56:00",
    "text": "is that we didn't want to have this router assist neck thing and so pgm turned out to be a reliable transport and what happened was we when there was any knack that came back the reach it retransmitted down the tree and what jake just said is the the receivers who got it just threw it away it was much simpler and it was more um end to end so having said that since this is really a reliable transport protocol it should probably be done in the transport area but the problem there is is everybody hates multicast there so we need good representation to do it so you know so maybe you teach us transport or we teach them multicast i don't know oh okay got it so the plan is to do it in the quick working group okay um why don't you just finish you got two slides and then and then we'll open up for questions so um yeah the the the the last two sites are basically about our implementation um so we implemented started to implement it um in chromium and we got all the uh we got the frames the new frames and we got the the transfer permitted and so on um the thing we're missing there is how to feed the packets we receive over multicast into the event loop of the regular quick connection basically um and that's a bit tricky in chromium so now we're thinking about for the first um demo to instead use something like a a i o quick or something in python where it's much simpler to just feed the packets in and you don't have all the overhead of chromium of course the goal is to get into a browser so eventually we will do it hopefully in chromium but just for the first test like that um yeah also there are some issues with transporter but i think we're just gonna skip over those for now um and rather have the more multicast focus discussion right and that's it first of all uh condos for uh doing the"
  },
  {
    "startTime": "00:58:01",
    "text": "work and i think you've got a really good approach here um in a matter of transparency i already provided all some of the points to jake offline i think what would be interesting is to couple this also not just to native multicast but also to amt so that you have the opportunity to say i i will try first uh to to join a multicast group once once it's already set up and then you try uh if there's an amt relay which is still better than unicasting it all the way the other option or the other point that came into my mind is regarding re-transmission maybe you should rethink about this because if this is uh fundamentally for life events from my uh so so live tv like super bowl or whatever now from our experience there's only a really tiny time frame where you have the buffering and where it really makes sense to retransmit the data packets um in most of the cases especially if you're further away from those retransmission servers i'm talking about 50 60 milliseconds typically um then re-transmission doesn't make sense and then you don't have to actually think about re-transmission if you if you're talking about and this was another use case uh downloading files via multicast so large downloads etc then of course it makes sense then you need those packages but um i think it's more to focus on what is really required for which you can use case right so we support both quick stream and quick data grams so that if you use datagrams to send the data you wouldn't get retransmits right so the application or the sender could choose which whether to use datagrams or stream frames"
  },
  {
    "startTime": "01:00:00",
    "text": "but yeah you want to reply to that sure to also respond to that we've been looking at like some of the mock work the media over quick we think that there's good synergy with the push approaches they're using using there for rush and warp um and possibly for the arkwick stuff or the quick r stuff that they're talking about um and the idea is as long as you're using server initiated streams uh the whole stream uh has retransmits sort of built in but you can still reset the stream and then that stream can be dropped so you can have unreliable transmission at the sort of level of a frame or a segment if it if it times out there some of the work that they're doing there we think will mesh well with this approach that we have here is basically the point so i'd encourage you to read that to see if if we need to do more than that what that's doing thanks and the last remark to the acknowledgements i think from a scaling perspective especially if you scale up to those volumes that you have in mind or that you're wishing for i think something like the tcp window size where you only acknowledge certain packet windows could could actually ease up your life so so we actually have a mechanic for um bundling x right where you wait for a time where like like you don't have to act immediately but you can wait like a server set timeout before you have to like say okay now right so we have that because yeah in quick especially the the egging is worse than tcp i think just from the overhead yeah you know um regarding the comment you just made about live and re-transmissions i would just say don't have an option never to retransmit and for live events use fec because fec will correct most errors in real time and just as a data point um solan the solana blockchain uses fec and udp transmission that blockchain does not use a reliable transport protocol and it's working really well"
  },
  {
    "startTime": "01:02:01",
    "text": "and this is over like uh tens of thousands of nodes which fpc do they use i don't know i'll i can let you know but i don't know off the top of my head okay is it open source or is it some variety it's absolutely open source yeah yeah and then my other question was is um you seem to just i don't think you're restricting it to one to many but you described it as one to many if you were wanted to have a whiteboard session with uh 100 people drawing on a whiteboard would this just be multiple instances of one to many or is there any provision to do many to many uh in any specific way um i mean you need the unicast connection right so you would have to have like a central anchor point where okay so if you have uh one dimension you will have n squared unicast connections and that yeah that's a concern that jeffrey made about okay there's no way around it by just throwing you say throw resources at it and you know just going back trying to understand your use case there like a hundred whiteboard sessions those would be like each one would be a multicast session uh i would i meant a hundred participants in one whiteboard session but they're all writing on it yes they're all they're all sort of they're all sourcing they're all multicast sources so so that could be an application solution where they just go to the source and then it goes down on a single tree well that's the way zoom works today and it's not decentralized right so the this could provide decentralized solutions right so okay all right uh one last question um uh the the this mixing of um uh multicast and unicast um does that uh does that um imply that if you wanted to do something like uh unicast bespoke advertising with a multicast stream uh you know this this this would work well or um you know being able to mix in unicast"
  },
  {
    "startTime": "01:04:01",
    "text": "stuff and multicast stuff sure the server could certainly decide if it wants to like send something specifically to that client over unicast that isn't supposed to be received by everybody else all right thank you all right thank you max this is great so next up [Music] yeah um i'm going to um maybe yes grant you and i put my hand down okay so next up is lauren she's been working on the um uh we we've been speaking for the last few ietfs about um about the work she's been doing and um it's culminated with off net sourcing and uh some recent enhancements with multicast menu yeah and as soon as my slides come up it would it is slowly coming up yeah so i want to start by just talking through the stuff the two and a half components i have and then hopefully we'll try some live demos and see how that goes um i saw the homework went out on the mailing list but if anyone wants to download vlc4 that hasn't already and participate in the live demos if you go to uh trudienne.net there's a link on the top of the page for vlc4 um uh if there's anybody meet echo um we're having a little trouble doing a screen share maybe i requested oh do i really want to share my screen yes i do i would like to share never mind echo mode there we go awesome okay so yeah off net sourcing and the"
  },
  {
    "startTime": "01:06:00",
    "text": "multicast menu like i said i have two and a half components multicast menu and the off net sourcing bit are the main stuff and then i just want to talk about tjtv because i think it's a cool example of lowering the barrier of entry to streaming multicast so multicast menu started off looking like this and the main benefits of it um were it lets you register and or add your multicast streams yeah yeah uh better there we go okay um so let's you register and and or add your multicast stream so if you've got a multicast enabled network and you are putting your own stream out there you can either manually report it so typing in source group udp port and a description of it or let multicast menu itself just kind of pick it up every night it goes through internet2 and giant to look for multicast streams essentially it's just hitting looking glasses and running show multicast or out detail to pick up any streams that are going through there alternatively and this is where the off net sourcing bit comes in if you're not on a multicast enabled network you can upload a file a video file and have it translated um and there's an api to do this all programmatically of course you need a way to manage what you've added so changing like the stream information title description category and then also it's very easy to view the streams it's much easier than it's much more simple than the command line options that have been there in the past we'd kind of have a direct option to open in vlc we're still working on specifying that the amt relay option when opening directly into vlc and verifying that the manual streams that are reported are actually actually exist we do basic like did you give an an actual ipv4 address but not really"
  },
  {
    "startTime": "01:08:00",
    "text": "anything beyond that at this point um and then a protocol handler from for opening directly from the browser would be nice um and then a student at tu berlin um recently kind of redid the ui made it look a lot better so we've got a thumbnail for each screen now like i said ui overhaul and also the ability to sort streams uh by categories like trending editors choice and various genres so the second component is off net sourcing so this is accomplished from a phone and the phone jumps through a transport translator which sends it to the multicast translator so in words so we're going from the sender and receiver from your phone an app on your phone to transport translator sending it over udp to into the multi gas translator and that's where it actually enters a multicast enabled network for the first time and then that multi-cache translator is obviously translating to multicast still working on various video encodings and then the hope is eventually that this multicast live or this off net sourcing app can also become an off net receiving app so you have some sort of amd gateway implementation in the app and then doing it for ios as opposed to just android and then before we jump into demos i just wanted to highlight tjtv um my old high school is one of the ones running an amt relay and it's just very easy to if you have access to a multicast enabled network set up streams i've just got vlc sending them to the amt relay and actually the first demo is watching one of those streams so for demo this is the kind of topology that we're working with"
  },
  {
    "startTime": "01:10:00",
    "text": "multicast translator amt relay in the box sending that tjtv are all on a multicast enabled network and then the rest of the stuff isn't we have our three imaginary people in blue and all the stuff in green is infrastructure that actually exists so i'm going to jump out of presentation mode and split my screen because i want to also see the terminal over there that's showing what's happening in the background um so the first demo is just viewing um the tjtv streams at all so going into multicast menu where that tv is behind okay so going into multicast menu finding a stream you're interested in watching and opening it directly from vlc saving placing um it's just opening in dlc so this is designed to simplify for an end user that might not know how to use a command line um i've got a stream i have my laptop muted right now but the audio comes through as well so the flow or the flow that happened there was um before any of this i added go back into full screen i added the streams to tjtv and i manually added an entry to multicast menu to tell you about the streams and then we went from our laptop to multicast menu to get the information about the streams and then we reached out to the amt relay because here at iatf we're sitting on a unicast only network and the amt relay was able to provide that tj tv source for us okay here's where things get interesting so um this is the offnet sourcing bit and this is the first of the two off net sourcing"
  },
  {
    "startTime": "01:12:00",
    "text": "capabilities where we're streaming from a file so a pre-recorded video um if i didn't have access to a multicast enabled network i could have done tjtv this way just uploading the video so going to multicast menu add stream and uploading a file um specifying some basic stream information to help people know what it is and then selecting our file and as soon as i hit submit here it's gonna buffer for a second but when it goes through you'll see that the translator is now receiving a udp source in and it's translating it as multicast it picked a multicast group address for it and then it pinged multicast menus api to add it and when we refresh the page here we see that our video has picked up the source our video and multicast menu has picked up the source in the group that was assigned to it so if we go back over into the main page we can again go through the process of opening in vlc now this one takes a couple seconds to load up i've noticed um should pop up there we go and we have our source that is streaming for multicast menu that i just uploaded okay so the flow that happened for that one was that we from our computer we uploaded a file to multicast menu multicast menu sent that to the multicast translator to be translated as multicast and then sent an api back to multicast menu to tell us about it and then that same flow that happened before when we tried to view it so the third and final demo and the one"
  },
  {
    "startTime": "01:14:00",
    "text": "that i think is pretty cool is let's live stream this meeting so we're not actually going to open the the app because the video encoding is still messed up um but on my phone i have an app it's called high vision live and is there a camera that shows anyway it's on my phone it's called hi vision live and all i did was type in the url of this transport translator and i'm going to start a stream and i'll prop it up there you go there you go we got a camera man okay so okay hopefully that okay so we see that we have a second uh message here from our translator actually before we do that um see that we accepted an srt source connection that's what's coming from the phone that's that first hop into the transport translator and then we're forwarding on to our multicast translator to add to multicast menu and we see we have this first item here which is what we just added there's no description available because we haven't added one yet but there's the ability to crowdsource such a description but if we want to open this in vlc it's a lot of clicking to open in vlc which is why we'd like to get that protocol handler to do it a little easier but it does beat the command line for many many users okay there we go and so now we're streaming and like i said audio comes through just fine um i just have my computer muted at the moment but yeah so most of this let me get my slides back"
  },
  {
    "startTime": "01:16:00",
    "text": "yes um and like i said the goal is to get to a separate like multicast live app where it can be both a sender and receiver but in the interim high vision live android and ios does the job perfectly fine yeah so just for those you know not following along what um what uh lauren's essentially built here is something that ietf hasn't done in about 15 to 20 years which is stream a uh an ietf uh over the mbone um and better yet it can be received by anybody on uh unicast only network so so we're getting ietf back over being multicasted um and uh yes and not only is it being multicasted but it's being received by it's being transported by a multicast but received by anybody on the internet uh including unicast only which is something that uh you know even 20 years ago we couldn't do when multi when these meetings were multicasted yeah with amt so the i stopped the stream so you can stop being cameraman um and the part i didn't address is that the yeah if you hit stop stream um that all of the the teardown is very automatic so when it stops receiving uh translation here it'll call back to multicast menu and say hey i'm not getting a source anymore please delete the entry so people aren't looking up stale sources and for that last the flow for that last was from a phone into our transport translator which is just an aws box sitting on the unicast regular internet um then into multicast into the multicast translator back out as an api call yeah so most of this is still pretty actively being developed um like i had to do's on each slide so we're building up little by little trying to pick and pull different uh bits of technology to push them all together to make this work that's what i've got"
  },
  {
    "startTime": "01:18:03",
    "text": "[Applause] oh i'm max he followed instructions i i just had a question about other source options i mean first of all fantastic this is very exciting uh if if i had something like an existing uh ip camera can we pull that uh that stream as well somehow set it as a destination into the translator and get that sourced yeah so that's not built in as like a easy clickable thing in multicast menu but it's certainly very possible yes uh yes maxwell great presentation thanks um clarifying question i guess so the app the higher tv app sends it via unicast to the multicast translator yeah yeah so i've still got my slides right yep okay um yeah so what's actually happening is it's sending the high vision app is using srt which is uh udp based uh but still has some server client aspects um and that's going into a transport transport translator which is just taking that srt udp and changing it to regular udp and that's what's going into the multicast translator okay and then the multicast translator sends it out both via multicast it translates to multicast and from there okay exactly it takes udp unicast and out is multicast thanks i just wanted to uh to thank you for this presentation and say that i think this is the first time i've ever seen a live demo at ietf go down without a hitch so really good job that was fantastic i was very concerned [Applause] hi i'm jake uh when you say regular udp you mean raw ts"
  },
  {
    "startTime": "01:20:02",
    "text": "encoded uh inside the udp right this is mpeg-ts that's it's mpegts yes great thanks great job lauren i just wanted to share some experience that i've seen not working because i used to work for a consulting company and we were doing some consulting work at a large international insurance company and they try to live stream pretty much exactly in the same way that you did their all hands calls for their employees on-site multicast offside through unicast um what you've done works what they've done failed and they had to reshed you the session yeah scalability is still a slight issue more just because of like operational constraints you've got a tiny aws box and iptables firewalls going into the multicast translator but yeah scalability is a little bit the next step uh who's funding this uh you mean at the amc level like who's paying for the amt connections oh the aws translator is on my credit card right now um yeah i i he offered to fix it many months ago and i just haven't gotten around to giving him that info yet i bet you said you're gonna you're gonna help i thought you were gonna say you're gonna help pay for it and that will help remind me to pay for it yeah um"
  },
  {
    "startTime": "01:22:03",
    "text": "okay how do i stop okay perfect great that's uh pretty amazing work and this is um just for those uh without the background this has been a multi-year project uh it started with william zhang at thomas jefferson high school about five years ago he deployed the first um amt relay and then uh two and a half years ago um lauren two and a half three years ago lauren picked up that work uh and has you know uh she built the multicast menu and has extended um and has enhanced and we're up to off net sourcing which is something we've been talking about for years and uh she was able to do this so really really impressive and um and the work continues um max uh uh there others have been collaborating and max is gonna at the end talk about um some work that his student is doing in collaboration with lauren um so this is a great project um and it's exciting and like i said we're we're getting ietf backing up back on the mbone and uh we're getting content on the m-bone and there's lots of neat stuff so i encourage folks go visit uh the multicast menu check this out it works it's real um you when you when you receive that content you're watching multicast streams over the mbone uh you know something that you know if we had 20 years ago the world might be a different place but um but it's pretty exciting so um next up is uh eric you are [Music] hello i am eric from viva we build software for multicasting zoom and webex and other meetings and what i want to talk briefly about is the history of some receivers and"
  },
  {
    "startTime": "01:24:00",
    "text": "clients as a way to think about the past and potentially inform quick multicast and other considerations so i thought it'd be useful to just give a very very brief you know overview of some of the things that i experienced and and then some ideas about uh about future implementation so next slide so so this is uh some legacy receivers that you might have remembered starlight networks back in 1996 bought by picturetel and they did mpeg-1 multicast and we built a web-based kiosk for them very close to my heart because i met my wife at a conference when we built out a little multicast kiosk using starlight networks and then progressive networks real player again another multicast receiver quicktime windows media vlc of course enterprise companies like vbrik had other multicast receivers and so this is thick software deployed by enterprises to receive multicast typically within a very closed network typically one to 12 channels could be an iptv scenario it could be just a all hands meeting type scenario very kind of internal single domain controlled environment but yeah a range of multicast receiver software next slide so then it evolved a bit more moved into taking the the windows media player or real player uh as a as a control or an ns api plug into the browser so wanted to get this multicast experience into the browser context so you could do interesting things about it then flash with the flash animation movies and eventually video that then provided multicast capabilities from their flash server they had a concept called fusion where they were blending peer-to-peer and traditional multicast and unicast failover same thing with windows media"
  },
  {
    "startTime": "01:26:00",
    "text": "had this concept of an nfc file where you could specify a unicast failover mechanism so browser context is really important at this point where we want to do a lot of interactivity and other things in that browser and have it be a web experience and not just a you know a thick client experience okay next so then um what are we doing today well um in the context of trying to get uh multicast video to render inside of a browser so here's a video.js plugin and a browser joining a live stream the way we have to do it now and by we i mean there's various companies that do enterprise video like uh high vision kumu vbrik uh kaltura others so these are companies that provide internal all hands meetings and use cases for one-to-many video where they still want to utilize multicast in some way so what they do is they have agent software you could call it a multicast gateway and they push that out to every single desktop and it becomes a a web server so they're running a local host web server on their their pc mac ends up being this kind of strange java implementation that's pretty tricky but here you are listening on um you know for a local host https request from a browser and meanwhile you can these agents can be can be available so when the browser makes this local https request for a service it will then open up and join a multicast so you could do a transport stream multicast and then this agent would receive it and transfer stream happened to be pretty handy for hls so you could just take the transport stream and re-packetize package it into http hls tls to the browser so that's how you get transport stream into hls via a local host browser"
  },
  {
    "startTime": "01:28:00",
    "text": "web server into into a local browser and lots of security problems with that but at least it solved the problem of of getting multicast into the browser so we're obviously really eager for quick multicast and better solutions to do this one more thing and we're almost done so uh last slide is uh is what what is vivo doing so we are actually building thick clients for all the different platforms so there's a zoom version google meet version it has we're using vp8 it's rtp we use ford air correction uh it has chromium built into it so we could do the interactivity with chromium it's a g streamer uh codebase with ulpfec and uses qt for the for the wrapper lots of opportunity to make this much more simple with uh with uh quick multicast and since we have chromium maybe we can get to get to that very quickly take out the g streamer make this just be one interactive experience and that would definitely make our customers a lot happier so last slide is the is the future and jake eager to talk with you about it great thanks eric uh i just had a question two slides back in this deployment model where you've got a localhost server yeah uh what do you do for mobile or do you have uh do you have mobile support because there's like sandboxing issues with this model there right yeah it doesn't doesn't support mobile i mean there's one option is to do a gateway in that local network have that be on a wi-fi network and have mobile devices just join hd to be unicast over wi-fi all right thanks um i have a so i've heard over the years a lot of different use cases for multicast this is the first this is the first time you've come up with a new use case i believe it you described it spouse discovery you you multicast yes yes based um you're you you actually got married as a result of multicast that's"
  },
  {
    "startTime": "01:30:01",
    "text": "true that's right i was definitely shy but when uh when my wife was at the conference i was i had the gumption enough to go and say check this demo out and it worked as well so i got lucky and i've been married ever since so i've been very lucky that was a that was a multicast join that's still successful uh so i have lots of swag if anyone wants t-shirts or mugs with multicast stuff uh come on down any other questions that's true yeah that's yeah there's no there's no group sharing or key sharing or anything like that uh possible let's just stick with spouse discovery and i guess i guess that is the question yeah it's uh yeah that's true yeah there was no there was no group activity in that one any other questions all right thank you yeah and again if anyone was interested in shirts and mugs i've got stuff for you [Applause] okay uh max you're up all right yeah um so this is just going to be quickly um basically you can take as much time as you want yeah you take us home yeah all right you've got 30 minutes yeah okay um i hope i don't need 30 minutes uh but yeah so this is like just some updates on or like reporting on some of the student projects we're doing at turbulent related to multicast so the first one is adding ipv6 support into the vse implementation so that's all the different ways jake did some testing at last at the last second about the tunneling and so on so since that"
  },
  {
    "startTime": "01:32:02",
    "text": "worked we're hoping to it will work here as well so we will have ipv4 and mp6 and so on um it should be finished relatively soon um the project is going to be over in like three weeks and the last thing to do basically is we are also looking um where we're gonna upstream it hopefully and um we're also looking for deployments if anybody has an ipv6 capable amt relay somewhere or could enable aimed ipv6 on a relay somewhere that would be great in the mbon um we're still looking to serve our own relay at tu berlin um so so it would be the deutsche four chunks net so dfn which is not really jean but connected to zhong and it's all a bit uh bureaucratic and we're trying to figure out and hopefully we get a relay up soon as well all right thanks um then the the next student is um implementing graceful failover for mt so make use of the lflac that's there but as far as i understand it not really used anywhere so far and the idea is that the relay sets the outflag when it's about to shut down or it knows that it's going to shut down soon for whatever reason and the the gateways can start discovery and in that way keep the stream running and don't have any interruptions by the the relay suddenly disappearing um this is part of a bachelor thesis so the implementation should also be done in the near future okay the last slide good question is there an equivalent graceful restart on the client side so the amt relay can shut down the tunnel quicker when the it goes away so it doesn't have to timeout i'm worried about i'm worried about the relay um encapsulating to where there's no client anymore oh that's a good problem to solve okay thanks do you know what i mean"
  },
  {
    "startTime": "01:34:01",
    "text": "no if the client just drops off the air the the the if the amt gave me drops off the air and then the the amt relay still has the tunnel to it it'll keep encapsulating to it until some time out so i just didn't want to send all the data on the network to no place right right i want it to happen sooner so i was wondering if there's a sorry i'm going away sort of thing when it's a graceful restart not when it crashes or goes away right then it would do it great so that's the graceful mechanism so you're saying jake there's no need for that okay yeah but yeah thanks for jake for also coming up with that idea in a way or like um helping the student along as well um right and since the bachelorette has to be some scientific part so it's gonna include some measurements hopefully and how much time you save and so on yep yeah actually there is a reason if if there's a shut if uh um if something goes away um maybe the um the relay can send a query sooner so it can detect that no igmp report is going to come back within 10 seconds you could shut down the tunnel in 10 seconds instead of three minutes that's useful right yeah okay all right and the final one is basically what lauren already talked about and shown um this update to the multicast menu um i guess the interesting part here is that on one hand the the pulling of the preview frames is gonna do some measurements on how much resources that's gonna take and so on but the other thing is how do you do like ranking for multicast streams right because unlike twitch or something you don't have the viewer numbers you don't know who's actually watching the stream um if you have something like multicast quick of course you would know that but for the multicast menu especially there's no good way of doing that so he"
  },
  {
    "startTime": "01:36:00",
    "text": "implemented something like um cache the the the same algorithm that's used for cache management where you use the likes on the website to to figure out which stream is relatively popular um but yeah there might be future work on seeing like if this also could be related to telemetry and so on but if there's a good way to figure out like which multicultural stream is actually popular and is actually getting watched by a lot of people okay next slide uh yeah so there's also the the idea um for a future problem but it's like a big idea so we would need a bigger group for that uh maybe in the over the winter term is to try to get apt-get distribution with multicast implemented right so you would popular properly uh popular packets would get distributed over multicast if a lot of people are requesting at the same time next slide yeah and that's basically it so if any of you have ideas for similar scope topics related to multicast or just any other collaborations you would want to do we have a lot of students applying for theses we can't we don't we can't come up with enough ideas for interesting thesis um so yeah we would be very happy if any of you have ideas or something like that all right thanks lauren uh yeah with the trending streams is he what is he tracking for trending streams just the like button so would there be any value in tracking like how many people are actually clicking to open the stream as well because i mean that is a button that's clicked right i i i guess yes the the ideas then or the issue i guess is um do you like weigh them differently but yes it's it's probably a good idea to like for future um i can tell yeah"
  },
  {
    "startTime": "01:38:00",
    "text": "thanks yes and you don't know like if somebody launched from the con so um from the command line you also don't i guess wouldn't know stick with us um could you track how long people actually are watching if people you know just watch it for a few seconds then they probably didn't care about it if they watched a long time they might really like it or no you can't okay that's fun i would imagine that you should be able to track uh one how many people click on the entry and two how many people could clicked on the launch in vlc so at the very least you know how many people actually did click to to try to get it right yeah how long they were on right if if they didn't use the command line right right for the for the second one and that's like that's why so far here's the like button because that's like more a strong indication that's actually like something they want to watch and are interested in watching um but yeah it's definitely like an i think a bigger area where you can probably come up some clever mechanism somewhere else that that you could use yeah i think the only ones who are using the command line are like the people in this room so sure yeah is anybody else using the multicast menu right now right other than the people in this room so after this meeting it'll be a lot all right uh thanks a lot all right thank you um so we do have a little bit of time uh but that doesn't mean you can leave um so uh everybody please uh feet proud on floor eyes eyes forward hands folded till the end um uh but um we have some time uh anybody wanna uh anybody have anything else they'd like to bring up uh and discuss jake are you trying to leave are you uh okay uh yes t-shirts are here um i should say uh like i mentioned there's there's a there's a slack group uh that um a lot of this activity is happening on"
  },
  {
    "startTime": "01:40:00",
    "text": "um uh reach out to me i can get you added to the slack group or you know any of the the others in this group uh and we can add you and get be part of the revolution okay everyone thank you one of the big issues that's happening actually that would be really valuable because that could prevent in the past there was like the issues with dead streams and like these things they go there and they never you know remember sdr had hundreds of streams that were dead live is"
  },
  {
    "startTime": "01:42:24",
    "text": "is this is like one of the best uh so for the folks still on uh we've actually the meeting's over so thanks for coming and we'll see you in london [Music]"
  },
  {
    "startTime": "01:44:19",
    "text": "and foreign telemetry by default they do this satellite telemetry but they push out in real is okay oh yeah"
  },
  {
    "startTime": "01:46:09",
    "text": "well that was the intent"
  }
]
