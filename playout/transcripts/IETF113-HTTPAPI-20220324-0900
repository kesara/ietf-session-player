[
  {
    "startTime": "00:00:08",
    "text": "who's live so"
  },
  {
    "startTime": "00:02:12",
    "text": "yes so uh yes foreign"
  },
  {
    "startTime": "00:04:19",
    "text": "oh thank you so ah hopes to unmute how about now you're good it's very low in the room the audio try to speak a bit see if it's sure okay i will talk louder and like the rest of the house that's fine between how about now is this better yes it's very good okay anyway all right shall we get started do you want to wait a couple more minutes i'm ready whenever you are"
  },
  {
    "startTime": "00:06:01",
    "text": "francesca all right i'll be doing the slides daryl will be doing the content franchesca is our local rep okay uh welcome to the http api um by now you should be many people will be familiar with um the eye chart here no well it is a set of references to intellectual property harassment online conduct and so on if you haven't read it when you signed up you should have gotten a pointer to it so we'll assume everybody has read it please be nice respectful and professional and kind to each other in case you haven't learned this meeting is being recorded the tips by now or we only have a day and a half left everybody should be signed in via meet echo apparently there is a qr code you can sign in if you're one of the dozen or so people in the room links some other resources and late in the week this should not be new information although i guess our group is a little different in that we have people who are not full regular ietf attendees so it might be useful this is all in the chair slides file in the github repository it's also on the data tracker agenda okay so first part administration"
  },
  {
    "startTime": "00:08:00",
    "text": "uh we need one or two people to volunteer to take minutes that can be done in the uh code emd hedge dock do we have any volunteers i will also be online doing it oh you have to sign in which i'm about to do anybody else we got martin and mark in the chat volunteering great thank you people yeah when you're showing slides you can't see stuff great thank you gentlemen all right uh we have some presentation of any other changes to the rest of the agenda people want to talk about we have presentations on current documents uh some status updates and then there's a couple of proposals to bring new documents into the working group uh darryl mark francesca and i talked about uh increasing the bandwidth of the group since we seem to have our feet under us we know what we're doing uh even if it is at times frustrating for some of the authors we'll talk to that and then finally any other business uh"
  },
  {
    "startTime": "00:10:00",
    "text": "twitter bot if there's time daryl could show the github project board which is very impressive anybody have anything else they'd like to put on the agenda okay that's it on the chair slides which freezo you want me to bring up next well probably a good idea just to go in the order uh so if we start with the right limit headers okay roberto are you ready hi everybody yes oh we will start with the http api red limit can i show the screen your slide deck i have the slides if you want to share the screen whichever you prefer uh happy to let you do it we'll request to share the screen i will stop so"
  },
  {
    "startTime": "00:12:11",
    "text": "so red limit headers we made um we're already done uh we're almost done with this uh specification there have been some changes well the goal of the of this specification is to communicate service limits so clients cannot stop before being throttled out can stop before being traveled out align all the already existing red limit headers so we are not inventing anything new we are just trying to standardize something that is already existing our or an already existing practice and we want to express multiple rate limiting policies so we want to stop header proliferation we are the current setup is that we have three fields the red limit limit that is a structured field list now uh as red limit remaining and red limit reset data structure structure fields uh integrals one providing the number of units remaining to be consumed and the last one are delta seconds just light recreate so this is the current setup with structure fields before the that are were implemented in this version so we have three integrals varied items and then in the case of red limit limit we have optional values conveying the quarter"
  },
  {
    "startTime": "00:14:03",
    "text": "so the technical choices are to support only delta seconds just like we try after this avoids issues with with ntp skew and adjustment issues and now we support structure fields there is a flexible semantic and we don't mention infrastructure concepts like connection changes from the version were the now we are using structure fields this may need some editorial work uh to align with the latest way of expressing structure fields the latest pros that is going to be used in http extensions documents we resolve the field dependencies so after a long discussion we state that rate limit limit and reset are required while red limited remaining is recommended and we fix another issue saying that protein scope is eventually delegated to uh parameters that can be further registered in a yana table i am a table martin the fact that those fields are required means that if you want to be interoperable with respect to this specification you always need to reply with those fields so we are not saying that all http server must implement this specification but if you implement this specification since the goal is interoperability between servers and client clients will"
  },
  {
    "startTime": "00:16:02",
    "text": "expect those fields to be present to enable actions so of an issue needing input the first is we had some uh requests from users to separate quota policies from experiment limits and me and alex the other editor are supportive of of these changes this because some implementers say that they prefer to separate those information because it's much simpler to implement the the behavior the arrow is pretty er should be credited to lucas perdue that invented this is arrow uh the upper uh the second of an issue is do we want to define an upper bound for it limit reset or not since it's a delta second maybe we could suggest to implementer that if they receive a incredibly huge number on this red limit reset probably [Music] they shouldn't wait all that time and maybe the those red limit research should be either ignored or interpreted in another way and there was a last of an issue about field names uh [Music] we me and alex discussed this a lot alex is one of the editors and is one of the leading engineer from the redox"
  },
  {
    "startTime": "00:18:02",
    "text": "api gateway that implements with kong and then by proxy this specification and the our um opinion is that we shouldn't modify the field names because we adopted field names that were very similar to the one api gateways are using now and we think that we should stick with those names because those names are something that is already used well to split quarter policies means that instead of having a i'm moving on but um so the quota policies now is that the rate limit limit is a a structure field list while we've been asked to have two fields one with red limit limit that is only that only contains the first field of the list the expiring limit and the second one contain containing all the other uh um quota policy uh information we have been suggested that this is easier to parse about confusion between the expiring limit and the quota policies and moreover in this case all the list items have the same structure so i think this this is a reasonable idea the what we'll have then is that red limit limit remaining a result are just three"
  },
  {
    "startTime": "00:20:01",
    "text": "bare integers and the optional part is in another field the rate limit policies containing uh the old quad apologies and this is the only feeds that support parameters so probably um [Music] this is the principle uh question uh and we want to ask the the opinion of work group on this splittings part we think this is reasonable because it's it's apple with apple and oranges with oranges while in the previously we had different meaning for the first list item and the other ones and the rest if we want to discuss the other policies um we have uh mark in the queue do you want to uh take questions now or do you want to wait till the end afternoon i'm finished actually because this was a the core issue the other can be discussed footer after the work group plus call but if we close this we will make the requests and then we we hope to make our group let's go so i'll hand it over to you mark working can you hear me yes wow technology is wonderful hello um so i did to me this seems like"
  },
  {
    "startTime": "00:22:02",
    "text": "we're seeing this proliferation of fields and it seems like it's quite verbose you know sometimes it's a good idea to split out data into multiple fields especially when it changes at different rates um but it seems like you know like the remaining and the reset are pretty dynamic as far as i'm aware whereas the policy and the limit are not um so i i just i can't help but wonder you know this is maybe related to issue 65 as well i can't help but wonder have we tried to combine all this information into one field like a dictionary and use clear dictionary labels to to clarify the relationship because it's all fairly tightly coupled it seems to me i was just wondering if if the editors considered that we did but the point is that this is what is already used by everyone on the internet this is what everybody does and that paving cow paths is is a good strategy sometimes but i don't think we should be bound by it i think that developers if it with a clear specification and a clear direction forward can change we're already changing the names of the fields that they're using i found the reasoning for issue 65 quite thin on that basis that if we don't have it starting with the words right limit they won't understand it seems to be the reasoning there um so i i think that if if we come up with a well-reasoned design we don't have to be too bound by by precedent there um and i'd encourage you to to at least explore those directions thanks mark we actually did talking with implementers"
  },
  {
    "startTime": "00:24:00",
    "text": "there does not see we after our investigation it seems that implementers not only are um not willing to change the this layout but when we try to conflate policy and limit they expressly provide feedback in splitting them so maybe uh i i wouldn't it wouldn't be useful to create a cool specification that implementers are not willing to use that's it at least this is the thing that we have okay i i i would love to probe that a bit more because it sounds somewhat thin to me um that that the implementers want to see it spelled in a particular way in particular headers in the wire otherwise they're never going to use it that seems a bit odd to me martin's joined the queue martin um so i tend to agree with rocky i think the uh efficiency advantages that you get from having a single field sort of far outweigh the advantages of having simple unique um fields that you can pull out with simple images uh it's the assumption here we're using structured fields for pathing these things out and my guess is that those implementers who would rather we didn't put all the things together are not using structured fields to do their path in which it's probably okay maybe if you're just using a simple integer field but these things can be parameterized and there's no guarantee"
  },
  {
    "startTime": "00:26:00",
    "text": "that they won't be and so i i tend to think that pushing them towards a dictionary would be pretty straightforward the um the dynamism aspect of that can be pretty well addressed with header compression and i think it's much more compact and concise to have a simple a single break limit thing that sort of says well here's one parameter one one pair of values here's the limit here's the reset here's the remaining and um i don't know how to express a policy but i'm sure thanks marty does anybody have questions on other parts of this presentation okay this is rich so i'll mention that um in the oblivious http group um the idea came up um and i don't know if the people there had reached out to you uh or your author's co-author robert um the idea that so in ohi there's an intermediate proxy between the end user and the client and the origin server and that obfuscates enough information and it gets obfuscated information so we can't tell what the request is and it sends it on to the origin and there seems to be a need for having that intermediate and the origin collaborate to do rate limiting uh one way or another and so they might be coming here or they might be looking at your draft as a way to"
  },
  {
    "startTime": "00:28:01",
    "text": "reuse some of it and probably adding some kind of indicators saying this is related to the origin or this is related to the proxy or this should go back to the user whoever they are saying you're doing too many requests of this kind the proxy has no idea what the requests are but it can be you can tell the the the client you know stop asking for every single picture in the phone book so i think it's mainly just a heads up that uh ojai needs a similar kind of thing it's different in that there's multi multiple parties and they'll need to be able to address where the limits are intended it might just be as simple as adding a new field indicating which party the limits are encoders are for that's all just a heads up frank this is this is interesting and probably we should file an issue to understand better the use case and possible exchanges in in general i am well i understand uh the suggestion of reducing the number of fields but please consider that the actual feedback of many implementers is that they say in direct limit policy that they don't even want to conflate all those information in the same field and they prefer to say for example red limit minions that limit our different things i don't know if this is because they implement this at different layers so they have different proxies or different intermediator that provides"
  },
  {
    "startTime": "00:30:01",
    "text": "each different time frame no i'm i'm i'm not using i'm not the i'm not trying to avoid using structure-filled parser but i need i i'm building this specification for implementers and my goal is not forcing them to do something they don't want to do but is avoiding they to provide different the same information in different things i i i'm not uh i mean uh trying to interpret what they um that their goals i'm trying to i'm trying to make them use the same field name for sending the same information mark is back in the queue all right go ahead working is it working yes it seems to be working okay um so roberto i think it's great that you're going out and engaging with folks who are using you know similar things out there and i mean implementers potential implementers i think there's maybe a mix there i'm not sure but uh generally when we do that um it it's great but it's important to make sure that we're doing that to bring back uh their feedback in the form of arguments not just preferences you know it's it's much more convincing if you came back and said implementers want to do this and there there's this technical or this this reason why that we can understand and take into account in our discussions but it's it's less useful when when they come back and say they want to or they prefer this or they prefer that um i'm much less willing to be convinced that that that's a good reason to choose any particular design in the discussions for a standard"
  },
  {
    "startTime": "00:32:09",
    "text": "the problem is to find something that matches the that can be accepted by bad implementers i mean part of the challenge of writing standards yes i think we're maybe we have different calibrations on what uh will work there brian hello is this working yep this is brian gondwana um i i wanted to add something in favor of the idea that something that people want to use has value in itself not just because of the technical arguments but because they enjoy using it and hence they're more likely to use it we're competing against someone can throw whatever they like in the header if we're offering them a standard that's a pain to use and looks ugly and they don't like then they just won't use it so i think the operators prefer this is a significant users prefer this is sufficient argument in itself it doesn't have to be it's technically the best and and they have made a compelling argument for why it's right just they would prefer it is a pretty strong argument eric yeah um hello everybody this is eric um so i i just wanted to point out that maybe sometimes we also have a different view on the people we're designing for i think and i really don't mean this in a negative way but i think mark has a perspective that is a lot on people who are very professionally working with"
  },
  {
    "startTime": "00:34:00",
    "text": "http and http header fields and so forth because that is the core of what they're working with and for those i would assume they should and probably will be much more willing to adapt to technologies like structured fields and make sure they understand what it means and how they can use it and use the library and so forth but i think in the api space really in the end what you end up with is you end up with a lot of developers who are not core http developers who are using http as part of the work they need to get done and if you tell them that they have to use an additional parser and that there are rather complex header fields to work with and all of this i think it's just a different kind of client base we're working with here so i i just think we should take into account that from an http api perspective for most people they are not http experts so for them http is just something that they need of as part of the work they're trying to get done so we sh we should try to make it as easy for them as we can to get the information that they can get in http and to work with http header fields without requiring them to adapt technologies that may may be designed for a different user population thank you eric martin oh wow okay um i think probably the thing that tips me towards saying that using structured fields properly here is is acceptable is that report guns that those casual developers have in front of them is is much more than they think they have and [Music] usability is not necessarily um very different when you look at uh"
  },
  {
    "startTime": "00:36:01",
    "text": "restructuring this as a single structured header uh you you take the hyphen and you turn it into a colon and you take the colon and you turn it into an equal sign and you have essentially what um what we were talking about using using structured fields for it's not that complicated to parse um it's certainly no no more difficult to use than what what roberto has described and you really don't want to have a situation where people think they can just i would just throw cars in or something in here because that's led to a number of problems that we've had in the past and as much as i think the professional uh casual thing is important here um we want to make the casual people use the structure for your powers as well we want everyone to be using the structure of your partners because those are the ones that are safe mark oh the graph is moving you can probably hear me now um eric i really don't buy it sorry um people who who have to parse hp headers by hand are exactly what we want to avoid with this and and having those parameters there like the w on the screen that just went away for some reason is is the huge kind of foot gun that martin's talking about um if you know and and and frankly making them just straight integers like this but still structured fields is encouraging people to write their own parsers and then they'll break when people put it on a parameter on it later so i i don't buy it um structured fields is designed exactly so that people can just go off and use a library off the shelf and not worry about any of this and api developers love using libraries that's that's their heart and soul so yeah um and and i actually got a key to respond"
  },
  {
    "startTime": "00:38:00",
    "text": "to braun absolutely if we get feedback that that implementers and users prefer one thing that's great i'm just i'm a little concerned about one person going off and coming back and making decisions based only on that person's interaction with the community i would expect broader input that's all and speaking as an individual eric i will both agree with you and disagree with you um i i do agree that in your characterization of a lot of api developers but most api developers are also not implementing the throttling infrastructure they're going to use some kind of library i think people we need to convince people writing throttling libraries and at that point it's the people serving the headers that are making decisions the consumers will use whatever they're given um and hopefully they'll use library to go do that parsing um so i i i i think i i am concerned that it's the yeah we just don't want to change our thing that's using x dash and if you make things very very different it'll be obvious that we're not using the standard thing anymore um so i i definitely would like to hear us dig in more into the pushback on making any changes and having backward compatibility hands yep uh hi this is hunter speaking um so first of all i very much a preacher appreciates it works so i think this is something very useful uh once it is finished and in broad use um i like eric's uh distinction before uh regarding like there is two distinct user groups like you know the casual user consuming api and maybe not wanting to spend so much effort and more advanced users but i slightly disagree with which which of these users we should focus on here because i think for the casual user actually this doesn't matter at all in a way because these users will just be heart throttled by the apis if they have no clue anyway so this is complex stuff actually"
  },
  {
    "startTime": "00:40:01",
    "text": "and people that want to implement this kind of stuff they really need to understand not just the header fields but also maybe the documentation behind that so it's not just only the header fields to understand here and i also very much agree what daryl said this is also something that needs to go into libraries in the end um so i think it's it's very much important here to have this very conceptually clear and convey as much as information that is necessary for libraries to deal with that and yeah to make stuff work smooth brown since i put my name into this for the first thing a lot of developers are going to probably just be doing a regex that matches digits off the front of rate limit remaining and not care about anything else uh would be my guess glancing at this realistically and that's that's the use case that is going to be for a lot of people if they care at all if they just throw things at it until they get a rate limit error back um which is probably what i would do so that's that's the kind of thing that that we're really going to see with this if you look at what's been done in the field already i think that's a good place to look at because that's what has organically grown and what's organically grown has been separate headers rather than a structured header uh it's what the people who already just do stuff in this space are going to be familiar with and so i mark i totally see your point who is going to do that research because just saying that research needs to be done with no one volunteering to do it is the same as the work never happens mark there it is you can hear me okay the lag is amazing uh it sounds like that you know there are two extreme solutions here and i i i don't want to paint it as we"
  },
  {
    "startTime": "00:42:00",
    "text": "have to choose a or b but it sounds like we might be migrating towards that at one extreme we have an unlimited number of fields depending on how many pieces of data that uh we need to send and each field just has an atomic piece of data and it's not structured field it's just you know ten six and three literally and you don't have any parameters because that's too hard or you have a fully structured field and it is you know fairly complex but we throw structured fields parsers at it and the data just appears and uh we it's we have to make it complex enough to be effectively self greasing which i think there's probably enough data to do here if we combine it into one or two fields um if if it's not self grazing then i i think that braun you know has a point that that people will just try and parse it and then it'll break when somebody adds some data to it like a parameter to it later on um so so maybe what we need to do is to write up those two extremes and see what they look like uh there seems to be some noise there uh so right up those two extremes see what they look like and and figure out what the best path forward is from there so i i and i think we've chewed through the meat of the issue i don't think we're going to solve developer motivation um i think it would be good for us to uh take this further conversation to the list and maybe we can move on to uh the next presentation from roberto on and his mind goes blank media types yes there's gonna be a lot of conversation on this one i fear thanks so much hi hi everybody i'm roberto nice to meet you so in this specification we are trying to register some media types that are widely used on the internet"
  },
  {
    "startTime": "00:44:00",
    "text": "and but are not yet registered the goal is increased interoperability when processing api specification is to leverage content negotiation when exchange api resources and simplify comparative development and cataloging of api and schemes so open api specification relies on yammer and json schema that are not being registered this makes impossible uh content negotiation uh done in a standard way and yaml users do not have interoperability and security considerations so we want to register yamalan the placing ammo media type providing interoperability and security consideration foundation for open abi plus yaml registering up an api plus jason and yaml json's camera plus json and yaml uh jason led placiamo does ingredient a quick win we already have onboarded json schema and open avi folks on plus yamo there is some work needed we imported yamo fox but there is uh work to do on ld plus yaml journal defaults agrees but there is more quark needed and on schema plus yaml there is some disagreement so this is the outlook we engaged with almost everybody at different degrees of interaction we have these other issues one engage with mega types mailing lists one in what group plus calls suggested by"
  },
  {
    "startTime": "00:46:01",
    "text": "francesca thanks the third fragment identifier considerations number 22 can we use normative language in media meditab registration it seems that it is possible but i don't know so i asked for feedback here today to the to the work group there are some issues in json ld plus yaml for a set of reasons because json led seems that use the infraspecification not only the json specification and the more divisive one is do we need the json schema media type so the changes from the first revision is that it now supports json schema we added the yama structure syntax suffix and after the yaml interrupter will get security consideration with some support from the yaml folks um yes we need this the question with uh the question from martin the point of jesus schema plus is related to the open api world because of an api specification are actually developed in yaml and if i have to create a catalog with open api specification if you want to refer reference"
  },
  {
    "startTime": "00:48:00",
    "text": "json schema then developers expect to develop json schema in in yaml having json schema only in jason means that folks developing yaml and then add them to catalogs in json so that api specification written in yaml can reference json schema within json and this is what is probably happening now this is not very comfortable uh reusable because why if i develop something in a language i need to convert it in another syntax to be used moreover for developers jason is very less easy to use respect to to yamo but well this is was just to present this specification i think there is a lot of work to do especially on all the impacts that yaml has on various parts of the specification and what have your thing so i read that there are some ideas i don't know if you all read this"
  },
  {
    "startTime": "00:50:00",
    "text": "specification but the there was one comment brought up uh by martin with regards to shouldn't that application slash schema plus json b application slash json schema plus json because it feels a little like squatting to be to call it application schema uh well i just told them from jason schema community and i didn't want to push the toes [Music] on jason schema community i'm discussing with them they will probably write the media type registration they already did so we are hosting the opinion of the json schema community for what regards the general schema mark has joined the cue mark there it goes all right i have no idea why there's so much life um so i'm not familiar with this work the only thing that i'd caution is we've had situations like this in the past where there's a draft to do some work in the itf that's related to a larger piece of work that lives somewhere else and and it's it's super super easy to get your our wires crossed when doing so so i would i would very strongly suggest that if if you're not already going through the most official liaison channel you can to do these things in other words just relying on people you know in those communities or chat on a list or something is probably not adequate you need to get the most formal possible consensus or decision or whatever the mechanism the community has that they are okay with this and they want to do it this way and they want the ietf to do"
  },
  {
    "startTime": "00:52:00",
    "text": "this otherwise we can end up in a very very awkward situation so i'm not saying that anything wrong has been done anything i'm just from past experience uh this can bite us really hard so we we need to make sure we do that right that's all but but thank you for doing this work because this is the unglamorous stuff that often doesn't get done i just sorry go ahead no i was just thinking so i i can i can speak to the open api community um and the opiate api community is very much behind this effort um and this we've had conversations numerous conversations in the technical steering committee meetings uh about this so that there's definitely support there uh the jason schema community who are also actively involved with the open api it is a fairly small group of people and i know that roberto is talking to the right people um i i think we should go back to them um and suggest that applications like schema is is a little broad um and i i do think they will be receptive to that kind of feedback and it seems like um the other communities to engage in would be the link data community which i know has registered media types before and uh the yaml community of course as well martin it's only the audio i don't quite know um anyway i i was going to say my first look at this also um i was aware of its existence but um the thing that i would suggest here is that you've got"
  },
  {
    "startTime": "00:54:00",
    "text": "a lot of media types uh in the one document and and one of them is this plus yaml structural syntax um suffix it might be a good idea to just slice some of these pieces off and do them as separate documents simply because i think the slide three back where you have the different color codes for the things um being at risk and and those ones that are simple and easy uh there's good risk that those things are difficult um holding back the thing the other ones and it might be nice to just get some of the easy things out of the way and and published and from a user perspective being able to cite just the plus yaml spec when you're registering your media type would be a lot easier than than trying to fish around in a big pocket of different media type registrations when you have to do something like this and just one of the call out in the media man meeting this week there was a discussion of multiple suffixes and because they're talking about wanting to be able to say plus ld plus json um on top of the application slash did so i'm not sure where that's going to land but there was some pushback in that conversation specifically around using suffixes at all so um i in in reading through the issues uh like early on when this was just focused on open api and um json scheme it seemed fairly"
  },
  {
    "startTime": "00:56:00",
    "text": "straightforward but some of the issues seem to be opening up a bunch of stuff and sticky stuff so maybe martin's feedback is good that stopping at one point and separating out some things would be a good idea so but this is an excellent conversation and uh yeah i think it these media types have been long desired by the community so i love the fact that you're doing this work roberto yeah the goal was providing a specification where all actors all media that's related to the api can be addressed because i think that we need to at least to me it has been beneficial to get in touch with all those community together to have a better overview of the relations that there are even when people use them between all those media types martin days are not we don't we don't even have the yaml media so application yaml is not registered now so we are registering both application enamel and the structured syntax suffix plus yammer so if you are interested in martin in this yaml stuff probably"
  },
  {
    "startTime": "00:58:00",
    "text": "we can fork this document work on the yaml stuff together in the same proposal okay so i think okay we have a volunteer erica the silence was long enough that somebody felt they should step up that's excellent so we will try to separate those documents and hopefully having the yaml registration uh moving on but before doing this i think i asked the church if we can get some feedback from the medium sure and it's manu uh who you have been working with uh on this uh document who's involved in the the multiple suffixes effort yeah so again you're talking to the right people there okay thank you roberto thank you for your patience thank you for yours so um we have"
  },
  {
    "startTime": "01:00:00",
    "text": "uh we have another presentation from uh martin before we go there um i just want to quickly go through um the set of open issues on and some status across all of the documentation and i'm i'm going to be brave rich and actually try and share my screen here do you really want to share your screen yes do i want to share this screen yes and um as this working group is from what i understand a little unusual in that we have so many documents going through um in order to try and uh keep track of all of the different things that are going on because most of them are going on github i attempted to take advantage of the new beta project boards in um github and so the if you go to the organization of um the get repo uh you should see there's a projects tab at the top and uh then there is at the moment just one project you can set up as many of these as you like um when you are working with an issue so i'm just going to click on this to open it there is this project's uh category here and so you can simply say this particular issue we're working on i want to show it on the project board and you can specify a status and as soon as you connect it here"
  },
  {
    "startTime": "01:02:01",
    "text": "it will magically appear on the project board and we've set it up so that it groups by repo so we can see the open items for the deprecation header the item potency key media type straight limits and http problem um yes so since we have a repo for document the document authors can click on the add to the project will automatically show from this math program i i am still getting all of the wrinkles out of the permissioning my understanding is if you are if you own uh if you are have right permissions on a repo you can assign it um to the project okay so we we might need to tweak some things but great this doesn't require one person to do a master list and what you know the individual people can do it that's awesome correct what the the the interesting thing is this status here in this column is independent of the issue you can we can actually add new fields to the project so that there is additional metadata that can be controlled at the project level so these statuses are independent of the status of the uh the individual issue and then so in reviewing some of these um i created these statuses to distinguish between the ones were still having debates about and the ones that we seem to have resolved um [Music] the discussion and it's just a case of the uh authors needing to go and do a document update um i think one mechanism we could use here in processes"
  },
  {
    "startTime": "01:04:01",
    "text": "is where we have things that say you know there's a document update required it would probably be good if we had somebody assigned to actually do that document update and you can see here in the case of this one there is actually a pr that has been linked to this one so it's fairly easy to dig down into these items and so um i you once if you have been given permission to this project there's another view that i set up which is more kind of like a kanban board and you can just drag and drop between here but because this is changing the status that is owned by the project you need right permissions on the organizational project so this we will be a thing that hopefully evolves uh to be more effective over time mark is it working yes we can see okay that's it asked for permissions yet again um that just made a question occur to me um is the expectation from the chairs that document editors will respect the categorizations that you've given them there so for example i went through and did a couple of prs for issues in the 1707 bist today that appear to have consensus um should we wait for you to change the status to document update required before you merge them are you are you overseeing it to that level or is this just entirely kind of best effort informational what's the stance there um i mean that's the conversation to be had like"
  },
  {
    "startTime": "01:06:00",
    "text": "the least work we have to do the better but um i'm i'm more than happy to go and kind of reconcile i think if uh if we want to use this as a way for document editors to communicate with chairs that this is the status of where we are up to then i'm more than happy that that document editors have right access on this project and can change these things themselves okay so i just wanted to understand whether the status was you know exclusively controlled by the chairs or shared with the editors or just kind of a best efforty sort of thing that sounds like it's more the latter than the former yeah i mean as you saw from roberto's deck like he had a slide that had a bunch of issues that were open and to the base to talk about it and then we did that in the last ietf meeting and this is just kind of like hey here's an easy way of keeping that kind of list of here are the active things that we're talking about uh up to date okay um it was unfortunate i don't seem to be able to find a way of actually getting the issue number to appear as a column but if you hover over you see in the bottom left-hand corner uh the issue number and i will note roberto that you called out in uh your rate limit headers and issue number 41 and i can't find issue number 41 in the uh repo or at least fish 41 had a very different title than the one that you call them so we should reconcile there yes yes agreed eric this is additional this is a status view with hopefully an absolute minimum amount of additional work and we could if we if we decide we could just completely throw away the status column and just use labels"
  },
  {
    "startTime": "01:08:00",
    "text": "and we could use labels as a way for document authors to just put a label on an issue in and be able to surface that up at the central place and because you can see over here whether an issue has actually been closed or is still open how easy is it to share labels uh no you have to reinvent the labels you're a little quiet rich yeah sorry about that so the script i used to create the repos when we have a new document just copies standard set of labels that came from you know marx and martin's first thing uh using the quick group so yeah there's no way to say these are labels for across a whole organization but it's automated it's not terribly difficult okay so that was the main thing go ahead as i say mark points out it's possible to create default set of labels for new new repositories which would be presumably very partly very useful for this group is our goal is to get you know many documents through so i'll take a look at that cool just in an attempt to use this for a moment um there uh there is still active work going on in deprecation header uh there's some items here there is a couple of items still in discussion so please i encourage you to"
  },
  {
    "startTime": "01:10:00",
    "text": "go check out these issues on the github repo uh and provide feedback um i debated whether or not to create this block this is this is related to using date time and there was a reference to other ongoing work with regards to what is the appropriate use of a date time versus just a delta seconds um as i say we can evolve these statuses uh the item potency header is has expired uh we should uh follow up with sanjay uh as to whether this is going to come back to life or we should encourage sanjay to bring this back to life and uh we've discussed those two and 7807 again some open items for discussion and with that oh i see somebody in the queue eric yep um hello thanks there this is eric yeah just with regard to the item policy i think that that was not kind of um intentional so to speak that it expired the idea was not to say we're not doing that anymore it's just that um there are a couple of open issues that should be addressed i don't think i don't think we have a good plan on which of these issues should be addressed before we create a new version but at least the intention definitely is to keep this alive um even though it is only expired so i think i think we should definitely keep it in there and hopefully um this one will have a new version in the not too distant future thank it would be good to get confirmation because i i read through some of these issues and it looked very much like there was a suggestion and the response"
  },
  {
    "startTime": "01:12:00",
    "text": "was yes yes we should update that in the document um so those yeah like some of the things that you put there you know it's like okay somebody should be assigned to it so that we know who to go back to and yeah good but i think like your table there really is also it's just great for housekeeping right like making sure that well we're discussing many things but nobody's responsible maybe that's not a good sign mark yeah okay i should really unmute in anticipation i guess um do do i may have misunderstood the agenda do we have time to actually briefly run through the 7807 issues because i think that would actually help us move the document forward i believe we can the primary uh item left on the agenda is martin's date request but i we have 50 i don't think it's going to take very long okay so let's okay um so i'll use the numbers on the left even though we know that they're not the real numbers um the number 21 mapping problem details into a header um i suggested that just as kind of a thought experiment because it has come up in the past uh before uh of of conveying this information in a header when you don't have access to writing to the response body for whatever reason um and or or if you want to expose this information to an immediate area that doesn't want to crack the body open um i should say content i shouldn't say body but you know old school um and it seems to me like the response to this was was somewhat lukewarm so um on the one hand you know a lukewarm response like this i think if i could characterize the responses i've seen is that oh yeah that might be useful but i don't really have an immediate use for it now so uh the most obvious thing to do would be to drop it and just move on um"
  },
  {
    "startTime": "01:14:00",
    "text": "i think i if you look at the very last comment i said if if people think that they have a clear use for this or or that it might be useful very soon we should do it while we have the document open because it's just easy to do that otherwise we can wait on it knowing that you know if there is pressure to use it out there then that'll build up for a while until we actually publish the document which we've experienced for a lot of other api facilities as well so i don't have strong feelings about this i'm happy to drive uh to drop it if no one wants to fight for it um i just was curious to see what other people thought about it i guess last call for including this into this pack i i i thought it was a a really interesting possibility to address the topic that has come up multiple times before which is this ability to include warnings um it depends on how fatal you perceive the word problem um because we have smart problems you know that's right that's a small problem you might consider rewarding uh so i i think that's that would be a a really nice thing to be able to just say yes i want to add a header uh to indicate there is some kind of problem with this response even though i returned it to you with the 200 okay i i mean i'm happy to do a pr just to see what it looks like i mean my inclination would be if it's a huge wall of text it's not worth it um but if we can get a couple of paragraphs and get some value out of it i'm happy to put it out there and then see if that spurs anyone to say yes i'd really like to have that does that make sense just to me i'm also equally happy to close it with no action"
  },
  {
    "startTime": "01:16:02",
    "text": "i think it can have some value so i'm not sure about the queue but i think i it's my turn right so yeah this isn't circuit again um yeah i would actually second i think it might be useful for one kind of style so i would i would argue for keeping it in okay that that's that's actually really helpful i'll i'm happy to do a pr and just see what it looks like and it may very well be that that that reveals that it's a horrible idea or horribly complex and not worth the effort or whatever but i'm willing to try so i'll give it a go um next issue thank you hans that was helpful and and roberto um down thank you requiring a specification document i think that is just a mechanical thing about the registration policy i copied for the registry of problem types and i copied some text from elsewhere that wasn't appropriate and this is a correction of that so there's a pr there if anybody wants to look at it i intend to merge that very soon excuse me uh the next one number quote unquote 23 multiple problems um this has been a long discussion and i i think we have a fairly strong agreement at least in the issue and in the discussions we've had previously in working group sessions on a path forward in terms of deleting some text about status code 207 that is not terribly good practice and uh putting in another kind of warning about the limitations of of this structure uh sanjay was uh i know a bit sad about removing the examples that he'd put the work into or at least one of the examples that he put the work into adding to the spec but i think that there's a fairly strong agreement there so if folks want to look at that pr um and give any feedback i again intend to merge that pretty soon as well and if folks have comments about that right now i'm happy to chat about it"
  },
  {
    "startTime": "01:18:01",
    "text": "i i hadn't posed a question as to you know this question about putting uh examples into the spec but actually not putting is a best practices document like the natural next logical conclusion there or is that overkill a best practice document for 7807 yeah to include all of these examples of well this is how you do multiple problem types and this is how you use it for warnings and this is how you i i would hope that that kind of documentation in the first instance you'd you'd put it into some of the um you know whether a blog or some sort of industry communication or something or something i think there are a number of outlets out there like that and if there aren't there should be you know you kind of smashing mag but for api developers or whatever you know if anybody goes and does that i expect to cut just saying um yeah and and you know if we can uh there's a line to be walked there but i think that would be my response for now yeah um hans do you have your hand up for this or or is that just uh no okay um extension to so so the show source of problem and request forex class of errors that is actually um blocked by another issue which isn't on this listing for some reason um let's see if we can fix that currently when i show share my screen things go a lot slower uh is it is the issue that's blocking it discussed here i mentioned uh at the bottom it should be yes 36 that one right there which was just opened recently maybe that's why there we go so we we've had this latent problem in a lot of discussions about 7807"
  },
  {
    "startTime": "01:20:01",
    "text": "and it's good i'm actually glad that this was opened as a separate issue so we can just discuss it separately um and and it's that um the 7807 does not allow new standard um uh d done what's what i'm looking for properties members whatever to be added to the structure that all the all the ones that aren't in 7807 are effectively any possible name is under control of the problem type so you know we can't come up and say well here's a new uh member for i don't know uh for a pointer to where the problem is in the response body for example which is what the previous issue was about um and so if you scroll all the way down um yeah i think that that we have a couple of ways out of this um we we can either you know zero which i didn't put into this message is the status quo which is don't allow don't say anything about this uh or we could find a name convention for new standard properties that doesn't conflict with any existing usage so for example add a prefix to new standard properties um and and the issue with that is that we by nature can't know all of the usage of of 7807 around the world and that we won't conflict with them in every single instance you know we can make that less likely by choosing a weird prefix and then of course we have weird ugly prefixes on new standard properties but whatever um but but that's kind of like a just a you know there's a risk strategy we had around if we take that path uh the other path we have is to mint a new media type for problem details for this next revision uh and the concern there you know that gives us a clean slate to work with but of course that also risks creating fragmentation that now api developers have to choose which one they use and there's momentum behind the old one and oh would i have to use this new thing but i don't know if everybody supports it blah blah blah blah and so that that creates more confusion potentially"
  },
  {
    "startTime": "01:22:00",
    "text": "there is a third option and that's kind of the unspoken option in 1707 which is we can't define new standard this is recognized in every problem instance across the world but what we can do is create new conventions that new problem types or any problem types can opt into and say oh yes i use that convention so for example we could create a convention that there's a problem pointer and it means something when the type says it means something um not quite as automatic and nice as you'd like but you know maybe a path forward without breaking too much i i don't have any strong feelings here personally if you want to call that option zero one two and three but um i kind of feel like i i i'm most against option two i think minting a new media type there should be a fairly high bar against it and i think option one actually probably could work my only concern there is um there's a lot of experiments that people want to have i think about oh that that's a good idea this is a good idea and we should have a chat about what the bar is for new problem for new standard attributes i don't think we should just put them out there willy-nilly um but but that's all i have to say about this i'm really curious to hear what other folks have to say about it eric um yes thanks this is eric um thanks mark for coming up with these suggestions um for number one i think you know we have a typical problem like this good old x-dash considered harmful right it's like once people start using stuff then it's kind of that's how it is and and renaming it to whatever convention we come up with is always a little bit hard but um i think my my preference probably would be number one only that we maybe we could consider using uris which why not it's kind of like a prefix but one that maybe is a little less just random but anyway um"
  },
  {
    "startTime": "01:24:00",
    "text": "the the second one also to me is not so attractive the third one actually i have my problem with that is that this means that that kind of each type would need to kind of opt in individually and i think in many cases you might rather have a situation where you say my api always uses these fields and then it would become kind of complicated to say well and i have these 28 types and then all these 28 types so to speak would need to opt in into that additional field that you're trying to use so so i think that one is like it doesn't scale so well i think so my i think my preference would be to go with number one and to go with um uri some kind of uri as a prefix and then i think the risk of conflicts is relatively low and that's well given what rfc 7807 already does i think that's maybe the best thing that we can think of [Music] i i i think i agree with on most things there i think the for me the problem with the third option is that tools um want to be able to automatically you know invoke the semantics without recognizing a particular problem type and then you can offer richer you know handling of a problem without having to know its particular semantics um and and if it's opt-in like that then we that implies that we'd need some sort of problem type description format to enable tools to to process that which is kind of nasty and frankly we know it's not going to happen what they'll do is just say oh look it's using problem pointer i reckon it probably means that even though i don't know for sure um so yeah i think you're right i think that number one is probably the right way to go i i do have kind of this visceral reaction to using uh uh uris as json property names i think that some developers are absolutely fine with that especially if they are of the link data world and other developers are going to look at that and say well i'm not going to use that then um and i'd like to avoid that reaction"
  },
  {
    "startTime": "01:26:01",
    "text": "personally i'd rather find i don't know some people use a dollar sign i don't know double colon we can have that bike shooting exercise later on this is daryl just one comment on the third option um as the 7807 biz introduces a json schema i think what the third option is describing is what json schema now allows with vocabularies and dialects and because this is almost exactly what we did in open api uh in order to extend the keywords that are supported uh we introduced a vocabulary and then you declare that um we are using this dialect which is a set of vocabularies so there may be some mechanics it it's a little interesting to get your head around but there may be some mechanics that we could reuse but it is somewhat dependent on how well adoption of dialects and vocabs comes because it's fairly new in json schema so if if i can respond oh is it working now fantastic it's telling me that it's success big green box that's great um i i have again a kind of a visceral reaction that it's very similar to link data world where they're like you know the to me the the whole idea there is well we've got this data model that we overlay on top of json but it looks like normal json and that's kind of an attractive nuisance you know because a developer who doesn't use linked data will come along and say oh look it's json but if they don't use that data model they might actually really mess things up and and so when you overlay these data models on top of really attractive native data models um and processing models and so forth it it becomes tricky for for everyday"
  },
  {
    "startTime": "01:28:01",
    "text": "developers to use it and so i'm a little wary of those sorts of things i think it should behave like it looks you know okay plenty of meaty issues do you have anything it sounds good oh sorry so it sounds like there's there's maybe some convergence on the number one with a tremendous bike to build if if i can characterize that one yeah okay um so that one you're not 2x oh don't don't start me on that um so that that that actually the number 24 is dependent upon that number 26. if we get the number 26 sorted out then there's just a question of whether or not we actually do that and we'll get there then ld jason ld context personally i won't use it but i know that other people want to i don't know that it's harmful to add to the specs so i've just asked for people to make a proposal and we're waiting for that for someone to make a pr of what text actually needs to appear in this in the spec so if somebody wants to go off and do that work that's great um if it if nobody does it by the time that uh uh we get a last call i think we'll probably just drop this issue but i'm hoping ashborne or somebody will step up and i think that's everything for this so thank you thanks for the time excellent thank you okay so if i remember the agenda well enough i believe next up is martin you're gonna have to do the thing with the thing with the slides"
  },
  {
    "startTime": "01:30:00",
    "text": "yeah sorry to fix my uh i don't know you don't have to do it you're fine to do that i was uh requesting it that's cool now i'm gonna have to say things like next slide please oh you know what yeah sure say next slide i i did say that i think the title starts all right so um uh this is this is something that's come up in the ohio working group as well no it seems that we're uh running into a bunch of issues uh with the use of http that are kind of interesting and sort of break into new ground one of the things there that we've discovered is that there's some use for having the ability to to mark the time of a request particularly in that case for dealing with anti-replay as i'll get into later but there's a general class of things where you put the current time into a request or something like that so that you limit the the time over which something oh oh that's a nice feature someone spent a lot of time on that i can move the slides down um so the purpose of this craft is to basically explore the use of putting the current time in a request and all of the hazards that that necessarily come with that moral and otherwise uh with the publicly trying to make date time stamps and requests so the specific that we have in ohio is that requests are replayable in that context which is not particularly good and so having a replay strategy is particularly"
  },
  {
    "startTime": "01:32:01",
    "text": "useful um and in order to manage the state commitments on servers that are doing anti-replay you probably want to have something like a date or sequence number or some sort of monotonically increasing thing a date is kind of okay having a date means that if you receive a request that's been replayed you can rapidly identify it as such and then just out of hand reject it and then for those requests that are within a certain window of the current time you can simply say well i'll accept those and remember some other details of the request so that if another one with the same details comes in again you can quickly reject it as a duplicate without the date there's basically an infinite state problem that the server has to deal with so primarily looking at date but uh there are other other timestamps in requests so um probably the biggest part of the document talks about the ad clock problem so shockingly common that our clients and servers have a disagreement about what time it is it's quite often the case that uh the clients are very very badly wrong we've seen times that are in the wrong millennium and um it's not that unusual to see things that are months or years out of out of date so um having you having a means to break that is interesting there's a scheme that's suggested in the document that uh simply says take the date from the response and try again of course um using an untrusted time from an arbitrary server random servers on the internet is probably unwise uh talk about that a little bit as well uh talk about the caching interaction and uh some of the things"
  },
  {
    "startTime": "01:34:00",
    "text": "that might happen if you have an intermediary in the path it's quite common for things like cdns to overwrite the date on the expectation that the cbn knows what time it is they often take extra clearing ensuring that they have good clocks the servers that back them don't often get the get the time right so city ends often fix it up for you the implication there is generally that this is no problem uh but if the server time is very very badly wrong and it's rejecting requests and the cdn is fixing the date up on the way out it could mean that you never get a request through ever so um i know we had some discussion with this one already um the questions i have is do people find this material useful um and is this something that the group would be interested in working on he says expectantly oh mark tells me i'm wrong about why this idiom is right we write today i bet they rewrite it for all sorts of scary caching reasons uh jonathan asked the chat is there an error description for i need a date but it didn't include one yes so part of what this document has is a problem report type that says your date was wrong which includes your date was absent uh so uh"
  },
  {
    "startTime": "01:36:03",
    "text": "document do you think martin it's about five pages from memory uh i don't do da i don't do pages anymore so i couldn't i couldn't tell you maybe it's eight um it's not a particularly long one yeah i don't i don't do pages anymore it's probably five i you know screen screenfuls would have been enough that's fine yeah oh mark's in the queue yeah dang i'm just talking to okay good good um so i think maybe uh the the focus of the discussion here should be on you know if this document just needs a home i'm sure that ohio could do it i'm sure that http would probably be happy to do it as well i think maybe the focus the way to make this discussion useful is is do api folks think that having this document and these clarifications in this problem type would be useful for api consumers and api designers um and and if so then this is a natural home for it and if it's a little more scratching your head i'm not so sure we can probably just do an http or in ohio or wherever and if it gets used elsewhere that's great but it's not you know necessary to have it here that's how i'd think about it personally i don't know the answer that's just how i would find the question yeah um i think when i when i first floated this one i don't know if it was you mark who pointed out the item potency key work and there's a bit of a relationship with that one um the sort of complementary pieces of work right i remember that now that's right yeah just go ahead robert just speak up"
  },
  {
    "startTime": "01:38:00",
    "text": "yeah yeah well uh thanks martin i i think it's okay the documents to be related to timestamps in general but i i really don't want to mess with dave because uh and i i'm not even sure that this is the right place where in information that should be in in some way guaranteed should be used but this is a personal opinion this this is my opinion for uh seeing the networks and for uh and in general for whatever is related to either confidential integrity or that is not just an operative information that's it so um i think that's that's that's a fair comment i i didn't quite catch your piece about um third date i i would just say the the document should be named time stamp information instead of date because we are speaking in general about timestamp right yeah and it's possibly not even http specific apart from the problem type work right yeah i'll make that change i think this is daryl's speaking from an api perspective i haven't seen this particular issue come up a whole lot um although i can imagine uh four apis that require to do signed requests this does get a lot more interesting um and i think just the fact that we're using and it does include a problem type as a way of describing it does kind of correlate it back to apis fairly"
  },
  {
    "startTime": "01:40:02",
    "text": "strongly so um i i think this it does seem like a reasonable home for adding this capability even though maybe at the moment in the api world it's fairly niche all right is it working okay um that makes me wonder whether uh have you talked to justin about this because if it's you know has the strong link to the signatures draft maybe uh um it could go in there or be a companion document or just just stop thinking out loud yeah i i haven't spoken to justin about this one uh in the discussion i have with roberto on the list i think we we kind of concluded that the signatures thing was was less directly applicable to this one it's it's often the case that when something signs something they put the time at which they signed it but the purpose of that is is usage limitation rather than to indicate the the current time and so the the connection to signatures is a little weaker than than that so i don't think i don't want to over emphasize the the application to signatures okay well i've gotten some good feedback here perhaps um i've got to take this to the list and i've got a revision to make there's um there's a few things that have come up already in the discussions thus far i might revise it and then ask again on the list and we can have that discussion that's the chairs object just from the perspective of this working group i have a small worry that it might interfere with or or have a"
  },
  {
    "startTime": "01:42:01",
    "text": "distracting kind of element with the item potentially key work um i'm i'm not sure it would be a you know i i guess i'm wondering out loud whether they would resonate with with each other or whether they would pull pull apart from each other i'm not sure my read of the item potency stuff is that this is complementary and entirely complementary you can use both or neither or one and and that's going to work out pretty well depending on what it is that you're looking to do so i think this is probably okay for that and one of the nice things about the item potency work is that it could be a way to to signal what what aspects of the request can uh determine that it is either put or not uh which is sort of very complimentary if you you're talking about anti-replay strategies and whatnot because if you if you've got an item patent request then you don't have to worry as much about the item uh the the replay properties or something i thought i thought they were very much complimentary all right so you'll make some changes and bring it to the list and maybe we'll discuss adoption or you can continue to venue shop i would i would never say that i'm not no finding the most appropriate with useful work i'm sorry i said it two times oh very good very good yeah all right uh are we in the aob section now daryl um we we are in the um proposal for new working group documents which we are now more enthusiastically open to um i believe uh we had"
  },
  {
    "startTime": "01:44:01",
    "text": "last time a conversation about link template uh as uh a document to do a call for adoption unlist which i believe we failed to do uh and so we are recommitted this time we really will do call for adoption and we have more renewed enthusiasm about adopting more docs so look out for that on the mailing list and the other [Music] document that has been brought up in the discussions area uh on the github repo is the health check um document which is um as i understand it is currently an individual contribution but it doesn't have a working group home and i'm gonna defer to rich with regards to what the processes and procedures of adopting something like that would be um we can adopt it you know the author would presumably want to want to have that adopted eric you can speak in a sec the pers the process is not it's not a big deal it's the same as any other adoption yeah thanks rich this is eric um i just wanted to so because last time i said i would get in touch with iraqi and see you know how he feels about it and so forth and in my defense i did multiple times um but not much progress was being made so i still have i don't know last thing i heard from him was that he tried to join mailing list and i'm not quite sure of how the status is there i don't think i've seen him on the mating list but at least i'm still pinging him on a regular basis i'll keep doing that and hopefully um there will be some path"
  },
  {
    "startTime": "01:46:00",
    "text": "forward i'm not quite sure whether iraqi has the the cycles to actually um go forward with the draft but one way or the other at least he knows that that the group is interested in the general topic and i'll keep the group updated if i make any progress great okay thank you um if it helps to you know loop daryl or i into the conversation we can help ensure the process will be relatively painless until it gets to as folks know after that that's not the limiting factor right now yeah okay good okay so i think that leaves us with aov great hey francesca hello um i wanted to ask the chairs and the working group to possibly consider updating the milestones um we don't need to have i think it's useful to have some sort of record of you know what's the current status of the documents even though we have an awesome github project view now but this is a more high-level general view and we can use the uh next and later and last instead of dates if you know the working group prefers but also having an idea of what our goals times are could be useful we don't have to like be super precise but yeah it would help me so i want to bring this up right now we have no milestones got it okay martin go ahead and then i'll say something man that's so slow um have i've done the research on milestones and concluded that having dates on them"
  },
  {
    "startTime": "01:48:00",
    "text": "is uh probably foolish uh we'd probably decide whether whether we wouldn't put a date on any more ones in this group as well i'd sort of advocate the thing no yeah i i think yes having some kind of priority or a rough you know t-shirt size estimate is it will be worthwhile um daryl mark and i can discuss offline with francesca and post them and then see if the working group says we got it wrong so we'll do that between now and the next ietf how's that thank you um okay you want to mention the twitter thing daryl yes rich and i discussed that there was the possibility of setting up a twitter bot in order to provide more feedback to the community and some more visibility i suggested that i think twitter is actually quite a common gathering spot for api community folk and so if we want to get the attention of more people i think that probably would be a good idea so i guess it's just a case of understanding exactly what events we would want so that we understand what kind of frequency that that might spam a audience with notifications see okay um eric you say you like the hd working group one um does folk do folks have uh pointers as to how to get that set up there we go yeah there's a straight line mark sorry we may run out of time before my wife becomes active again"
  },
  {
    "startTime": "01:50:01",
    "text": "um yeah yeah you you talk to me um i have a bot that does that um if you have new features um i take pull requests or cash so i like cash with a date stamp on it or cash sorry all right okay i will talk to you mark cool great yeah i think adoption is is definitely one we want to put in the list too because we want to know right we want to tell not just end of the process but the beginning of the process yeah the hard one right now is um when when i when you put out a call for adoption because there's no way to recognize that easily with the event stream the data tracker puts out but we'll we'll talk yeah okay yeah we can uh maybe we can get the tools to change mate okay um all right unless anybody has something else to bring up i think we'll give everybody link setting right thanks you suggested we do an update on uh save the best for last save the best for last thanks the authors for their patience and good nature um yes there was one change made in the last good point one change made after the set of isg and itf reviews which turned two shoulds into a may two shirts into a must sorry for interrupt um i'll post the diff to the list and if anybody disagrees by the end of you know next week speak up but it's just tightening your requirement it"
  },
  {
    "startTime": "01:52:00",
    "text": "says you have to do this particular thing because it's really required for interoperability so therefore it should be a must so i don't know if eric wants to share more in detail but since i'm shepherding this through the ist process i can say that uh yeah just for summary if someone like if people haven't followed this but we had to do another ipf last call because of process because some down ref were missed that were in the um ice so we started that and it's ending the 28th of march and um i also requested an internationalization directorate review so i hope that will arrive by then and um and after that we're only missing a couple of ballots and i don't think that it will be a huge re-review from the whole isg and i wanted to thank you the authors for answering all the comments and they already post posted a next version version zero nine so it should be um quite painless in my opinion um i'm only waiting for the internationalization review to make sure that we get that right i am not an expert in the topic so waiting for their opinion um since there is an internationalization section um so yeah that that's basically from my side okay so i'll post the note to the list and and also make it if you object respond by the 28th so that the same deadline applies everywhere and we will get this one in the queue yeah and it's in it's up for telechat on the 7th of april to get the last ballasts that are missing all right um thanks everyone i i want to say that"
  },
  {
    "startTime": "01:54:00",
    "text": "you know this was sort of a different group for the ietf we have i'm very impressed by all the authors when they go out and they say oh i spoke to the opening api people i spoke to the ammo people these are whole communities that are certainly new to me as an ietf geek but i think we're doing a very good job i think we're bridging appropriate communities and getting good stuff done sometimes when east meets west there's little friction and frustration so i appreciate everybody's patience um eric and herbert particularly most recently um but we seem to be doing well and that's partly why you know that's mainly why daryl and i think we can sort of open up the pipe and take on more bandwidth so stay safe safe healthy pray for peace whatever thank you everybody for joining me all right and hopefully in the future we'll all be able to be in the room there on the upper left corner thank you very much everyone thank you thank you for your time thank you thank you francisco thank you roberto you're doing a great job appreciate everybody thank you take care bye uh so"
  },
  {
    "startTime": "01:56:12",
    "text": "well yeah"
  }
]
