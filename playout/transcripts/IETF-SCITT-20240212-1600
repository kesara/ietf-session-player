[
  {
    "startTime": "00:00:05",
    "text": "hello folks anybody else there I found the amute button and it tells me that you can hear me like God it's it's more posal and I might find most things except I can't find the notes now confused it just brought me Tod let me let me look that up uh I can post the note link to the list uh sorry to the chat yeah because I click on it just like I said it brings me to a new note that's weird maybe it is not filled in so um I would not oh maybe that's it is it has a fall got it now it's now I've see it and I can see your cursor so that's the same document and now you're are typing February are you going to take notes uh Steve I am G to try to take as much as I can and I will take every bit of assistance that people will provide well said thanks as ever Steve I'll um I'll also jump in and"
  },
  {
    "startTime": "00:02:00",
    "text": "overwrite notes you mean change history I think I you'll find it's making history sorry and to uh make history uh being written by not only the uh winner uh the link for notes is also now in chat yes it's extremely helpful because it allows you to open hedg in a separate um tab which allows you to actually participate and write notes at the same time okay I'm going to call it on four minutes today rather than six because there probably a lot a lot to do so one more brief pause and then we'll get going [Music] okay there it goes so um hi everybody uh I'm not going to say much as I said there's a lot a lot for people to to talk about um of substance um so just to say thanks very much to the participants authors and editors who have got 05 um out as uh as mentioned there are some simplifications and there are some um some points of of of discussion to be had uh on that but um it's overall a really great step forward and a step towards having a draft for uh for 119 so that's that's really great um all I wanted to say or remind people of is um"
  },
  {
    "startTime": "00:04:02",
    "text": "the old motto of iatf which is rough consensus and running code um rough consensus is better than NeverEnding full consensus and running code is uh better still because that can uh that can help so want to just make sure the couple of the issues that are open are issues that have been spoken round and round many times and I think nobody's ever going to be 100% uh satisfied but um we have a couple of implementations floating around now that can help guide us so um uh yeah I don't know who wants to take the lead on um issues discussion or the um the 05 but uh Steve just um because you took it last time I I'll hand it over to you uh to so just to kick things off I'm sorry go ahead I'll type while you're talking uh okay good great uh sorry I was actually just trying Tope some notes here so we definitely uh just just for a formal thing uh because this is the I virtual inter meeting for skit we are operating under notv of course and not aware of not well uh has to uh be make himself aware or herself aware sorry thank you Hank well well well said and the other thing that we would normally have to do we don't have to do because everybody is signed in with their real names so blue sheets and signups and and and presence is all is all taken care of by the system uh but yes well cool thank you I so just on the scope of rough consensus we uh we definitely been focused on bringing the draft to a last call at 119 so we are you know trying to be time based and making sure the quality hits where we're comfortable so we wanted to shift so that when we're at"
  },
  {
    "startTime": "00:06:00",
    "text": "these meetings we actually have drafts review rather than GitHub uh GitHub issues or GitHub PRS it's certainly a place for people to follow up but we wanted to follow data tracker uh so in that sense in the last two weeks we've been working to get that draft updated and we merged in quite a bit uh that was intended to trim and call it down uh and we might have swung the pendulum far so as the notes in the email went out uh this weekend so with that um we definitely want to go through a couple of the uh topics that people have strong feedback on um I'm looking to see who's here but by all means raise hands and we'll go through the ordering uh I know the registration policy and initialization was a Hot Topic I'm looking for the hands raised who anybody want to jump in because I know that there is a big conversation around initialization of registration think is is is there let's recognize Hank yeah so um just to Kickstart uh the the the issue we created uh of course was to uh address another issue um and that was that we kind of went all overboard with the registration policy while leaving it undefined which created a uh loop of uh never ending Loop of how do we do that and so by reducing the amount that's why the massive uh PR started with policy uh is now the intent was to um to reduce um registration policy but and to some extent I am a supporter of that approach um some policy remains and that"
  },
  {
    "startTime": "00:08:03",
    "text": "pertains to a uh to a big part I think to the initialization of The Ledger because uh how would you uh Kickstart the first notes in let's say A3 if the L just is a Tre what should the first tree be and there is this fundamental aium we' have written into the initialization maybe going all overboard so we can thrown it down again um which is basically in a nutshell we we refer to as a key before signature so the first thing to imprint the transparency service in this Ledger with is most likely key material about the uh issue that is the owner also takes on the role of the owner of the transparency F and their their um corresponding Ledger and so uh so that's where we started and and and I'm in fan of automation not to take up too many words and and in order to enable auto information there has to be the succession you if you do not want to end up with this you can't uh register anything anymore because there's no key material for you to vet that that should be in The Ledger itself for a uh interoperability across all SK ledgers and that might be a problem maybe this is an application a problem and no policy has to be in there and and that is something we can there may be a spectrum here now between these two um extremes and that's one topic I think and to read out loud all highlights that arguable too much policy Still Remains which is that yeah um yeah so I'm not sure if I have my chair hat on or off for this comment but I would just observe that the from the email conversation um and a couple of other um uh things on the the ITF slack that specificity I thought we had"
  },
  {
    "startTime": "00:10:02",
    "text": "collectively come to a conclusion on this already by having the configuration idea so at 118 um we indeed diagrammed and and announced the configuration idea so that would include things like the the public key uh for the service itself and any registration policy and indeed some things that don't seem like registration policy uh but are still important to knowing whether or not you want to use a particular transp service um all bound up in the same moral idea of of key before signature or policy before before enforcement uh in that case and would I think solve an awful lot of this to say you you have a policy you're held to the policy by applying it to The Ledger before before you can accept anything but we don't need to talk about odd over specifics of what goes into what bits of a Merkel tree uh in in in vague way so I think that might be a a route a quite rapid route to resolution uh Steve yeah so I think that's part of what at least some of the conversations been happening since that is if if a registration policy and configuration thin as possible because we've intentionally avoided a lot of spe specificity then should a registration policy be potentially be no if a receipt has to reference the configuration and an instance doesn't want to create a registration policy why force them to create a registration policy that basically has nothing in it and should the registration should the receipt basically have the ability to have a nil on the registration and a ver a verifier can decide that well that's not very interesting and I don't care"
  },
  {
    "startTime": "00:12:00",
    "text": "that was it so I'm I'm I'm back in the que so um for the purposes of getting a spec done and I think from a point of view of of usefulness there is a big difference between being silent and saying I don't have a policy so I think there is actually there's a benefit to the spec in in terms of having a shape and a defined way of publishing the policy for people who want to have one or of services that want to implement one and I do also think it's kind of useful uh if you're as a middle person or an end user trying to decide whether you want to interact with the transparency service or whether you care about the receipts that it's creating um that it explicitly says I am not enforcing any special registration policies or you know these other other ideas that came up about how often it rolls its public keys or um how how it manages its internal security mechanism so I think the you know arguments about signing nulls or null being Eli did I think I think we are less useful than than just writing down that you're allowed to have an empty policy go H yeah so what I hear basically is um there room from Improvement and if there is a uh easier way that would exclude as to go with always commment still too much policy and tone that down yet um fine so uh I what what I here is someone is creating a PR for this and then we can look at it we want to scrap initialization entirely which is possible I think but but would point to the to the to the"
  },
  {
    "startTime": "00:14:01",
    "text": "scrappy document and say this is handled in that scope so look there does anyone want to volunteer to write that PR I have a fairly good good view of what it would look like so I'm I'm happy to do it if the if the group is happy for me to do it but um if uh if anybody else wants to then I'd be I'd be grateful you can wear multiple hats I I I I know i' as I said earlier I'm trying to separate church and state as much as possible but um with the with the arguments had I think there's some editorial that would that would help if nothing else um so yeah happy to do that AJ can you hear me can this time yeah yes cool um so we're saying remove is this PR is the scope of this PR I I'm walking around and doing something uh is removing initialization conversation I can volunteer to do that I think so so I I'm happy to do the editorial on the section that I think would make it much less ambiguous and much easier to get to the running code place so what if you if you want to do the the the the removal PR and I'll do a um an editorial on the section and we can see which one we prefer that would be that'd be good all right I'll try to do that in the next 30 minutes or does it have to be now now no no it doesn't be now now okay that would be amazing but no Okay cool so that's kind of progress um on on that so what else is left over"
  },
  {
    "startTime": "00:16:02",
    "text": "that was obviously the most controversial piece um what else do we need to I think the other one was the what gets persisted there's a conversation around receipts being persisted or the sign statements what should the registration what what should the transparency service actually persist and what should it um return when you're asking for instance the feeds so I'm going to jump in here and just try to uh restate what I hope is undisputable where we are at the moment and that is that registration is is the process of processing a signed statement adding something to the append unog I think we're typically calling that a hash or digest let's calling a digest digest to the append unog and during that creating receipt that the ISS so that the register uh send to the transparency service so uh you send a sign statement and you get a receipt back the process of creating a transparent statement I I'm I'm the strong assumption is happening outside the transparency service when you stuff the receipt into your sign statement becomes the transparent statement so uh um and even sending the whole sign statement and that is just a side note might not be necessary if you do a decouple payload so that's my recap and my understanding"
  },
  {
    "startTime": "00:18:02",
    "text": "I think I'm up um so the the verifiable data structure is the thing that produces like receipts so when we want if we want to say like bytes go into a thing what we're really saying is like bytes go into a verifiable data structure and that allows for an operator to produce a receipt for those bytes depending on the data structure it could be that that's uh that data structure only stores hashes like that's what RFC 9162 stores it only stores hashes but there could be other data structures out there that are like very complicated that have to store more than just a hash in in a list so I think I would just be extra cautious about the normative references we're making like we're making a normative reference to this Comer draft which is titled Merkel trees but that's confusing to people because it's not just a way to do Merkel trees it's a way to get receipts for a set so if you've got a a some system and you've storing multiple entries in it you can produce receipts from it doesn't matter whether it's a Merkel tree or a cryptographic accumulator or you know some other fancier data structure the normative reference is to you have to have a verifiable data structure and it needs to support an inclusion proof and that's what you use to you to build a receipt um there's this adjacent Services topic which basically is the that's new in the in the new version and that's a way to say hey like you probably want to be able to produce more than just receipts and you could use adjacent services to produce more than just receipts but in terms of the the current sort of architecture the way that I think about it is you have bittes come in and bittes come out um the bittes going in are assigned statement and the bites going out are asynchronously a"
  },
  {
    "startTime": "00:20:02",
    "text": "receipt and that's the fundamental operation the uh architecture supports anything other than that is adjacent services in my view that's it okay cool thank you so uh Robin you may still be muted Robin I'm not sure I pressed the wrong button thank you John yeah you're still in the vi ah so you can hear me yes off you go so when hen was speaking about what what he hoped was obvious you you submit a statement and you get a receipt back um it would be useful to avoid requiring that the receipt is essentially part of the request Loop where you where you get it back immediately um is is that something that is accommodated so your connection broke up a tiny bit of a crucial moment there Robin but I think the question was um are we accommodating the the I think the existing behavior of of all of the the demo and emulator code which is that you submit the statement you get back a temporary identifier for a long running operation and at some point later on uh the receipt is fetchable and this might be for reasons of convenience it might be for reasons that eventual consistency takes a while uh and and so on was that the the thrust yeah exactly or you're just not interested in a receipt for every statement that you submit um I'm interested in this topic because for some data structures the receipt that you get a year from now can be provably identical to the one that you would have got if you'd have requested at the time and that gives quite a lot of useful"
  },
  {
    "startTime": "00:22:01",
    "text": "flexibility for for various things uh so Hank yeah so um I think the actually Architects are silent about the uh latency um if the latency is a year uh we can make that explicitly that latency is not the issue here as long as if when you want that receipt for the first time it's that receipt sure exactly exactly yes okay cool thanks was that Robin if you could uh create an issue for that uh feature request that uh latency for receed I want to say conveyance to the yeah well uh it has some implications that are Authority because you if I'm registering something and a year later someone else is getting the receipt because I forgot to take it from the counter I don't know maybe I forgot the get operation or something um and that might not be the greatest thing there are some security consideration but these probably go to API and not to the architecture um but if you can can write up a small issue about the actual thing and then maybe some frosting with uh implications might go to security consideration of a scrappy or something then we can track that fantastic thank you great yeah pushing to Scrappy would would would be great you um right okay so um I understand that first part you submit a statement uh I guess it could be normally signed but I guess you don't really control that but then it's put into the log and we get a receipt and then you can put the two first two things together but later there needs to be some action where you come back and you can check on the item and see that it actually"
  },
  {
    "startTime": "00:24:01",
    "text": "matches what was originally put in somehow is that described uh that that am I right about that that is um kind of a necessary part of this whole thing that you have to be able to to check on the thing that you have against the you know transparency service in some manner I don't know who if anybody wants to answer that but I'll fill the silence uh if you if if we don't want to so um this is this has been a a perennial discussion uh that we've had and I agree with you that yes absolutely the thing you mentioned has to be possible um the question is whether it has to be normatively codified if if if that makes sense um in the architecture document and or if we need to normatively specify it in Scrappy in order to make it interoperable so um the the question has has often come up you how much of this needs to be in the Standard Building Blocks uh and how much of it is kind of an extension to a system that's built around the building blocks and and a large part of the 17 hackathon um and a large part of what I think we're hoping to do at 119 hackathon is um uh is is to see exactly how wide those um those edges need to be pushed but for sure there is a mo it shouldn't be precluded that a system built with the building blocks can't somehow index or return or compare things that you've got in your hands because the alternative to that is that um every single thing you ever submit you have to"
  },
  {
    "startTime": "00:26:00",
    "text": "also then keep all the receipts for it and remember where they are and not lose them and and remember they have to be transferred every time you move them around which I understand a few people in this group actually want to do it that way but most won't it'll be very awkward from application point of view so I think we need to make absolutely sure that what you said isn't precluded by the architecture spec um but I think unless I'm I'm going to make a statement and if anybody thinks this statement is wrong please let me know but I think with the sort of simplifications and and um concentrating on the hard bits of the sort of crypto and receipt interoperability I don't think the spec says anything now in in the architecture about how you do that so it doesn't say you can't it doesn't say you can it just gives you the building blocks to be able to do that in some piece of code somewhere well well um but if you just have a receipt isn't the problem there there's a problem in that it could be forged and look like a good receipt but actually not be a good receipt until you go back into the transparency service and say um some somehow I mean you have to be able to somehow authenticate that the receipt is is legitimate how do you do that without I mean what is I just don't understand the round trip I understand the thing about like saying here's the kind of service and uh submission policy we have you submit it you get a receipt but um certainly there has to be some way does does the receipt stand alone and and um by inspecting the receipt you can tell that it is legitimate uh or is the is the way this is envisioned where if you have a receipt then you can you can check it somewhat but to to really check it wouldn't you have to go back to the transparency service and and somehow check to see that indeed it is in"
  },
  {
    "startTime": "00:28:01",
    "text": "there uh maybe I'm missing something I I just don't understand those it what is the how is this intended to work now so the the the verifiable data structures make it almost completely stand alone so the reason why well my my my reading of the reason why there's some some differences of opinion in the group on whether this be specified and how it be specified and how it work um actually is tied to the whole ation policy thing as well which is depending on your threat model where you in order to verify these things you need to have some small number of facts available to you uh in order to verify the verif structure and the insertion of the actual data and whether you're looking at the correct tree or not and in some cases where you have a good relationship with the transparency service over a long period of time the thing that you said makes sense and and is the way a lot of these I expect are going going to work but there are some considerations um where for example um again to to your point it would be possible for a transparency service possibly years in the future after it's been bought by evil Corp and and they target you as a as a victim for you to make requests to it and it could suddenly magic up a whole new tree just for you which is cryptographic sound and consistent and contains a bunch of data but isn't the tree that it gives to everybody else or isn't the same tree it gave you last time and The crucial question is you know whether that kind of fiddling or malale feasant in the service itself is higher or lower in your threat profile compared to things like having multiple Services compared to things like well you trust the transparency service but you don't trust the thing that's giving you the the original artifact back so um you"
  },
  {
    "startTime": "00:30:01",
    "text": "it's application specific which of these things are more or less important um but yes effectively the receipts almost Stand Alone um and are verifiable with the exception that you obviously have to know which transparency service state you're comparing it against and that's the crucial thing to know um where where you get that from whether you store it immediately and then never trust anybody again um or whether quite the contrary you always check it okay so um I guess I'm going to need maybe somebody can point to me where like how how is it done that you take the receipt and you can just by inspecting it with internal information or or do you need also at reference to another rout of trust such as a um a registar of some kind that you're going to check back with a public key or something in there there and then you trust that other thing such that now you can trust this thing I mean it seems like a any kind of Standalone blob of data is not going to be able to to verify itself unless you have some other thing that that is verified and now and if you send it back to the thing and you say Okay um indeed I don't think there's any way to get around if evil Corp takes over and they lie to you but assuming that you can trust the transparency service then you would like to then check the thing that you have to see that it indeed is a thing that it somehow maybe you send back a little smidget of it or something and it says yeah that's the thing that uh that we produced anyway okay so I'll get out of the way I know there's a lot of things to discuss and um it's probably just my not understanding it rather than anything critical thank you that's okay so I I think we've got it in the the minutes I'll certainly have a look but I think it it is one of those things that we need to not preclude for sure um yeah but we we may get away with not actually specifying exactly how it needs"
  },
  {
    "startTime": "00:32:01",
    "text": "to work um yeah getting getting that extra piece of information you're dead right Ray but the the question of where where you get it from and why you trust it um is application or or use case specific and so It's tricky to write one thing down and have it work for everybody um cool thank you yeah it's a good it's a good area so um what else is there I'm sure I remember one other thing that I wanted to point out um anybody else got hot buttons or context they want to raise or PRS that they'd like other people to to do I was thinking it might be is the Brisbane um meeting seems like it's right around the corner now are we should we start planning for that um and uh in these meetings or is it a little bit too early uh we probably can I think I need to double check I thought I'd put one last meeting on the agenda for a couple of weeks time specifically to concentrate on that but I could be wrong um certainly it's never too early to to talk about um hackathon so hackathon outcomes would be would be interesting the the biggest thing from a sort of real ITF persp perspective is that we actually want to have a candidate draft um so certainly not opening up new cans of worms uh but sure do you have um do you have hopes and dreams for for 119 that you'd like to discuss well um I do have a specific use case that I'm working on but um I know it's a little bit off track what I'm going to do is is attempt to to write it up using actual code to show what the data structures would look like um and"
  },
  {
    "startTime": "00:34:02",
    "text": "so I can understand it because I I'm still got some some um blurry areas and that that will certainly help me um and I think everyone else to to maybe understand more about uh what it is and uh I had um Hank volunteer to to to look at what I'm doing so maybe um in the next uh period of time um I can work on that I I've got things lined up so I'm I'm kind of like ready yeah to work on it okay thanks yeah that' be great and we'll um yeah we can assist you with that that too that'll be good cool okay uh Robin hi um yeah so the last thing I that was on my mind from from the draft was the um I think it was a requirement that the issuer of the sign statement needs to be live verified before the statement is added to the log um have I interpreted that correctly so as well as the service having authentication at the API service for the for the person who's putting the statement on the service Are We additionally saying that the trusted the transparency service should verify the identity of the statement issuer uh Hank seems to have an answer for you I a suspicion so if you're saying that uh the current amount of registration policy is still too much I would say there can be initially there's absolutely zero expectation as is on the agency here um you can't without any other input which for example could be configuration or registration policy or something from the API assume anything so if you don't"
  },
  {
    "startTime": "00:36:00",
    "text": "know your item will be added to the verifiable data structure just as that that is the minimum expectation should always have unless you find other non-kit architecture defined policy that's how I understand it right now excellent thank you good yeah and I don't know if you you've seen the reply on the list yet Robin but AI also had some input on the the later section on that topic which um I never saw that yeah suggest suggest there's there's a little bit of Hangover that can just be removed and then what Hank said I think that that's an easy one to close off fantastic thank you good okay so um I'm very keen to to try and get these things close I think there's um two PRS promise that are are kind of important and otherwise it's um I think we've come to understanding on on everything else that was discussed on the list so that's awesome um so let's try to get those AJ said 30 minutes I I can't do mine in 30 minutes but I'll do it today um so anymore for anymore does anyone else have any um particularly anything in mind that would prevent us getting to a draft by the 119 deadline other than the Hulan amount of effort that it takes and again recognizing how much how much has been done since the last meeting um that that sounds great so unless there's other um other items people really want to raise I think let's let Reserve our brain power for for getting that um draft ready version version done and um we can call it a day"
  },
  {
    "startTime": "00:38:02",
    "text": "early going once going twice okay let's call it so thanks very much uh we'll see you in the uh PRS and issues and um and the mailing list thanks all thank you thank you bye"
  }
]
