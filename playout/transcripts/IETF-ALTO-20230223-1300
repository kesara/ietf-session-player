[
  {
    "startTime": "00:00:05",
    "text": "foreign okay it works now sorry yeah it's better yeah my laptop actually since the audio has a problem actually I I chaired I checked the meeting material after our slides hasn't been uploaded really yeah okay it works now okay I can say now so Matt just make sure you sorry I made a small last minute edit and uh so you did get my last slice right just replace the earliest lights yeah yeah the final ones are are online unless I'm not final Yeah final final that's why people call the final final sometimes you have final final fine sorry I mean I I make a couple small edit sorry about that very small but what what we can do is that you can we can start by the uh who I am slot and then you can check if the the ones that are online are the um I would say the latest one uh if there's any I would say difference then we can upload them once we are on the OM slot can you show me slice number six if because I I modify slide number six if that's okay then that's great"
  },
  {
    "startTime": "00:02:01",
    "text": "number six so Amanda do you want to share or you no let me yeah it's doing that okay yeah go to number six please yeah six yeah this is six I mean this note number is six oh so if this number six then we're missing a slice oh so this is not the final and uh uh can you take a quick look okay I sent a second email right after it I sent only to Ching and Matt YouTube oh no I think I think so can you have have a load yeah yeah I have already uploaded the latest version but but this is what I'm saying is that I we can't fix that while while we are dealing with the uh when when so no need to wait for us sure sure thank you so I will I will check again and if there is any in the problem I will send you a private private chat Richard okay sure please okay so we I think we can start chin okay let me switch to chair slides okay um so welcome to our"
  },
  {
    "startTime": "00:04:02",
    "text": "uh interim meeting actually there's a first interim meeting and the next so nowhere actually this meeting will be recorded and please make sure you be applied and professional to your fellow and colleague or follow the IDF code or conduct and now also if you have rpr please disclose based on ITF uh rpr rewards guideline um so for this is a detailed note where if you're not familiar with please read it also has already been published on the idea website and uh this is our meeting agenda and the uh for meeting Logistics actually we already have Jody and to take a have to take minutes and we create the the notes in the Kodi markdown and uh so foster actually as a chair we'll you know introduce the working Google status at update and to uh actually uh discuss where we are and uh which direction we should move toward and also where you know discuss our uh Yokohama meeting play and in this agenda we'll you know focus on two channel items one is auto new transport the other one is auto om and the goal is all this intermitting is to make sure these two chat items ready for the working of last call so probably we need to resolve all the open issue on the menu list if any new issue raised in"
  },
  {
    "startTime": "00:06:01",
    "text": "this meeting will also resolve and then we also we plan to schedule the working group last call uh we need to discuss whether we should you know run in in parallel or in sequential and after that actually we are looking for the document shipherder for anyone volunteer um please let the chairs now send an email to us um so the this is a working status update actually uh we already make several you know each other the reason every child actually take took place in November November 2021 and the charter uh actually focused on auto om HTTP 2 and lgb3 and also Auto om young and auto deployment update for the last one Auto diploma update it could be documented in the individual chart or document in a Wiki page actually with you know uh choose the later one actually and and we made a lot of progressions return actually we have four ITA meeting with three hexon and focus on China item especially to uh you know China item Auto new transport and auto om and also we actually have a hexel actually trying to you know uh Target to this Auto development build you know later foundation for for the future work so we actually initiate One open source project and uh this uh you know Implement Auto base protocols and also we have you know promoted some new auto deployment and one actually is integrated Auto into sir and user the second one actually is integrate Auto into teleport considian Network"
  },
  {
    "startTime": "00:08:02",
    "text": "and and also we actually socialize Auto in many working group in ITF actually uh Lewis actually from telephotica and you know present the uh telefonica City and networker integration with Auto in uh media Ops working group and also we made some tutorial and presented the auto introduction in obviously WG working group and also we actually work on the publishing or the introduction in the Internet Protocol Journal this is working in progress so for the future meeting plan actually we request the one hour uh time slot for the for the auto way plan to use this time you know to conclude the uh uh the working Google last call for to China item also we will use this time to introduce Auto deployment update which is a diploma that will relate to some new use cases the the one is related to multi-domain setting the other one is the network computing exposure work update uh any comments uh seems no actually let's uh move to the the first chat item Auto new transporter so Richard you want to present this update yeah okay so can you start my slides please okay"
  },
  {
    "startTime": "00:10:01",
    "text": "okay great thank you so my goal is to give an update on the transport uh update you can notice for people who are not follow the intermediate changes between ietf 115 and now is we change the name of the service as well as now it's called transport information publication service or tips very easy to I guess easily to pronounce and remember so therefore this really is called Auto tips next slides please okay here's the outline and what we're going to talk about battle where this really is a very very good effort with a lot of work from Kai from Lachlan and from Roland so therefore this really is a team effort to really present the effort and here the goal is the first review and recap what we have talked about before because it turns out that there are a lot of reviews and we also want to summarize the changes and so on you can see that we really did a lot of work so we want to first start by reviewing the uh reviews and also the intention of the whole document and in particular we're going to talk about two main issues or major confusions and which we risk and then we're going to go over actually how design very very carefully and today to get feedback from the whole working group because now the design is almost complete now and we're very happy it won't go over a little bit slowly with whole working group and of course people can also read a little diff between the current version and previous version but we prefer that to give you a complete picture so therefore we're going to go over the almost all the design points to really get feedback and so on and then we'll just use a very simple slide to talk about the document status and then we're going to talk about one essentially one essential remaining issue and we want to the working group to give us feedback and then we will talk about how we plan for the next step"
  },
  {
    "startTime": "00:12:00",
    "text": "next slide please okay so first let's really talk about how what motivates the changes of the document and still uh the four excellent early HTTP ad reviews are still incredibly useful and the reviews by Martin Thompson and Spencer Dawkins and Mark knocking him and also our ad marketing Duke they're also wonderful wonderful reviews and both in terms of in terms of post on the mailing list and also in terms of you know the meeting and also in person feedback there are still a wonderful wonderful review we're still trying to address all the reviews and so on because they gave a lot of guidance and also we want to mention that we do gather two or four excellent post a 150 ipf 115 reviews one is very very detailed very thoroughly very careful review by Adrian pharaoh and of course also feedback from him on a million so therefore you can see that his review will be reflected in the document then we'll also have review from Lewis and majority and of course Ting they also give very detailed reviews give out they ask all all the questions you can see that we have a summary about what issues we have addressed and what issues are we have not fully addressed before this document so therefore those would be the sources of the multi motivation for the reviews of course we do have the wonderful working group weekly meeting so people give us feedback and but that's slightly more informal okay next slides please okay so let's first recap uh what is the purpose of Auto new transport the main focus of the whole work is the ability to support a common use case which is that you have Auto server here on the left hand side and you have an auto client on the right hand side so the auto server is sending information uh to Auto collect about Network information it can be cost mapped it can be Network map and it can be input"
  },
  {
    "startTime": "00:14:01",
    "text": "properties for example what's the connection property of a client a common use case is that the uh server would send a sequence of the updates or versions of information to a client basically you can from here is essentially first it serves an emotion one and then we'll send a version two which is small data and then we'll send a version three for example one more data so a very concrete use case for example with certain use case the certain use case essentially is the following uh you're gonna have a you know extreme case will be 600 by 600 RCS remote Soldier unit they are the servers which hosting a large amount of certain data and we are doing for example for usual integration or we're doing for example FTS integration so therefore we want to know the cost map from every peer or source to destination so therefore we're going to have total of 360 000 uh pairs a matrix size to send the information around from a server to the cloud for example the server but I know what's the cost so therefore can do the selections and so on once in a while and there'll be some can measurements the measurement comes in we identify for example from Silver one to Decision One or the cost will have some change we're not going to have a major changes among all the 360 000 uh pairs only a small number for example and a few entries are changed so therefore you can imagine resource version one is the initial cost map very big and 360 000 entries and then you update a few smaller entries therefore you get small data and then after a while you get some small changes you get a data and so you continue to push the information from server to the client so that's a common use case and actually driving our deployment so how to support this use case there are two cases and one of course is auto"
  },
  {
    "startTime": "00:16:00",
    "text": "SSE which is defined by this working group it's defining RFC 88 and 5. so this one is a purely silver Porsche only approach it's based on HTTP 1.1.x and it's not a bad protocol at all but essentially the major problem of course there are two problems number one problem is that it needs a separate control connection from the server to the client essentially it's based on HTTP 1.x and therefore to avoid blocking so therefore you must have separate connection to set up the data from the server to the client manager which one subscribed and so on so therefore Union separate control connection which oftentimes needs more like firewall connections and those type of issues then also because of this HTTP 1.x so therefore you must serialize all the information and so if you have two updates for example suppose you are monitoring uh multiple information and in the same connection they would compete so therefore you cannot have concurrency of multiple monitorings so therefore there will be potential issues we can still use RP 7285 which is our base protocol and but this one of course also has its it is Prime and its main problem is Clan pool only and it's only possible to make a simple extension we can make possible extensions to really allow increment remember here from an example if you want to send a version two with a small data you can make it a chain for example you can specify attack and then you can send a tag from the when a client is pulling for the next version canceling attack and then the server can can send in the incremental changes so therefore that's really possible but then incremental changes would be not cachable and because they are not really identified attack but tag really is not part of URI so therefore very hard we like reuse the content very hard to really use some kind of front-end really catch all the changes if you have multiple clients for example trying to get information there's no not possible doing silver approach so so therefore those are the issues that we want to"
  },
  {
    "startTime": "00:18:01",
    "text": "address next slides please the design go let's summarize everyone everything clearly so probably all on the same page is to provide a transport design for auto to support efficient incremental updates to allow either Clan pool or HTTP two of three version native server push so a single transport protocol and you can do a very efficient parallel incremental updates and each individual income update must be named because if you want to support for example HP 203 native server push you really need to have a get a resource right hp2 for example the server approach push promise essentially is a get resource and you gave the header so therefore essentially you need a name resources that's actually is a very nice property we want to have that's the basic requirement the intention is very simple and this new design is not intended to replace rc7285 which is still good for simple requests and simple replies if you don't have a incremental use cases you only require something we still of course think RFC 70 to 85 based protocol is what's that and there would be a good protocol but this one should be able to maybe replace RFC 88.95 but that's essentially the decision of the working group do we want to deprecate a RC's RFC 8895 or we keep it because this one would work out so very well for HTTP 1.x and so on but potentially is we want this neurotransport to support giving use case important use case and have a function of both RPS 7285 and also 88.95 next slice please so now let's go over the design review and uh oh I think I'm still missing the slides okay and I we're so this is another version which I I sell uh let me"
  },
  {
    "startTime": "00:20:01",
    "text": "just summarize what I was intending to see because we're missing one slides here the we we got excellent reviews from four additional new reviews and the main issues we identified after all the reviews and in other questions will be falling number one is uh the system will have all kinds of resources in a system so a very common question and I think I received by a couple of times is what exactly is the view what exactly is incremental uh uh for different client will get information so therefore that's question number one which we're going to address that's why and second question uh essentially is about the link so what exact exact thing is link and how exactly really is attack so what exactly really data is a name so those are the most important questions or either question we did not answer in uh we found out from the reviews we try to address those reviews and now to address those reviews it turns out that we need to change the data model a little bit so that's why and now and we're going to give you a major design summary so therefore to introduce all the concept and so therefore that's why we started with basic concepts I want to you know refresh and uh you know update the slide you can you know introduce oh it's okay it's okay now I'm down my last life it's fully okay uh yeah actually we already got it in uh updated slide let me check out thank you so much yeah you can jump to slide six please is this this one yep oh no next Okay no Okay next slice uh still missing but anyway I think that's my fault and uh must be missing somewhere so I've got I did a motive motivated issues now let's just go to the main basic account section please next slide okay so the main thing now for the overall"
  },
  {
    "startTime": "00:22:01",
    "text": "system design is the falling is that we want to really support incremental updates so therefore the basic data mode of our neural output transport is incremental transfer over representation right so the traditional design of HTTP is called restful API is representational say the transfer protocol and here for ours is actually very similar but somehow is incremental so what does it mean and the mean is the phone if you look at the left hand side that's the basic resource a base HTTP resource and traditionally of course you are doing the state transfer of the resource from the server to the client or from a client color server and here in our design we consider actually each resource will be represented by as by a sequence of increment updates so therefore the transfer is no longer State transfer it's increment app dates representation state of transfer so you can think about this design actually it's a generalization of a basic protocol the basic model of GDP so what exactly is the representation now of resource now inside the Eva HTTP of course potentially this work can be generalized and to be presented even as extension of HTTP itself but right now of course we're only focusing in the context of Auto but this one comes out actually quite a generic we are very happy about it and we'll talk to Mark and nothing had to talk about potential uh generalized version but this is only for auto contacts so what exactly is a resource for example anywhere page or any resource of course here in the context of Auto is essentially is a cost map or network map or for example import cost service and or for example property or enter the private service and so on so how to represented conceptually if you have increment updates then the resource can be represented using essentially such a graph okay so it's a very simple incremental"
  },
  {
    "startTime": "00:24:01",
    "text": "transfer graph and if you look at this one and node is a version so if you look over here every node represents one version of the data because data changes right and a lot of data wiper Pages cost map changes so if we want to change you have a version of it and the version here will be from version 0 101 102 and so on so here is each attack each version can be identified by attack and hack identifies the version of of this particular basic the basic resource I know what happens actually you know overall system is the transfer in the system and inside for example for auto of course overall for GDP and transfer data accurate is Edge and Edge of the transfer data and the basically means is Edge from version I to version J is the operation and the data basically means operation can be the full replacement and then the data will be a full replacement or the operation can be for example multi-patch and a data will be data and it can be Json patch and of course is operational existing patched data will be the data to support the operation and so on so therefore essentially this ad will bring the version from one version to another version and it's very important to notice that for this data model I know the content is passing dependent for example look at the content 105 node 105 which is on the uh second last note you can really go to from by the way node zero representation at the beginning of a universe for example is emptin empty version basically beginning of this particular resource zero means it's empty and you can go to this particular version in multiple ways for example go from 0 to 105. and you can go full replacement go from zero for example 103 and full replacement and then you have increment update from for example from 103 124 and 105 and eventually the latest version you can go to wow six so that's basically how data will be"
  },
  {
    "startTime": "00:26:01",
    "text": "represented and how they can be really transferred for example let's go back to the auto uh contact let's understand why this is Meaningful so imagine a cosmetic cosmetic model for for this certain deployment 360 versions uh 360 000 of entries and so on so that's basically the cost map so therefore what happens in the deployment is very simple is initially it's empty and then we compute the version of the Holocaust map and then you went very quickly for example we query a bdp looking Galaxy server we get a new new cost for some peers we upload those guys we get a new version a data and so on we continue and we pull another server PDP server or we put another example uh uh uh for example a query for example using gradient graph and so on we get another for example data we update some some other costs we continue to produce all kind of data and then once in a while in the background and we have the auto server in the deployment with a computer snapshot for example initially we have snapshot or 101 we compute snapshot of 103 and once in a while we compute snapshot of 105. so those Snapchat will be made available to give to the clients and for different clients they might want to acquire different ones for example if a client initial will have a 101 version 101 and then one two one three one four one five one six can be all very small changes another clients very happy to get for example 101 get all the small darkers because they're only genius small number of entries then you get a new client for example also trying to do another for example for FTS or Russia would have 14 instances you get a second version get started and reboot it and so on they get started they might want to fetch a new snapshot for example starting from version one or five so therefore the get snapshot over there they continue to get all the updates to really maintain the latest version of custom app so therefore that's really a representation of the data of a data model next slide please"
  },
  {
    "startTime": "00:28:00",
    "text": "so here if you have a data model and now the transfer model in a system design transport protocol is now quite simple it's a transfer is incremental RBA transfers so basically it's very simple it's now every you know every link every Edge on the graph is labeled and label clearly label is from initial version to the targeted version representing what the data really it is for example from zero to one one it would have it would be as an ID of 0-1 of course later we'll talk about the exact grammar next one is uh 101 to 102. it doesn't representing the transfer of data which is which data you want to fetch from the server and then if you patch you forget the data and then you apply the operation of the data and you get the next version eventually you get to the latest version you may not need to get a related version oftentimes for example cost map really doesn't have to be like a latest version at all and you have a reasonable snapshot consistent snapshot you can do all kinds of uh selections and planning already but somehow should be consistent that's why you should get a data in a consistent way so therefore the overall transfer now can be modeled by the following a model on the right hand side step one always is map based resource ID in increment to increment to transfer representation IDs based model right for example a cost map for this particular class map and then what that transfers is one zero to 101 and 1 1 to 102 this should be really mapped into the system that's over system designed to go and then we have the mapping now actually transfer as protocol is quite simple to design and one is you can use a client pool like client can pull continuous for example suppose I'm a client I already have version 103 I want to put 103 to 104 and then one four to one five one five to 106 continue to push me into more updated version and then you can also use server approach now the server push would have all IDs and all IDs and the server for example said oh the client has 103 I'm going to push you 103 to 104 username"
  },
  {
    "startTime": "00:30:00",
    "text": "and I'm going to push you 140.5 and then I'm going to push you 105 tomorrow 6 and so on and if for example there's a reboot the server can put you from zero to 105 and then one five to round six so the server can pick the right one to push it to the client continuously so either way can work they can even work in a mix but the overall that's workflow map the base resource ID into the Audi like updates and then client can pull and server can push to have coherent architecture and framework next slide please so given this one and there are one design issue which I think also raise up email review is through the mapping from the base protocol until the increment update to be persistent resource or somehow to be procession persistent basically means the defaulting you get a base ID based resource on the left hand side and you get all the increment increment to update the resources should this one be always available and always around and so on and therefore anyone can create it at any time so become Universal which would have all kinds of nice properties but then you also have issue that access control and so on so therefore eventual decision is make a procession test basically means whenever a client wants to get increment updates I need to open it when you open it and you are able to see this graph and then you can fetch it so therefore it decided to provide A View to a client and when a session is closed the view is removed of course doesn't mean for example this graph This Server will remove for example the servers the server server our Auto server or for example the overall server might maintenance all the time but you may not really uh for example always deleted when client opens for example your controller comes in open it you can see The View when they close this will disappear that's what I mean it's graphic deleted and very likely the server should just maintenance one but maintain locally but we want to make this one to be such a bit simplify the design later we can talk about processing design but that's a different"
  },
  {
    "startTime": "00:32:00",
    "text": "design next slides please Cuban is one now here's overall particle structure the protocol structure is the following and initially the client want to get into about resource for example a central incremental transfer of resources uh conductors increment resources or inventory transfer so what happens is volume and essentially the client or the first really issue an incremental Gap is it an open and specify the base Resource One let's be proud to end right remember the session based the front end we'll do the mapping we'll tell the client okay what exactly is the mapping of all these resources this is why central to provide the information for the client to be able to really fetch the list of all equipment updates and also can get the data income updates so therefore we did the assuming that if you look at this fundamentally graph Aggregates directory and every single act is really the content so therefore you can open it and and increment update get it then actually you get this whole graph directory and then you can patch the data or you can get information you can directly to proceed next one another client of course can also do the in the same session can have an incremental for example uh uh open our base resource too and then we'll gather this in essential basic information and then the client would be able to start really uh fetch information as well so the server basically if you look at it server basically provides three types of resources R1 which is front in and open and R2 resource type 2 is a directory and metadata and three R3 which is real data basically edges of all the data so that's really the high level structure or what was designed next slide piece so given its design and now one design decision I think that's also one review questions and is exactly how the three types of resources should be really deployed into the system and if you really want the maximum flexibility and"
  },
  {
    "startTime": "00:34:02",
    "text": "what you can do is you put all three resources either three different Uris and you can have the most flexibility so therefore that's a certain color design flexible in the middle then you can also have the design which is all three type of resources should be either a single server so therefore you open you use the same URI you open it and then you can get a directory you can fetch directory in the same connection at the same server and you can do the same connection each TCP or quick whatever connection and then you can get all the data and so on so that's the design single then of course you can also have a compromise where the directory and the data we put into the same same location and front end can be at different locations and so on so therefore quite a lot of interesting design points and in particular the more you want to separate for example you really can for example when a directory can point in every data at different locations you can achieve quite quite a high level of flexibility income load balancing but also of course I had a complexity income session management So eventually the decision for this current document is we proceed with a single design meaning all three types of resources front-end directory and also data we collocated into a single server to simplify the session management and later versions can can externally design but right now that's the main design therefore hopefully answer the question from a couple videos next slide please okay so given this one now exactly given that all information will be essentially at the same uh server and how exactly now this information right essential information your fetching is directory so therefore the client can pull or also the data which we essentially add labeling our edges so exactly how do we label all these information in a very simple coherent way make it as simple as easy to understand possible so your virtual decision is use some kind of directory structure so imagine mapping code Uris so when a client opens the the incremental transfers and the server"
  },
  {
    "startTime": "00:36:01",
    "text": "will return a type what we call tips new root right it's a root imagine it's a directory and this one we separate into a subdirectory of folders if you like uh here's the first one is I'll be the cube obvious Cube second one will push so therefore all kinds of Transport State Etc can be put into the same directory and organizing a directory structure therefore you very easy to map into a UI inside each for example a RPS Cube and essentially is using some kind of adjacency list of data structure or directory structure for example and the first version always be for example the top level will be also the base starting version number for example if you always start from zero and you can also be have 101 1021314105 because essentially remember all these obvious essentially is from one version to go to the second version of patch so therefore if you have zero and you can go to 101 full replacement from zero to one three from zero to 105. so basically is updates q and from version 0 go to 101 so therefore if you fetch the content of 0 101 you get a 411 content you go zero one five you get essentially the 105 version content you can also have very small data typical case from 101 to 102 that essential to give you a patch very easy to really understand the structure how data has to maintained varies to maps for various for people to remember and so on so now actual location is very simple if you think about a implementation and of course we don't talk about implementation but support you want to implementation you get all the updates or income updates how you store it is very easy and you can of course you can store it into a file system and install it in this given way and whenever request easily using a front-end just reply very easy to implement of course this one can be also virtual but that's less implementation but we want implementing to be easy sort of basically every UI become is if you look at right hand side is tapes view root slash uq slash I slash UK version I version J and then client who"
  },
  {
    "startTime": "00:38:02",
    "text": "is very easy is the get tapes will root slash uq for example 0 105 you'll fetch essential lab content and uq105106 you can get other one and silver push also very easy you can just use a URI everything is the name you know equipment way the mapping from base URI into this one is very simple very clean very consistent so therefore that's what it really is okay next slide please given all the basic concept now we can go over the protocol design as soon as uh quickly now and please go next slide we got a Jody in the queue 30. go ahead just a question so who decides what the graph looks like like those connections um you know you have from 0 to 105 for instance um is this decided by by the server side by the server good question request so totally designed by the server the server decides what's available and so on and we do have a little bit consistency requirement about what this view should be but overall what the incremental transfers available for base resource is determined by the server but it should maintain some kind of consistency which we'll talk about shortly very good question and are there any trade-offs in that decision like what what based on what why would you decide to connect zero with 103 or 105 and not 104 is is there some some guidance on on the trade-offs of One Versus the other or that's a good question too and uh this moment of course this we consider this one as implementation right and uh you can imagine the typical implementation is the following for example uh in a lot of digital systems what you do is for a large resources for example a lot of cost map and you probably get increment updates very quickly for example if I'm a server for the auto server uh implemented for"
  },
  {
    "startTime": "00:40:00",
    "text": "certain or large ones I for example push uh pool for example the b2p Looking Glass server from one project entry and I will get a new entry and my server is very busy I don't I mean I even process it for example I would just put it as in I would compute the incremental cost for this relevant cost I put it as patch myself I even don't compute a full cost map myself I'm Auto server I put it there but once in a while I might have separate thread when it's available I compute a full or snapshot to update the whole map so therefore I would do it so therefore basically depends on the computational capability and so on and and we don't specify the full details but we do have some requirement for example but that overall the short answer is uh we don't have very strong guidance but depends on implementations but we can probably yeah there seems to be a notion of granularity that the graph gives gives uh the operator a way to to tune the ground polarity so for instance if a client is interested in getting the like a fine-grained granularity on other Snapchats say each of an object is like an update every second uh then you would get the the whole sequence but then another client might be interested in just getting One Direction every minute so then you would be jumping out like from one on to another and skipping the other nodes so um so that could drive maybe the way to design this this graph from from a server standpoint like like you wanted to get an ID every every 10 seconds and then you would skip like 10 notes and jump the next one or something right right so there are other good comments right so there are a lot of flexibilities and all kind of trade-offs but right now we're finalizing essential and the basic mechanism but this is one one more one more question then are you do you allow like uh the errors here only go from zero to the other nodes do you allowed an arrow that will go say from 103 to 106 for instance that's"
  },
  {
    "startTime": "00:42:01",
    "text": "actually excellent excellent question and right now I believe that most of the opponent cases and would be either for example full Snapshot from what we do and also we incremental updates basically from a small change from one version to another version that's why you see only two types from zero to a version number or essential from i n to n plus one and eventually we might imagine there may be some capabilities or really jump from one word to another version to provide capabilities to help with for example clients but right now the deployment is uh the setting can be flexible but it currently we're focusing on the case will be essentially uh only two types but very very good actually that really drives a lot of design decisions about why this representation is generic okay good it comes wonderful thank you so much okay so uh can you go to protocol design yeah next slide please okay so the protocol actually essentially now is relatively easy I'll explain to us to specify it really consists of four components one is the information resource directory announcer if you provide such a mapping from a base protocol basic resource to a set of increment transfers and you can announce it using the auto design the second piece is you need to open it and you need to close it so therefore we don't want to serve it to be too busy and for Pusher server push and to really maintain a view so therefore we do have open closed mechanism sorry for the second component and when you open you get the mapping to the directory and the client can really try to really manage and read or manage actually the directory amount of data in Professor approach so therefore the third component is metadata and directory access last one of course really raw data transfer and really get that all the incremental changes and get all the data server for that first component we're going to go over one and HP is a one by one and to give you a complete picture of final design next"
  },
  {
    "startTime": "00:44:02",
    "text": "slide please it's ird should we now be pretty familiar for people who are familiar with auto but we don't we do want to go over a little bit what structure looks like so paste it here is announced in an information resource directory if you provide such a service for example here is update my cost tips and only upper right corner and therefore and here is your announce you're going to provide it and so if why you can realize this one it provides such a service because the media type is Oracle text Json so that's really a media type and of course you specify the uses you you see hey for which Auto resources you're going to provide such a service here the example is you provide for example this for services basically users indicate about this and of course and you also have capabilities and One requirement for the protocol is we must provide capability of negotiation or selections so here the server can indicate that hey I really want I can provide the following capabilities and first capability is incremental change media types because you can encode for the address right and in different types here you must indicate for each resource ID what type of incremental changes you might be able to provide by the server they might we can server choose it for example if you look at the example in the middle after the capabilities for example my network map and you can support Json patch and for my working class map I support the merge patch for example you can you can enumerate all the resources what incremental updates you added essential types can appear you can really enumerate it then you can also specify that device support for example server push or not and you can indicate two and by default of course it's a false so therefore indicate the capabilities of doing this kind of using this like a data model next slide please so let's ird and then you open and open is also very simple click basically it's really open"
  },
  {
    "startTime": "00:46:01",
    "text": "of course we are following all the rest for API there's no concept called open essentially you're creating a concept open really is creating a state so therefore you must clearly use a post as a method so therefore paste it your usern post and with the body and the body is specified on the tips request on your lifepen site so essentially with potential included for fuse one is resource ID which resources are interested and the next one will be input for example for some like resources you might have an input that's the third one you for example if a custom map you do a filtered cost map you can specify the input and then for every resource you you have a client already has a version of the resource and remember you have a tag remember every version would have tag you can indicate which tag you have so therefore a server can really get started into the right version with it and then also here if you can write an eventual decision is really simplified effort a little bit we decided to provide produce a single document so therefore you can also indicate U1 server push and if not if you if you do server approach can also be getting started and of course later you can also modify but here is in open you can indicate by itself so right hand side essential is an example right and impose tapes the cars and then you specify resource ID is my login cost map and you're done with it so here there's a small issue and RC 88 at 95 special attacks only for get resources only but little version can do for both resource and also input so therefore for this document we allow for both tag for both essential get resources and also post resources for example filtered cost map search for that's overall design when you open you get this you want to start this uh get it increment transfer next slide please so here's the response and response is on the left hand side so you can see that response essentially defines uh two attributes and the first one is transport State view root remember and you put it at the location as essentially the root directory uh where"
  },
  {
    "startTime": "00:48:00",
    "text": "it is and then we'll give you a summary C summary and we can we we thought about we don't gave State summary at all but we want to simplify the workflow we don't want to client now issue the second query we want to send a summary given Universal request so therefore that's essentially it's a way to reduce one round of time and it potentially can have a very streamline our client mode so what exactly transports is summary include so right now it includes two types of summary if you look at the second object and one is up the Q summary and one's push update summary if it requires approach updates so what is the object Q summary essentially include two things so what start secret number and what's the end second number currently the server will provide the queue right provide essentially the data and what's the first version number what's the last version number and then the server can return to the client the client can already use remember if you know secret number you can construct accurate request already and then you have the server push summary essentially what's a state uh server push it's true or false and then what's the next number that is at the bottom of left column so that's the summary and that's response the right hand side gives you a very simple example so you they will tell you the root is tips give some concession number must be unique within the single session and then give us a summary for example starting number is 101 and it's a signal number 106 following our example so therefore that's essentially what really works here the requirement is the view must be an absolute directory after the server so now everything all the other uis will be constructed in in this way of course in later if there's an extension and the root can be a different server then you really should give absolute UI include for example the server and the name server server port number at different server but for now we're happy to go to a local absolute UI next slide space here is Clan view a initial response and client can indicate attack for this resource and if the server identifies a"
  },
  {
    "startTime": "00:50:01",
    "text": "matching node ID for this given tag and server can return starsequent number to equal that one otherwise we do recommend I think that's one question asked by Jody and so on and is that initial view is last snapshot for example 105 in that critical example and of course that's only recommended and the server can really return anything that possible of course they must give a consistent path which we'll talk about shortly and severeign state online server push so the server basically help you to pick initial good starting point really to get you all increment updates but really it's only recommended and the easy one just gave you your first second number but if you have something we can streamline a little bit do some optimization which we'll talk about shortly next slide please so let's let's open and now you can also close close is very simple and if the client will say delete and give this root ID this whole state or would delete it from The View a client can no longer see the view and all push updates and all stuff essentially oh which will be stopped essentially analysis is a transport tips session is over sort of is over and also of course you can close the connection we always imagine this open is embedded into a connection that's all we're defining the product context you know TCP and or for example quick we all Define a concept of connection if you close the connection overall and essential equivalent you have your iterator go through every single open uh view they all be iteratively recursive will be deleted as well so for all the sessions will be cleared to really reduce the state state maintenance overhead at the server side so therefore let's tapes close next slide please that's basically open and close now let's take a look at how a client would would gather the directory and metadata in protocol that's second part of the protocol next slide please okay request is very simple and uh if a client wants to really get a a a what's the essential of the graph looks like"
  },
  {
    "startTime": "00:52:00",
    "text": "the client should say get and the transport say the view root and slash uq so basically using the total the Unix uh file system semantics essentially you just iterate over the file system and get all the information recursively and anyone which is not like a real file so therefore you get the whole information so therefore the definition essentially is specified on the lower left corner the first object is essential object directory and which is extension from response entity based from the auto-based protocol and each one actually is office map and update update map is defined as second object object map and from Star second number to end second number uh secret entry number update and any second number update is defined as a third object essential integral number to update a add the item matter and update meta actually is I think there's a formatting slightly different so you may not be able to see column included four or three entries it will be metadata type and uh media type and what type what type hack it is and also the size so therefore the size I think it's black over there I think we have different PowerPoint slides so right hand side is an example so you won't get on get the the directory they give you automatic information about essential because this one also changes the directory also changes all the time so therefore we give them we give a b tag as well and then what you can see is essential update map essential on Instagram zero as a secret number and go to 101 and you have the data and zero to one three data and so on zero one five so essentially it's very clear way of encoding and adjacent list and also actually makes it more detect very easy to deal with as you can see later next slide space you can also do a filter directory request there it becomes filter you must really give essentially the filter so here the filter is very simple is that and you give a post and of course on the"
  },
  {
    "startTime": "00:54:00",
    "text": "same directory but now you essentially Define the future the future of the attack so essentially you indicate which version you already have another system essential now is very simple it's going to start from that tag and instead of that node ID to really filter so therefore basically now you can use the merge pack for example suppose now you want to really do one and then you you want to say hey I have the version already and from the previous version of the directory now what I have changed support the server has deleted version of 101 and 102 add a new version of 107 I think you may not be Alum and so on so therefore you basically just get a mod patch for example right hand side is the compute version left hand side essentially is user mode basically zero to one deleted you would you you will get a zero one or one now and 0.7 is a new entry you get 0.7 your entry and so on so forth user mode pad can very quickly do an incremental push updates or even a directory itself so that's a coherent design that's called the future Direction request next slide please and someone uh uh Jordy ask and that also review asked about what's the consistency in terms of the server uh incremental data so we have a following environment of update data this is called Integrity number one is called continuity basically whenever the server maintains all the versions and support initial version the smallest version called NS the larger version is called NE and and then the server must maintain that all versions from NS to any you should not have any gap before consistency that's called continuity if you have you specify 101 106 you must have version 101 all with 106 to be serialized feasibility and a server must have maintained a direct link to NS you must have the version over there so therefore you can always directly go from zero to NS to make it always a feasible request from zero to NS to get started and also right shift only basically you should not go back to time so if a client requests and gets nsne at 10p and then request for"
  },
  {
    "startTime": "00:56:01",
    "text": "example at time T Prime which later time get NS Prime and any Prime then the version numbers and as Prime must be greater you could do NS and also any Prime must be good oh yeah and you basically your only right shifting you cannot really for example it's only go back get a new version but confuse the fetching long pool or prediction or to configure the server push okay next slide please so now that's the last item we're almost done so last item is individual updated item read how to read item next slide please yeah next slide so individual request now actually is very simple very clean and it's basically get URI and how to construct UI is very simple and it's taking the root directory right transporter CW root slash uq rpmq and slash I slash j i is initial secret number GA is in version number and then you just get the data for example right hand side over here give example of if you look at upper right corner is update q and in from version 0 to 101 island server just a central cable content here the silver must accept the media type of encoding for example here's Auto cost map and maybe other versions can be plugged with increment update using wordpad or whatever the client mass is accepted the client can know the potential types by reading the ird we already said next slide please we do have the following policies about individual update item request processing at the server and if possible that conducts proactive fetching or future updates right because remember we won't allow all kinds of parallel and long pool and take advantage of hb2 so therefore a potentially you requested version which are not not existing yet so therefore here is the recommended policies one is server processing a client book a central client would send a request of eye energy so if the ing already exists in the middle you can see"
  },
  {
    "startTime": "00:58:00",
    "text": "that first if condition you return content using encoding because you should have a content already we have this requirement and if I to Jade is not existing yet but somehow can be considered as prefetch for example from I to J is the latest version from for example from 106 to 107 and and there's a local policy the server set as acceptable prefetch example and we'll put requests into backlog queue with a potentially block over there eventually understandable requirement otherwise the server should return error it is recommended that the server always allow prefetch from Instagram numbered in second class one so therefore the client can always request slash Instagram number slide increasement plus one to allow prefetching over the content but that's the real policy for example of preferred client must indicated in set media type so you must be able to predict for example if you refreshing something it's not in the directory already and you must use ird to really include all the potential types otherwise it can be an error next slide please so here are the error conditions so we want to recommend the following error condition answer a lot of questions I think I'll ask it during our weekly meetings and also in the reviews so here are the potential four potential error cases to really indicate the client to be more informative one is for 10 gun if an update has secret number that's smaller than the Star Circle number let's go it will not never come back again so therefore the server wants to tell the clan is gone for 10. and a for the clan for example and a requested type but that's the indicator correct meter type because somehow in the predictable media type is protective system and immediate type is not right and the server can get a free thing to tell like media type not supported and even perfect window is exceeded for example you any signal number plus 10 that's not a second number and a server can really tell the client can really return error inside blocking said okay too early you see the perfect Amendment window you return 425. and then also if we want to really don't allow too much prefetching and to really"
  },
  {
    "startTime": "01:00:00",
    "text": "uh to cause all overhead and and backlog Queue at the server and server essential that has a local policy which is kind of operational discussions is if a number of opinion request is too many and it should return for 29 too many requests so therefore those are the error conditions so therefore those things can handle make it as as current as possible next slide please okay finally it's a real push and then we're done with it with all the components so push please next place Surplus now actually also a question is simple to implement when client user tips there is uh whose ID indicates server support server push and then the client can managers push state so initially it's very simple and when you create initial State and if the server says server push in the open right post command and you can start they put you know server port at start of course you can also change the push state in the middle of the whole session so therefore one is you can really essentially use all the put all the reservoir API because remember that's the future directory you can put and change the value and so on you can for example you can put and transport the state view root slash push and you can see super push 2 then that will start server push and if you put for example the the the same URI and you have server portal false essentially stop right it's centered report basically you overwrite the value into the client into the server and you can you can control the state you can realize the push data basically is you can get in the push and then Etc of the server will return the directory and the purchase the subdirectory would have a server push and the two for example will tell an X6 number next number is when this next example let's talk about what push if it's ready already so that's essential give a little bit information about what's going on next slide please so the only thing here slider complexity is when a server conducts push and the server must must select a push path remember the incremental data accurate"
  },
  {
    "startTime": "01:02:01",
    "text": "is a graph right from I to J you know from 0 to 101 and 1 1 to power two zero to one three and so on so exactly how to really pick a push a path right essentially on the server is selecting path a path on a graph to push it on the client objective of the server is to push the latest version to the client using the lowest cost cost defined as sum of sizes of all edit right is if you pick for example a path on a graph essentially you're pushing a given amount of data so therefore right now the recommended goal is pick a password which minimizes the sum of the sizes of edges to go from the client current state to the latest version so therefore recommendation algorithm at server is a following algorithm is compute the purchase path using the following algorithm upon each event Computing approach whenever server one push the decline what they do so you first compute initial uh the the current the current current version and and see so what's NC is currently working on the clan already has so initialization if request has attacked and the the version number is what the client has already able calendar doesn't have any version of course the initial version is NC equal to zero so you know what the kind of working current version is and otherwise if it is England made of not initial and you are really for example pushed into the card because you're doing a push past selection all the time and that's essentially uh the uh end state right so therefore it's a push so therefore what you do is from another kernel version you compute the shortest path from current version to link to the version so let's pass from NC N1 N2 all the way to the latest version next signal will be equal to M1 and on the shortest path right because NC NY next one and so on therefore the server just using push promise and so on push okay the URI is current prostate review root under q and C two and one and it can be zero initially and one for example can be one or can be one on five or can be one five one or six so whatever server portion to pick they push past selection"
  },
  {
    "startTime": "01:04:00",
    "text": "okay next slide there's one more complexities and about the push if you are pushing across multiple resources for example you have a network map you also will have the custom app and they have dependencies and they have different graphics and so on so therefore if it really is a client pull controversy what's dependency and so on so for client Community pull the data in a given order you want to pull for example the corresponding Network map before you pull the custom map but the client can always decide but the the silver one of course is relatively simple server essentially is trying to really compute actually the deck right you really want to have the compiling order you approach always you're going to give an order to make sure they always correct so therefore that's basically what client uh pull uh push really looks like basically follow the dependencies and push updates all the sending order of the dependence tag and so on so that's overall uh there are a lot of details in the document and when you're going to want to clarify next slide please okay and now let's summar document status actually it's very simple standards next slide please so those information you should reflect the design offline in the design summary and which will just go over for throughout the day and uh that's basically the design of course the document there's like a small typosphere there we're trying to really like update everything as clean as possible within this week so therefore that's really the document status but a slight exercise more complete because we did modify some a few things later uh in the last couple days we were not fully reflected in in later document at least now you know for the uploaded version but that's overall the document status next size please remaining steps they're essentially multiple issues and that we are talking about would be the following and I think this"
  },
  {
    "startTime": "01:06:00",
    "text": "slide is also in complete oh I did okay so and uh okay do you wanna change slide where you can re-upload yeah maybe this one I do needless okay let me let's try it the latest version of slide 35. yeah this is my I I I mess up the last slides sorry then go to 35 because we do want to go over that one yeah certified oh I think this is not a little bit slice no yeah I think somehow maybe I'll send you a wrong version okay okay and uh so the main remaining issue here is the phone number that's actually a bit hard to talk about but I can why don't you show me the last slide so therefore I can use the word to describe a little bit uh which one uh yeah so overall we're pretty happy with oh no in the previous slides the summary yeah overall we're pretty happy with overall design and the only thing we are there's some discussions I think overall I think the question as well is basically discuss about potential co-location of all three entities front end right front end to handle the open right and the directory metadata right so that's the second piece and the real edges with real data so right now the current document and current design the co-location of all three services all three resources into a single location we want a 3DS car to be this one the major issue about this one is it will not allow fine green load balancing what does it mean imagine a property and for example some"
  },
  {
    "startTime": "01:08:03",
    "text": "kind of like for example eventually supposed to go to wireless and so on and you won't really factually end up on a property of giving client for example connection status okay so therefore for different client IP address and would have different properties so therefore the stream would be different okay so therefore this one is only known when you have request parameter which for example is a client IP address I want to know this particular any point I want to see all the properties I want to server tell me what the connection status connected and not connected and so on for example if I continue to push about this one then currently for example we are not going to know about this information so therefore we cannot know Finding green load balancing because go to the front to end and front end already would be a directory and updates and other data will be at a single server location so we cannot do find the green load balancing and so on so therefore the only remaining issues are two and one is separate front end from directory and the data we still do the directory and the data into a single server but put front end is essentially as a separate server so therefore now we return the transport State view route it can be absolute UI pointing you to for example at the location that's a very typical application the layer seven uh request shouting load balancing service design so for Less design number one so therefore that's potential can solve the issue that's why YouTube were discussing that's the only one I believe of course the second one is the fallen and which I think why should the design kind of can go through is the following is you allow front end to redirect so basically the client will send a post okay and password indicate for example the parameters and then the front end it will say hey redirect what means okay I got your request but I'm not going to give you uh uh the the state I'm going to tell you redirect to the other server which is closer to the kind of zone so therefore if we're okay"
  },
  {
    "startTime": "01:10:00",
    "text": "according to operational we can add a sentences you know option said okay for this one the client must be prepared to accept redirect to allow fine green applicant layer request routing so therefore that's the only remain issue we are not uh for the written up in the document otherwise we're happy and we're going to say the latest version you can see a little bit like a figure to show what it really design looks like but otherwise we're pretty happy about it so that's essentially only one and then we can discuss about a person's data versus and Pharaoh estate but overall we're pretty stuck with an inferior state but if we want people to discussed I will be happy we can add the discussion into the operational discussions about why it's beneficial but we're pretty happy about it and then we can also for example uh uh discuss about how to read the metadata right now decision is using slash uq return directly using essential all the Unix semantics right anything any node on a directory is file and a file can be directory but some people said maybe uq meta is better but right now we're we're stuck with uq but if people have some like a consistency in terms of semantics and we'll be more than happy to discuss but otherwise we're happy with it so I think that's all and we are planning to take a final pass by by this week and then submit everything to an all working group and we're pretty we really want to get this one down by this week uh ching and Matt I'm done so now we have five four minutes sorry took a while thank you for uh introduction actually you speak on this document actually I made this several revision actually we made a lot of you know change actually so I I think yeah we can you know uh we have some time to take a question uh if I I want to ask a question is there any other want to you know answer questions"
  },
  {
    "startTime": "01:12:01",
    "text": "yeah any question to me to Kai drawland Lachlan so we're all here it's a relatively complex right yeah yeah I actually compare previous version I think much better than previous emerging man magic clear actually I I think you know when you discuss this persistent State and ephemeral State I think this is related to the procession part right you yeah you prefer this possession part so the same same as the idea you want to have client to you know get access to some contents if these contents actually is very interesting maybe get a catched and it will nobody really you know want to get these kind of catch content actually this this session will be closed right right basically simplify the design make it a clean easy to manage that's why Emperor is easier yeah uh actually I suggest you you know maybe read some Bitcoin on the list for this one sure yeah confirmation sure yeah we did raise for example discussions on the data model incremental right so eventual I guess graphical API becomes I restful right incremental restful and I think we got the feedback from Adrian of course it will be more happy here from alapet back but actually this channel was really motivated question about what's linked and what's the tag so now we think now actually everything's very very well clarified so for the first body that you you you raise the question not a balance actually I'm a little bit scared actually you know there's a really neat really maybe more uh you know scalable maybe if you have some loader balancer solution so what what do you think how do you you know address is you want to leave this out of scope or you you think it is a should be solved"
  },
  {
    "startTime": "01:14:00",
    "text": "I think basically the following and uh so uh I think for the our current use case for the cost map use case the main deployment case the currently I think we're pretty happy that's why single server single uh session rather than a single server and all the three types of resources the front end open right and the management and the directory and also the real data and it's very well so load the balance is good enough If eventually we realize that we need them all and basically if you want the multiples of server to help you can use being that really return different IP addresses so that's everything is very good we're pretty happy about that but the only thing is but we don't have good use cases we don't believe that's really important it's a use case where you want to do application layer of Direction so for example the example I just mentioned right and uh would be uh you won't really monitor for example the the client connection status sort of a different clients should go to different servers and the approaching increment updates very quickly for the client and so on and then for example one Implement server push then that one really will be dependent on application layer seven one so that's why I talk about and there's some complexity but we think that's also acceptable right as long as a client will accept the the post redirect then that also can still send the client to write a server of course you can even use a fancier ones but that's probably too too messy and you can use for example the same name right so therefore uh the offensive ones would be we some operators eventually realize okay I really need large skill I want to really using a push update to read the deliver a standard to some like a clients and so on and it might be at different locations different access points and different focus on database and so on and you can use for example say name right the clan was sending the request name and then you look at the current IP address you look at the same name and it's like like how can I request your routing you can direct them to the right table server as well so"
  },
  {
    "startTime": "01:16:01",
    "text": "essentially single server single session wouldn't block these kind of optimizations and this kind of uh flexibilities but slightly record they need to really go uh essentially go uh leave the decision so that cannot be done inside the auto tips itself it has to be used a different mechanism it's not like for example that in so that's why we decided to really pick a simpler design for all code tips itself okay so any other questions yeah Richard so and um I know you plan to and Lackland new plan you guys plan to put a demo uh on the transport in the hackathon uh 116. I was wondering whether you're targeting including these latest capabilities and features in in particular the irest capability which would be interesting I think yeah yes and I think I I would ask people local and his main developer but my intention is yes it will and hopefully it's a complete a future Set uh it actually think about it actually is not a very hard to implement you think about it the whole Beauty about this one I can make this server to be very lightweight and make the Implement a bit simple traditional I could also serve is a harder to implement because why it also sorry you always need to give a snapshot so therefore what if I need to trade up Suddenly I got a lot of updates for example suddenly I got some typing around and therefore I got like PDP I actually make it harder to implement and now yep and so therefore this is either Implement so therefore I think a lot of time probably targeted implement the whole feature Matt you have a question yeah actually and I yeah I wonder if it's a gives us a chance to socialize this I rest idea uh yeah so I thought the hackathon could"
  },
  {
    "startTime": "01:18:02",
    "text": "be a good place also get input and get the running code uh providing input also uh kind of verification and also socializing the the design uh in a good form open forum and again running code yeah yeah so I think yeah definitely a very good idea socialize but probably we should wait on with for Lachlan to to answer lock and do you want to see a few words you want you want to go down go ahead yeah so I think we will of course we saw the whole team Raul and the kai as well we're going to implement the whole thing okay it's another hard to implement I I do it typically I I typically I do have a very reasonable sense about implementation this is easy to implement then actually The Standard Auto server okay so thank you for for your hard work I think so Rachel one question is that do you think this version is ready for working with us call yeah give us two or three days because there are a few things small things and the latest version I think Kai upload the version in version six is that really high not uploaded in the in the working group document and we want to take a few small edits is that right okay hello uh I think Lackland submitted version 6 to data tracker already and I uh uh prepared a version seven you know uh working group material GitHub repo and we are working on emergency and maybe after some editorial edits we probably can submit yeah so version 7 is really anyone who won't read about version 7 all the latest version that you're in the working group uh report not evenly uh you know ID directory by the way one like I said we're going"
  },
  {
    "startTime": "01:20:00",
    "text": "to take one more pass like England around two days we definitely want to post everything by say this this week so for people can you can issue a last call to get all the feedback because this already went through like 80 reviews so we'll address a lot of issues with you okay thank you so um if you can post the new version version 7 actually we chair can just decide to initiate the working last call yeah also met up to agree to support this document yeah okay cool thank you so let's uh move on to to the next one Auto om uh Json okay get it we cannot hear you hello yeah Jason we cannot hear you yeah"
  },
  {
    "startTime": "01:22:27",
    "text": " yeah his issue yeah anyone can you know take take care of this maybe Kai can you step up to present I think um I'm not very closely following up what just has prepared yeah but I think yeah hello Jason yes we can hear you now okay okay sorry sorry all right sorry I my microphone yeah so probably we need to you know speed up actually maybe 30 minutes sure no problem so uh as you can see so uh in the new version they they've had a new character uh this is a check on that so she made a lot of contributions uh in the previous uh working so it is the uh your father and"
  },
  {
    "startTime": "01:24:02",
    "text": "the yeah next slide please and yeah this is the summarize the current status uh let's see it is the latest version I uploaded a new uh version of the slides so maybe an enemy uh check okay is this this one uh no I think it's not the it is one I think this one is the zero one to just check the size um do you want to share about yourself uh"
  },
  {
    "startTime": "01:26:06",
    "text": "since this one here you can control by yourself okay I'm not sure if this is the latest one but yeah let's continue so the latest version actually is not the uh working zero three it is already out of the new versions actually uh which is the kind of you're working with the zero five under the make some updates to Across the comments we just received from 30 and 13 in this week and it is a kind of stator at so we have made some agreements for the open discussion today we made in the last item meeting so it's a three open issues to have the clothes why see how to handle the animating module so it is the element Technologies server design so uh because we use the identity to uh in in the in the face model not introduce any element in modules uh in this document and for the third server communication the only purpose of the equal domain uh server discovery and for the implementation strategy configuration uh how to Accuracy Auto data so it's not interested about this device model but how the auto data can be collected I'll be modeled so we will have this in the data source part in the data model"
  },
  {
    "startTime": "01:28:02",
    "text": "but we have the new open issue we have discussed in the mainly it's how to introduce the resource level Access Control and this is a also the requirement to admit so this is the current uh changes I made for the derivation today first we add the space model for the outer client side and it's called the resource level access control and the failure monitoring battery and have completed this created consideration for the Yamato and add more examples to uh how to extend the the new data models for the for some Plantation specific purpose so that will be also a very uh the main part we can discuss today so uh so before introduce the the other changes so we have let's introduce the reference models we actually want to see how they they can't see the models uh might be reference models for the class the auto Clan server architecture so I think this is this should be a very common architecture so the implementation may not be uh let's make it very different but this summarize the of the common component for the different countries and so if you consider dependabilities need to uh in the rearing station you need to have the the client and the in the server side and"
  },
  {
    "startTime": "01:30:01",
    "text": "uh you know have the several outstands for the purple the other barcode and it has a server level manager and the information resource manager the status of listeners to flag the data from the different data studies and has monitoring to get a different symmetrics from the server so the perfect component for this data model will be how to configure the Auto Glass side so that will be simple in the space model because we only consider the separate salary which is how to configure the given out of plan to discover let's say based Auto Service can access so multitude a configuration for the company extended by the future models but for this bit model this is a minimal requirement and the second part is about the server level uh the server level data models which will include the uh pop art so you need to configure the serverless pump s set up the uh the vertical latent tag how to contribute the HTTP and https dprs and TCP parameters to set up the server to provide the other workers no sound and the second part is to configure the server Discovery and in this case models of the several history only have the"
  },
  {
    "startTime": "01:32:01",
    "text": "only Define the model for the reverse bi space Authority coverage which is defined by the adhesive ADC uh it's a core domain server recovery so we do have some we do have some examples in the appendix tissue actually in the different applications they can have the different server Discovery mechanism uh so we can extend This Server recovery so something else to have had they different mechanisms and also uh it's just a right to configure the login system so how to so where to uh send it out to and the the last part about some metadata which will be used by the different information results and the other purpose let's say the cost patterns and matter other metadators of you in the artist and for the security configuration uh security configuration so it is already covered by the TRS parameters in the serverless content app so we don't have the as other parameters for for the security communication and they start part it I think it's most important for project data model which is how to do the information without operating and management so that will be separate to three parts so which is the first slide"
  },
  {
    "startTime": "01:34:01",
    "text": "is how to configure the data cells listeners and of course it doesn't listen apart so the space model only consider the common configuration for the data cells is in Earth because we have the source ID so it can be referenced by some other components like the information resource algorithm if I use this Delta ID to reference the data cells and to use the data like this from digital Association and does not path will as the most uh commented uh parameters is about the update policies because so have two policies uh for the data update so they a data listener can use the react remote to update the data I'll use the proactive mode so for the record mode activate so that it uses our proof so let's consider the status of the listener is a plan for the data software server and the data thought there will go just to put the data to the data translation they can't have the two different modes uh if you use the armcast on tune so the answer is means they push update will immediately put to the business oscillator what the data changes and it also can be the uh credit so that means you can configure a fit interval so every state into the data software posted data update to the"
  },
  {
    "startTime": "01:36:01",
    "text": "business application and for the proactive model actually the pro mode the the results later in the area given per interval that will then date for request to the uh data sound but for the specific implantation we still need to uh find some specific status of so that will be augmented to the source parameters charge so in the appendix I will show some examples in the concrete implementation so how to do this how to extend this basically the model for the for a real implementation so uh Jason go go back to the previous slide so uh if I want to use the bgbrs to connect the data and you know Fade Into the auto server so I need to extend the Source parameter with the additional attribute you need to introduce a new uh Source type so first you define the news outpat and then you augment the soft parameters yeah for the foreign so do you have any example in the appendix for example use bgps to connect the data you uh in the appendix the only other example for the young data store but yeah you if you think it's useful to become as another example so how to solve the pdpr apps yeah yeah"
  },
  {
    "startTime": "01:38:02",
    "text": "I think that the useful I think it's a useful yeah you probably need to consider that yes so we can have this example and uh the second part of this to configure the information results so for ATV publishing results uh we have the the common parameters for average uh every Infamous result you'll have the uh to come in parameters which is the accepted Row for the attack control the robust attack control which broadcast that is a camera result and a little depending uh information results and for the specific uh type of the information result uh so we have the HD Fund in the details plastic parameters we can have the arc the network methodology all kind of the human resource test we have defined in the data model but it only includes the standard so I think one issue here is that we need to consider if the new transport also is built up by as they are say so whether it can fit to this data model I think I think one issue maybe because I see the new transport also introduced some Dynamic results so"
  },
  {
    "startTime": "01:40:00",
    "text": "when you say just Dynamic results if they let the dynamic report can uh so how to handle this in this data models how that things that can be the tax for the future work so for this basic model uh for the how they existing uh information without seeing this can work right now and for it to wait information results uh scientific parameters like for the network map so it can have the algorithm parameters and this algorithm parameter will uh configure the weight algorithm can be used to generate this results and this can be augmented by the internet which is specific model extension so we also have the examples in the appendix to show how they change the Richer richer in the queue Richard you want to raise comments oh number one is comment about the new transport I don't think that's a dynamic and we're using the Gateway right so basic tips is the static resource where you can access or not so therefore I wouldn't worry too much about that part of dynamicity but I do have a question about the following about access control uh uh it's not falling for example let's say uh you want to uh let's say you have endpoint Property Service okay so for end upon service so therefore this is It's a single end upon"
  },
  {
    "startTime": "01:42:02",
    "text": "proper service it's a single service but then you're going to have a different entities which you can create for example basically user one user two user three user 4. and each user is not like for example the user can access this resource or not so basically I think very common I would imagine the extra control of the user one would be able to access its own and important property user 2 can access its own input property so therefore it's not like a user one can access the property or not it's user one can access the particularly yeah yeah I got it so so that's not just the for the resource level uh the weight uh with user can access this result that uh maybe we need to go to I mean we need to go one more level for example in the uncon properties The Entity it will be how specified for the queue based on the user kind of status is that Yeah so basically like for example the transport and you like all the auto SSE you specify the unit always is not only resource ID right also the input right there's input which is Select The View so the extra control somehow can be defined by the resource ID plus and the input right we Define SSC we defined just today we Define this transport which is defined by the resource plus the input I think that's one thing it's somehow missing right you're defining a resource level yeah not only resource ID but also somehow regular the key is not a resource ID the key access control key should be resource ID plus the input which we use as well in our transform"
  },
  {
    "startTime": "01:44:01",
    "text": "because all the states also be you know the graph also is key but on really it's resource ID plus the um the the parameters at least that would solve this case but this will be um so conceptual I think it's fun conceptually what Auto does or over on is low overall internet that is falling it's a resource it's not really a single level right essentially restful API really is resource somehow I think that's one thing essentially I guess the HP model is a bit weird you're gonna follow nonsense resource we always want to talk about resource resource and resource is unique identified resource uh it's a piece of resource but in real life oftentimes resource actually really is is really uh selected by a Select Market right so for example everyone goes to the same Amazon uh shocking card page but then there's a question mark and then there's parameters indicator which one which view you are selecting so that's actually the resource we're talking about yeah so so it means we we need to have the environment like the PID the and foreign entities inside the each information without issues are also be considered as the yeah the controllable result type plus resource ID plus the parameter I think that solves all of you and I decided I would think so uh I I don't worry about uh whether uh if this will be over designed"
  },
  {
    "startTime": "01:46:01",
    "text": "for the today's model uh one I actually remind people uh solution they they can move it to the configuration inside the information for example in the network map they can have some PID specific configurations and because for the PID the only inside the network map it can be meaningful so for the other even results you want to generate design right you are not going to design one only for PID right any point of problem service is based on a client IP Address given to all of for this stuff this is generic system right really conceptually is internet information really or each web information is really selected by the resource ID which is essentially the root UI plus all the parameters and parameter can be specified as the selected body right the query body either the I think also we don't Define anything in the get using question mark UI but we do allow posts to select filter cost map filter the things they do this all the time you you can pose on this weekend is called offline maybe it's if it's slowing down the process yes let's take to the list yeah yeah say how to resolve this yeah I think that sounds good so you only have five minutes yeah"
  },
  {
    "startTime": "01:48:03",
    "text": "yeah so the the top part for this uh it's the acceptance control yeah like the uh to get the talk about so so this is happening is that for the rate of level and it's a little bit of pest control so this part we only Define the uh too far so why say the H Auto server will Define the list of the authenticated plan and it gives the planned ID that can be referenced for the to identify a given other plan and their own authentication approach so yeah this is not the related slide but in the latest uh card injector they have some creative and authentication approach will it will reuse some uh authentication is already defined in the HTTP server parameters in the listening tab and for the role so if you go they'll Define the effect uh at least number of clients that will be exactly the given row so in the resource level you can use this flow to Define zero Business Health control so the last part is about the how to handle the monitoring so right now we have the two part of the monitoring so they Strawberry Shortcake status monitoring at the auto specific performance monitoring but uh in the at the"
  },
  {
    "startTime": "01:50:01",
    "text": "some the the department consideration got he also suggests some uh metrics for the the measurement of the application impact like the application uh performance and some distribution of traffic would also be considered as the metrics but in this document we only include the metric can be directly provided by the office server so those kinds of the metrics will be application statistics so in the base model we conduct this and the most important part is how to extend this base model uh to subscribe the some real implementation so actually in the real implantation today uh have the jspark county extended uh it can be extend the recovery approach to have the different mechanism you can either new logging system for this login and can Define the different your plans authentication approach to authenticate the OKAY model plan I also have the new data source listeners uh and the new algorithm to creating a new result so for the minimal uh examples for a real implementation so they should we show the examples in the appendix that yeah in this life"
  },
  {
    "startTime": "01:52:02",
    "text": "I think I put the examples in the latest slides but it's slightly uh we don't have these examples uh if you want to use it in in this slide so uh let's see somebody which is Jason do you finish uh I think that's all for this uh they started up this document so that uh yeah I do put some examples uh to see how to extend it another uh for this last yeah here in this slide so maybe maybe we can uh pick up in the mailing list to see so which uh more examples maybe we want to show independent because uh also the journey has some comments down maybe they can add some examples to you how to use this data model to really operations management some Infamous results actually how to create the network map using this data model so they they can put a new examples here in this indeed to hear that"
  },
  {
    "startTime": "01:54:03",
    "text": "so Summers I think that's all and welcome to smtd to have some yadaka reviews and how to uh when there is ready for the working class okay so the sanctuation for uh introduction for this one and any comments for this latest version please go ahead foreign can you hear me yes yeah okay okay so I just want to mention that I noticed that there are only very uh very limited configurations I defined for the auto client conf autoclike the configuration but think of the uh two-way TLS authentication scenario where not only that the thorough authenticate the client but also the client need to authenticate this server as well so maybe we need to consider that if there is any auto server authentic authentication related configuration need to be defined under the auto client so works as a TRS with the auto class address yes the other client needs to authenticate the auto server so when you look into that we can pack it offline yeah I know the"
  },
  {
    "startTime": "01:56:00",
    "text": "time is limited yeah okay yeah similar to the the configuration uses server level the business tax so the clients that things also have still configured that right yeah yeah I think we should support a mutual also negative just like use the TRS you can provide such kind of feature so um yeah I think you you you you can discuss this how how to design the model to support you know server Authentication also I I um do you have any other comments uh I have some very minor questions like regarding what's the relationship between the auto client and the rule could a client be belong to several rules in the design or they can only belong to one rule what's the relationship it can have several it's many many as the role is just to simplify the perceptional management so when each Auto client can only belong to one kind of rule right each class can be able to several different rules actually okay so it's Manning too many mapping right yes it's management okay but at the Json go go back to the role-based access control you made a uh you you have a figure you show actually since the one row can be assigned to multiple clients right but the yeah"
  },
  {
    "startTime": "01:58:00",
    "text": "one client can only have one row other one row can have multiple row multiple computers can also be a tattoo okay I I think I'm based on you know Richard's comment it seems the way you still have some you know uh maybe debate on these real based Access Control actually I I think maybe this is something we need to you know narrow down to to resolve this issue yeah yeah I think I can I compose yeah I can post on the millionaires to start the conversation a little bit and uh I don't think I could that complex affects but I do want to see how Jensen Peter Johnson proposed some other ways right so we can discuss a little bit okay great yeah that that would be great yeah yeah Johnson actually so um for for panics actually you you uh need to add maybe more example actually as you mentioned in in a uh you know last slides actually the model need to be extensible actually so um so maybe some more example will will be helpful to people to understand how this model can be used all right in the current appendix we have the examples for how to extend the server discoveries and they how to extend the the client authentication approach and the data cells and the information results create algorithm yeah that's four part so"
  },
  {
    "startTime": "02:00:02",
    "text": "I mean yeah maybe you could hit a bgbres example yeah it's just thinking yeah it can be another example in the algorithm or yeah it has so using this routine is ready for young doctor review maybe have a second review I we do you think is ready and for you know working with us call uh I think comments about Services can uh completely Delta plan side yeah the current auto parts that it's uh installation crew but the other product into the auto service added to radiate okay so I think you still have some minor you should need to fix the better after you you so what what is the worker plan you want to post a new version Maybe in several days so we can see yeah we're going to you know Target Yeah by this weekend to be coming out and you're working okay so Amanda do you have any suggestions we need to you know wrong walking landscore for this document in Peril or in sec ant show I think I think we need just to um to do um let me see a double check from the author that the all major issues are currently covered and once we have an app from them we can and we say run the working class College in parallel send the um request for the young losers reviews that you can have both I would say are running parallel and you can gain some time okay yeah we already run out of time actually"
  },
  {
    "startTime": "02:02:03",
    "text": "and any comments any last words no just a note on deployments I see some good activity on the wiki thank you uh Richard uh Luis for populating the the Wiki page um I encourage people to do a pass on that I'll do a pass myself uh and uh yeah so that that's just another the third Charter item I guess um it's um progressing well yeah yeah that great to mention this actually I I think probably for uh Yokohama meeting actually we can you know focus on this Auto diploma update and uh also we need to touch some you know item to say whether these kind of you know foreign foreign for the last call uh the transport do we can we like send email to arrange a meeting from Mark Nottingham or you prefer that we don't go down at the path because it's incredibly good in terms of getting all the HTTP insights so should we like proceed immediately and we go through working with the last call and basically we submit the version I think timelines by this week we get everything clean up and we go through the working blast car from our automobile group are we I'm gonna we're gonna schedule a meeting with him right away to see if he can have analog feedback we did we can you know hear their clear Max comments maybe during during the working on alcohol you want to you know hear"
  },
  {
    "startTime": "02:04:01",
    "text": "with us call that's fine okay okay so I'm gonna send an email basically I'm telling them there's a process getting started because one I do want him to get a heads up yeah probably we should you know during the working with us we should invite him to give us you know another task yeah yeah he's very good he offered to review a document very carefully too well uh so for human transporter several reporter is you know uh is not in the scope of this new transport work right Correct server pool silver Port is no longer in your system and we are going to realize substantially my Slaughter us down we would rather there are a couple of design decisions for example merging the push into a single document essentially is have single documents that we can orchestrate it very quickly therefore we won't get transport down instead of having you know base protocol and push so and there we want essentially one goal for RC speed up instead of doing like a complete I think as long as we cover our use cases we know well we were happy adding product will slow down okay okay I think we don't actually need to wrap up and thank you for participating and uh that's a meeting in Yokohama thank you thank you looking forward to it thank you thank you bye thank you very much foreign [Music]"
  }
]
