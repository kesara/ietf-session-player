[
  {
    "startTime": "00:00:04",
    "text": "For the money moved. Children. Unstaining Yeah. Phone. I do. Thanks to give he's just forgot all of that. And Yeah. We're good. Okay. So, let's go to Dora."
  },
  {
    "startTime": "00:02:01",
    "text": "So the man has a very good nose for Israel. At all. Okay. And I advise you how to cope with Yeah. Okay. Hi, everyone. Welcome to Rif at IETF 118. Great to see everybody. We had very. We got the junior party talk to CT implementation full success. So session is open. Jeffrey and myself you should know by now, not well, you haven't read it, it defines how you contribute that everything he contributed to ATF is in accordance to ATF role. Just be familiar with all the VCPs and RFCs. Please do sign in that help us to get a room next time. And if you want to ask a question, please get in queue on your application. And, if someone could help us with taking the notes, be highly appreciated. Thank you. So agenda for today we will talk and then, Jordan will update us remotely on base spec and k. We register some base that think we're pretty much ready for ISG. I Jim did really great work, getting all the things together. So very soon, me to 10. Thanks again, Jordan, Tony, for addressing all the commands. Really good work. So Tony will update us on the hackathon results, how that's been. And then the rest of the time, you have to dedicate it to rift in Grabensley. And this is agenda for today. Even Yeah. It's there. Sorry. We had the private discussion with the service"
  },
  {
    "startTime": "00:04:01",
    "text": "folks, so there's a progressing a certain PLS and draft. So we pointed out that it use particular way to distribute seats. So they're going to take a look and align was to San Pedro's German. Yep. Can you guys hear me okay? Yes. Great. Alright. Okay. Jeff, are you driving the slides? Yeah. Okay. Okay. Need it to the next one. Okay. So what's new in 19? Little bit of new stuff. This is mostly to support the new key value target or or the new K target stuff that we'll be describing in the next slide deck but it needed a little bit of a schema update as a result. And, as part of that, we bumped the entire schema to version 7. So, mostly for the right now administrative unless you're going to interrupt. Couple normative changes not not really changes in terms of actual behavior, just clarifications, really. So basically that if we do any state transitions, to where no action is specified we must consider it something that's unrecoverable, and we have to reset all state. Again, previous text basically implied that, but just making it informative here. And similarly, if, you know, if we have a Lincoln 3 way for, you know, before and or the 6. And it wants to stop supporting 1 of the addressed families we have to tear down the entire session, and and remove any state k. Next. Next slide. So security considerations, there's been a bit of discussion about, you know, having met this a bit. Laura brought some up. So to Jim, so this kind of the culmination of that. Basically, there's been the a little bit of a polite way to put its discussion, about, you know, one versus"
  },
  {
    "startTime": "00:06:00",
    "text": "255 for a TTL and hot limit, and basically what we've converged on is you know, you if we're using 255 or if an implementation chooses to use 250 5 RFC 5082 covers that. Mentioned that might still be some misprocessing or forwarding loops or loops in the forwarding plane, things like that. And if we're using 1, you know, multi hops we think is still possible, but it's extremely hard to engineer some of those, tax. And replays are also possible, but we're already kind of covered by all that. Security envelope other considerations in there. Let's see. Beyond that editorial stuff, to Jim for the comments. Just kind of clarified some things that were difficult to parse and kind of converged on common language, you know, toft versus hop a fabric. My reference updates, things like that. Next slide. Yeah. So, you know, still still kind of going through guess what I'd call you to review. You know, Jim's basically given the nod that he's done and, I think the goal here is that the other 2 routing ADs will complete their review before we go to IETF last call. Yeah. So that's it for the base spec. Pretty straightforward. Questions, Concerns, I see gym. Hey, Jordan. Thanks for that, and thanks taken care of all of that, for me. So very much appreciated. The only the only comment I had was the the TTL thing you're gonna put some text in the applicability document on that. Right? Is that something that you're doing? Because I kinda wanna try and that moved at the same time. So if we can kill 2 birds with one stone, that would be great. Yeah. I I've I've been driving the discussion a bit."
  },
  {
    "startTime": "00:08:01",
    "text": "Got gotten some discussion, but, think think we're at the point where I'll just just write some text and, propose it, you know, ask for forgiveness rather than permission, so to speak. To make sure we're covered. Yeah, And then there were a there were a couple other points in the applicability side, but nothing, nothing that relates to anything that's normative like this. So Yeah. So that that one's pretty much done as well. Right? So I'm hoping we can Mine or stuff. Yeah. Yeah. Okay. Perfect. Thanks. No problem. Okay. KV registry gets a little bit gets get some interesting work here. So next slide, Okay. So, as Jeff mentioned, there was some discussion in San Francisco about know, how to distribute targeted information to nodes or sets of nodes, you know, with with KB ties and you know, basically, we've been kind of at the mercy of, you know, stuff on flooding and you know, you know, you know, get too many leaves, it becomes too problematic. So came up with the concept of key targets where basically we can optionally identify groups of of nodes that are intended to receive a specific KV time. So we basically do this by using, you know, a 64 bit bloom filter And we've also defined a hashing algorithm for deriving the key target values in the draft as well. It's completely optional, fully backwards compatible. Know, whether an implementation supports it or not or someone wants to turn it on. It's, you know, default is to flood. That KDs as a as a know, is, you know, effectively today. Next slide. K. So how do they work? Basically, you know, like I said, bloom filters, but we"
  },
  {
    "startTime": "00:10:02",
    "text": "two values that we hold. So all zeros has fled everything and all ones has fled to all leaf nodes, you know, you know, any of the other values, you know, kind of a subset of the fabric will be drive using that normative hashing algorithm. It really only makes sense to process these on on South KV ties. You know, the northbound LSTB still needs to maintain a full view of everything southbound. So basically, you, you know, key target must not, right, be present on northbound KPIs at all. And, you know, any any southbound reorigination as we go through the levels, you know, the key target must be preserved. As well. K. Next slide So this kinda brings in at least one interesting problem that we've seen, basically with purging and rollover. Right? So there are know, several scenarios where you know, a a node might select a new KB tie, you know, whether the sequence number implementing, you know, change in the original tie breaking results. Or if we lost lost the adjacency to the northbound neighbor that was holding the the previously selected KV time. So so some pretty interesting considerations when nodes are no longer included in the given key target or or or group of nodes you know, leaf nodes come to mind here. They can if you got CTP running, they can not be leaves anymore if you miss cable something or something in that nature next slide. So, basically, you know, consider this case where you have, you know, key target 1 it covers nodes 1, 23. And they all want you know, KB tie 1 and their LSTB. If node 2 stops being a part of key target run, if and then we need to update that KV tie to a new instance, no two will"
  },
  {
    "startTime": "00:12:03",
    "text": "be stuck with that older instance until the lifetime spires, which can be a very long time. I mean, if you have lots of kv ties and lots nodes that's well, it's suboptimal to say at least. Next slide. So so, basically, you know, we say, you know, I'll I'll let you read the text effectively, we have to, you maintain groups. We basically will say that, you know, we need to flood an instance of the new KB tie to the, to the old key targets so that it can you know, a per with with a short lifetime so it can appropriately, you know, purge state. That's that'll ultimately be implementation specific. It's up to you how to do it, but, you know, that's how we're looking at doing this. Yeah. Next slide. And I think that's it. No. No. Okay. So, yeah, what's next? Any comments or questions related to key targets? Obviously, welcome. Beyond that kind of housekeeping. Right? I am, as mentioned to me, basically, we need to be a little bit more explicit in terms of how we, know, defined register values as, you know, available or not you It's easy stuff. And then, you know, everything below that line is copy paste from last time. We're basically waiting on the rip step. So once Once ADs get through, the rest of this, we get tagged. You have last call, then the the KB registered doc should go through quite quickly. That's it. Any any questions? I have a question. So I had thought that this document is about to register itself. It seems that now we have, adding, added this, mechanism for the key targets, and then it's handling all those things. So should the draft be renamed and then"
  },
  {
    "startTime": "00:14:01",
    "text": "title change. That's probably not an awful idea. Tony's gonna mention, but we we've had other mechanisms described there as well besides key targets like the southbound tie breaking and so forth. But but but Good timing. Well, the only thing that is the change in the risk document is that So first, we thought that we basically have the, key, which was always outside. And then the content, it was just a block and we wanted to throw the target into this block. But we decided that we basically split it into key, sorry. The key, the key, and the target and then the block, which is the, really, the value. Right? So that schema change, so we have to register this code point for the content for the key value tie. But in terms of what this spec doesn't say anything that's all still formed out to the key value span. Right. So the the spec is really not only about the registry, but also about the behavior. Right? So that's The respect no, that that this kiwi kvregistry spec. This particular document that we, we're talking KV Right. registration. So it also specified the behavior of this field. So since we define the tie breaking of the of the key value store on the rift spec, you could argue that we should put the target text also into the risk back. No. No. That's what I'm that's not Yeah. So so your point is My point is that this document, kvredstreetdocuments, is not only about I understand. I don't know. It it defines those of the target behavior. Right. So I think that the document should be renamed and and just to be fair enough. Yes. Yeah. I'll I'll take that for next time, Jeffrey. That's fine. It's just a tonnail change. It's not a big deal. Take take take take take take take take take"
  },
  {
    "startTime": "00:16:00",
    "text": "sanzality. I'd like to ask in some scenarios may understand the key target is routing topic in MPPGP, if it can be used like this, No. Yes. No. So so I explained quickly I need some, like, So Tony P again, Juniper. So people are probably confused because I'm not sure everybody knows how a bloom filter works. the idea is fairly simple. You take something fairly big. So And then you generate multiple hash functions of something. And you get, let's say, 3 hash function, 3 bits, and you flip those 3 bits on. And that way you can put 100,000 targets into 64 bid. Okay? Of course, you will get false positives but you don't get false negatives. So you may address more people than you intend but you have a very small filter. Alright? Whereas the route target in VG, like, you have policy, you have a perfect match here. Don't have a perfect match. US something would statistically work is actually incredibly well Right? But it delivers false positives, and you have to deal with that. It's a well known thing, great research papers, blah blah blah often use technique but the equivalence of the route target breaks down here because it's not the perfect match. Right? Okay. Let me click along the glasses so I can look liquid in the eyes. Alright. So"
  },
  {
    "startTime": "00:18:00",
    "text": "we suffered through the heck of them for 2 days, you know, way too much food. It was really hard. ZT have shown up, with, very serious implementation model like negative desegregation key value seemed everything in place. Bruno's code is, of course, you know, being pulled up. And Juniper has some stuff. He promised that he will give us something next month. So he had some leave implementation that you're a test but then he was in the beer interrupt. So guess what? You know, he didn't have time for, to show up and participate in both Okay. So that's I only show because it's a beautiful picture, you know, on the rift is. Right? So we had like 10 something people hanging around there. I think two people did did real work. Okay. And, we did, interopters in different part of specification. Yeah. The stuff jumps 5 or nothing. No. This stuff doesn't work. Alright. So so I pulled up Bruno's code. Bruno is traveling the world again. So I pulled up his, cold to on the AWS for, changes in the newest spec basically, you know, the usual just compile the thread schema throw it in there and at the 1 or 2 fields. And running against our stuff and that passed all fine. No surprises. And then, we threw together stuff with ZT because ZT doesn't have a virtual version yet. So there was some, you know, physical remote boxes and so on and so on. Our staff was thrown on a docker container, And there were, basically, it was just one interesting discussion when you have one part one side of the JSON configurable V4 V6 and the other one only V6. Right. Though there was a misunderstanding that because the V Four show up, you don't bring up adjacency."
  },
  {
    "startTime": "00:20:02",
    "text": "But in fact, the FSMs and the spec is precise enough. So, you know, the the v 4 will start to stay in one way and the will be built up a three way. So that, that was one output where it discussed through. Then, we added some internal prefix and now menced with ZTE and, we were seeing the disaggregation And, yeah, the full flooding was going on. So the full exchange was working. That was all fine. And we were limited because, Normally, we run our images in Katara, which is this thing over top of the docker doing some magic, and that was a naked Docker config, And, some Linux version have these very ugly Buck. Where you open a multicast socket register for multicast address and if the same multicast destination comes towards you from 2 different that will deliver only one copy from one interface. It's it's it's a known bug, but it was pretty much on fixed So we were basically running GDPR always on one interface against ZTE. And then we discussed a lot of this dragonfly stuff. It was interesting because that clarify that my dragonfly draft, which was slapped together very quickly. Was not that clear as I thought And like I said, Chopper was, busy with beer. So he did nothing He said, probably something maybe in a month or 2 to publish something to the list. So The bad things was the heck I don't run out of t shirts because, you know, graphters like Jeff were there before the real people showed up. The food was good too much. The rift spec held up. So we had basically no changes on the spec. And the testing on hardware box is them tedious, but everybody knows that. That's kinda what came out of it. Questions, observations, rough, and tomatoes. No. Nothing. There's no questions. Thank you."
  },
  {
    "startTime": "00:22:03",
    "text": "Thanks. Okay. Yeah. Next one is you again. No. Okay. So so this one will be entertaining. Because probably what you came for. So you seen the DMAS presentation about this BGP thingy and a million PNs and, you know, whatever non natural thing, which is kind of natural thing for BGP has to be done. And, we ended up having some discussions with Jeff email about, you know, what how could you do it on Drift? And I was pushed to do it rift as well internally. I don't know. Uh-uh dragonfly seems to be current, you know, I could be hyped thingy. So I went and thought stuff through and those gentleman did no work. So it's basically all my stuff. But some key ideas on Dimas actually in the whole thing to make it work. Fine. So it starts basically with the fact that if I started to look at precise, search on sparse dragonfly, nobody defined what the hell is a sparse dragonfly. So I had to think through what is actually a sparse frame and fly. So now imagine that you have so originally dragonfly was basically full matches hooked up to a central full mesh. Okay. And the central full mesh is just too full, so you start to thin it That's why it's called kind of sparse dragonfly. Right? And these dragonfly seems that instead of running full matches as wings, you run clone networks. All good. So what sparse dragonflies is if if you if you look at the stuff here, right, it's what it's 8 edges, Instead of building a complete full mesh between 8, you can see it in different ways. So you can consider it as 2 planes. The road play the red plane and the green green plane. Which are kind of disjoint. Right? Or you can consider the thing as a half full mesh."
  },
  {
    "startTime": "00:24:00",
    "text": "It's the other way to view the thing. You just fill out half the full mesh. We talk about properties, key, tips, and so on. So the way you can struck this thing is you start from a road red guy and then you basically connect every second guy. Right? So you skip always one guy, and this could basically half. Alright. And the important thing is in the whole thing is that every red note can reach every other red node in 2 hubs. That's the trick property here. And every green node can reach another green node in two hops. But now you can so because you have two planes, now you can also basically as something you know, that's why I did the squares where you have these multiplane attachment to this backbone where you get 2 And this is, for example, actually, quite interesting discussion also for people who built something like by playing, IGP backbones today. Right, that this is actually a a nice way to visualize. It's because normally people just visualize these 22 backbones and then hook around and so on and so on. This is kind of a very regular way to do that. And you see on these arrows, right, if this guy goes to the other side, he has actually 3 one path goes one hop and the other one goes to hop. And of course, it's like 4 or 5 whole parts and so on, but these regard I mean, you can run hamiltonian graphs, but the important thing is the direct and the one indirect next stop because that is the property that they are looking for in the dragonfly that your bisexual bandwidth is not just a direct link, but you have actually, you can saturate the stuff, you know, throughout the past. So it gives you much more bisexual bandwidth that actually directly. Alright. So that's kind of the layout. Now Tony? Yeah. Do you want to take the now or later? It's a clarification about this diagram. So Sure. Sure. Yeah. Sure. Yeah. I know. I know. It's it's it's tons of information. We get worse. This is Rod Rod Van Metre. I own Care University. So, this diagram, you said 8 links"
  },
  {
    "startTime": "00:26:02",
    "text": "I think there's no 8 edges. 8 edges. 8 edges. Okay. It's an 8 whatever octagram. An octagram. Yeah. Uh-huh. And there's no there's no node in the middle. So it's No. No. No. No. No. This is an octab So it's a regular thing. Right? So the dragonfly origin was just full nash and these little wings, which are all full nashes. And you have 4 of them and you align it correctly, it looks like a dragonfly kind of. Okay. And the box the boxes on on the right edge in the bottom edge are The thing about this those on, whatever. Okay. And those are the 2 planes how they connect. And, yes, I should the problem late big blocks, but that was too late. There would be 2 more of these on the top on the left or or Well, think behind it, isn't there? Because there's a crawl plane. So we Okay. Those are cloth fabrics on on the Dragonfly plus. As far as could figure out because there's really no clean paper that will explain to you in the research terms what the hell it I've seen I've seen sort of a moderate amount of these interconnects, but I've never seen the Dragonfly plus this one's new to Okay. Yeah. So so that was as much as I could reconstruct from all kind of ideas flying Yeah. Okay. So Linda. Some little confused about this picture too. So you're saying the red notes There are no red notes. It's just a red plane. Red plan. Yeah. You can talk. So those would be the red notes to skip for But and red because that but you have a box connecting the green means it's just one now. It's an important concept. Right? So you could see it in different ways. You can see there's 2 completely disconnected planes. Okay? You can see there's half a full mesh or you can see there's two planes that you can somehow connect together, right, to keep those links Okay. So I see the red plane is off. Only one hop away from each node. Why do you say this? No. These are 2 there's a middle one. The the red one goes through that too. Is that one hot? Look, There is no note here. No. No. No. There's a red connection from, in the crossbar. Is that one line? One call? We'll get to close for this. Or that's just the base of the driven flight pass"
  },
  {
    "startTime": "00:28:00",
    "text": "It's the only thing we look at. What do we have in the middle of this? Nothing. Nothing. It's just random. If you start to draw things like that, the things intersect, So, yeah, my bad only those things are notes. He's in. Oh, okay. So the the middle one is not really the there's nothing there. Just random because lines intersect. Sorry. Yeah. Oh, okay. Yeah. I mean, try to paint with Microsoft PowerPoint. I mean, some debt No. There's there's no note. This well, there's 6 red leaves. In fact, 6 Colton. So 1, 2, 3, 4, 5, 6. There is no no in the middle. There's nothing there. Which do. No. If you go from here to here. Yeah. You're in the 1 hop away, but you have 2 connections with a 2 hop away. It will be very important. So you've got shortest bus and not shortest bus lane. Oh, yeah. Yeah. So you have one hope and you have some 2 hope names, and that's very important. Yeah. Yeah. Yeah. Correct. Yeah. So this is the one hop 0 and those signify 2 hot plates. Right. Because it's very important. That's one of these big properties of this thing that they have for you bisactional bandwidth. You can actually have much more biflexional bandwidth than just directly. Okay. But nobody talked about routing on those things ever. Like, you know, it kind of chewed if if Yeah. Yes. Right. And in one hop. Yes. Sorry. K. Cool. Yes. So fine. Because that's it's like a multi dimensional way you can look at the whole thing, and that's where you start now we started to do homomorphisms on the cloud. You have to be fairly, quick on your feet. Okay. So now I looked at this thing, and this is a very simple dragonfly. Just we so so now we talk dragonfly plus. There will be one with, like, 3 fabrics. Right?"
  },
  {
    "startTime": "00:30:02",
    "text": "And now you see these two triangles of the two planes. It's a simple example just to note over overload with pictures. So if you now say, okay, we have this cloth fabric and we have the whole thing connected with the with the sparse dragonfly. That's what the picture looks like. And my the first idea is Okay. Let's make a homeomorphism one single clock. And if you do that, you end up with the staff below. This disregard of fabric a and fabric b for the moment. It's just one fabric. And if you start to drove The dragonfly class on a single fabric end up with something like that, which looks like a kind of a multiplane fabric. Which is Miskabled. What do I mean by that? Right? You would say This is one player. This is the 2nd player. So all looks good. Right? But stuff gets confusing because If this guy's connected to display, he should be also connected to those guys to be also in this way, or rather, it is in display. It should be on essay 1 the the b one as well, but this lane is super fluid because you should be in one plane. On the multi playing clock. And the point is that the whole thing does not work very well. Can hook up and run it like that. You end up with tons of disegregation. Because there's tons of links missing. So it's really the homomorphism from this setup onto a single cloth fabric does not work particularly well. stand, right, So risk would work, but it will work. No. Quite, you know, in a non impressive way. So I started to think about the whole thing, When I started to think that that's a more complicated picture. Now you really have multiplane fabrics, 2 plain fabrics, properly keyboard, hook up"
  },
  {
    "startTime": "00:32:04",
    "text": "to this, sparse Dragon 5 plus backbone. I know there's a lot of homomorphs now. That's why this first picture was so important Right? You have to think about all these things at the same time. It's a multi plane thing, but it's not deployed or whatever. It's a half connected thing. And Now We split all those fabric as separate ref 6 which also seems more natural because all I gather is dragonfly guys are interested in the thing because it's a very natural way to interconnect DC. Okay? So now you basically interconnect 3 DCs if you want to think about it that way. Right? Multi plane DCs. And in between, you have those 2 planes, which I show you a nice complicated picture at the end. Those are basically a sparse dragonfly in the middle. Right? Plus some links, but that's not important for the moment. So now What happens now is something interesting. So you happen intrafabrichorizon and then interfabric horizon. They will be very, very important for the bisactional bandwidth. Right? So the links in the middle are kind of a different horizon. And I tell you what it needs. Later. So now we have to change procedures because those links are kind of funky. Right? Before in the fabric, the toff had either horizontal links to other toffs or south, and nothing else. And now these guys are kind of northbound. Okay. So what do we do with that? To make that work now a couple of procedures change. So Oh, when we hello? Now we have to differentiate between southbound limbs. That's easy. Right? Those guys are not tofts. Because observe. Now, all the six guys are toffs. Double fabrics, That's that's important now. So"
  },
  {
    "startTime": "00:34:01",
    "text": "Normally, the tops would allow only cell phone link or they would have a horizontal link to the to the guy, the same guy in the same fabric. Now now, We have somehow to be able to tell the difference whether the essay 1 essay tooling horizontally in the same fabric or whether it's an essay 1 to SD 1. Is to eat the fabric horizontally. And the way we do that is that First, we put, on the top, a flag saying I support Dragonfly Plas. Okay. The moment to support Dragonfly class, you must have a unique fabric ID So all these guys get different fabric IDs. Right, to do whatever. Think about a, b, c. And each of them on top is configured as Dragonfly plus capable. And now the distinction becomes actually quite, quite easy. If you if if You talk to another toff, and he's also doing dragonfly, but he's is different, It's actually into fabric horizon between fabrics. Right? If you have tough and both are dragonfly capable, but it's the same fabric ID, need to horizontally in the same fabric. If Both are tough, but one is not dragonfly capable. You miscabled. You can't run a wild mixture of those things. And if one is not tall, 10 just normal rule of supply. It's been self bound. And that way you can now separate on the top Relatively easy. The interfabric horizon from the interfabric and prominent horizontal links within the fab. Okay. So now comes the interesting part How do we change computation. So to simplify things for the negative disaggregation, we can basically drop out the fabric lace. We do not want to desegregate negatively when things fall in other fabrics. It's a simplification because you could do that. Have all this information. The beauty is that there's no change in flooding whatsoever."
  },
  {
    "startTime": "00:36:03",
    "text": "All these guys, as you know, horizontal link tops basically flat north bound. So all these guys will take all the topology stuff into the other guys up into other guys. So all of these tops will basically see the food to polish. That's the nature of rift. And that's the price to pay for this thing to work well. Just at the very top. Right? So to simplify things with this card into February from all the negative, and positive disaggregation. But you can do these computations. It just gets we talk about how to do that, it will just get a lot of computation. So it's optional. You can do And then the first thing we're building direct into fabric routes. So, basically, one hop interfabric routes. Now comes exactly this bisection discussion. Right? So, basically, it's not it's not particularly coat. When we do computation, I will use the picture again. We basically force first and in we go through an interfabric link then we own another fabric, and then we just know run the normal computation. And then we'll give us all the destinations, the other fabrics where we can get in a single hop. Okay. So that's cool. But now we add to it, This thing is tedious. Indirect into fabric routes and think that that's fabrics, you can reach in 2 hops. And you multiply the computation by basically taking into fabric links away. And then from there, start to compute. It's important you differentiate between those two. That's kind of dimas big insight that helped me. Right? So you have this. I can get to the other fabric. One hop away. I can get 2 hops away. But now comes the interesting thing with forwarding. If you forward along the one hop, Well, the star the star will not loop because the fabric will grab it and just forward forward. But now think what will happen if you just start to forward along the two hops. You throw it to another fabric. He says, let's know my destination. He can throw it back to you."
  },
  {
    "startTime": "00:38:01",
    "text": "Because you look like it to hop away. So to visualize that. Right? Now SA 1 has the brilliant idea to to go to one, he can use b sectional 2 hops. So he goes to s v 1. So SD WAN sees on the IP packet SD WAN, the a nation that goes like, I'm playing the bisexual game too. And by the way, essay 1 is the bisexual to a C1, and you should be able to do. Right? So here comes the big trick. When the packet arrives from the fabric, sided interface. From south you can use both, the one hop and the 2 hop route. Because you're good. But if the pocket arrives from the interfering horizon, That's where this concept only survives is important. You can only use the direct. Alright. So to ex to give you the example. So LA 11 pushes a fabric towards fabric C. It arrives at SA 1. It sees that it came from an interface, which is southbound. Okay? And says, okay. I can use the fit that there's 1 and 2 hops. And he throws it at svone. The SP 1 sees that it's coming from the interfabric horizon And at this point, time, you can only use the direct fit. So it goes to SC 1. And now I flip back and this picture starts to make sense. Now you understand while everything has the must be a one whole route and a 2 whole routes. Okay? And that way you'll get the bisectional bandwidth, which includes the single hop and dual home. Okay. By by running the horizon, And it's actually Nothing special. Basically, all the silicone supports it because they're exactly how VPN works. Right? You have to understand from of based on the incoming interface, which fit to use. So it basically the silicon is already there."
  },
  {
    "startTime": "00:40:02",
    "text": "Instead of running VPNs, we're basically use that on, you know, interface specific fit and split the horizon. And that's about the whole magic if you didn't get lost yet. So the interesting observations, of course, that Now for multiplying, to work well We were always talking that the tofts right here, two planes each the the the the, the claw has to be ring on top. Right? And the funny thing is that, basically, if you look at this picture, it falls out by itself. If you think about these entry points, these squares at 2 plain february, That's why I put the squares around. Now your picture goes towards Those are 4 multiplane, cloth fabric stitched together, Okay? And if you look at at the links that are normally included in the in the dragonfly class even, Right? Then you will see that you just leave these links between the fabrics that go like this between the planes out, but planes are already And if you wants to be extra conformance, then you add another link not only just have a link between the plane, but have a ring. A rift will also work with just a single chain, but then basically you are bound by a single failure. Brake, flooding breaks. If you have a ring, you need the 2 failures for the for the flooding to break. Okay. So we have the the the ringing. There's no far far the changes need Okay. So If we build it like that, the negative distribution not propagate across the fabrics. And if we keep the inter fabric links in the negative segregation, post the disaggregation, it will work. But now, you have to run"
  },
  {
    "startTime": "00:42:00",
    "text": "from the point of view of all the tofts of all the fabrics to do the job correctly. And that will have scale imitation. Right? You have 3 fabrics, maybe good. If you have 20 or 30 fabrics, you start to compute, you know, 300, 400, of those computations depends how much juice you have. Right? Then you have to ask yourself, okay. How likely is it that the whole thing you know, the breakages in one fabric are only fixable by the other fabric going all the way back to beliefs and doing the correct thing. It becomes more and more and more and more and none unlikely. So that is the Gotcha. Right? But it's under discussion. We can, you know, It's also in a sense, each implementation can do what they want. The more computation to implement the better they will work on the failure. Saint. And I leave you with this. It's got Okay? So that will be 6 fabrics with 2 planes. Right? The blue and the yellow planes. That's what it will look like for 6 fabrics. And this little thingy up there, I've shown, like, if you really do a ring, Right? Because normally, it's just this. If you look at proper dragonfly class, or or sparse dragonfly. So if we really want to ring those two top at the top, like, rest recommends, then you do a little ring. And I'm sure you can somehow figure out how to make a list of figure out of that. If you don't know what least Azure figures are, go look it up on the web. Okay. Because they have yet another different, you know, as of beauty to them. Yeah. And that's pretty much it. So, all the stuff is flashed out. You know, if anybody feels like writing, do you know that that very tediously all these or any normative stuff and so on, and be welcome. But I think the magic is kind of figured out fantastic. We have some props here. I think this is no beautiful mental decides to go and, you know, figure out whether the whole structure holds together. Because I slept it together myself, you know, and implementation. There was no time for anything like that."
  },
  {
    "startTime": "00:44:04",
    "text": "I'll bring a couple of points and we can start discussion. Okay. So So why is this important? People been trying to drag and fly like, topologies in data center to save an interface as proxy is the complexity doesn't justify the deployment. Becomes really interesting is when you use interlinked links to interconnect data center as Tony said. And there's very important point today, It's pretty much impossible to get data center over 15 megawatt. There's just no power to cool it in power. So a lot of people started building data under screening us in pairs of 50, 60 megawatt data centers. This naturally lays down to this time's apology. So what twice 50 megawatt data center. And then within data center, you're on whatever you like. Right? Most probably GPU's. So that's number 1. This is why this is so important. Number 2, this provides you look for routing. It doesn't playing how to get traffic on these links. But practically, the cheapest way is to go on the shortest string. It also gives you a low latency You want to be able to use longer links, but you need to understand that in, again, looking target for the Israeli Machine Learning clusters collective operations, you cannot afford to have part of collective operations having different latency. Because it's all about job completion time. Right? So you need to make sure that whatever your GPU is running it is following same path How do we get traffic in case congestion on another link? Again, another problem to solve not here, but practically you need to know when to switch from shortest path to non shortest path. It's not in routing protocol. At least as of now. Adaptive for routing capability here Again, if you try to do more granular load, that was just for flow,"
  },
  {
    "startTime": "00:46:01",
    "text": "you end up in a case where some of your packets go on the shortest link some done. Performance goes to 3%. Right? So it's really important to understand from applicability perspective how to deploy it, how to signal, potential congestion, or bandwidth available, or failure on the inter fabric links and all of this will need to be worked out through some of it. So and this is where I think we should start discussion in the CDMA already. NT the queue. Yeah. But, you know, uh-uh, the nice thing if you if you start to look also you know, direct path and this one alternative hop is an incredible resilience structure. You have to to keep killed tons of connectivity before this thing literally starts to become unreachable. When I was looking to stuff and, you know, if you built, like, 3 planes, claw, And then this thing in between, I mean, you you have to before the stuff starts to actually not have any path to get anywhere. Because I kind of hate the dragonfly. I thought it was too dense, and nobody figure out the routing. Now I start to like them. Of course, because I think I figured them out. Yeah. Alright. So I think that's it. So, discussion, Dima, more questions, whatever. Yeah. One more commensers, a drive that crossing curating working group that focus actually on BGP in Drilling Plus if you want to get kind of terms you are more familiar with VRF's BGP policies. It explains how this can be done with BGP policies were rather understanding whether a link comes from the fabric So or from the interlink, you just use different VRFs and you can't really I assist and I passed a few routes where you are. So it will help you to better understand the capability of regular routing protocol to this and dima your question. We cannot hear you."
  },
  {
    "startTime": "00:48:00",
    "text": "Whereas, I mean, here without saying, you can even mention it. All the ZTP stuff works as usual. Right? So I didn't touch any of those procedures. This would be you are muted. I think. Wiegling your eyebrows doesn't tell as much. Hey, Nate. Hi. Good. Good. So, Yes. Thanks, Tony. It's It's really impressive, what you did with Reeveton. I just wanted to come in about, computation scalability problem because, well, essentially, if we are trying to use, silicon to the maximums and number of groups. Probably we'll be have ceramides of, top of fabric switches. Postbound because we have half interfaces going south, half interfaces go north and they are going to other groups. And plus one is our local group. So it could be 3365 for current generation of silicon. And sounds like that. But I think there's no need to do full computations for every group because the reason to do full computation, if you are going to goes through intermediate group and going to reflect why leaves in that group. No. No. The only reason to do the full computations I mentioned is if you really want the negative disaggregation, positivity, the segregation tackled the the the cases where you have to start in the fabric on the direct plane because you can only get on this plane to the other fabric to the if if if if if Okay. So so it's in in the cases where other fabric breaks and enforces all the way to your fabric to desegregate. You you you see my point. Right? I mean, those are, like, I don't even know how many links have to break and how yes, the point is only reason to run the comp computations. Yeah. Mhmm. Yeah. Point is that"
  },
  {
    "startTime": "00:50:00",
    "text": "Probably it's possible to do less computations than, like, full commutation for every member fabric. Yeah. That's what I wrote. Right? I said, like, leave out the fabric link when you do positive and negative disegregation. It's good enough. Most likely. Yeah. Yeah. Because negative digit aggregation is needed if you cannot go through particular top of the fabric switch, Yeah. Totally right. Yes. Okay. And, yeah, I wanted to, like, second what Jeff said that there is this, like, power capability problem for how much you can get for one particular data center, but the poll, just the page looks like, a good feed for data center campuses. Any agglomeration of data centers, which are not too far from each other. And you want to have more or less uniform connectivity and a lot of bandwidth between them because it's it scales better than trying to yet another level to to the clock. Right. So if anybody feels like a little bit mental sizes, especially the props here. Now imagine you run this thing on a optical ring. Counter rotating. What will happen if the ring got cut in one place. What will what will this topology look like and what will happen? Because this next layer of of problem in network, right, because you run this whole thing and lumped us over a ring. Yeah. So that's it for me. Thanks. Well. Next question? I I'm back here from I'm I'm not, I have another in the comment. We got the those speakers since, it's a little difficult for me to understand. I thought maybe we can add some formulas. Together with some examples on these cases. I used to be in academia. I don't do formulas anymore."
  },
  {
    "startTime": "00:52:03",
    "text": "I I could write it beautifully in 3 formulas, you know, and I could talk you about banyan trees and banyan tree formulas. Nobody would grow anything whatsoever. You know, I reserved it for the journal paper. Okay then. Linda Demer from Future Way. So I'm just curious. Like, you have multiple plans, and you have each plan have their their anthropology. Can you use ISIS different areas to solve the problem? Yeah. Look, the the plan can be the area error too. And then the the Look, you you could run-in in core is is. Right? I mean, we wouldn't have and rift, you could only shortest path, one hope. So you don't get bisexual bandwidth with ISIs unless you ISIs to the point there's not ISIS anymore. So you can use some kind of policy on the side so that ISIS doesn't have policies. That's why we use VGP. Even How about your SPGP? Yeah. Yeah. Yeah. We have a draft on that, like, basically have some kind of matrix to influence the past selection. So instead of choosing the shortest path, we add some other way so that with that other way added in, maybe the London Pass will be chosen. So my comment will be, you know, once your policy grow complicated and long enough, you may start to carry packets by hand and maybe more efficient. Course. But here, we're talking about, multiple paths and shortest past me. I'll be the best path. And how do balance. Yeah. So so Bema has a draft where he has shown basically with a lot of VPNs how we can solve with stuff because, you know, the the horizon idea is tradema's idea. I'm not mine because I was standing in front of, like, sucking my key, right, and how to help you with a known shortest path properly here. And it was Dimas idea that we actually be able to because he built the horizon doing some VPNs in DGP because that's how you use them. Right? They basically reflect the horizon. That's the BGP mechanism. Okay. So if we have some ideas on how do we do"
  },
  {
    "startTime": "00:54:00",
    "text": "Oh, we know exactly how to do this with BGP. That was presented last It was presented. Probably working group or if, yeah, we talked about the stuff. Right? Okay. Modular little details like where are the couple of hundred lines of BGP policy and how you switched that stuff properly so it doesn't break. Plus, of course, the BGP will stitch it with the VPNs and you have to start to think, okay. Where are your tunnels? What will these things where because, you know, the tunnel started to develop their own logic, right, how to go from one place to another, and you have control them that you go to path that you want. Yeah. But it's all doable. Like I say, ultimately, you can get, you know, enough people to carry packets by hand and know, beating them enough, you will get what you want. There's another level of complications when you start doing overlay. Is mandatory if you do multitenancy. Right? So if you do it on the switch, think about VCSLAN VPN, which is not common way to today, you're going to build structures that is underlay VPM, another VPN that is tenant aware, right, becomes really complex for management. See. But anyway, I'll just do some ideas here. Yeah. Yeah. Yeah. No. It's it's solvable. I mean, this is trying to solve it in a very ZTP way without with a very cheap forwarding plane that was always riffed, right, Any questions, tomatoes? It's Andy. Sure if I understand the right, how do the top notes, no if the flow is in tour. Fabrico. about Katie? Interfabrics. How Yeah. Right. And then a very justified question. That's where Rifts saves our bacon, and that's where your BGP will have a time Right? We know the direction on the fabric. So we know who is south and who is north. Bright, bright, bright, bright, and the north, now we can differentiate whether it's into fabric or whether it's a horizontal link. So the inter"
  },
  {
    "startTime": "00:56:00",
    "text": "the link the adjacency will clearly tell you which horizon is on. Yes. I think the fee on the forwarding table in the talk, we assure that if the root is from interfabric or interfabric. Because. Yeah. Once the tough receive the flow, they will know how to forward? Correct. Which fit to throw it to? That's precisely. And and thanks to Ziki because I threw out, you know, this that's what we spend a lot time on hackathon, right, to start to ask question because I only draw a very simple, like, you know, the 3 thingy and the 4 thingy and they go like, yeah, what do I wanna wear 5? And I was insured, so I had to drop figure actually, you know, to figure out this presentation. Because I oversimplified with 3. Everything works, right, is kind of trivial. Yeah, but this is exactly how it worked. The incoming interface will tell you which fit to go to. And Yeah. I was slightly skeptical with the man that I looked and yes, or even the cheapest silicon these days can do that because it's actually a very common problem if you run any kind of VR Right? You have to know this is a VRF link, so it's just completely different field. Otherwise, it won't work. So I think maybe some slack maybe at the end of forwarding cable for solve things over specifically? distinguish it. I don't know. And maybe you need it. How do you Right? This thing tells you, look. This is the computation that you used to build this fit is the convergence you used to this fit. Yeah. Right. So in BGP, it's configurational logic. You have 2 different, visual routers to treat fabric and, inter fabric routes here based on the fabric ID You see, it's you. It's not you. Yes. I see. Yes. So it's built into protocol. You don't need additional management task to identify particular interface. Gotcha. Gotcha. Thank you. So, you know, please look over the stuff. Maybe you'll find a hole. Maybe the whole thing is just made up, I don't know, on send. On, pretty confident, you know, that this stuff holds up, but who knows? It's never seen that done before. I never saw any kind of dynamic routing for Dragonflies"
  },
  {
    "startTime": "00:58:02",
    "text": "where anybody explained how the hell is supposed to work. Right? All these fancy stuff dragons line hypercubes or, Ortoroidal matches were used in supercomputers where links never fail. Right? So it's like simple. Dynamic routing is overvalued. And this is, you know, first time I see something cooked up, except Lima stuff. Which is basically, you know, stitching BGP Magic just so. So it's not really a routing. It's like, you know, arm handling packets the right way by, you know, a lot of, you know, policy magic. Which is far out of people seems to consider the pretty good job security these days. Okay. Thanks, Tony. Great presentation. And Again, we we've been trying to solve non trust plus routing academia for probably since Raul can exist. That's a very good example how it can be done with right product called simply and elegant. Convince you So and, we are exactly on time. So just 30 minutes from now, We are going to have a AIMDC side meeting which is going to talk about in more details. Workloads, this kind of technology is dedicated. It's a really machine Learning application. We can't figure out how to record it, actually. Someone in the cloud. Yes. Thanks everyone and we'll see you in Australia. If great stuff. Tell me these two You should beat them up at something in life. Right? It's intentional, and it's not just was really good, It So it's really good meeting. Yes."
  }
]
