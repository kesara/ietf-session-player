[
  {
    "startTime": "00:00:01",
    "text": "Yeah. So I was not planning to go through the project and through the issues. there just doing the status of the documents and then get straightened. So the discussions around various documents. if if there happens to be time, chirping Pardon? Yeah. Yeah. I'm I'm not Nothing to be shared. It's 5, and there's no way to turn on my car. Alright, buddy. Readings for Middle East. Okay. Thanks. Oh, we which machine are we gonna share slides. I'll share slides because you'll probably do more talking Not stuff. So let me start that up. Okay. There's no PIN. Yeah. There's a table over there. Yeah. You can you can sit next to though, you know, for me? Adult is the other option in this in this flight. Yeah. I know. So does -- Nice to meet you."
  },
  {
    "startTime": "00:02:10",
    "text": "meeting materials. There we go. Mark, have you met Henry before? Henry's Jason's schema. Okay. No. present. Where is the present button? Okay. Alright. We'll start in a minute or 2. Welcome. Welcome to httpAPI. Notable if only because it is the longest, unpronounceable word in working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, working group, Right? Pardon? mean, well, I mean, it's not a word. Right? At least http BIS, which is also 7 letters, has BIS, which you can pronounce. but Hetapi is Yeah. Exactly. So happy. Yeah. Just be happy. There we go. Yeah. For those who didn't attend the yeah. one of the one of the talks at the Pekkaocha last night was Wes doing working group names as rebuses. So there was this outline of, like, 6 male figures, and the working group was 6 man. some is Recommended you check the video out. Okay. So start in a moment. If you haven't already signed in,"
  },
  {
    "startTime": "00:04:03",
    "text": "Please point your phone with that or go to the beta tracker and and sign in and do the tool. It's important for us to get accurate room sizing and to know what conflicts we need to avoid. If you are worried about your ad tag, tracking you or being tracked by your ex, you wanna be in dalt which is somewhere else, not here. Okay. Pardon me? Continental 5. Yeah. Just follow the beats. Alright. Welcome. Good morning. I'll be running slides on Rich Daryl will be doing most of the talking since he's more expert on this field than me. Okay. Are you doing the interim? You think I should do the whole thing? Okay. First time for everything. Next slide, please. We are several days into this, but There are some people who've joined us just for today. So please pay attention to our nope well And as a reminder, there is a set of procedures and processes to follow and please be respectful of your fellow participants and We take the code of conduct or seriously. as Rich has already mentioned about make sure you sign on even the e Meet echo or if you haven't come scan the QR code over here. And remote participants, please make sure your audio and video are off unless you are presenting session session. And I think everybody presenting today is to be here with us in the room. So"
  },
  {
    "startTime": "00:06:02",
    "text": "There is the link to a meat echo and We have the Zulip link also So if there's comments in the chat that we are missing. I do have it up here on my screen too, but please calls out if we're missing some things that we need to address. On the chat, But those are the links to everything that you need. And First up on the agenda, and I apologize for this being horrendously small, So I couldn't quite tell how small it going to be. But, anyway, it'll be a little bit of a surprise to you. as to what things are going to be on the agenda. As far as administrative goes, Francesca our AD is on leave for 1st April till the 31st, she will be back on 31st. Yay. Next up on our list, we need a notetaker. Can we get a volunteer to be a notetaker in their hedge stock. So We can't proceed without somebody taking minutes. All you have to do is just sort of say, this is what we decided in the group. It doesn't have to be a transcription. It doesn't have to record what everybody said. We'll have the video recording probably up tomorrow for that. but we need a formal record of what happened here. It's really easy. And if multiple people do it, you just sign into that no path. No path. Etherpad, Hedge Stock. codeMD, whichever version it is we're using these days. Thank you very much. Make sure to put your name on the top of the list so you get the proper credit. Excellent. on I would call out the next item is agenda bashing, but you can't see the agenda. So"
  },
  {
    "startTime": "00:08:01",
    "text": "feel free to suggest all the comments. And we do have a slid off the bottom of the slide at the bottom any of the business at the end. So If we move through these items fast, we will be able to talk about other things as well. Yes. So First of all, we wanna do some status on The Roberto, did you wanna make a comment on the agenda? Jen Sebastian. I was asking whether Yammer and Russ API should be discussed together. You mean open API and JSON schema together? The the Yahoo media type and the Rust API media type, Yep. Good call out. So that is the 1st and 4th item on the list. We can, yes, we can sort of have those conversations together. that just basically means moving that 4th item to be the second item. We can do that. Thank you, Roberto. Thank you. Okay. So First up on document status, we have the Yamal media type registration, by Roberto that is now in the RFC editor queue? And so It's fairly low down. We'll let it into queue, but it is there and we'll be hopefully, moving through that progress and will be published very soon. So congrats to Roberto for getting us all the way Thank you very much. Which then Thank you to all the org group. Which brings us to the next item which was the rest API media types that yamal media types used to be a part of. and got split out and then successfully progress. So rest API media types currently covers both the registration of open API."
  },
  {
    "startTime": "00:10:01",
    "text": "and the Jason's schema media time. There are quite a number of issues that seem to be open, and the Jason's and Therefore, it would seem prudent to move to follow a patent that has worked before and move the open API media type registration out into its own Does anybody have any Roberto? Yeah. the So so I think that air, air, then The the real The real point here is how to ensure that the media type registration can be probably used catalogs, for example, In and tooling, To exchange meaningful information So while it's it could be reasonable just to publish just to register the the media types it happened, for example, on the yellow media type that we had a long discussion on the fragmented the fire. And we asked ourself a lot of questions about how to manage properly the fragment identifier and about tooling. 10, 10, I think that Probably, if we want the media tab registration to be effective"
  },
  {
    "startTime": "00:12:00",
    "text": "and interoperable between JSON's scheme and open API it could be the case that just just Filling up. the registration forms could not be enough. because at that point, every provider, every tool, we'll use probably the right media type, but it could then add parameters, paraminjets, a way of of actually using the content that is not interoperable. At this point, we would have solved one of the issue, that is we call open API everyone will call open APIs application slash Albanybiplusllorplusjason But still, we wouldn't have reached seamless interoperability. between tooling, between catalogs, and so on. Yeah. So This is, for me, the point. if we just think we need registration, it's okay. If we are sure that it would be interoperable and not convince the rate. Good. Thank you. Mark, I know you. having power problems here. How about that? Mark, not him. Just as kind of a meta point just so folks know, I have a draft in the media man working group, which is this afternoon, I think. that suggest and we've talked about this. I'm I'm reasonably confident we're going to do this."
  },
  {
    "startTime": "00:14:00",
    "text": "that allows community efforts like open source projects of a certain character. to register media types in the standard's training. So that would obviate the need for this group to be doing work like this. Just just so folks know. So don't get Good. Good. too deep down the rabbit hole if that's an option maybe for the future for you. So, for example, opening API could register its own meeting types. without writing an RFC. Exactly. You still need a specification. But it doesn't have to be an RFC scene. Could you right right now, the requirement is that specification needs to be from an open standards body. What we consider to be an to us, the w three c, if you are the folks. zipping that up. Zipping that up. Right. could you give an opinion on whether there would be advantages to having an RFC for something such as open API, That's a big topic. It's it's up to that community, really. I think, you know, what they want out of it. maybe we should talk to him about that. the advantage of using that process But that's being proposed is we don't have to sit in a room like this and do this. So Thank you. Bye. without chair hat. just to address one of the concerns Roberto I think one of the challenges that we ran into with the Yamal Media type was the fact that there were multiple different fragment identifiers that were possible using anchors, that is not something that's possible in open API, and therefore, You have just Jason Pointers. can you join the Yeah. I don't I'm a I'm a lot to have this. Yes. You may join the kit. But make sure it's the unit. big."
  },
  {
    "startTime": "00:16:03",
    "text": "And say your state your name. Henry Andrews, So in open API 31, since it's using the mode the more recent JSON schema, Dollar Anchor, you can have plain text fragments that work within the JSON emus. and then as well as the the the JSON pointer fragments And then there's also the whole thing of embedded resources. So there is a little bit of complexity in there in terms of managing what kind of fragments can be used in general, and then inside the schema object. I I think it's fairly well defined. and THAT I SPECTIVE JAS ON SKUMA HASN'T Substantially CHANGED. I THINK the only thing they're still planning is making opening up to unit code for IRIs, instead of just asking Yeah. Yeah. Okay. Yeah. we should we should have conversations on the GitHub issue and take into account Roberto's concern and see whether or not we do have to do these in parallel or whether we take the the mark shortcut. Yeah. I I think I think at least one of those issues on there, I think I do go over the different project things in there. I I I recall writing it, although I written that in a lot of places, so I might be misremembering. I think it is fairly think you could you could define the handoff to the schema object without having to have a have a have a have an RSC for the for the JSON scheme when you get tight. in in some sort of reasonable way. But Yeah. the competition to have there. Oh, and if you want, I'm sorry. Gotcha. The microphone button. If we want to if in open API moonwalk, we want to change the referencing structure. Would that be a different media type because then I don't know, like, At what point any of that needs to show up in fragments versus not I mean, hopefully, if we're if we're switching to"
  },
  {
    "startTime": "00:18:03",
    "text": "different kind of referencing than the than the the front would become less of a concern there. Yeah. I mean, that's a conversation outside the scope of this. Yeah. But just just, like -- Yep. -- for for for saying, like, oh, it's fine. We can just sit for fragments or this, then, you know, we need to make sure Okay. There's no other comments on that. Mark, do you wanna give us an update on linked template HTB Headerfield, Yep. So Link template, we have had it on pause for a while. because it includes things like the title. parameter. And we've been waiting to see if the HTTP working group gonna publish a revision of of structured fields that allows non ASCII characters and low and behold it has. So we can do that now. We can have not asking titles, if you so wish. I think it raises kind of an interesting question about how we handle other extensions in link template in that. to to use structured fields, you need to know how to map things to the different types. and started with an extension that people are or or or a new parameter people are defined for a a link, and, of course, that could be defined by you know, on on the relation type itself or the serialization or or whatever. How do we how do we find out what the type of that thing is if they don't define it. And I have some ideas about text looking right. take care of that, but it's probably gonna be along the sounds of it must either be a string or or a what we call it, display streams, internationalized stream. So there's some more"
  },
  {
    "startTime": "00:20:02",
    "text": "text to write, and I think we need to incorporate that. display string for at least for titles. and, hopefully, we'll be able to ship it relatively soon. I don't think there are any other issues threats today. Excellent. If you could just stay there for a moment, Problem details. is is mixed. Oh, Hans Hans York has a Quest. answer a couple of audio. I shortly checked that graph yesterday after Daryl pointed me to it nicely. And what I've I got confused by one thing because I think and said it's ahead of you. but I saw it also references the web linking RC. but it doesn't seem to include a web linking well attribute for the link templates. also. Right? I would probably find that useful. as well. if you don't have control over the HTTP address, be able to do the same thing in the or did I miss something? So I understand the idea here is I can signal in the we had a this is in your item plate for the site or for the page. Right? Yes. Or did I get it wrong? Alright. it's a way that people have have said that it's you know, we just as it's interesting to sometimes convey lengths in the headers. Sometimes people think it's interesting to convey a link templates in the header. So, for example, if if you have kind of a generative site where you have user accounts, and each account has its own page. You can say, here's the template for user accounts. you know, put the user in the template, and then people can generate their own your eyes without having to supposed to list everyone. So with that in mind, Yes. My use case is probably a little bit different, so my use case would to be and I'm not sure if this is in the scope of right templates, but I guess it is somehow. You have sites like Google Maps where this is which have a certain pattern also in the, you know, in the URL."
  },
  {
    "startTime": "00:22:00",
    "text": "which is not necessarily for for a dramatic users and extent, but also for end users probably construct links for that and so on. So for this case, it might be interesting for a page like Google Maps, for instance, to advertise this within the HTML so that teams can crawl back and probably provide side, like, okay. This is So ERI templates that could be used by people We can probably also continue this offline. Totally. I think that that's an interesting thing. So let's take the Google Maps example. If if the use case is the I want to create a tool to go find that template and then create your eyes from that template. That certainly, somewhat within scope. if if it is to if the use case is to look at some EORIs and pages and be able to derive the the variables in those URLs are, that's not in scope because your templates don't work that way. the first is what you wanna do. Yeah. I I think that's within the scope. So what do you think is missing? Yeah. So I think as a site owner, if I'm Google Maps or whoever, you're I might not be able to put this only as a header because I for some reason, I don't have control of the header. and crawlers typically might just analyze from any kind of metadata to the HTML. Therefore, it might be interesting to have a different alternative way of using the wet linking stuff. Right? I I don't disagree. We don't control HTML in this room, unfortunately. Yeah. Yeah. much more interesting world if we do. But do you want a new link relation? I think this is a framework for that and then need to find the, like, the relation, etcetera. It would be my It's an interesting use case, though. Yeah. K. Could you create an issue? And we can just work through and see what the because it's an interesting k. Now, Mark, you gotta go back and tell us about problem details. Okay. problem details is in the RPC, every queue, I think. Yeah. And -- I think we're working through a few minor"
  },
  {
    "startTime": "00:24:00",
    "text": "corrections and things that the RPC does. And policy. Excellent. Thank you. which brings us to the defrecation header. which is not quite as happy a story as problem details. We have gone through a number of iterations of conversations about how to make header come through. There have been some proposals about changing it to be a more sophisticated life cycle We don't seem to be landing on clear consensus and direction and we are looking for people who are very interested in this topic that could maybe help move this draft forward and if there are people who are enthusiastic about moving this forward. then What was the phrase you used? parking, the spec. Just we had spoken offline with Eric Wild, and he is happy for someone else who has got time and interest to take the torch forward. If we don't see someone here in the room, then we will ask on the list And if there's no action, then we'll just sort of park it. say, working group isn't ready to work on this yet. Everett. Hello. Hello. you all hear me? Yes. We can. Oh, cool. So I'm pretty interested in this header, specifically the current simple one. And I think it makes a lot of sense to you know, any kind of ACB clients can just kind of intercept this and bubble up to"
  },
  {
    "startTime": "00:26:00",
    "text": "you know, browser consoles and stuff. I think it's super useful. I'm also willing to volunteer to help push this through. I'm less excited for some of the more complex suggestions that I heard from the last IETF. But so I'm mostly excited for kind of the simple version as of this right now. So I know that's helpful. But -- Yeah. -- but -- Yeah. Okay. That's that's great to hear. We should continue to have that conversation. Excellent. And don't go anywhere ever. Oh, yeah. next up on the list. Do you have updates for us on HV API authentication link. So I don't. Not really. I I guess, like, since last time I was adopted, I nothing really this hasn't been much discussion. I'm know, obviously, I'm so interested in this. I've been I made a first draft several years ago, and I've been to, you know, get a little further down the road ever since. And so also not being super familiar with the the process, I feel like it's feels kind of uncontroversial. So I don't know what next step is supposed to be, should I just try to ask for more feedback on the list or have any suggestions for me? Well, we we we can do that here. So questions to the room. who who's read the draft? Request to the room. if you're interested in link relations for authentication, Please read the draft and provide Everett some feedback. Thank you. Okay. Thanks. We will One of the things we can do is we can ask for somebody in the security area to do an early review of it. if you'd like, like, OAuth or something. Cool. Alright. So the the chairs will take that as an action request an early review. Bye. Thank you. Thanks, Efra."
  },
  {
    "startTime": "00:28:04",
    "text": "Okay. So this brings us to some of our or meaty conversations. They're in our I lost the slides. In are we don't have slides for this particular issue. There was an issue brought up with regards to the Item potency key header, David Benjamin is David in the room. their their You're hiding there. Would you like to just share with us your your thoughts on I don't think that the authors are in the room. But it'd be good to get feedback on your idea. Sure. David Benjamin. So the comment was sort of So the draft, if I remember correctly, specified the name of the header didn't really specify the contents. It said something Something to along the lines of to send it, you need to have a priori knowledge of the servers syntax for the value which one strikes me as not really sanitizing anything, and 2, leaves off some, like, some makes it so that a a generic client cannot as easily send this thing. I can think of a few cases where the use of for generic client For instance, for better or worse, in browsers, we retransmit host a punch, it's it's it's horrible, and I wish we didn't do it. But one of the things that's kind of unfortunate is that there is no way for a website to deal with this even if they wanted to. If there were a generic syntax, we could conceivably just send it by deep send some defaults for random value, and then This way, like, you know, we we, as the browser, wouldn't be able to rely on it. But if the server wanted to recover against these kinds of retries. They could just check it. I could also imagine that if the syntax were were well defined, then some more convenient HP APIs could be built on top of it and so on. And so When I say HP APIs, I don't mean it"
  },
  {
    "startTime": "00:30:02",
    "text": "APIs over HTTP and APIs for sending HTTP requests. So Yeah. Can we standardize a value? so there was some wording that was proposed originally by David or I propose that he corrected, and we're trying to share the screen. on the particular wording, to get feedback, I should've just shared it from my screen, but it wouldn't let me. Do you know? Yeah. Yeah. businesses. We're getting there. Let me try again. It should be Yes. not working? that one. I can't figure out which screen to share. bulk. Maybe I can share it now that I just wanna share my desktop. Okay. Okay. Yeah. should be So again, without chair hat, the the the wording such clients may choose to send an key field with any valid random SF string to indicate the user's intent is to only perform this action once. with that Ferrari knowledge, general client cannot assume the server will respect this data. the office provided feedback that some of the words in there were not words that were already introduced, so it will need some wordsmithing. But be interesting to get feedback from this group as to whether or not they think is value in enabling this scenario of plants being able to assume that there's going to be Potentially,"
  },
  {
    "startTime": "00:32:00",
    "text": "item potency. This is where we flipped the question around and does anybody have any objections to it? Okay. Well, we will continue working with the editors of the draft. Austin's in the queue. Austin, Hello. no objections as such, but I was thinking maybe offering the option of publishing a method would guarantee this behavior would be something to look at that we clients could see Oh, well, you don't support this, then I'm just not gonna risk it at all. something like that. When you say method Do you mean HTTP method? or we're using the phrase more general in a more generalized way. Something that would reliably fail if the server doesn't support it, and the client wants that behavior. don't know. Maybe hopefully, that's not too much asking too much, but I I I invite you to come add that comment the issue, and we can We can add to that conversation. Everett? Hey. Is the expect counter? Is that something that that's still useful Because if there's an expect 1 hour to continue header with, basically, like, of server doesn't implement it, it must or it doesn't recognize the keyword. It must error, and curious. I'm The the expect header is hot by hop, so that might confuse intermediaries. Okay. Just go ahead. Bhagna from Apple. I I admit I haven't read this graph but I was just curious. Does this mean that"
  },
  {
    "startTime": "00:34:04",
    "text": "The methods that guarantee item potency and the ones that don't can both carry this item for density key, that when I say the methods, it's like your ACDP Gearedum. post or whatever So wouldn't that lead to confusion, and different implementations different clients doing different things. based on whether or not that based on the client's assumption of what Okay. If if it sets this header, God knows what happens. So we wouldn't be changing the HTTP semantics of get, for example. Right? That's outside our charter and so on. but this could be a way for servers to say, well, how was avoid the do not hit your repost button while this transaction is in progress. I'm just worried that this is gonna cause a lot more problems for example, Some browsers do retransmit posts, posts, some don't and It's even though the daughter sees says, well, Don't do that. So adding this, I I just feel that it's gonna add a lot more complexity And and that's more that's my feedback. And and lot more divergence and then things work on some browsers things don't work on other browsers, and that's just not right. just just That's my feedback. ahead, Dave. Go is mostly a minor comment, but I guarantee you every browser out there retries post This believe Mozilla tried to get rid of this, and it there were service that we're relying on it because what we do is we retry them, to deal with a race condition with connection or use. It's it's terrible. anyway. So to that. I tried solving that."
  },
  {
    "startTime": "00:36:01",
    "text": "Trits, No. I don't have a solution for it. I was way too complex, and then So I just I I'm just a little hesitant to getting there. that's that's Yep. Thank you for that input Okay. If there are no other comments on this topic, we will move to the next one, I've stopped sharing. and Now I gotta remember what is the next item on the agenda. get there in a minute. Okay. It's coming. Oh, rate limit had as it's that's My Mine, I'd take off my chair hat again. You wanna show the slides for me? Okay. So I have someone in the queue there. Yeah. Aaron. I Aaron Prekeet. Sorry. I was wondering if I can go back one topic and make a comment about the link relation Sure. Cool. Yeah. So I did skim the draft on the link relation authenticate header, and I was curious who is the intended consumer of that header. because I only mentioned another consumer of the header icon, and the draft was browsers. Ever. ever, do you wanna take that? Perhaps not. I'm post the question to the list. Okay. we'll get a notes around of it that way. yeah, my my question is who's seen in the consumer because it seems like if there's not an"
  },
  {
    "startTime": "00:38:00",
    "text": "API consumer then I don't really understand the purpose of the header in in the HTTP API group. If it's a browser and tends to consume it, it seems like it's gonna need to be done in a browser vendor Veragan. Would it be reasonable for an some kind of native client to consume it. Not entirely sure. yet. I haven't thought through. But that's why I was curious to know more about the intended uses of it. it seems pretty sparse in the draft right now. Okay. Well, that's good feedback. Great. Thanks. Okay. this is a proposal for a change to our rate limit header specification that I've started working on with Roberto. if you recall from a previous think in IE, TF115. We made the call that the rate limit header would be reduced to a single header field with a dictionary structured field dictionary. and Roberto made that change in draft 07. So you can now define a policy And you can say what are the different limits that are applicable to a particular resource. and by using different limit values, you can actually have different amounts in different windows. So you could protect in a short period of time against spikes, and you can also have quote the limits, But at the moment, the assumption is for the same resource, those quota units have to be the same. So"
  },
  {
    "startTime": "00:40:04",
    "text": "you can do a number of requests, but you couldn't do number of requests and number of bytes. against the ceiling resource. you could do it against different resources, so have one resource that's limited by bytes and another one that's limited by requests. but you can't have 2 different limits. on the site. Also, when you get that rate limit header back telling you what the remaining is the guidance is that in the spec at the moment, I believe it says that it is the one that is most close to expiring. which especially if that first limit value changes might be tricky to know. Is it my protection limit that's expiring, or is it my quota limit that is expiring, inspiring, inspiring So next slide. I have proposed that that we introduce an identifier for the policy. And so you have some identifier, in this I called it the first policy protection, the second policy quota, And when you return the rate limit header you identify which of the policies you are close to expiring. or potentially not close to expiring depending on when the server wants to Return it. this has the advantage of enabling you 2 have Different quota units, that are protecting the same resource the current syntax, though, in this proposal still has the limit that you can only turn 1 rate limit header because of the fact that is currently set as a dictionary"
  },
  {
    "startTime": "00:42:00",
    "text": "So you couldn't return both policy protection and policy quota because of the way structure should feel because of header, folding header there's multiple headers would end up having duplicate keys. And so That particular syntax is is is limiting. And I have another proposal but Mark has a question. Would you like me to go together. Okay. So last slide, this gets a little bit more terse just because I could. and In this case, we use a stroke an item structured field item to identify the policy and then use parameters on that policy to identify the remaining and the the the reset This has the advantage of now allowing you to return multiple it also has the nice side effect of because those the remaining and the reset are just parameters, you don't have to like, in in the draft 7 at the moment, We have the keys, and then we say, oh, and these keys are are not allowed to have any parameters. We don't need to say that because you can't have parameters on parameters. And so that is what I'm suggesting and looking for feedback on. Okay. we have one good. Anybody else have any comments? Any preferences between 1 and 2? Any what Freissing away. Yeah. are My phone is not on the Internet properly. Hi, Aaron Perkins. I'm I guess this is ironically similar to my last question. What is the expected"
  },
  {
    "startTime": "00:44:01",
    "text": "consuming use case of this data. Like, what do you expect a client to do once it knows which policy is is It's approaching. That's question 1. I have a second question. Right. Right. You want me to not try and answer the first first? Okay. Back off. It is an is it it is the ability for a client to control its own rate limiting. so as to avoid the service telling it it cannot continue. It will not. serve that result. and it needs to know which policy it's violating and hard to do that. or if it seems like it's just back off. is back off regardless of which policy It's violent. Sure. Because it might be It might still have requests remaining hits. Maybe it's uploading files. and it has a whole bunch of files it needs to upload. It has big files, and it has little files. it's not running out of its rate limiting result quota. but it is running out of its bytes. So it says, okay. well, I'll go and send a bunch of small files then. rather than sending I'll wait a little bit before I send the big files. So in theory, it may be able to adjust the types of requests that it makes in order to continued delivering value to the consumer without getting blocked. Okay. Okay. I guess it seems like you've already got all the information needed in just one of these headers, headers, order to do that. No. because one of the headers well, in this particular case, because you're you're right. In these particular examples, I didn't change quota units. I'm still just using the original example of being throttled based on the number of requests But if you were to imagine a new policy based called Bandwidth, that constrained you on how many"
  },
  {
    "startTime": "00:46:02",
    "text": "bites you are allowed to download over the wire. then you could avoid getting throttled on that policy whilst continuing to make requests. Okay. I'm gonna have to put that together in my head. a little bit later. But the Second part of this is it feels to me like there's a risk of the server exposing information that it doesn't want to like, There may be. hidden policies or policies that it doesn't want to tell the details of to the client that it still wants to tell the client, like, to back off but not exactly why. like and it seems like that's a pretty common case of of trying to reveal just as little information as possible. the client while still making it able to do its work. to So I'm a little bit worried about like, if these names are really things like protection quota or things that might have a a a meaning that might reveal too much information And it may be better to let the server do that in a way that doesn't. That's more opaque of a client, I guess. That's that's fair feedback. My response to that is the server is in complete control of how it names those policies, and it is free to make them as of pure as it chooses, But there are also we run into very common cases where customers are asking us to provide APIs that explain exactly why they are being throttled so that they can do something about it. So this as both scenarios. Alright. and then going back to the original original question, then what's the purpose of naming them if the goal is just to provide the data. like, like, can't you just provide the values without having to name"
  },
  {
    "startTime": "00:48:01",
    "text": "that -- Ah, Yeah. Because there is needs to be out to ban communication to to say what is the unit of protection and what is the unit of quota. Like, in in this case, they happen to be the same. But if if Like, nobody's gonna look at Bandwidth, and be able to infer that it spikes it would require out of band documentation to communicate what those units are. Now we've had feedback from people saying, We also want to encode the units in here, and there should be a registry of units and you need to provide those other things. And so that's that's a whole other conversation that needs to be had. but -- Okay. -- baby steps. Hans Jorg? Okay. Hans a couple of I think this is a super useful and interesting draft. I'm a little bit in the p d for myself so that I don't follow it more closely. So ping me anytime if you really need a deep review of it, I will do. So I just give it from time to time. I'm being here. thing that, Eric, if you need use cases or why this is relevant with us, we We use this kind of stuff. plenty of time in legacy if we are silvering that. to the point you made in terms of exposing too much information. I mean, the fundamental consequence, which be here just to deliver a 5 or something swaddle without anything else. The problem is nobody's benefiting from that. I mean, that's bad for the provider, and that's bad for the client because the adoption isn't really we're done that. Right? Nobody knows to do what to do in that case. And, typically, we talk about an authenticated connection here anyway. So there should be a trust relationship between the client as a server. My actual point is basically One thing, I couldn't immediately detect. So see the label thing here, but I'm not sure if this is also supposed to identify the actual policy in terms of How can I look set up in the API portal? Because sometimes it might be helpful or not just sometimes, but"
  },
  {
    "startTime": "00:50:02",
    "text": "you know, there's possibilities also to request a race of that thing. You might be in development with an API, whatever whatever whatever. it's so it might be interesting to have a mechanism here so you already So They also know which which kind of you know, entities' policy is attached to. I'm not sure if this is already covered here yet. The second aspect, I'm not sure it's covered, is probably where this from which layer the stacks this comes from. Because if I talk to a certain stack. You know? Wait a minute. It might apply on several you know, layers along. there might be policies kicking in from the firewall or from the exchange back and whatever at the same So that I think would also be interested Yep. It it's an identifier at this point in time. You can structure that identifier to convey as much or as little information as you want. we should discuss whether or not that should whether the spec should define additional semantics. Okay. Thank you. Park. Yeah. Mark, not in hand. Yeah. I'm not concerned about the naming thing. I think that that's just a nifty way to be able to refer to, you know, a bucket of requirements or a policy. and you can put as little or as much as you say. If if you call it through We can call 1 No. Kick up one person. that constraint. great one. No. Yeah. Stop. Yes. Don't. use my side or whatever. And then I think the the actually, the the previous comment about different parts of the infrastructure is about taken. You know, that's a that falls right into the naming issue of, well, you know, this for my CDN or my API gateway or you know, the database in the back end, but but having that flexibility gives you the ability to to do that. I think at most, you need some security considerations about naming. say, well, you you are exposing things think about it. You know? And and that was some people are not gonna put all of the policies that they're enforcing in this header, and that's okay too. And the beauty of this design is is that it can be as simple or as descriptive as you want it"
  },
  {
    "startTime": "00:52:00",
    "text": "I think that's appropriate. Regarding the use cases discussion, I I I have a hard time believing that a client is going to dynamically automatically adjust its its request rates based upon this information. I think that that that that would that's the dream. But in most cases, I see this being used that's being put into a dashboard. It's being used during developments. to figure out is my client, and I use this API appropriate and I need to introduce caching or do I need to think about how I strategizing my request so that it's a reasonable load, and I'm not violating the rate limits. So I think that that's you know, I I can very much see this being built into some some development tools and dashboard products to make that surface that information and make it more and I think that's reasonable impetus to standardization. The the the other question I had was and I'm I'm sorry. I haven't read the draft in a little while. You you talk about different units. the unit isn't actually in the structures we're talking about here. And I've been muted in terms of not only request versus bikes, but also requests for what scope of this API? Is it the whole API? Is it just this resources is it just posts? so forth and so on. So that's If if if there's nothing yet, we need to talk. So so that that is an open issue. Okay. previously, what has been discussed is that The rate limit policy allows additional parameters And so it has an extension mechanism. And, therefore, you can go and add scoping information, URI templates, some other mechanism in order to identify the set of resources. the one thing that killed me is, like, how do we prevent naming conflict on those extensions, and I discovered there's no way of creating a"
  },
  {
    "startTime": "00:54:00",
    "text": "dictionary value inside one of those parameters. so that we could, like, namespace the extensions. So We are on to a That's not The same as the JSON problem. extension mechanism. Maybe we should actually define 2 of those. Okay. Yep. Yep. Hot. Can I have a word? That's Roberto. You didn't join the queue, but you are welcome to speak. Okay. So at work. to make some some background the general idea of having 2 fields was this the point that If this information is not very interoperable So it only applies to specific use case of provider consumer Then the consumer wouldn't have used process the fields. But if we think that we need to process all this information Maybe. We can just have one feeds. because the problem I see in in this proposal is that the receiver should make a match between the rate limit and the policy it could be the just the rate limit could not be enough. for for processing the the info for processing could be not provide enough information for proceed for processing the And the values. So If we think that we always need to make the match. between policy and limit"
  },
  {
    "startTime": "00:56:01",
    "text": "Maybe it's better to provide all the information in one field. If we think that it is possible just to consume only the rate limit Without looking at the policy, field, Then it's fine having 2. In general, I like proposal too better than proposal 1, And about the security considerations, I think they addressed in in in the current document, and it's essentially what Garrett Sade, You're not forced 2 provide information and that you're warned that policy information should not expose infrastructure information. They are service information, and maybe they just tell you that you are running out of money with respect to the service that you are buying Not that you are the the service provider is running out of infrastructure. In general, About the point whether it's useful or not, you are not and Fast too. use those information What happens in in my experience in the service I I I have managed Let me say, is that Those fields are used when there is a cost of running out of calls. example, I started transaction. that has 5 or 10 subsequent calls"
  },
  {
    "startTime": "00:58:00",
    "text": "But if I know that At a certain point, the transaction will fail because I'm running out of credits, let me say, I should be warned that that this will cause a chain of transaction that that I already know they will send. So Mhmm. To to be sure proposal 2 is better. 1, If we think that we own always need to process all the information Maybe we just can we can just send one field And you the the current draft already contains a lot of security consideration that address most of the discussions that we had in this During this session, Well, that's it. Thank you. Thank you. So there there probably needs to be some additional security considerations just because of this identifier that has been introduced because that could contain information that somebody may or may not want to share. So, yeah, it's probably not a significant amount, but I I think there is some stuff to add there. You're 88 I you'll notice that the in the right limit header, I did remove the limit. value. And so you are correct that you want to know what that limit is, you have to refer back to the policy. I debated on whether or not to keep that limit in to allow people to change that. The The important thing I think about having the 2 fields and this goes back to I've dug into some history and some comments that"
  },
  {
    "startTime": "01:00:00",
    "text": "feedback that you'd got much earlier on this project is that that rate limit policy contains the information that is static and does not change over time, and therefore, Were you working in h 2andh3, and you've got H Pak, you aren't paying a cost. if you just if you want to provide lots of information like scope and quota and whatever else you might wanna add into that policy. And one of the difficult things is there's no real clear guidance as to when to send that rate limo limit policy header. And so I think it's Like, if somebody sends it on every single request, and it contains a whole lot of information that never changes, we want to make sure that there isn't some part of that field that does change that we're then losing those efficiencies. So I do think there's value in in in separating out the to feel the two fields for perf reasons. And I think that's I think that's all I wanted to say there. Yeah. But Thanks for your feedback. Roberto, we will continue iterating over this and and I I think in general, It was positive, but use case oh, yeah. I just wanted to talk to to use cases. to your comment Mark, I think probably in Hans Jorg's world of migration, there's quite a number of people who write very careful code on the client side. I've seeing presentations from people in our SharePoint org. that have demonstrated that if you can avoid wasting that 4 29 call, you can transfer at xpercenttimesfast"
  },
  {
    "startTime": "01:02:00",
    "text": "or when you're migrating information from one place with a It tends to be very specialized stuff. Nobody's going to go and write generic, client side middleware that handles the more sophisticated cases, but there there's definitely some specialized scenarios where they do it. Cool. Okay. We are a little overtime, but I think we can catch up. Thank you, everybody, for that feedback. Next up on the list, is just zoom in here. API catalog, Kevin Smith. Hi, Ron. Hopefully, you can hear me alright from a wet and rainy England, So I can hear you. Fantastic. Yeah. So this one, thank you very much for this this this slot on the the agenda. So this is the API catalog, a well known UI to help discovery of APIs, and it's kinda trying to solve a problem of how do people know what APIs you have, what they do, and where to find them. next slide, please. Yeah. So the the solution to those questions could be a reserved you are right under the dot well known. path of API catalog. and the the current draft have got proposes that a company that wants to make use of this puts a kind of well known hostname, so@a.com. I've got an example here to facilitate discovery. and the draft is not attempting to mandate paths for API endpoints at all. It's just saying where the catalog is to find them. next slide, please. So So following some helpful suggestions, on list, and thanks for those who did those. And here's the current format of the API catalog. It's a link set per RFC 9264, Jason. and it contains machine readable."
  },
  {
    "startTime": "01:04:02",
    "text": "link relations to help automate API discovery and automate API usage. So each API that you have is that the link context, the anchor, and these RFC 8 631 relations. can be provided for each of those APIs. you might not need all of them. But, really, anything which helps that machine discovery and usage is gonna be useful. There's also an ability to add a link to human readable documents, and also a heartbeat status, which is good. And at the moment, we're looking to propose a relation for sorry, at night, on a registration for one other link relation of APR catalog itself, so other resources resources. refer to this catalog Next slide, please. So apologies for the the small font there, but, basically, there's a an example with all of the the options included. So you've got 3 links, free API links, which are the anchors in the colored from there. And in each case, the link relations provided so you can find out the heartbeat of the of the API. machine readable description, human readable documentation, and then the final one service meta that's, again, from RFC 631, which can point to things up policies of use that kind of thing, which could be individual to the API could be if you're into our catalog list. So Next slide, please. Yeah. And what I'd look if we we can agree to get this draft proposal sorry. It agreed to this proposal to get this adopted by the the working groups and things to develop and agree on would be having a binding to the the link header as well. security considerations, I haven't put any thought or work into those at the moment, but I'd be interested to find out if the you know, what those were. That'd be good to know."
  },
  {
    "startTime": "01:06:00",
    "text": "And we've had some some recent discussion, if they're very recent just today. around the the use of the 8 631 link relations of service desk, service meta, service doc, and a comment saying, well, service is a bit generic. Can we have something that says API for example. So that's one to discuss. The other one is that you could actually have a simpler API catalog if all the APIs you publish are Hattios. in that you could simply have a an array of API bookmarks and just say, Well, there's the links hidden. If you're a machine, follow those and that's your entry point. You'll find out everything you need to know there. But because not all APIs will be that way. At the moment, it's got that fuller ability to actually call out the the relations to the service description, the human readable docs, etcetera. So thank you for your time. And like I said, that's just a request for working group proposals. So and Kate. Excellent. We have Roberto in the queue. part, part, I love the goal. I pant years working on catalog stuff. And I'm just not sure about the form things, for example, in beam Against the world, there are some kind of formats and specification to share endpoints bureau with signatures with additional information, And I would probably Luke. there, to check if we can reuse that work in order to provide to to support all the various use case their identity world,"
  },
  {
    "startTime": "01:08:01",
    "text": "implemented in exchanging URL and points, But in general, I love the goal. And, yeah, I think it's an interesting word and work and as a project. That's great. Yeah. Thanks, Roberto. for the support there. And, yes, I agree. The the format, I think, is to be Fully. decided initially, we'd looked at some other existing formats, for example, and So comments on the list were saying pointing elsewhere. But, yes, I think that's a discussion we could certainly continue. Alex? Hi. Alex from Voci Google. I had some questions about the intended use case for this. because it strikes me that knowing what the endpoints are is sort of half the battle, you go and sort of look at what people are doing with API specifications for APIs. You tend to have code generator for doing type checking, serialization, deserialization. And at least as specified, I don't think this format is rich enough for that. And simply in skimming the draft, I I don't understand what all the Internet use cases are. So what is a user of this API catalog is supposed to do once it discovers these APIs. and, like, what is the useful thing there? And that brings a lot of questions around, like, you know, versioning or compatibility with existing HTTP based RPC the Grpc and what the interoperability would be So, like, why I think this is kinda cool as long as we don't tread into the territory once held by IBM, web spirit, with with those files and the FireblocksML things, Like, I could definitely see potential value here, but I I feel like sort of missing the connection to some real world use cases right now. Yeah. It's about it's a fair point. I suppose a lot of the the generic use basis, letting people know what APIs you have. and and and having that an easy to find. standardized place from the dock. the well known You're alright."
  },
  {
    "startTime": "01:10:03",
    "text": "but leading on from that, once you've listed what APIs you've got, having pointers to say, well, this is what you follow to find out. how to use them, some of the considerations you mentioned. That seems a valid case as well. like I said, it's kind of a a a generic case, but really the first part is making it easy to find what you have. without chair hat, just to answer Alex's question, We build tooling that does client generation and one of the features of the tooling is to go search. for APIs to find the open API because it's hard to find because there's no standard place that anybody puts open API files. So having this kind of ability to discover the open API files would would would help help help help help our scenario. question to Kevin we you've called out numerous link relations that would be relevant in the link set. would it be your intention to specify in the document. Here are the supported link relations, or would it be open so that people could add any link relation. like, for example, Everett's off. link relations, Is it is it going to be an open option, It sounds like it should be. Yeah. It's a tricky one. When when we when I first started it, like, I started started off with just an array of API bookmarks, which is quite easy in it. It was just saying, you just go to the bookmark, and you'll find out everything you need to know. but that's maybe a bit idealistic. then we extended it to what we've seen in the example today with the service desk service matter etcetera. some of which are optional. But I see I see no reason to"
  },
  {
    "startTime": "01:12:04",
    "text": "restrict it as long as the link relation is understood. which it should be, As in, you see the link relation. You understand, okay, I understand what this means. a reason why to follow it and what to find at the end of it. So In that case, yes, I would see it it should be flexible enough to support. new relations, as you say. Awesome. do we want to get sentiment in the room about adoption? Yep. Yep. Yep. Yep. Kim? Can we I'm seeing 2 thumbs. Yep. Do we think this is appropriate work for this working group, this working group, I'm seeing a a number of folks. So Moderate interest from some enthusiastic people. I guess we take it to the list, and we will we we'll do the formal call for adoption on the list. Thank you, Kevin. and thank you. Cheers, Earl. for shit. Okay. Next up on the list, is an update to bite range patch So Austin previously presented this document, a previous IETF and got a bunch of great feedback from the room. and has since gone and done some updates. And so we are looking to also identify whether this is now ready for adoption. Austin. Over to you. Hello, everyone. This is the in patch. Next slide. Yes. Quick overview. You know, I wanna change this to first four byte. of a file. How do I do that? Turns out HTTP. That's kind of difficult next slide."
  },
  {
    "startTime": "01:14:06",
    "text": "So actually, the the last revision of HTTP did say you can use the content range header and a put request. and that is that has a particular meaning. But, unfortunately, that you can't use that opportunistically. That might, like, caused corruption or or or things or things or things So Next slide. if you throw this into a media type and use it in patch, then it becomes fairly reliable to use. in a in a Stack Overflow thread, I think, proposed why not just use this in a message or, sorry, a multipart byte range request, which has almost, like, the combination of these two things that exact same semantics. Unfortunately, lot of people really despise multi part. So I also threw in there a message bite range, which removes the multipart separator formats and then since last time, I also defined a syntax for a binary version. application slash byte ranges, which is semantically identical to the multi part byte ranges. supports arbitrary fields and things like that. It So in theory, actually, like, HTTP servers could use this response to multipart or or Yeah. Multi part range requests. but that would be discussion for HTTP biz. Next slide. Yes. To anticipate a question, it does define or it talks about 3 media types, and all of them do slightly different things. But but there there's a you know, 1 multi part right ranges already exists, might as well use it. The application byte ranges again, adapts a binary format. So that's doing something useful. And then the message"
  },
  {
    "startTime": "01:16:03",
    "text": "byte range is an extremely simple syntax. There there is an exact representation of how to parse it with regular expression. that's 100% identical to the ABNF. You can prove that And Also, just structural binary formats tend to have a human readable counterpart. So that's why there's 3 of them in there. Next slide, So this is sort of an example of how you use it to upload a request in to or sorry, upload a single file in 2 requests. You can use a patch to create the file then you can use additional patch requests to fill out the contents of that Next slide, Next, is that it? Okay. Update 1 is so I I also did throw in something to overload the content range header. This is not Technically, a this is not legal HTTP syntax. So for the purposes of parsing the media type, this might be barely acceptable. But this could also be a question to throw to HTTP biz. to say, should we update the the semantics, the content range header to support in deaf indeterminate length of rights, which is useful if you want to say something like, I want to upload or download this file, which is definitely long. Maybe it's a live stream that's being streamed right moment, you don't know how long it's going going for. but you want to skip the first gigabyte of the file. So this is something that's missing just completely missing from HTTP. it's a feature that wouldn't be needed in this patch format as well. So this might be something that bike shed. Next slide also added a gave semantics to the unsatisfied range form. which is normally used in HTTP when a request is coming back from the server saying, The rings you gave us is"
  },
  {
    "startTime": "01:18:00",
    "text": "Meaningless, but here's use the valid range of bytes that you can request for. the the meaning of that and the put request would be just set the size of the file to this size. So you can use the unsatisfied range form to just set the size of a file, maybe truncate it to 0. it's added in there on the principle that patch operations should have an inverse. So if you append something to the end, should also be able to truncate it off. Next slide. And then, finally, this isn't strictly related to the patch format, but it makes it makes using the patch format very, very It adds a lot of value to being able to use the batch format. The preferred transaction header This is something I Thought off the top of my head last session in Japan. and it got a few nods in the audience, so I just added this in. The ability to specify if an should be requests should be atomic or if it should be able to do just a partial state transaction, particularly in the middle of a put request and that connection gets interrupted, should the server just make that partial put request to public. I'm not very happy with the naming of this. Maybe transaction atomic, I like, but transaction partial is in very self descriptive to me. So if anyone wants to propose a different color for this bike shed. I'd be happy to consider it. And it is also it is generic for NDA to be robust. So you can use this for post requests or anything else. I think that's it. Next slide questions. Oh, yeah. And I I wrote an implementation. So this is this thing, I guess, Excuse me. This is an example where I I took, like, the the opening of the wizard of Oz, and you can see we're patching out a word we're replacing Kansas with London and making that twister much more interesting. next slide"
  },
  {
    "startTime": "01:20:02",
    "text": "and same thing with the the binary framing. So that's it. Questions? Go ahead. apple. So as the one of the editors of the original upload draft I'd like to see this adopted And I I mainly have 3 And since I want to discuss versus I don't think it's possible to change the syntax of content range that's going to cause compatibility issues with many existing implementation of the client and service, And the second part, I I like to see a slightly more defined semantics of the the tax operation, Like, Do do we can we simply do 0 extend when there is a hole or the server needs to keep track of all the holes in the e in the current. file and make sure that they know that this part is not specified. That part is existing I could increase the the information complexity, And the the the third third part is I syncs the applications hy ranges, is actually a very generic thing to to support any multipart request on responses, and that should be a separate document and we are happy to work to together on this. I think it's also useful outside 5 ranges, Yeah. So, yeah, the the the extension with"
  },
  {
    "startTime": "01:22:00",
    "text": "Like I said, I this is this is something that was fairly recently added I apologize if this is taking httpWG by surprise. the overloading the the content range syntax to support indefinite links. Right? This doesn't this is not something that servers would adopt or that clients would ever use. So there's no possibility that it would confuse the existing use of the header, and it is just special case that's saying you a few If you see this header and it uses this syntax than just special case it up. It's it is sort of hand wavy. if there's an objection to that on philosophical grounds, then we could just provide a different header name entirely and say, like, content range indefinite or something. that can definitely be done second point holds yes. The the specification specifically advises against Sparse documents It suggests that servers should just project any requests that would modify byte ranges outside of what already existing. But there there is a possibility that that could be a behavior that servers want to use future. For example, if you're uploading multiple documents in parallel, that could be something that is used for where there would be holes at least for a short period of time. But but in the absence of such server support, It just says, you know, reject any rights outside of the end of immediately adjacent to the end of the document. I I didn't exactly catch your third question. If you want tech, The the third part is the suggestion. I think the applications, my brain is is like, it's a standalone piece that can be used for any right any multi part request on responses. Yes. And I think that -- Yep. Exactly. It You could, in theory, Yeah. Like, clients could, in theory, send a header saying, hey. If you send me a multipart,"
  },
  {
    "startTime": "01:24:01",
    "text": "response for a range request. I'd prefer it if you could send it in the application slash branches format. And then that that is something that could totally be done. You can use that application byte ranges in multipart responses, you can use it for a number of things. But that's sort of outside scope of this document. But, you know, I would love to see, like, PWD take that up and and and figure out how to do that. Okay. Michael Tummim. see my hope. Thanks a lot. Okay. And I think oh. Oh. Oh. Thanks a lot for reading this work. I I appreciate it. I'm interested in it as well. I use similar mechanisms for doing collaborative editing. where you want a client to submit little patches I am So I have a, like, 2 small kind of points questions and then a bigger question. The first one is I have a mechanism in mind myself who are doing the the prefer for transactions they're discussing, which I'll talk with you offline about. And, also, I do like the general generalization for byte ranges. that gives you the determine it end. I think that's very cool. This also seems like something for HTTP. Although you can do it in a small way, perhaps it doesn't affect other systems. That sounds cool. My big question here is, there's a design decision very early on that in this this approach that of where you wanna be able to handle You said, was it uncoordinated or opportunistic patches? Yeah. that that's the because you don't know if a server so Alternative would be to do a content range a regular put, but you don't know if the server is gonna accept gonna understand the content range, you don't want the put to obliterate the content there. an alternative or and you've taken the approach that here of having separate path format within and then you need a multipart"
  },
  {
    "startTime": "01:26:01",
    "text": "content body in order to specify the different components. and essentially stuff the content range. interview this multi part. And and you have to parse that. There's 3 different formats for that. an alternative here, I I'd imagine it would just be to ask the server if it supports content range for it. But but by having header, header, and you could do a head request. That would add in an additional round trip of latency. But if you're doing multiple requests, multi part upload, it seems like that's not a big cost. So what is the rationale behind that? design. Yeah. The by using the media type in a patch request, you are asking the server, hey. Do you support this? And if So just apply this patch. You're asking both questions at the same time at a single request. Okay. So well, how would it sound you could also just ask the server like, having have a new header to say, do you support content range and put? then we don't have to specify multi part bodies, That that's Yeah. causes a lot of problems because you don't know You have to ask each individual resource if you support this or not. Some resources might want to support. partial puts and some resources might not. It's not something that you can deploy across an entire origin server generally. So the Yeah. You'd you'd wanna look it up for each resource. Is that too many And and if you're uploading a lot of resources, that just adds a lot of additional round trips. Whereas this But the the only additional complexity is maybe having to parse out, like, the the header of the the binary framing. but it's There's not a whole lot of it's probably the case that the you know, comparatively, using the binary framing or the the message slash byte range format is probably the simplest option all things considered. Okay. So you're trying to avoid the additional ground trips, and that's that's the reason for adding a new media type Yeah. That's yeah."
  },
  {
    "startTime": "01:28:02",
    "text": "Okay. I I I personally lean on the other side of that design decision, but it's something we can out on the list, I think. Yeah. And if I recall, you also had some other use cases. Like, you want to be able to splice things in. So that would probably be a justification for a new media type on top of this. I I omitted from this one of the goals of this is also to make sure that there's a bound complexity to applying the patch, which is proportional to patch length. So with the exception of specifying the intended end length of the entire upload all the operations, so generally just write a number of bytes equal to the body size of the patch. and that's not true with things like splicing and things which I recall, you were trying to do. So the we can definitely use this and build on top of this and and do more define it like a new media type that does wider range of things. let's discuss it. you sort of use this as a baseline now. Marius, Hi. So just to also iterate a bit on what we already said, HTTP based, we're talking about resubopal uploads, and there is a significant overlap wind, resumable uploads and the byte range. stuff as one of the examples you showed showcases. So I'm definitely in favor of adopting this just to figure out what overlap is and how the relation between I would too. attempts here are yesterday, we we talked to HD with Biz also about a possible relationship between this to drop it. didn't really come to any conclusions. So I think talking about this would definitely help us to figure out how we could collaborate on this and, like, maybe figure out if something, from this drop we wanna reuse in resumable uploads or it's not If not, So, yeah, I'm definitely in favor of adopting this."
  },
  {
    "startTime": "01:30:02",
    "text": "One additional comment is that I think even the simplest form of the media type. I think I clicked Think that's message. bike range, like, even that is I think a bit more complex because you have, like, body and the body again includes, like, request fields. you can't just, like, take the body and it into the file, but you have to parse the body again. dump just just a bit more than I think it's necessary. I don't really understand why it is necessary. So, yeah, that's that's one thing that I was a bit surprised. when we're doing this draft, But other than that, I think It's definitely worth talking about on and hit you with the API. Yeah. Yeah. You I I wrote a little justification to this media type. You wrote an email to the working group mailing list, and I've responded with a bit of an essay. I don't know. I I would encourage everyone to to read that and it sort of offers a justification for this. The the overlap between this media type and resumable uploads And the other working group is this Allows This supports a subset of resumable requests where you're uploading with a, like, a put request. And then you can resume that upload with a patch request. And it turns out this subset of requests that you might want to resume is resumed much, much simpler than the generic case of what if you want to resume a post request. And that's that sort of forms the basis of why this was forked out from the the generic case of resumable uploads when I was doing research a few years ago. And then to answer the question of why why is there a header in the patch and then a body The only other way you could do it would be defining a new generic HTTP header only has meaning within a"
  },
  {
    "startTime": "01:32:01",
    "text": "patch request that uses this media type, Net's not illegal, but strikes me, it's kind of awkward. No. No. That is the direction, I think, you're going with the resumable uploads. If there's performance reasons to do it that way, sure that I don't see any objection to that. But for a media type, It's like, one of the one of the uses is to be able to talk about I want to patch this document I want to apply this contents to that byte range. And you should be able to talk about this patch outside the context of an HTTP message. part of the goal of this is to be able to talk about patches in other context as well, not necessarily HTTP. Hopefully, that makes sense. you very much. Would you like to join the team? Okay. Thank you. I I think one question springs to my mind about adoption here is are we going to make things more complicated if this is living in HP API, and the resumable uploads is living in HP Biz. seems it looks like there needs to be a fair amount collaboration between those folks, and there already is. So That seems like a question we should answer. Yeah. I'm Mark Nottingham. I worry about that a little bit too. I I think this is interesting work. and should probably go forward. But the the coordination there is raises a lot of interesting questions. probably not problems, but but questions. So maybe the chair should get their heads together and check before anything happens. k."
  },
  {
    "startTime": "01:34:00",
    "text": "we will we will have that conversation and bring thoughts to the mailing list for people to weigh in on? Just Curious. How many people in the room or run in the chat have read the document? Okay. is there anybody opposed to us working on some subset, maybe a 100%, maybe 80% because it goes to HDPI, anyone opposed to adoption. Okay. That's good to know. We'll confirm on the list, and we'll talk with those close those over an HTTP test and figure it out. I think I said we take her to come very seriously. I know. you you had had you try it. You try with next. would be Henry. It with relative to Jason Point. Alright. Hi, folks. So, yeah, It's about relative JSON Pointer. Jason Pointer has been around for quite some time. Why do we need a relative version of it. The answer is some use cases, and we will see examples of these. where we know a data location relative to know there's going to be some point, but we don't know where it is in events. And an example here comes from JSON schema annotations, which are a way to attach data to Some part of a JSON document that validated against the schema. and your schemas can match multiple locates So you have the item schema that applies to every item in the array element. and you know that's going to be something relative to that array element, but, of course, that's going to matchable. array elements at runtime. And, also, schemes can be reused in unanticipated So you might not know Even even if kind of the way you originally looked at the schema, you might know the absolute"
  },
  {
    "startTime": "01:36:01",
    "text": "that you could put up absolute JSON Plinker on. If it gets released, you might end up you might end up attaching to different parts of a of a document. Of course, URI fragments. are opaque in terms of your of relative reference resolution, so there's no way to feedback on top of how your eyes are done where we have you know, get some pointers encoded into fragments. The fragment is either kept or not. That's it. So that needs to be some other mechanism to to to do relative paths within a fragment. And this also avoids the complexity of, queries and wildcards and regular expression matching, that are involved in some more complex formats that can maybe do this sort of thing in in some way. So this is just supposed to be simpler and faster, and it's also intended for use where we we know there's a single match in this We're not actually trying to scan a whole bunch of different options and pick one out of them. We we know where it's as long as we can relative to some initial location. Next slide. So what a relative JSON pointers, they they break down into basically 4 components, which I I I highlights are there with with brighter colors. grouped into two pieces. There's the origin specification. Where am I starting compared to So there there's your initial location, and then it's like, where am I actually going to move to relative to this location before doing anything. And then there's what do I do? and the Where am I going to move to you first, breaks down into a parent count, which can start from 0. how many levels up. Do I go in this JSON document model? And then there's an optional index adjustment, which is if this is an array, how many how far back in backwards affords? do it. That's where I wanna go. And then once you found that that new origin, you either"
  },
  {
    "startTime": "01:38:00",
    "text": "Take the index or name index of the array, element or name of the object property by using the the little hash mark, operator. or you apply a regular JSON point which might be the empty starting. Remember, the empty starting kicks on. Pointer is whole document in this case relative to the score. So those are the those are the 4 pieces right there. This keeps it distinct from JSON Pointer because you always have to start with that nonnegative parent count and JSON pointers are always either empty or they start with a forward/ So so when you are potentially using both of these things, you need to say that you are using both of them, neither is a is a subcenter of 2% of the other pipstink, and this also helps avoid People are accidentally trying to encode relative JSON pointers into your ad fragments, which does not add any meaning whatsoever you have to pull the pointer out do something with the relative one and then maybe create a new UI. So there are there are few simple examples down there. Just playing 0, that's that's That's use the current location wherever you're starting and and the the empty JSON pointer, so it's it's wherever you are around. 1, and then pound is move up one level. then give me the index or name relative to the next level up to the grandparent. And this can also be kind of combined with the JSON Pointer can use a dash as an array index as the next thing after. the the next index after an array so you can find out that that next And then the 0+1 slash food that is start from here. As assuming this is an array otherwise, there's an error, move forward 1, and then take the FUO object. take them through of your property, take the value of that. by applying that that slash view JSON pointer as if that were the root of of of of the Next slide. So the current specification is"
  },
  {
    "startTime": "01:40:04",
    "text": "talks in terms of having the document and and and your location, and then about winning from there. and and that is straightforward, except that ass sibling access isn't really something that is part of how people think about the JSON data model. and most checks on based tools don't necessarily have that. And I've seen at least 1, based on point of live say, no. We're not gonna add support for that because we don't wanna deal with. like, parents of the mix. I unfortunately, did not write down which library that was and life, but So I think one thing that is that we need to be resolved is another approach would be to resolve against a base JSON pointer and then apply that to a This breaks it down to some fairly trivial step and then the already already known process of applying a JSON pointer. And there are potentially some things that are safe to do without a document, but or or we could potentially allow things to say, You can do this. It may or may not work. I don't know. There's there's some there's some issue in use cases around that. I think that's an area for discussion. But that seems to be the one kind of barrier to implementation that I have seen. that could be addressed in Slack. because, actually, the first time I tried to implement relative JSON pointer because I did not originally come up with the spec, That was when I assumed be done, and then I realized that actually no couple of weird more cases to take care of the And then next slide. There are already some plenty of implementations out there, although not in every language that you might want to find, There are a couple supporting index adjustment, which is relatively new, and it's not like it was really advertised or attached to something that would drive adoption of that. But there are a couple of implementations there. I use that Python 1 extensively, I'm the one who had an index adjustment support to some bias and that goal and, like, literally just appeared this past month."
  },
  {
    "startTime": "01:42:02",
    "text": "There are quite a few implementations of earlier drafts, including the one of the one of the very popular JSON form implementations in jobscrip/type And then You'll also notice it tends to show up in these, like, suites of JSON based tools. There are also there's some standalones, some attach Pointer and summon in these larger JSON Utility Suites, which often include Jason's schema, but not necessarily. Okay. Next slide is an example. So here's something that I'm working on right now involves person invalidating, open API, documents. So there's a schema for open API documents. and So part of the parsing and validation is I run that schema anyway. So I added these annotation keywords, And what you see here is with this OIS examples is that There are a couple of example like keywords that are going to be in this instance relative to the location. So the example keyword and the default key work, here. And Both of those should be valid against the schema and level schema So in this this case, 0 says like, okay. This is the schema. The schema has fields examples and defaults and we want the r search to read these little annotations and say, okay. I know I need to validate those keywords, the value of those keywords, against this month. And that can match in schema updates all over the open API. document. And then one more example. Next slide. Yeah. So then here's a a more complex thing. This is going hyper schema, which is, of course, kind of indefinitely on hold. I don't know where that is. But this is kind of the original use case, and this shows some more complex things. where we were using pointers to help fill out your eye templates. So can go over this in more detail if people want. but it's it's it's kind of attaching links into certain, like, array elements and then looking into the parent, looking into the next thing,"
  },
  {
    "startTime": "01:44:01",
    "text": "or changing where that link gets attached because of the link is not actually the the place where you're starting from. it's it's higher up in the document. And if you to attach it directly there, you would need wildcarding And we we wanted to avoid wildcarding, so you can found ways to always get down to a point where you just needed to to team that have one unique reference to another piece of data. And that's that's it. So bushings. questions. Objection. Has anybody used these before? We have opportunity no comments in the chat. k. There's no objections. We can you're looking for the working group to adopt? Yeah. I mean, I would I would like to the the spec is adjusted for years, you know, kind of in the same we're doing both checks on schema that kinda just there's another draft every month once in a while. And But there's nothing really all that complex here, there's the issue of resolving without a documentary that's partially resolving about a document And and I think that's about it. I I use these a lot that's the only one that only real thing that I've come up with that has an article addressed. other use cases here. Like, I have a schema with an annotation format that will take the data structure and automatically translate it into database queries and just loaded into a database, for example, and that relies heavily on relative JSONPoint you expressed the that maps it data relationships, and then it just automatically maps that in. You don't have to write a handler Davis. So I I mean, I found a lot of use cases. know how we use this. Other people have found, but there are implementations. Right? There are implementations that has not been a problem in I mean, I must have worked with you the Python occasionally. TopScript or something like that. So I haven't had trouble there."
  },
  {
    "startTime": "01:46:03",
    "text": "Somebody's used it because they have to. Bye. Hi. Yeah. Michael Tumman. So I I'm not using JSON Pointer, specifically, branding adjacent work, it's, like, interesting. I'm working on a JSON range unit. we just talked about content range. You can do a range in it in JSON, but let's you specify a range of JSON. which is you could use it for instance, specify, like, 5 elements of an array. Right. Rather than just an individual element, That's also useful for collaborative editing. Anyway, so It's similar, but it's not exactly this. I haven't thinking about relative ranges, I'm interested in incorporating that idea into my work as well, but obviously, haven't brought this word to the IETF just yet, but your interest in collaboration on here, Yeah. No. That that sounds interesting because you should express that, right, as a as a JSON pointer to the array or to where the starting point of the array is and then a relative point that says just 5, and and Yeah. Yeah. That that Does Jason Path support a slice of an array? other thing. Yeah. I don't know. I doesn't Once or twice, I've looked at JSON path or James path for something, and I've been, like, I I don't need all of this, and I don't wanna. So I just moved back in here to my lunch with Jason Pointer because it's so much easier to do. And and, also, even though it's not a formal acceptance back either. It's just very simple. k. Okay. we will we will it to the list. Take it to the list. you, Daniel. Thank you. Mark, Europe. once. regions, regions, No. Yes. Lee has. Hi. Next slide. say that a number of times, and we're done."
  },
  {
    "startTime": "01:48:03",
    "text": "Yeah. So web linking a framework for thinking about links on the web not only in the link header, but elsewhere as well. And it's paving that cow paths, of you have only context. You have a relation type. a target. and target attributes, which is kind of the extension, everything else bucket. Next slide. and and the spec says this. you know, that those target attributes are defined by individual link relation types and by link serialization. So they're uncoordinated. They're just this Amorphous mass. And and next slide, what we're finding is is that there are often, you know, use cases that are common between different relation types and serialization especially when they're talking about HTTP links. When you're talking about interacting with an HCB resource, you often need to say the same things. Next slide. So, for example, all these things, I'm not gonna rate its to you. But there are, you know, different aspects of interacting with the resource. And interestingly, a lot of this information is also available by interacting with the resource and things you know, the allow header know, the different sorts of things we're talking about. We're actually and, you talking about some stuff in the http working group that extends in this direction as well. But those are all protocol interactions, not linked decorations. Next slide. And so this is just simply a set of predefined target attributes that either of link relation. I shouldn't have said format. I should have said link link relation type. Sorry. or or or a serialization can can the kind of opting to. to to get that set as a well defined basis for for what they need to do. Next slide. And so then that's the question. I I wrote this a very long time ago, and I haven't updated it recently. I would need to take another password and see if it still makes sense. But I kinda let it sit out there to see if anybody was interested and recently bunches"
  },
  {
    "startTime": "01:50:04",
    "text": "not much. Just but a few people have come up and said, hey. Yeah. We're interested in this. We really wouldn't use this, or we have been using so it seems like an appropriate time to ask, k, do we actually wanna make this real? That's all I've got. lunch, lunch, Who's read the document? Okay. So I think before we do an induction, we'd probably wanna take a pass through it and post a new version? that make sense? unless people are interested. Alright. Well, I guess we'll ask if people are interested to have Mark do more work and and confirm that on the list. Yeah. Yes. oh, oh, Yeah. Sorry. Everett. Oh, yeah. I just want us I probably one of those people that asks to, you know, already, like, asset mark 2 to keep working on this. We've been using this for years. So it's kind of we've I've been building hypermedia APIs for many years, and every now and then, like, I need, like, a feature, and I try to find it. And and Austin, I end up going to link and see, and it's, like, has it just the thing I need. So I think this is very useful. It's been very useful to us. Hey, Michael, team. I just have a question. I I saw that you can use this to know whether a server supports range requests. And I'd be very interested to know an example or a use case where I want in a wing cutter that would really help me know. Really help me know. That's merely there because there's an accept ranges header in HTTP. Okay. Do we have some use case that would help my mind also. understand. For in general, for using a for the link header and these cases. Yeah. ever."
  },
  {
    "startTime": "01:52:07",
    "text": "I mean, honestly, I just read it down because I thought it was reasonable idea. Yeah. Yes. So so for us, the kind of think about, like, how APIs are described. Like, the the kind of open ID model is kind of external documents that has a set of endpoints, on the hypermedia side, The the endpoints and the features that are available there are kind of one of the same thing. So we wanted our endpoints to be able to I'll describe which features are available as much as possible. And so we also generate a lot of documentation on the fly by discovering features on API. So if we for instance, like, we have backwardation where you can see a list of endpoints for, say, there's an article or something and then whatever operations are available there. You can also see kind of what other features are are available there. And for instance, which we might be able to render a form based on adjacent Hima that was linked in one of the link hints because there's also describe it's a bit hard to explain, but it is described by that lets you describe the formats that a request body should have if you did a post request on the target of a link. That kind of stuff we use to kind of automatically generate forms and not presentation and So, yeah, it's that kind of stuff is a lot of it is for is for us has been developer focus as opposed to focused on generic clients. So it's more something for humans to consume I guess. that make sense? Does He said that was very helpful. So thank you. Okay. Cool. Cool. Huntsville. Actually, ever partially answered a little bit what I had in mind, but my main question would be having not read"
  },
  {
    "startTime": "01:54:01",
    "text": "broadly, to be honest. But from the presentation, it sounded to me quite similar to something open API in general and also choose the API catalog. aspect we have seen before. So even though I I understand it's not exactly the same, but it might help somehow to you know, sets the things in relation probably also in the graph to the help people, like, understand what is the use case for this, how is this related to that. Right. Yeah. And this is not a description format or any kind not format. It's just a a vocabulary of attributes that you can put on links. if if you so choose to. But if you say there is, like, you know, you can say, Lexus response codes or something like that, sounds a little bit like an API spec for me already, at least you know, like, lightweight 1? Yeah. It's almost a miniature one in a way and and that, you know, We have links, and we already adorn them in HTML, for example, with the type attribute to say that, you know, the the media type of get on the other end of it is probably gonna be this. This is just expanding that to other aspects of how you interact with it than using HTTP. That's it. Yep. 6. I mean, I was basically just gonna say, at what when you've added enough links, do you just say, oh, let's just point to the operation and open document. Yeah. If you don't wanna interact with it, or or yeah. Yeah. If you wanna embed it. Right? potentially building block that formats like that could use, I suppose. Henry Anders. Yeah. When when I was working on hyperscamer, which again is off at limbo. Like, we did add add basically target hints here, and they're they mostly map to HTTP headers, headers, and it was just a preview on there. So this is this this this This feels like a a useful thing to me because it felt useful there, and Yeah. In that sense, it is a little bit of a API related thing, and you can you you because typer steam is in between where open API is with, like, I'm describing an entire API."
  },
  {
    "startTime": "01:56:02",
    "text": "and just like the the actual link headers. because it is templatized, and it is describing a bunch of potential operations in HTTP terms. So so to me, this deal's This plus the link templating actually expands a lot of what hyperschema was trying to do. but without the whole JSON schema. I I mean, to be clear, this spec is not something that would be used directly by somebody you know, working on an API gonna be used by link relation specifications and by format specifications, ideally. Right. Right. So it's it's a it's a layer of interaction, but that that kinda de complexifies certain other aspects, which, like, the the the hyper scheme of spec for this is fairly complicated. So I find that appealing. Yeah. Yeah. Yeah. I I think this is all you know, I would characterize this as relatively hanging fruit that -- Yeah. -- this should be easy to agree on. It's all the other stuff about description and everything that's Yeah. Yeah. And I think that was part of hyperscale's problem is, like, it's just to okay. Here's all the UI templating with extra complicated things, and here's all the hinting with extra complicated So so, yeah, decomposing this skills Helpful. Cool. So Do you have do you feel as enough support to make it worth your while the seed. Or do you wanna, like, look at the list. if you wanna do a call for Go to But I'm happy to to, you know, abide by that. Okay. We'll I mean Well, I'm happy to put work into this if people feel that it's worth putting work into, and the only way to determine that is to do a call for adoption. Okay. My my question, I guess, was picking up on something I thought you had said before. Well, yeah, I need to dust this off a bit first. and is did I mishear the first? No. I can do that in the process. I don't need to dust it off to, you know Okay. So we will take it We'll we'll ask for adoption on the list. I just don't know a vouch for the entire document's contents because it's been a while. That's Yeah. Okay. Okay. Excellent. Well, that brings us to the end of our agenda with 3 minutes remaining."
  },
  {
    "startTime": "01:58:00",
    "text": "So does anybody have any other business that they would like to Right? And as my Mark said, lunch. Thank you very much, everybody. Yeah. Thanks, everyone. This is like, I'm always surprised by how productive and how we manage to fill up the agenda use the time usefully. So thank you all very much. I've Close a pass. back to work inside in TPS You said, now you have to go argue about it. I have we have this one guy who wrote that maintains the original source code from least an asshole. Yeah. supposed to see how they Nice to meet you, Rich. Yeah. Yeah. Yeah. kind of I was like, oh, I'm just listening on this too. I guess I can skip that. Thanks."
  }
]
