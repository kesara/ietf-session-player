[
  {
    "startTime": "00:00:12",
    "text": "okay i pronounced hey sandy do you want to run with them with the minutes or jeffrey i have a presentation two presentations okay true i send it here yeah but you don't like maybe hard for her yeah okay yeah the problem if i open the minutes tool i don't see anything else so that doesn't work particularly well and i can get into this stuff twice it's any kind of a trick for the whole thing that is not very well thought out uh open a new tab okay yeah they have something all right good so i think it's time to start we are on time so topic is 112 so we need to change this topic which i'll do soon so welcome to beer session at ita 113 tony p jr so i'm the delegate and let's start tony p is going to talk about what's going on and provide an update all right so you're sharing the slides jf right yep and you can show up your face as well so we remember how you look like nah my"
  },
  {
    "startTime": "00:02:00",
    "text": "office too messy okay the usual note well i think we've seen that in every group about a million times so i won't you know chew through that stuff unless jeff wants to go once over in the game [Music] so please read not well it defines how your contribution to atf are treated and before you start contributing to atf you really should know but not well all right uh yeah yeah no the media echo is good yeah buttons are changing it's getting better and better so if you if you participate in person please check in so your name gets on blue shade if you want to talk at the mic please get in line draw the tool and then come to the mic and don't forget to state your name for remote participant don't forget to turn video and audio off unless you're going to speak and yeah so minutes are at the url provided please make sure that whatever you say is correct please pick stuff if you see it's wrong funny yes sorry since i have to take minutes out of the over typing all right so agenda simple we do the status then uh we have small prezzo jeffrey this is the stuff that was non-ether now the code's non-mpls um so this is all the stuff that we need to encode in non-mpls case then let's talk about the um io am stuff that was suggested in basically oem in general classes minuses because there's a couple of proposals um uh being tossed around um"
  },
  {
    "startTime": "00:04:02",
    "text": "then uh the brfr stuff comes up again i see uh actually i'm i'm lost where i said on the agenda okay i'm kind of i lost it here then we talk about the brh beer stuff i guess again if there is anything to be talked about and then we do the general delivery function with staff is interesting especially with all the oem suggestions and fragmentation coming up with you know goes across multiple different technologies um all right so we fire off the status all right so there be a bar ipa i think jeffrey closed all the comments it's on alvaro um pim single is waiting for a document to be referenced the the architecture is kind of all sued up i saw everything has been addressed pretty much um the ospf b3 is hanging in publication next one please uh all right so yeah that is the ethernet goes into non-mpls jeffrey will be talking about the stuff next one uh right so the pattern q discovery is waiting for uh write up and ping is also waiting for the write up so i assume there'll be some kicking needed okay the uh bgpls vr is expired idr didn't react um the ibr extensions uh the draft has been expired so we you know we have to go and look for authors again or revive the stuff um and the multicast hp response yeah sorry also exactly so that the draft is being replaced replaced as a presentation today sorry that's where i got lost because i still have you know the multicast http response the brfr has been merged everything is kind of ready there is one um"
  },
  {
    "startTime": "00:06:03",
    "text": "mailing list stuff uh oh yeah i should probably talk about the git quickly which would need to be addressed uh for the adoption i think it has been brought up during the adoption call and multicast as a service will be presented today uh we'll see what the author calls for adoption i'm i will work the queue over once withdraw the status next one please all right so that's kind of the status uh jeffrey you have the mic um yes the our ipa drafts um thanks for alvaro to review it and we had quite some uh rounds to discuss what's the best language there um and yet need to do it one more revision i haven't got that done yet should be simple change and then we should you should be able to move forward so about the um martingales as a service uh well i'm not presenting it today but indeed it was presented before and we call uh we wanted to do an adoption call by that time there were a lot of drafts to be to be called and so we were we uh i was so that we would uh pace out and i think now it's time to to to do it now but i'm not presenting today uh i think that's that's about it from me okay so i take that stuff uh as adoption call going to the list for the beers multicast as a service okay and thanks for the correction on the idr um okay please state uh name and affiliation we're coming up with the mic it will help the people online alvaro you have the mic hello um so i wanna the deck is not there anymore but i want"
  },
  {
    "startTime": "00:08:00",
    "text": "to go back to the uh dear freshly route uh draft i notice there have been several requests from the authors on the list to adopt and i haven't seen maybe i missed in the last couple days i hadn't seen any reply on what are the open issues uh now i see here that there's a link to the github yes sorry so yes andrew actually uh suggested that we have some kind of a repository where we can have a history per draft of all the issues that have been addressed and what is outstanding and we went back with greg back and forth and with the secretary and we decided that uh the best approach will be basically to go on to github because of the history requirements right that the tracker doesn't allow us to really have a history of stuff that was going on so the best format seems to be go to get on the github and have a git per draft and on this draft we will keep basically running pokemon will be committing into git because that will give us a perfect history how the stuff is developing um sure so i don't have a problem with that so what i wanted to do is highlight two points one is the lack of response on the list that if you already replied then that's great so yes candy send your replied actually with that stuff because we were converging you think what should we do how should we reply and we decided to generation that's right the other thing that we need you to do is figure out as a working group how you're going to use github it's fine if you want to and there are many things you can do with github right you can do everything from the development of the draft you can just track issues how are the issues that are being discussed in github going to be reflected to the list or not is everyone expected to go get an account on github and follow the issues there yeah they're going to happen only for"
  },
  {
    "startTime": "00:10:01",
    "text": "drafts that are adopted or not this one is not adopted of course yet so you know there needs to be a policy for the working group that is clear and everyone knows about it there's a couple of drafts that um the git working group produced last year on recommendations on how to um do all this right only how to set up the repository which you already did which is great but also on on the different decision points that need to be made that need to be made right because you know whatever issues are discussed on github are not automatically reflected on the list yeah unfortunately right okay there's a note well issue and you know all that other stuff so please take a look at the git um yes i forget the numbers um and it provides there a list of things to to consider yeah don't worry uh we'll find that stuff so i take it up a section item on the chairs yeah i think you pointed us already to this good working group and then we kind of went off and started to think how we deal with the stuff uh with the history issues it is unfortunate that the tracker does not allow you know to keep the issues per draft and the history that would be a good suggestion because that starts to become you know more and more of a pressing issue since mailing lists are just simply too you know um far-flung for to expect everyone to be up to date on you know all the threats and all the stuff that has been raised so okay uh action night with the chairs uh let us convert from the stove and fire up something to the list with kind of a official policy i mean we don't want to make it you know too much red tape but something that is based on the git working group recommendation how will we roll the stuff forward okay good um yes thanks uh why mo you have the mic"
  },
  {
    "startTime": "00:12:03",
    "text": "why ammo i need to unmute i think yeah unfortunately i cannot unmute him i mean he needs to do it actually i don't see any like exactly so let's move to the next presentation and when he figures out jeffrey okay so this is um updates uh uh on this non-mpo extension um on behalf of the co-authors next step please it's got quite some history uh back in 2018 we have this initial version the name is non-mpos extensions you can notice the non-nps keyword there but at that time the scope was internet only and because of that um three months later we uh renamed it to ethernet extensions to reflect that scope of internet only and then later on i raised the question why should we limit to internet only um there is no reason to to to to limit that it should work for all situations but the work has thought since then besides the working group edition adoption uh finally um we recently confirmed that original editors could no longer work on this so i took the pen and then published this new version with the non-mpr extension because we have not heard a good uh reasons to not to do so"
  },
  {
    "startTime": "00:14:01",
    "text": "but we can we can still discuss it uh whether this is a good thing so far i've only seen good reasons to to make it uh generically non-mpos next slide please since uh it's been there for quite a while so i thought i'll just go through the contents uh very quickly uh the first one the first big uh uh topic here is uh uh biff id uh in case of non-mpos encapsulation the encapsulation uh rfc says that uh for non-mpos the biff ids they are domain wide unique uh in case of mpos bifids are just labels so they are they are locally significant but when it comes to non-pos they are domain-wide unique according to the encapsulation rfc and there are two ways to uh to uh to specify the those gifts uh but the brief ideas um according to the draft i uh etf beer now mpl spift encoding the first one is basically just hard encoding uh big string lens sub domain id and set id sd5d and when you do that there's no need for provisioning or signaling but that does not give you any flexibility that mpos week that gives to retain some of the flexibility then a second way to do that is that instead of hardcore encoding the bsl and subdomain id we heart encodes uh a 16 bits ibu i forgot what ibu stands for but basically just an opaque number uh it can be anything to do that then we would need"
  },
  {
    "startTime": "00:16:01",
    "text": "ibu to be provisioned on each router now notice that the beer architecture rfc 8279 actually does not mandate domain white unique beef ids so in another draft uh it was argued that uh even for non-mpos uh uh beef ids can be like mpls labels and if you do that you do not need to uh and to have any provisioning and you see you still have the flexibility that mtos way provides you so if you go that way then the beef ids even for non-mpos case they are just opec numbers except they are not called labors labels the like nps labels are not called the labels they can be locally assigned independently of course they can also be coordinated across all the routers and when you do do the coordination then the consistent values can be used just like in the segment routing sr srlb and srgb labels is very similar next slide please so in this documents we want to take a pro take the approach that you can either use the uh two approaches uh uh specified in that non-mps beef encoding spec or we can signal the beef ids that can be local or the main web unique just like how we do it with mpos so that's that's one main topic in this document next slide please"
  },
  {
    "startTime": "00:18:00",
    "text": "um so next part is uh exactly how we do uh signaling uh isis ospv2 ospv3 basically they will be extended to signal uh dynamic and local non-labeled beef ids and it mirrors the way we do it for mpos so in the in the bottom there are two uh figures there the first one is the beer information tlv that is already specified in the mpos signaling and that that remains um that trv has some sub trvs that in case mpos they will specified npr's encapsulation and it will signal the labor bases now we will just mirror that so we have a new sub glv to signal uh the the non-mplc encapsulation with the bf ids you can see that if you replace the b5d with label then it will be identical as the mpos case next slide so the we talked about the two main topics in the in the draft and now uh changes in the latest revision the first is the name and scope change we now it's called non-mpos beer extension it can work with any scenario whether it's a beer are following the ethernet header or follow any tunnel header or or ipv6 uh whatever editorial changes and finally there is one change it's about leaking between areas or levels next slide please"
  },
  {
    "startTime": "00:20:02",
    "text": "so i have an example topology here uh i'm uh ospf example um one area on the left another area on the right bfer12 and bfbr34 now if you look at the bfr4 and five in the right in the right now when it comes to for beer purposes the bfrs or bfer is on the on another area on the left side they don't care about bfr four or five at all they care about bf er three and four only to the extent that they care about those bfa r3 and force subdomain topology bar ipa value and the bfe are ids but they don't care what encapsulation that bfvr 3 and 4 uses because um routers in the left area only cares about that oh i can get to bfer3n4 through bfr3 so as long as i know that and then as long as i know what encapsulation i should use to get to bfr3 they should be all set so because of that when we leak the routes into across areas or across levels then for beer information tlv um if we if it does not have a bfr non-zero bfr id then then that the information does not need to be leaked at all of course you can lick it it's just it's not it's of no use so we can we say that uh you may skip you may omit the uh beer or info trv along with this subjects if the bfr isn't is zero"
  },
  {
    "startTime": "00:22:01",
    "text": "and then um you may also in emits uh omits the increment encapsulation to the sub glb uh even if you do dig the beer in for trv next slide please so comments um i want to mention that uh we we had a working group last call uh before on the idr extension and also bgpls extension at that time i commented that we should wait until this draft settles because uh this drafts originally was talking about ethernet only and but idr and bgpls they were money they're talking about non-mpos so we should be consistent now if we if we agree that we're not settled on this one then at least uh my earlier comments on those two drafts and they are no longer there we believe uh is ready for working group last call uh we uh i did have some discussion with jin roon offline um on whether we are we we want to uh uh use the uh locally significant significance uh before these um so i added those slides for this today to call that out to show why we want to do that and i hope we we have reached that consensus but um we'll see so that's it thank you for any comments uh yeah tony so what's the consensus on the local uh significant beef beef ideas i didn't see this discussion going on you want to do translation between domain when you're leaking or what's the"
  },
  {
    "startTime": "00:24:02",
    "text": "uh it's not translation it's uh you you don't need to you don't need that information basically okay because i mean that the the border gateway will do the decision anyway right stitch this stuff right yeah it was leaking yeah okay so that's why i was confused why you even had the discussion good thanks oh the discussion is actually not about discussion is about whether we want to signal the beef ids at all because there is already a organ group draft talking about domain-wide unique beef ids that does not need signaling at all yes of course um so the discussion was whether we need both variants or whether we keep the globally one that is pretty that is basically computed uh both they are all okay i mean they did the operator can choose which way to go right but if you don't compute them predictably then you need to signal them don't you within the domain uh correct if you don't get the unique one then you need a signal okay fine yeah thanks okay i see no more question we'll move to beer irm presentation hi everyone it's xiaomi speaking this presentation is on beer encapsulation for iom data this job was presented at ietf 108 this is the second time is presented"
  },
  {
    "startTime": "00:26:02",
    "text": "next slide please firstly recap on the intention of this draft this job provides the encapsulation for iom over beer this chapter describes two options of encapsulation option one is beer header plus baom header plus iom header plus payload option two is beer header plus iom header plus payload among these two options option 2 is selected as the standardized one because it's a more concise and commonly used encapsulation method just last weekend we noticed there is a third option which i assume is a via header plus gdf header plus iom header plus payload that's the slide please here is the iom relevant to status update all iom options except direct exporting iom option are defined in java ietf ibpm iom data which is currently in rfc editor queue the direct exporting ion option is defined in java ietf ippm iom direct export which has passed the working group last call in ibpm working group iom over ipv6 encapsulation is defined in draft ietf ibpm iom ipv6 options"
  },
  {
    "startTime": "00:28:04",
    "text": "which has also passed the working group last call in ippm working group next slide please this job outlines on requirements on iom over beer some multicast flows such as live video and real real-time meeting are positive to packet loss delay and other factors nicely a instituto oem provides a way to achieve on-pass telemetric information collection which is necessary for the beer multitasked network operator next slide please this slide illustrates the iom overview encapsulation the im data is immediately following the beer header it's indicated by a beer proto the iom data contains one or multiple iom options and each iom option contains iom type iom header lens next protocol and iom option data next protocol field in each iom option follows the definition of via proto field when multiple iom options are present the next protocol field in all iom options except the last one"
  },
  {
    "startTime": "00:30:01",
    "text": "is set to indicate the next iom head iom option and the next protocol field in the last iom option is said to indicate the type of payload with this encapsulation ionize requested to assign a new beer proto type for iom next slide please uh the authors believe this chapter is really for working group adoption uh however there was a there was a big picture tdf brought up to our attention last weekend yeah please finish christmas i admit i didn't follow the evolution of gdf closely so i think i need more time to learn the advantages of gdf if there's any thank you okay so let's have a vivid discussion because i i thought that the mailing is fired up in a very productive way right and i think um i would like opinion on two axes here the first one is there is obviously an advantage if we stick iom on on the beer packet right because it kind of measures the data path as it goes and not some artificial you know oem stream going now the problem is however that the beer header will determine what is the destination of all this oam information and is it desirable that the oem ends up on all the receivers or do we want to send"
  },
  {
    "startTime": "00:32:01",
    "text": "basically an oam operationally per receiver is that the more common case because it determines how useful the whole thing is and the second um discussion point is here uh the second axis is no that's the primary axis and as observation to the presentation uh i think the authors may have unders misunderstood how oem is encoded in beer today oam is its own beer protocol so the oam packet does not carry a payload behind it and greg mursky will correct me if i'm wrong but i think that was how all oem was intended so it's in fact a separate stream from the real data stream so uh i would encourage discussion along those lines i think the work is extremely interesting and then we can get to all the like you know greater detail like whether we should fragment and gdf and assignments and so on thanks okay all right jeffrey uh mike is yours so please state association and name every time okay jeffrey or darkway from juniper um so about inc uh how do you encapsulate the uh including the iom data of the two options uh one requires a beer extension header um i suggest that any discussion uh related to that extension header we defer that to to today to the uh presentation the last presentation today that talks about exactly that topic um i'll have more or more details and information available for as part of my presentation at the end uh can run"
  },
  {
    "startTime": "00:34:01",
    "text": "and i have showed my concerns and objection in the middle list there are already several iom encapsulations and i cannot find any advantage from this draft okay so i think the main objection was that the payloads carried in the beer packets they have their own oan but now the question is should we rely on that that was not the beer architecture right based on the requirements by providers the they wanted oem directly on the layer 2.5 because it would start to stick ipv6 packets and into beer and then assume that the ipv6 within beer does the oam that was something we didn't discuss out but yes that's also a thing that is a possible solution space data point so i would defer this discussion to the list greg i just want to point out that um let's not uh assume that um active oem does not follow uh the same path as as a data flow the beer flow that it monitors so um in terms of what is being monitored and measured uh i don't see a difference whether we use iom or active oam uh greg so i quickly jump in this is true to an extent you cannot guarantee that the oem is following the same queuing disciplines through the boxes and oem may have different packet sizes"
  },
  {
    "startTime": "00:36:00",
    "text": "which all affect delay jitter and other stuff right but at the same at the same time uh then if uh we use iem trace options up by hub so uh the space for uh telemetry information either has to be pre-allocated by their ingress bfr or are incrementally added by their bfrs as it transits so right and that affects and skews the metric so right and the ioms causes fragmentation then the whole thing will go to pieces anyway right so those are interesting discussions uh yes thank you [Music] in this job the dear iom is defined as a upper layer of beer header i think it is the inner permit for beer for for bfr to handle the upper layer encapsulation of br okay thanks i have to admit i couldn't follow that really so i see now please send your question to the list probably it's difficult to understand ciao so the question from tony second question uh iom is in c2 so uh the iom header is with the packet the the data packet of the beer so it's not just uh active om so it's in situ om it's with a"
  },
  {
    "startTime": "00:38:01",
    "text": "package data packet now second today i want to say uh currently we have already two adopted i am encapsulation jobs they are im over ipv6 im over sfc nsh so i think i over beer is similar to this to encapsulations especially iom or nsh i i would uh contradict that go look at all the supported beer protocol in the registry for example ethernet and uh all kind of mpls things so with you cannot rely on the fact that the payload will always have its own oem it's an interesting discussion of course right but uh your point is that the payload carried by beer will always have an aom is an assumption which will not hold up okay hello hello we can you hear me yeah okay uh i uh came in from hawaii uh i have this following comments uh first i i in fact i already explained my concern in the main list ever before first i mean that's the duplicate the iom functionality because the imprs has the iom ipv6 has iom and also this the beer is the independent layer it also has iom if the beer over mpr's appear over ipv6 there's the duplicate rm this is the functionality and the encapsulation i think i don't know how to cope with this situation the first one the second one because here is the because discuss about this iom but you"
  },
  {
    "startTime": "00:40:01",
    "text": "notice now this there's also the network slicing and there's maybe also some this the alternative alternative marking encapsulation functionality that's the ipv6 is supported i'm not sure if the slice for the beer or some this alternate marking for the for the beer do we need to go on to extend or define this the extension header for the br layer to support this functionality or not the second one the third one i think that's if this iom is is defined for the br layer i think this is for the ipv6 they also have this the ipsec and if the ipsec is used with the ipv6 so that's the br header and also this the iom header will include encrypted so i don't think how to encapsulate this information in the br br header if over ipv6 data plane okay that's that's all my comments jeffrey you want to address the beer the beer over v6 ipsec comment because the rest was basically all the same thing excel that the payload was already over in um okay jeffrey from juniper um in the ipv6 environment the one option to do uh to the beer is uh that's uh you do not need the ipv6 uh at all always uh you can uh between the two adjacent uh bfrs you could just be the beer header following the ethernet header so their ipvx does not apply at all and even when we do need to"
  },
  {
    "startTime": "00:42:00",
    "text": "use a ipv6 tunnel between two bfrs that are not directly connected at that time the the iom information um which is specific uh when if it's specific to beer then that should be it should go along with the beer header itself instead of at ipv6 level that's that's how i say it and i don't see how encapsulation plays plays a role here because let's say you have a encapsulation for the ipv6 tunnel but that's fine and beer had a beer processing does not happen until you exited ipv6 tunnel so even if your ipv6 tunnel is inc encrypted that's fine yep pretty much uh concurs with what i'm thinking thank geoffrey and more generically we've always had different other mechanics different players because they have different semantics potentially different speeds so i don't see how having i am in one layer would substitute for beer specifically yeah well that's why we have to appear less pink and the other pink and overlay pinks and everything going at the same time yeah i sorry i also had this the last comments i want to know that you could defend this the extension header such as the iom and also the maybe later some network slicing or maybe alternate marking or apn so if this is in the charter of the br working group or not because from my point of view there's there's maybe more functionality to be defined you mean using basically kind of this uh shim in between like iom is using yeah"
  },
  {
    "startTime": "00:44:00",
    "text": "it's a good discussion i have i have no no enter i think it's all a very interesting proposal to discuss through whether that makes sense to put the shim between the payload after the pr i want to add jeffrey from junior i want to add that in case of beer over mpos in most situation the you uh there is no nps tunnel um and then the label uh is only to indicate that the beer header follows and then this gives you the bp5d so in that case putting the beer or iom information as an mqs extension header does not make sense either and that's one point another thing is that if there is a a reason to have a beer extension header for example for apm for whatever purpose for slicing as long as you need a peer extension header then let's defer that discussion to the end of today's session where i my my presentation talks about that topic exactly uh if there are no more comments i'll propose to take this to the list it's a good discussion okay the new dark is being shared hi this is dirk crosston from uh huawei i'm talking about frm i realize there is one letter more than the fr i don't know presentation that's weird oh oh it's it's right f r m"
  },
  {
    "startTime": "00:46:10",
    "text": "just look at it maybe this one the http one let me see how it looks that's the one oh yeah sorry okay still labeled http um so if you go to the next one please so this is a zero zero draft but there's some legacy to this draft um i just wanted to point out the draft regionates from uh and now expire traffic which was in uh version six on multicast http it was very focused on there was an applicability oriented traffic to realize http based scenarios in a beer environment uh must have been the order of three and a half years old i think i still started that in my old company uh before joining huawei it was in be a working group last call it returned very useful comments and feedbacks from the application areas we had a couple of discussions around january time etc but we took this back to the original author set to see if there is an interest to continue on this and there's the organizational reasons why that didn't happen so i was told by the author said there wouldn't be any interest to continue this which is the reason for the zero zero draft so i restarted this because of the interest in the original trial so i i thought letting this trap um would be a shame so if you go to the next slide please so what i've done in this version now is to take the um to generalize the draft so it's been generalized towards a new communication semantic which in that's done in section three um which now is applicable to use cases that are more than just http so we've turned an http applicability draft into one that is tackling a communication semantic there so there are more use cases being given and then uh sections five six and seven they are adapted from the original craft"
  },
  {
    "startTime": "00:48:01",
    "text": "uh uh in order to support the more general semantics so it's kind of like removing or replacing some of the http um terminology uh section eight is meant to be a placeholder uh to incorporate the comments and discussions that were received from the app area that i mentioned that we discussed in january it's still a place where it's empty uh i'm working currently on on on on on putting the pieces in there if you go to the next slide please so very briefly the court change is really to introduce this new semantic frm which stands for fault request return multicast semantic which defines a very which you could already see in the original draft in the original http draft um a multicast communication semantic is extremely flexible so here a datagram with the source address s is towards the destination d1 to dn is formed as one or more responses to adequate requests from those destinations the mono requests that come in the forward direction 2s but the ephemeral group address r is defined through an identifying characteristic across all received uh requests the identifying characteristic is an implementation specific parameter that's used to distinguish among different requests if you translate it back from the old http case essentially the things like an http uri was used in the http applicability draft to differentiate requests so if you have one set of requests coming into a single uri you you created a dynamic multicast response if the uri was different it created a different ephemeral group address so this is the generalization of that idea the nature of that multicast is inherently dynamic so the multicast responses are formed in response to incoming requests they may differ in extremely short time frames and the initial example of the http case um was showcasing that um with over-the-top video people are viewing the same thing and you're starting to deliver the actual chunk request as multicast responses back to the actual"
  },
  {
    "startTime": "00:50:01",
    "text": "clients that was the idea there go to the next slide please so the next steps really here are a to firmware from the details section six and seven um you know based on the frm generalization to incorporate the comments from the list that were received into section eight and obviously to incorporate any feedback comments from from the list you know on this work and in particular if you go to the last slide it's the main question this is a short presentation meant to be um really answering the question or getting an answer to the question from our side if the work is still of relevance to this group um is this something the group feels uh worthwhile to continue um with a changed author set at the moment for the reasons mentioned i would also like to understand more if if this work is more widely applicable even though section six and seven in particular are being described but beer in mind is this uh given that it's talking about the general communication semantic is are there are there other underlay techniques that could be utilized for that any thoughts that anybody had i it would be very welcome and obviously this was being put out rather quickly as a zero zero with myself as the single author at the moment i'm very much looking for other contributors to the work out there in particular if the first question is positively answered and maybe the second one as well so willing to drive the draft forward i would be very happy to hear anything of that thank you okay so if no one else is on the queue i jump in um tony juniper um yes that looks interesting but it also looks like reliable multicast generic reliable multicast which is kind of you know one of the famous red holes it can be solved wonderful well it's not the full reliable multicast but you know from one source to multiple destinations"
  },
  {
    "startTime": "00:52:00",
    "text": "um no opinion whether we should uh you know take on anything like that um whether it should be done some other uh context i think it very much depends on the interest within the group so comment please if you're interested uh you know uh in this kind of work or do you think that would make sense maybe one short feedback on the reliable multicast on but isn't necessarily um as you already mentioned it doesn't need to be reliable multicast uh it really depends on some of the service implication protocols we've been looking at there they're not necessarily reliable they're relatively transmitted that may may happen as well i'm sort of stepping away because taller says i yeah i'm trying to sneak through without the stupid application and phone and so consider myself the button to be clicked sorry about that um no i mean the way i was joining the original effort which unfortunately due to the you know main authors uh um failed was um that i i felt that um this this was back then the best option to promote the new um multicast model that beer gives by being able for the sender to indicate the explicit set of receivers for every individual packet and we haven't really leveraged on on that opportunity yet and so maybe it is a good thing that we can try to broaden the scope of explaining exactly that functionality um to to find more interested beer and the fact that we're forwarding through sender defined um bits to receivers right so um that that that would be my very ad hoc bad sales pitch and i'll try to join the effort by some appropriate word on on some other use cases so i'm not quite sure how to structure the whole thing but if you want to sell beer the beer idea to more applications then maybe join the effort and we'll try to figure out how to structure okay some input from my side will be focused on basically requirements what problem do you try to solve so we don't"
  },
  {
    "startTime": "00:54:01",
    "text": "end up in the generic uh reliable multicast problem which is one of the formulas you know totally not you're completely agreed and that's exactly what i mean with use cases in terms of what is the stuff that we can do better with beer than with the native multicast yeah i mean the http could look simple yeah the http stuff looked excellent you know as a use case yeah thanks sandy you have the mic hello hello we hear you oh okay i just have comments for the previous slides i read the repair http draft before and i think that this draft is using brs multicast underlay so the http service can be distributed by multicast way and i think it's very interesting and and i will follow the processing of the structure okay thank you yeah so join the draft and uh work with tolas and the author uh on specifying what problem do you really try to address because it seems you know to be more generic than before i know and before we can even go and start to maybe 280s or you know talk about what will be scope of work like that we need a problem definition right practical use case is fine but really what is the scope of something like this thank you okay very next presentation the arrange poet right"
  },
  {
    "startTime": "00:56:00",
    "text": "but for now i see nothing beer is not extended for it but it's very interesting use case yeah no it's it will be purely overload overlay on top of beer yes thanks yeah okay so we are done with commands and we are moving to the next presentation which is the routing header seizer why or arjun presenting hi everyone i'm will from china telecom and i would just try to talk a bit louder oh okay hello hello hey hello so i will give a presentation for our draft a routine header based beer information encapsulation uh next slide please uh this presentation includes four parts uh the considerations for beer information encapsulation in layer 3 header the format of the beer routing header the multicast package forwarding procedures and the further actions of this draft next slide please the msr design consideration draft proposed the following requirements for beer in ipv6"
  },
  {
    "startTime": "00:58:00",
    "text": "it should support the basics multicast functionalities and meet the needs of high quality services with high reliability besides the above requirements we have additional considerations we hope the source and destination addresses can be preserved along the forwarding path because the operators need to count and monitor the multicast traffic and the current technologies are based on the source or destination address we also hope the identification of vpn traffic should be based on the destination address the existing beer encapsulations cannot meet the above demands so we think it is time to define a new beer encapsulation method next slide please considering the above requirements we think use routing header to carry beer information has the following advantages it lied with the usage of rotting header the t and b can be realized in a unified way and the previous requirements can be met so we defined a new type of routing header to carry beer information next slide please the format of a newly defined routing header type is showing the figure"
  },
  {
    "startTime": "01:00:00",
    "text": "we need to define a new routing type the eight bits follow the routing type field indicates the brt algorithm used for the rhb beer packet and the encoding format of the following brt algorithm specific specified part depends on the value of vrt algo failed next slide please this scenario shows the forwarding procedures one all knows in beer domain support beer routing header node a is a bfir when it receives a multicast packet it will encapsulate an fpv6 header with your routing header then it checks whether there is fifth correct corresponding to the fifth id locally if not discarding the packet otherwise performing the normal beer forwarding the same forwarding procedures also perform r node d to e to f during the forwarding pass the source and destination address in the ipwa6 header are not changed only the b string in beer routing header is updated next slide please this scenario shows the forwarding procedures one thumbnails in beer domain do not support via routing header node a encapsulates a fpv6 header with spare routing header to"
  },
  {
    "startTime": "01:02:03",
    "text": "the package and for words the package to not be according to required sorry you are very quiet again something with your microphone please check oh can you hear me now yeah this is much better thank you oh okay uh and uh note a encapsulates an ip wei sex header with spear rotting header to the packet and forwards the packet to not d according to the bift because note c doesn't support vr routing header so noddy should calculate the ipv6 address of e uh and encapsulates uh out outer ipsex header to the packet the source ipwisk address is the address of itself and the destination fpsex address is the ipv6 address of node e then it sends the uh packet to nazi nazi performs normal fpv ipv6 forwarding according to the outer fpv6 header and sends the package to noddy noddy decapsulates the outer ipv6 header and forwards the packet according to the bift in this uh procedures the source and destination address in the inner iqs header keep unchanged next slide please"
  },
  {
    "startTime": "01:04:05",
    "text": "our next steps are listed here we plan to extend the solution to carry vpn related information in multicast destination address including the generation and transmission of the address and the behaviors on devices to handle it that's all for the presentation your comments and suggestions are always welcome thanks how long please go ahead solutions to encode appear in ipv6 extensions header so i don't know why this is listed in the agenda i think this question is to cheers thank you sorry what is the question to chairs what is the specific question well i think you got cut somewhere in between could you please repeat your question we cannot hear you okay let's move to the next person on the mic please bring it on hello yeah okay i think i have the similar question with fun hong kong my question is to the chairs the working group had concluded a lot to"
  },
  {
    "startTime": "01:06:00",
    "text": "work on solutions to include encode beer in ipv6 extreme header after after i think about more than more than three years of discussions so i don't understand why this routine had beer draft is listed in the urgent for for discussion is the working group changing the conclusion uh no but i mean they ask for presentation slot it's up to us to let things present frankly i'm lost as well there were no updates to the draft i think the process ran its course all the way to the bitter end of formal complaint against the chairs um but you know if presentation slots are requested we're perfectly fine to see something especially if there's any new arc which i didn't see here frankly satisfactory thanks hello yes please go ahead we can hear you hello we cannot hear you now hello hello hello yes please go ahead don't go ahead please speak up"
  },
  {
    "startTime": "01:08:05",
    "text": "so i think i want to answer the question on the list or on the chat okay okay okay it's jeffrey again on the okay so this is basically to the slides of uh to help the discussion uh discussing the beer extension headers next slide please some background um there have been several drafts already the beer that start talking about beer extension headers the first one is this uh generic literary functions that we call gdf that we put out a few years ago a couple of years ago in the first in the mpos area an er growing group basically we noticed that there are several functions that are currently defined for ip but they are actually applicable for other layers as well one example is fragmentation another one is uh security and so we thought that it would be nice to be able to extract that out and apply it at different layers be it mpos ipv6 beer or ethernet if they if they want to do so so we um we we wrote that gdf draft and we"
  },
  {
    "startTime": "01:10:00",
    "text": "we discussed it in mqs uh working group uh at that time i also noticed that the io ioms work started there in the mpv60 this is actually also one of the functions that can be considered as generic so later on when i was working on a draft about the beer or solution support for network slicing and in one case i i would need to increa encapsulate some other information about a slice or or even more uh granular information that that would need to be put into a extension header so for that i brought it to beer working group as well um in the last ietf meeting i refer to it in a slide and talk about it briefly but i have not got a chance to actively drive the discussion in the beer working group even though i said yes though this when it comes to beer we need to discuss in beer but i had not done so then just last week i noticed this uh beer iom drafts where um we're talking about the beer extension header as one of the options to encode the iom information so now um it's clear that it's time to actively discuss the how we do the beer extension headers back to npos it has a design team to look at mqs extension headers and there is this strapped draft song talking about extension headers uh i think both taran and i are co-authors of that draft um so when it comes to our the gdf we wanted to align the beer and mpos extensions basically we define one extension header mechanism that will be applicable to"
  },
  {
    "startTime": "01:12:01",
    "text": "both beer and npos next slide please so this is the npos extension header format uh at the top is the regular mtx label stack there is some sort of indicator saying that at the bottom of the label stack there is an mpos extension header um the first four objects of the extension header is like a header of a headers including the number of extension headers and total length of the extension headers original upper layer protocol and then the next header that points to the next header the real header uh here we have example two examples uh extension header or what h1 and hn so the next header field will will allow you to traverse all those extension headers so now currently the next header value is actually taken from the ip protocol numbers registry so but to in order for us not to use too many uh uh values for npos purposes then we say that uh one of the next header value will allow us to say that we'll have subtype uh so that we can uh we can further distinguish which are the mpos or uh specific ones so that's the basic idea um one thing i want to point out is that you can see that if you exclude the the header headers part it's very similar to ipv6 with yx uh"
  },
  {
    "startTime": "01:14:02",
    "text": "one difference that the header lens the mqs case is in the four optic units but ipv6 header is header lens is in the eight active units that's one difference next slide please so now we wanted to apply this to the same to to beer so then the beer header would have a proto value to indicate that there is a beer extension header follows just like the nps label stack have an indication we talked about the h value taken from the registry so now going back to the generic linear function the idea is that some functions that can be applied at many different layers we want to be able to to reuse the same encoding and therefore we can do the same hardware processing so if you consider that for real generic function it will be applicable to ipv6 as well so ideally we would want to be able to just reuse the ipv6 extension for particular function if there is ipv6 extension header defined we would want to be able to use it as is for mpos or for beer but the header lens uh in our four arctic units prevents us from doing that next time please so um for beer here are the questions i want to uh to discuss in the in in a working group we don't have to have any conclusions here uh i just want to point this out we can"
  },
  {
    "startTime": "01:16:02",
    "text": "follow up on the muni list so first of all does this make sense to beard we want to align the extension header formats including between beer and mpos and even with ipv6 and in the iom case do we want to use this format for br iom if the br iom goes ahead um do you want to align with mpos or they want to align with ipv6 as well they're actually um so one simple way uh well aligned with ipv6 is that simply change that's uh header lens uh from the four active units to uh to eight arctic units that would work out easily easily i guess the concern why they wanted to do a four active units in npr's case is because it's more granular so for us which why do we want to go um and also actually just before this meeting i was thinking of another way to to allow that for after units normally but still we have another container to uh to to put all the ipv6 extension headers in um so i just want to throw out these questions and then we can discuss here and discussing in the mailing list i want to point out that um it seems that uh in the brlm draft uh it also just seems to be uh putting the ipv6 header directly after beer header so we may be already aligned somewhat it's just that if we want to do beer extension header let's look at it in a holistic way and make"
  },
  {
    "startTime": "01:18:01",
    "text": "sure that we consider all the use cases and make sure that we we are doing it in a good way and ideally generically and lined up with other extension headers as well so that's it so jeffrey i mean frankly to be lost are we talking about gdf in beer or are we talking to extend beer to have an extension header um it's really uh to ex to have beer extension headers uh well gdf uh to do gdf we will need extension headers right okay go to okay uh so do you have you know some packet format suggestion what we would need to do um yes uh can you go back to that sorry i was on the chat yeah okay yeah sorry yeah so um ideally we would want to align beer mpos and even ipv6 uh uh extension headers uh same format that way uh any function that is generic that can be applied at ipv6 or npos or beer level we just use the same same encoding that way the hardware implementation can be reusable i pass i have to read the job you're drafting in excruciating details i'm a little bit lost what is coming afterward here okay"
  },
  {
    "startTime": "01:20:01",
    "text": "questions i follow precisely the original gdf but that looks like another serious ref thanks oh uh this is one way to do the g uh to do the gdf yes this is the one way to do the gdf proposed way to do the gdf from me so i don't see any comments nor hands wish we would have to take it to the list sure i mean you want to stir up this discussion yeah yeah so i think would be great if you would send an email to the list with the pointer to the presentation and start the discussion albert you were going to say something ah okay then i think we are done for a tf-113 hope to see all of you in philadelphia great yep thanks everyone until next time bye everyone what are you talking about"
  },
  {
    "startTime": "01:22:21",
    "text": "oh right uh oh okay"
  },
  {
    "startTime": "01:24:10",
    "text": "sure i really like that rbs idea"
  }
]
