[
  {
    "startTime": "00:00:12",
    "text": "good afternoon welcome to the Thinker thing research group inter meeting uh we are probably going to wait a couple more minutes while people are um joining so I don't have to say who I am because me Echo tells you where I am and in case anyone wants to do an audio check now it's a good time hello Ari thank you m seems to be working hello hello hello AR Ken everyone Hello Alex I just learned if you use the change deck button and you don't select the new slide deck then your presentation will be ended that's interesting"
  },
  {
    "startTime": "00:02:07",
    "text": "okay I think the the joining is slowing down so maybe I can start doing the um administrative uh part of the uh chair slide so welcome again to the uh June interim of The Thinker thing research group um I'm cast bman and uh Ari uh also has joined and has already said hello um so let me quickly go through the uh preliminaries uh we have a customade node well slide which is not uh endorsed by our lawyers but uh contains the main points you will be recorded uh I at some point I need to fix this slide it says you may be recorded you will be recorded uh we all try to be nice to each other other and we also try to abide the by the IPR guidelines um of essentially of the ITF we have a separate page that that special cases this for the iitf but the guidelines are essentially the same this is the short form and uh the long form is uh that uh we you will be recorded and uh there is a code of conduct that we want to uh follow and this is not theoretical right now something is going on on the ITF list again it's incredible um intellectual property is uh uh Alex you should be hearing me hello yes hello how you um so uh if uh you know about"
  },
  {
    "startTime": "00:04:01",
    "text": "okay there's another audio problem uh seems to be working fine for me yeah I had I had yeah me too it's working I had to restart my my my web page and okay uh you are quite quiet at the moment U just for your information okay so has Elliot restarted yet I'm not seeing Elliott at all yeah one of the nice things about Max is that they sometimes decide to use it different audio input you usually have several audio inputs to choose from and uh it sometimes decides to use a different one from the one you are thinking you're using and then sometimes the level also isn't right anyway so the intellectual property uh rules uh include U the the main point that um if you want to talk about technology and you know about patent claims that apply to this technology uh then you have to tell us in the form of a formal IPR disclosure details are on the the web pages here uh iatf know that but I'm just saying this because uh there there may be nonat effers in this uh meeting of course you can always choose not to talk about the encumbered um technology but if you want to talk about it uh you have to tell us"
  },
  {
    "startTime": "00:06:00",
    "text": "okay so these were the the official notwell slides the legally required ones uh now let me just quickly remind people uh we are going to talk about technology here that is that has been standardized or that is being standardized or or that we may want to get standardized um but the actual standardization is not going to happen in the irf because the irf is is focused on the research issues behind those Technologies um and uh the ietf then goes on doing standardization so sometimes we just hand over topics to the ITF sometimes uh we get uh working groups started in the ITF based on Research that that happened in the uh irf uh but you have to keep in mind what people are talking about here is not necessarily what what uh they are anybody else want to standardize uh next week and there is a nice RFC RFC 7418 that explains a little bit uh more um we have notes um please uh join the uh note takers um there is a uh at the top of the screen there there is a piece of paper with a pen on it that that gives you the notes page and there you can open that as a separate window um unfortunately you cannot click the link that is on this uh page um we have a chat which uh you can enable by uh pressing the the two bubbles two speaking Bubbles at the top of your page or you can separately run"
  },
  {
    "startTime": "00:08:00",
    "text": "this using this zulip link or using the link that uh or you can get at the no notes using the link that AR just put into the chat um there is a mailing list that you may want to subscribe to if you're not subscribed there and I'm sure this link is not wrong because we just converted to a new version of mailman but I hope there will be a forward and there is a repository um get repository uh uh traditionally on Hub uh that has various information and uh eventually the slides but uh you can get at the slides um from uh the agenda that is referenced by this repository read me okay so um what is the thing to thing research group the idea is that we have been standardizing iot related Technologies for almost 20 years now well we have been sendat in a lot of them before but specifically with iot in mind uh since 2005 uh and uh uh sometime uh oh yeah that's bad if people are dropping out du to losing audio Yeah quick reload is uh usually uh a bit uh ugly but can solve the problem uh um so we have been um doing it related sanitization for two decades now and after we had the first set of standards in place uh we found there are a few things that are not trivial and and require research and that's when we started uh the thing to thing research group and the the objective is uh to be able to have an internet um of people of services but"
  },
  {
    "startTime": "00:10:00",
    "text": "also of things that includes low resource nodes Because The Internet of Things will be big and we will have many nodes and uh we we want to enable those low resource nodes low little power bed connection um intermittent operation and so on we want to enable these nodes to actually be useful citizens of of the internet so that's our research objective and that sometimes means me that we take existing protocols and and just tweak them a little bit to be better for uh low resource nodes or sometimes we actually standardize new things in the iatf to support these and uh the research group focuses on issues that might have opportunities for ITF standardization uh again without uh implying standardization already right here and we do this full St so we well not not the radio layer but part above the radio layer um I think we will even have a talk today that uh talks about the radio layer uh up to uh user experience security functions and so on so this meeting uh is U started as an overflow meeting from from the really nice physical meeting we had in Paris um but um uh it quickly focused on the various ways we are using coron we using Yang uh modeled uh data to do management and other things uh in the iot and we will uh get two talks about interfacing to the Yang models from constraint devices and uh uh I hope three talks I don't I'm not seeing"
  },
  {
    "startTime": "00:12:01",
    "text": "Fabian um yet uh about using coron in the real uh world and because he got uh so many Caron talks I decided to push my talk to the next meeting because we are uh going to have a next meeting um late June early July uh there will be a doodle we are not using doodle anymore a rally page where you can indicate your preference uh soon uh and this will probably uh return to the subject of security which was the main subject in uh Paris in the physical uh meeting and may maybe uh we will have time to actually uh do my talk as well uh one thing that's uh uh obviously of interest is are we going to have more physical meetings as I said we had a really nice face-to-face interim meeting uh organized by by inria and what was it open an organization that the name of which starts with open sorry um that was organized in in Paris and it was really good there was some some 40 people there for the hethon which gave us a nice basis to draw from in in a research group meeting and we certainly want to have more intro meeting more physical meetings um we're not going to use the opportunity to have one in Vancouver because it turns out a lot of the people interested in this are not coming to Vancouver which is a little bit surprising um and uh what we definitely will try to make use of is the uh physical meeting uh after that the Dublin ITF uh and we still have to decide how exactly we are going to use use this opportunity are we going to meet within"
  },
  {
    "startTime": "00:14:01",
    "text": "the week are we going to have a pre- meeting are we going to have both so that that discussion will probably go on in the next uh couple of months um so that's definitely um uh going to happen uh and then of course we have to think about the the next couple of itfs like Bangkok in February next year and Madrid in July uh next year and of course the the interest question is are we going to have any other ones of those okay so um sorry for taking five minutes uh too many for this intro uh so we are done uh with the introduction are there any questions about that I'm not hearing any question questions so I can push those slides to La uh okay hello you hear me yes okay perfect and you have control okay thank you uh so yes I I wanted to talk about something we we have deop uh a few time ago about what we call Se seed extension because it's uh it is view right now as an extension to the SE file that we generate uh with Pang and the goal is to add some information that are very useful to manipulate young data model so just to give a little bit few word about the context is that when we we are corcon usually or in iot we have a device that has a lot is very restricted and we we have a what I represent as a cloud it's a computer that have maybe"
  },
  {
    "startTime": "00:16:01",
    "text": "more um uh Power the question is so we have young Y is a very nice uh language we we have tools like Pang to manipulate uh this uh this language but it's uh is not constraint in fact you you need a lot of line of codes to to do it so on a constraint device it can be difficult to implement and on over system where maybe you have more in more room maybe it's good also not to put all the complexity of young in in this implementation so what we we have uh done it's a tool that helps to manipulate young data model and give only the information we need to manipulate it to give an example and it's something that uh is quite funny is that when you look a calization in C or Jen you have exactly the same structure you have map where you have object you have dictionary so it's exactly the same structure but the values are totally different or maybe different for example when you have an integer in in young in Chen you have a number and in C bar you can have positive or negative uh integer but when you have an integer you're not sure that it's an integer in y for example if you have identity R for enumeration it is represent in C also as an integer but when you go to J is view as a string same thing when you have a string it can be a string in in Yang and represented as a string in cbor but a string can be an identity ref or an enumeration so the type you have in the the structure don't tell you how to manipulate it and the"
  },
  {
    "startTime": "00:18:02",
    "text": "only way to know how to manipulate it correctly is to refer to the Y data model and it's not uh easy to pass we have P that do it but what we have install in seed extension so it's uh some line of codes that adds some information to the existing C extension so I have represented it here so we have add a key that is called type and type tells you what is the type of the of the leaf you are using for example in the second one you have identity ref for the fourth one you have a integer and for the last one for example you have an enum and you have the mapping between the integer and and the string and if you have no uh type in the definition it mean that this node is not a leaf but it's intermediary uh node in the young tree so with this we are able to convert uh a Jen structure into a seor structure or vice versa in open Chi for example we use that because open Chi manipulate only cor representation and uh we can manipulate uh rules in Chic and add remove things but in coron we have absolutely no tools to verify if uh the syntax is representation is is correct so we have to do the transformation to Jen and then apply use a tool in open CH we use the young son to make the the validation so internally we manipulate in seore and when we want to do a manipulation we transform it into Jon to to check it so we can do it automatically and it's not"
  },
  {
    "startTime": "00:20:02",
    "text": "really uh depending on the model it's just using this information that are store in uh in the CED extension another thing that we we can do with the the C extension and I think it's more important for very uh constrained devices is that when you have a young tree it's quite easy to Bro is almost always the same structure so you have um you have key you have a maps and you have dictionary but in fact when you go to a young list then you you have to know the key how many keys you you need and which uh leaves which seeds are used as a key and this is not present in the uh in the in the original SE file and so we add also another extension that is another entry that is called key mapping and key mapping contain uh an object where the the key is the seed and then you have an array with all the uh the index all the keys that are using the young data model so having this information you able to uh to brow any uh core con representation to find an information for example uh on syntax here you have a uh an dictionary where you have first the uh the seed you are looking for and then you have a list of keys that allow you to get to that uh to that seed and so with uh so when you go through a list how many keys do you need to go into that list it's not present in"
  },
  {
    "startTime": "00:22:00",
    "text": "the core conf representation it's present in the young data model but young data model is complex here by looking at this information you know that uh 6,7 is a list this list has a single key that is represented by the the Sid 60 ,8 and this way you can do a browsing of any Young tree without needing to have the young representation and so this is something that is quite useful in uh constraint environment so to do that we we had to to generate some codes so the first is a CD extension so it's a uh it's um it's a modification to the Pang that allow you to have a new uh option that when you generate seed you you add seed extension and it add this information I I showed before and we have two tools that use this uh information the first one is spy corcom that has been written by Havier who can say a few word if if you want but it's in this GitHub and we have the Secor comp so I will not spend too much time to to explain because my n will uh uh talk just after about this just to give you an idea of one thing that is uh currently uh what we we have to do is I told you that we can bro a young tree without any problem and it's very agnostic if you have the keymapping object but you have we have two type in fact of live in in a young tree you have leaves that are internal it means that"
  },
  {
    "startTime": "00:24:01",
    "text": "contain a value that is store internally for example an index or in Chic shic rule is something that is stored totally internally but you have also leaves that maybe have relation with outside what we call external leaves and for example when you have to read a temperature or something like this and so you have to to link this value to a function that return uh some uh numbers and to do that we uh manage generate uh a program that write c c code and makes the link between uh uh so you just have S to to fill some uh some information but Mano will talk better about that so I will skip this part so in conclusion so what we can say about coom is that it's magic because it's a very very powerful tool you just have to create a data model in Yang and ask for seeds and once you've got that you create automatically an efficient protocol to communicate between uh uh div object because you we are using uh Coop and then cor which is very Compact and we can either you Chic to to compress it and the second thing is that on on the object we have some run it Cog that is very generic we don't uh it can be you can work for any kind of uh young data model the only thing that we have to do it's if you have interaction with outside to link and make some uh call to function when uh when needed the other thing we also discover with Mano and we have no time really to explore it but since we are in the research group we we can talk about"
  },
  {
    "startTime": "00:26:00",
    "text": "that is that Manos during his project made a young representation on onl and if you look at the representation of this young data model in uh in seor it's very very close to a core con structure and in fact if we select correctly the SS value then we can find the keys as we are using in CML coded in sore to uh for for the keys so it's something that we we have to investigate in in more details but it seem very funny to see that we we can make the the link between cnlm and coron so what is missing and things that we we can do research on it the first one is something very simple but it's more about standardization how we we can in if we can in the young data model say that a leaf is internal or external it will is the generation of the C code because here we will just generate function for external and not internal right now in the code we have to list which seeds are internal and which are external on the last point that for me can be interesting I'm not a specialist of that and I have a colleague that knows better uh this but each time I want to talk with him is he run away so uh I I will ask the group to if it's a good idea or not but I I think that it could be interesting to to have some uh uh semant uh to put seed in rdf to have some uh semantic webs where for example so the question is when you receive a corc how to understand a SE value and what you"
  },
  {
    "startTime": "00:28:00",
    "text": "can do with it so if we put in rdf that this SE value as this property then it can go to the knowledge graph and maybe we can this way process automatically the information coming from the device without uh before knowing what this device will be sending so I don't know if it's a a good idea or not but I think it could be interesting to focus on that okay and that was my my last slide if you have questions yes rier yeah just as a support statement sorry do you hear me well I everyone yeah okay uh yeah just a support statement about the SE extension functionality in Pang it was actually really key to properly make the conversions to and from the silver structure and in fact it's what I again has been we've been using in by core com and it's what um Rafa has been using and we developed together so yeah it was it was super good and eventually the c c implementation was also based on it so yeah it's been sticking sticking around ever since and it's very good to have C thank you um yeah I think this this is really very interesting um if we just look back like 60 years um ago people were starting to do models of of grammars something we call BNF now uh because that was the dominating result and then people started to do Cod generators that that generated code from"
  },
  {
    "startTime": "00:30:00",
    "text": "those grammar and I think most of us have worked with a paa generator like y or bison at some point during their their lives what is interesting about these code generators is they are actually not not only code generators usually they generate tables with uh numbers in them that that really are Pointers that allow you to navigate uh the structure that that is being passed so most of the output is actually a table and then there is actually code that that interprets this table now why do I find this this separation interesting I mean it looks like an implementation detail at first look but one of the nice things about those tables is that they might be depending on how exactly you structure this code generator they might be much easier to replace and and update so you might be able to ship a new table uh to to a device that that otherwise would need a full firmware update uh to to actually accept a new code so I think uh that that U separating the code generation into those two areas may be a useful thing to make it easier to actually uh avoid needing to do firmware upgrades or actually making um nodes uh adapt more dynamically to what other nodes they they actually uh talking to so that that's just a point I would like to uh make which is maybe on the implementation side um I see that that Christian had uh comment in the chat that the rdf mapping is interesting uh to him and clearly we have something called Coral that we are working on in"
  },
  {
    "startTime": "00:32:00",
    "text": "the co workking group um that that has a strong link to rdf so that that's maybe one thing we want to look at I found the reference to CML very interesting uh because CML right now does not have a well defined model for mapping to rdf but we could uh work on that one as well Christan do you want to say something about your rdf interest um nothing that you haven't said already okay yes um do you do you hear me well now is it yes okay good so I found it um yes so thank you very much uh and uh yes I think it's a really U like very exciting work um I I I remember one of the past wishi workshops at some point there was this interrupt between the uh W the the web of things so the thing description and that time it was IO Evo that was that that did some interrupt where we actually were interrupting between corcon and um and and represented the thing in in the web of things uh as a web of things so and we did that through the this semantic this mapping to to an rdf file I think um so I mean it worked and I think it was not like a a huge effort so I think that that that could be uh I would not say low hanging fruit but maybe not a very complicated one so so yeah I found that really interesting and maybe I'll ping him to see if he has something in mind uh you know if he has written something on that"
  },
  {
    "startTime": "00:34:04",
    "text": "then okay so uh what could be next so we have issue this uh this draft for t2t uh we have this implementation I don't know now if it I don't think it's totally synchronized with pan so uh do you see any way to push uh this work forward well I don't know who you is but since I everybody I put in some some he inter appearing to actually do the sidf fire generation in a standards performing way and U it probably makes a lot of sense um to to uh uh make sure that the the approaches we have here the the one that that just implements the standard and the one that that is an interesting but not yet standardized extension we want to make sure that this works together um so I think we we should coordinate that yeah because one point is that the S extension is defined by a young data model and the extension we did are not covered by this young data model and I not sure for example that the enum will be a correct repres presentation so here it's just a act to to prove that is feasible but uh so maybe we can uh go and try to to add the this to the young data model defin for Sid so what one one interesting question here is um what what is being done here the the assignment of Sids to the Yang names can be fully automated uh but sometimes it's not"
  },
  {
    "startTime": "00:36:01",
    "text": "sometimes you actually want to influence it and that gives Sid files a special status because they are kind of automatically generated but they also May reflect some decisions that are not recorded anywhere else and um I think that your your type um and and key uh extensions actually are fully automatically generated or am I wrong with it yes totally yes yeah so the question is whether it's actually a smart idea to put it into the Sid file which has this weird uh double life of of being automatically generated but then also influenced um and so it's kind of a precious file it's not a file that you just throw away and then completely regenerate um because you need to record the existing um mappings so I'm not sure whether it makes sense to actually have both in one file we may actually want to have a separate uh file for for uh collecting this kind of information that could be a that could be a possibility but after that maybe it's you can have if you have two files are you sure that you are using the right f with the over that's uh also a problem so we have to be sure that uh we we have the good seeds on each uh so to have in a single one it's we sure maybe so that's but that's a good question manage uh yeah thank you for the presentation I think you set me up very well for my presentation uh so I had comments about the Sid file itself uh can we actually uh describe Sid file in coron itself right because there's no reason we have to use Json uh"
  },
  {
    "startTime": "00:38:00",
    "text": "specifically and and there are some other improvements as well in in formalizing s uh uh grammar itself so I don't know where which is the correct platform to share those is it this one the other one so this hit file is currently described by Yang model okay so I I think we already have what what you are talking about Alex understood understood no yes yes I um yeah uh I agree with you on this on this question so um Yes Man uh that's actually an excellent question and the point is that you know we want to to be as as little as as less intrusive as possible in terms of what is already used at the ITF and uh we forwarded like so we we use the Yang the way we use the yang definition of of of the structure right so probably there are other ways that could be more popular outside of the ITF but uh as long as we writing rfc's like that's the the the the the way of least resistance and it works okay understood thank you yeah um and and I I wanted to just to add one one other thing uh um so when you talking about extensions and and adding to the to the sit file and when cars then uh very interestingly said that you know like sit files in that aspect are very precious because they are you know that there is there might be some information that is not captured anywhere else so probably one thing about this extension s extension is to see uh what what like is there a use case where you can like I can imagine if you have the Yang file the Yang file and if you have the sit file probably you can have a"
  },
  {
    "startTime": "00:40:00",
    "text": "tool that can generate you the metadata like the Sid extension that you're that you're saying here um so is there like a use case where you have only the sit file and you don't have the Y file uh where St extension would be so that's the case normally the C extension that you add to this to the Sid file is here to uh avoid to have the young data model so and you you have information so if you look at this s for example you have an identity ref so when you look at uh value 60,000 Z6 then you take a number on this Sid and you know if you want to convert it in Jon that you have to look back in your Sid extension to find the asky string of your identity ref so it's information that uh already store in this file okay yeah but I mean probably one one thing to to do on the next release of the document is like to say okay what are the cases where you can only have this sit file it's the case the goal is to avoid to have the young data model so once you have generated V6 extension you you able to move from CBO to Jen and with the key mapping your you can brose any uh young data uh data model any score con representation okay okay thank you I mean we'll we'll discuss that a little bit later but uh I think I think it's it's uh it helps a lot in many cases but really need to you know to to to write it down or read it yeah we have to be a bit careful with the time right now uh Alex you said you need to leave at 5 Central European Time yes so probably we should be switching"
  },
  {
    "startTime": "00:42:02",
    "text": "to your uh talk now um let me activate those slides okay okay thank you very much so uh yes I will try to be a little bit to be brief as as much as I can um so thank you Caren andari uh for for organizing and for everyone here being like discussing the core uh cluster um so lauron did like a very uh interesting overview with something that's really working um and I wanted just to show to to share uh a small point on the sit Registries actually it's quite a lot related linked to the draft ITF core Sid which is in 20 its 24th version today uh and hopefully soon we'll we'll go to the RFC editor well it is in the RFC editor que so it should be emerging from that any minute now I I finally got another document out of the RFC toq a couple of weeks ago so I I expect this to come any any day now it's an improved document just needs to do the RFC editing so consider done okay oh okay well that's that's okay I'm I'm I'm putting a champagne in the fridge now for that but that's great news um and uh actually it was like a long work uh to actually get it done because there were a lot of considerations uh going into a lot of discussions and um I just want to to get back like just a couple of mini points so that we are all on the same page so the first thing is that when we started working and like when the work of of of doing core com which is like"
  },
  {
    "startTime": "00:44:01",
    "text": "NETCOM you know like with Co-op and and blah blah but corom with uh seore encoding so yank to seore uh we actually did a lot of work uh on specifying how um how do you actually map how do you represent the Yang data into cabore uh and it turned out that because previously NETCOM and rcom were using ML and Json uh actually they were very um tolerant to ambiguity um so you actually you really need to have the Yang file to be able to understand what the the the data is coming like you have a string and and that string can represent lots of stuff right and you need the Yang file to the Yang model to to know if if it's a date time or or something else um and in this and we had a lot of work we did a lot of work to actually really formally identify how do you represent that in in in seore um and and that was one of the one of the things that that was big work part of the work and then the second one was to actually because um the yeah in the like in the netc and the in the rest world you have these very long ident identifiers so uh where you actually need to say what what is the thing what is the the item what what what are you referring to what from where do you get data like and there are all these kind of very long strings so you can see like in the examples like slit f- system dot set I mean it's like full with very long identifiers like that and what that was one of the first thing that we said okay well that's too long know you're just going to have like huge cabore files because of these identifiers um and this is where we had this this a lot of work and discussion on how do we rep how do we make it like assign a number so how how we how we make that more"
  },
  {
    "startTime": "00:46:00",
    "text": "compact so the solution we we found in the end was the Yang schema item identifier or Yang Sid um so it's like a it's a 63 bit unsigned integer and one such sit identifies a young name so here that's also one interesting thing but because we actually had to Define what that is and that was not a an easy job and thank you Carston also and and uh and Michael for participating heavily in that like because you know there are a lot of things in a Yang module and uh you know no one else had to Define that I think before we did that so we have the list of what a Yang name is and and then what we end up with is to have this system of allocation where you def you you allocate you assign one number which will be globally unique to this name so uh one number maps to exactly one uh or yeah one number Maps only to to to exactly one young name so if you have the number you can find the name and then like ideally in a perfect world one young name should map to one sit but that's not a strong requirement no no no so what I just want I'm I'm I'm uh uh I'm going just to talk about the the the Registries here SE Registries right um and so here are just two examples like of two seats that are allocated to different um uh ID uh young sits so so two SE numbers to two different uh young items and you see like there like two by identifiers that map to like a very very long string so it's really efficient and the nice thing is that you"
  },
  {
    "startTime": "00:48:00",
    "text": "can have these Delta encoding so if you have like a uh uh yeah it's it's it's an intro to cor it yes m is is starting to to getting sweaty don't worry no it's cor it um and so um uh so yeah you have this this really nice this really nice uh property that where you have um uh multiple sits you can actually only send the the Delta over over the year so it can really be super efficient now the point is in order to guarantee this mapping we needed to put in to to to to create like a registration system that would um guarantee the like the properties that we want from these Sid numbers like their uniqueness so uh in order for that to be scalable and actually to be able to be used we allocate seats in ranges so that's what we call the Sid range right we are not going to be allocating individual Sid numbers and for scalability in the system there actually uh uh we we divided the whole like 6 63 bit space in blocks of 1 million sits and each of these 1 million sits is called a sid Mega range and it will be managed by sit Mega range regist okay now uh this is like what what's what exist is if it's it's there in the draft um now the point is okay here are a couple of uh of of terms like okay how do I actually assign the the the sits to individual uh modules so there are like a couple of terms the first thing is everything starts from the owner of a Yang module or or the module controller like it's if you're the developer of the Yang module that's probably you're the module controller uh but maybe like down the road like someone else is got ownership in somehow of the of the Yang"
  },
  {
    "startTime": "00:50:01",
    "text": "module and and they they control how that evolves like and then so this is one concept to to keep in mind and then you have like the cdus so this is these are like definitions generally taken from the from the draft like you have the CID users so these are like the the the uh the the the developers or the the the software that are using the Yang modules and they are associated sits and these SE users they need to take this the SE files from a repository for example and that repository will provide the the the the SE assignments the assignment of the seat starts with the SE assigner who is going to which is going to be assigning the seats the individual numbers to the module that typically will be the developer of the module and also in the whole the system you have the like the the Registries of the big seed ranges now if if everything is very confused in your head that's normal uh and I hope that it will get a little bit uh more clearer when I talk about this like uh like as a a developer like a Yang developer or controller so the The Entity that is of control of the Yang module can be of three types the first one is like sit sit guide in so that means the developer knows what seats are and wants to like actively participate in the allocation of the sits so basically they will know like they develop their young module they will know where to go to request a SE range and they will allocate the so choose the sits for the different items in the in the module and and you know they will publish that so they're very actively participating we have then type two sit oblivious so that means that uh young developer like they don't know about"
  },
  {
    "startTime": "00:52:00",
    "text": "seeds or they don't care about seeds or both right and typically that's like for existing Yang modules so there are a lot of Yang modules out there obviously they work without having sit fats right so at some point we need to handle that and the third type is s aware so that means like well we they know what the developers they know what the Sid are and they know that they're exist but they don't want to bother with like assignment or stuff so they just choose an assigner see the assigner and say well you know handle that for me and like let everybody be happy so now like this is like a very high level intro to that overview and one of the things and I'm actually quite impressed and and very uh excited when I saw that is that they actually uh so let let so let K designer be working let let's go uh so maybe it's not the exact term but let let let let's me give you the examples and then we discuss that right so the point is that the Registries are already have already been created so because the draft is like in the RFC editor q and soon it will be on RFC so it already went through Ayana and Ayana already created the Registries that we requested in that draft so there are uh the three types of Registries that that exist so the first one is the Yang SE Mega range the second one is the ITF Yang seat range and the third is ITF y SE so okay that's a mouthful and let me just give you show you the contents of the already existing uh uh Registries so the Yang seed Mega range basically this is where I said that the universe of the Sid numbers so it's it's like a 63 bit Universe it's it's a huge Universe numbers and it's divided in"
  },
  {
    "startTime": "00:54:03",
    "text": "chunks of one like in Big Blocks of a million sits so these the first million is given to the ATF and the organization that actually is handled that is aana so aana is managing the first one million seats and how this first million is uh distributed among the like among the different Yang modules now here the point is that in the future there will be other organizations so let's say i e can request to have like the second million like from 1 million one to from from 1 million to uh to two Mill with to 1 million 99999 and so forth then you can have 3 gpp then you like you have companies and so forth so that is a first place that okay that exists uh like can a working group ask for a mega range I think it should be silly since we already have access to any range um okay so I think that that's Michael trying to respond to L okay now the second point is so this is the so so here we have like okay Ayana manages the first million on behalf of of the ITF right and and this is that range so that that is the ITF y seed range so this is the first million managed by Ayana and you can see here uh because like aana has their rules of how things can be managed like starting from uh sit zero so the first 1,000 require isg approval then starting from 1,000 so Sid 1000 to up to uh Sid 60,000 you have an RFC required so that means that these here can have sits only if you have an"
  },
  {
    "startTime": "00:56:00",
    "text": "RFC uh 60,000 to uh so starting at 60,000 and with a size of 40,000 sits so this is reserved for experimental private private use and then uh you have we have like uh from 100,000 to like size size of 200,000 it's RFC required and then we have 700,000 reserved and we already have like the first Sid ranges that were allocated right you H you like Zero Entry point0 is reserved not it's not a valid sit then you have from 1,000 to 1,100 for ITF corcom from 1,100 so 5 to 1, 150 we have ITF types and so forth and so forth so this is already allocated right and now the final range so the final registry that is already out there right and which will need to populate is the actual sit files right so here basically in the Yang SE range we say for example well the range for ITF corc is from 1,000 with size of 100 right and this is the draft that corresponds to it but where is the sit file that actually gives us the exact uh the exact allocation okay that this young name like it's that's the corresponding it well it has we H we have to find that in on this page right here we need to have like name of the of the module like ITF corcom y file so here like a link to the yank file sit file a link to the sit file size and reference so the reference is going to be again the RFC that or the draft and so that will be uh then handled by Ayana so we'll need"
  },
  {
    "startTime": "00:58:01",
    "text": "to you know populate at least for the uh for the modules that are defined here we'll need to generate all the sit files and you know like communicate them to Ayana it will go through an expert review so we'll I hope that we'll be enough expert to review that uh sufficiently fast and uh um and you know that's it like the the system is bootstrapped and uh to and and then and we start start we start work right um and that's it for from my talk I just wanted to say that you know it's all there it's everything is out there and and I I'm actually quite excited about that yes Carson thank you so this was a good over you and um I'm I'm seeing some interesting questions in the chat um that indicate that maybe some of these these things were too obvious to us when we wrote the documents um but let me point out that there are two important gating points we still have to take one is we have to find those experts um so every registry has has a small group of designated experts and uh these experts usually look at a registration at a time um however the initial designated experts for the the Sid registry uh will probably look at the 200 modules that Ayana already has registered for rfc's so we want to make sure that we actually have SIDS defined for all those 200 modules and this essentially means we have to get our software into shape"
  },
  {
    "startTime": "01:00:00",
    "text": "that it can do those sit assignments with without hiccups um and uh then there are 750 uh modules in the internet draft um space um that that we actually have to to look at so that's gating function number one um gating function number two is we actually have to get those Mega ranges out and one important customer you you already mentioned which is i e so that there are some people in it who understand that they have to get a Mega range and uh yeah we have to get the expert in place so they they do that uh but of course it will be interesting to see whether other uh large players uh like like vendors uh get their Mega ranges so so Cisco and Huawei and and Juniper and so on uh these should be going out and getting the mega Rangers it doesn't cost them anything beyond filling in the form uh but of course there is a certain commitment of of uh handling the the space handed to you in in a well defined uh way so they will want to make sure they have it uh somewhere in their organization that is not destroyed by by the next reorganization and things like that so these are the two two uh gating points um I think we need to take let me just make one more Point here um there is another large linear space that surprised people uh when it started to exist and that's the Unicode character space now it's much harder to get a uni code character than it will be to get a Sit designed uh but I I think the principle is the same uh there is a"
  },
  {
    "startTime": "01:02:03",
    "text": "that goes into assigning a unic code character and that means um there there is a million of those available slightly more than a million um and uh the fact that it probably takes approximately $10,000 or so to get a uni code character assigned with all the bureaucracy and and the draft writing and so on and so on uh this means we can be pretty sure that we will never run out of Unicode characters because people will not invest 10 billion dollar into Unicode characters that's not going to happen um the the space for SIDS is incredibly much larger so even 32-bit SIDS are are a few um uh billions of course we have said 32bit IP addresses will never run out so we we even have more uh sit space uh but the same kind of argument can be made even if if SIDS are assigned in a a pretty automatic uh way until somebody comes up with a way to write new Yang specifications new Yang models in in a machine generated way uh it's very unlikely that we will ever have enough money on the table to exhaust the the sit space uh of course there there are good SIDS the shorter ones and and bad SIDS the longer ones um but the whole thing still is is an a of magnitude better than than writing uh those uh Yang names in in long hand so that that was the Innovation people didn't believe we could do that so I remember call working group meetings where uh people who were used to the asn1 arc system said they'd rather have the The Arc system than than a single linear space but then"
  },
  {
    "startTime": "01:04:02",
    "text": "we couldn't have our efficient data coding so um yeah but we still have to do these two we have to reach those two gating points and uh then we can say the whole thing as a success yeah yes so exactly and and and thank you very much Caron for for that and yes it is very exciting time um probably one thing and I I was thinking about that is um so it's no problem to generate like the sit files for the existing Yang modules um probably we'll need to give a heads up to the net mod or I don't know which working group uh just to say hey well we put all the files in a GitHub so they are not their assignment is not final so go take uh yes go take a a look at that and like if you have any commands or like do that now and we'll commit everything by ITF Dublin let's say right so so so so that that's one thing and uh I mean there may be other things but I think I'll stop here but um yes I'm I I I almost cried when I saw the the Registries like oh my God almost there so so yeah thank you very much Caren for and and and Michael for for you know for making sure that we get through here yeah I would agree with the the objective to have at least the 200 RFC modules in the registry by Dublin I think that's something we really need to do no yes I have two questions or one remark on one question the the"
  },
  {
    "startTime": "01:06:00",
    "text": "question is uh so it's I send the link on on the chat but for example if we look at Chi we have main young data model that Define what we did at the beginning and now we have some uh augmentation of this young data model by RFC but we Define only one or two seeds for this augmentation and if if we follow the the process we have right now it means that each RFC owner has to request for seeds and so we will have seed that will be sprayed away which is maybe bad in the sense that we have Delta encoding and so if we we want something constrainted and if we don't care we don't take care about the Delta encoding then we'll have a larger representation so for my point of view it could be important for things like Chik where we have a a lot of things that are done by the working group that it's a working group that manage the C location so get a range from ETF or a and then manage the C location by itself so that was my remark and my question is how do we do the IG location so there is some value that are very small like less than 1,000 so who is managing that well the isg um in in the end of course the the expert the designated expert will play an important uh role so if if you remember um port numbers port numbers used to have a IAL range the range below 10,24 uh and there was a designated"
  },
  {
    "startTime": "01:08:01",
    "text": "expert making sure that this space didn't get exhausted uh so that's really what the design designated expert uh does and of course if the designate expert is unreasonable then it's the ISD jobs to find find a better one um but uh I think we we need to do a little bit of consensus building on on designated expert uh guidance um that uh we we agree is good guidance and of course we can always revise that put it on a Wiki page or uh whatever um but that's that will happen within the next 80 months or so we will start to understand more of those uh details so if you think you have a good use for for the the low uh sit numbers uh please please make your case okay yes and uh yeah exactly and one thing so because I know that you're thinking a lot about the shik you know shik sit and how to optimize the Delta encoding so I would suppose that a reasonable uh expert you know you you so first of all so you have the you have already the range for the for the module and basically you make the allocation on your own and a reasonable expert you know when you submit the request to you know for for the exact SE number allocation you send with that the your manually made allocation so a reasonable expert would not reject that you know they will not just say hey well you know I'm just generating everything from scratch um the reasonable expert can tell you hey there are two sit that are you know violating the rules because they are like I mean it's not a valid sit file or something else um but as long as you as an young mod author you know you're careful about your seds and you're making like you're fine tuning them and"
  },
  {
    "startTime": "01:10:01",
    "text": "like well I don't I don't think why anyone would say no on that okay so 10 about one 1,000 is reasonable what you you in the in the first 1000 yes ah oh sorry about that no let let me spare you some time on that so thank you I really need to go guys thank you thank you very much I'm I'm really sorry thank you very much carsten thank you for for bringing this up Alex I think there's a lot of work required here uh so that's good that you bring this up yeah yeah yeah sure thank you okay I think we had a good discussion but we also uh slightly overused our time budget um so the the next uh oh that's interesting how do I get the slide control back from somebody who's no longer there that's an interesting feature of the ah it's gone okay um yeah so the the next one on on the agenda is uh Rafa with uh Yang data model for sdn based and I'm trying to bring up your slides you don't mind so you can start talking okay okay so uh you have control yes I have control now thank you so much so um so thank you for for for this law to present uh uh our idea about using Y dat model for uh key management for a dog"
  },
  {
    "startTime": "01:12:00",
    "text": "and and noore we actually wrote a a draft some time ago so in this slides we describe again the let's say the architecture and and a little bit about what we have been done during the the recent uh months so uh basically the idea is that uh uh the software defined networking as a top General topic is an architecture that allows user to program orchestrate control and manage network resources and this model is been used in iot networks uh at least in the research part and it turns out that we we had previous work to manage ik uh and IPC with sdn defining a gen data model and you can see there the RFC so we thought that it could be possible do the same thing or similar thing uh with head and osore so the general goal is actually providing a centralized system for the management of uh uh M2M security Association uh between different things uh using J and co uh obviously potentially is also possible just to configure one uh thing and then to configure using a different protocol like NETCOM or restom and non constrain device but here in the slides we present that think to thing communication so the steps uh we conceive for the this architecture uh actually are two uh first of all the assumption is the thing is registered uh through some kind ofing on boarding the process Inn controller uh and as a consequent of that uh the sdn controller knows about the the thing and knows is authenticated"
  },
  {
    "startTime": "01:14:02",
    "text": "and they can establish a security dation between them and from that point the Second Step actually the controller sends configuration information about n hawk or osore and to the things through the core conf and gen data model we have defined in the in the draft so regarding the first step uh just a few comments because this not let's say part of the of the idea what as I said our assumption is that the thing is registered in the controller and there is a security Association established between them that allows to protect the information that is sent from the controller to the thing and is a prelimary step in this solution but in in general the assumption is the controller and the of the the thing has a pre-established let's say security Association so uh assuming that uh for any kind of SDM based obligation one specific obligation is this one so we assume the same and then from that point and having that registration process then the controller can send information to the things to uh configure uh uh the security ass in particular in this case one uh our assumption is that the thing uh have ad hoc and nocore implementation so uh using let's say here the K management system actually the terminology northw interfaces an interface that allows to talk with the controller to tells or to specify General security protection policies that with that information the controller with with uh with that security uh protection policy we'll transer that in ad hoc"
  },
  {
    "startTime": "01:16:00",
    "text": "configuration and that configuration will be sent uh through the southbound interface which is the step three uh to the think a and think B actually we wrote there cor com because uh all the configuration is exess in a j data model and that J model is transer finally incer information that is sent using coop in the South B southbound interface so uh the southbound interface here is car comp Complete Car comp so when we send that uh ad hoc configuration to think a and think B then they can establish the security Association and protect the communication between them but the initial configuration as I said is performed by the controller even during the life cycle of the things that configuration may change or may might include the new things in the in the scenario uh uh and so can be dynamically uh let's say configure during all the life cycle of the things this is the actually the case one and we have also the case two oh sorry assuming that the Ed hog is not in the thing I mentioned in the thing so uh only score and the idea is all the same but now the the configuration for score is stressed as well in in in a j data model and we send the oscore context to the think a think B to protect communication between the both things I think uh okay um so the difference between this case and the case one is that uh here we don't assume that we have a Ed hoc in in the in the things implementing so dally the controllers and all oscore context"
  },
  {
    "startTime": "01:18:00",
    "text": "to establish the secure Comm communication based on oscore and this is just uh a tree uh with an example of the Y data model related with Ed hoc so there is a block about specifying credentials which is the the out entry so identifiers and authentication methods and if uh some private Keys required Etc and then the definition of a connection is the connection information between two things can be the local I mean the the thing that uh can have a resource that wants to protect but can also access another resource in another different thing that wants to access securely so that's the connection information and then finally a block related with policies uh we have used something is used typically typically in ic uh and adapt that to uh this model which is the policies based on bypass protect of discard depending of the resource actually a thing wants to access so maybe there is no need for protection or uh or actually is filtered out so uh I think not cannot access a particular uh uh resource in another thing or can be protected and the information to to be protected is uh specified in the Target and the looger resource Target resource in the case the think a wants to contact to thing B and the think a needs to protect their own uh resources will use the loc of resource information so basically this is the general view of the J dat model HW and similarly uh we have uh the oscore obviously simpler and here actually what you can see in the model is just uh go to the"
  },
  {
    "startTime": "01:20:00",
    "text": "RFC and see what are the parameters are required to define those score context to be sent to a particular thing obviously you need to send a context to the thing a a thing B and uh we have extended that with the policies as well so in case we want to access a particular resource and needs to be protected that will be uh Oscar protection and all the information is actually in the first blog which is the osore context so this is actually the J model for score um and actually this is an example uh we we use a XML but the real truth we are using for our implementation Pyon con and with this information this is the expression of the Jan data model uh in XML that can be expressed in Json and from Json to cber and transported that c information using uh Co-op we can configure uh actually the think a and think two here is represented like T1 and T2 this is a the the example with with the doc and uh we set the credentials and the resources we want to access and uh we want to access with protection of course and we provide all the hog information we need to to Lish the theoc security Association and and this is a similar example with hore actually here we need to send the master key master Sal and the algorithms and everything uh because there's no negotiation uh with a doc just to set the context and allow the I mean the thing the T1 and T2 to connect each other using oscore um and next slide here we have now uh proof"
  },
  {
    "startTime": "01:22:00",
    "text": "of concept uh actually we haven't implemented that in constraint devices yet is uh this proof of contion based on the dogger scenario with multiple uh Linux nodes so and noes that receive Ed hard on oscore configuration from the controller so controller is another container in dogger can be on demand or once they are all registered so like a reactive or proactive uh execution the registration right now has been implemented using a coop request from the thing to the controller so once the the thing uh comes up uh sends a cop request to a resource in the controller saying a here obviously the assumption is that will be authenticated and then the controller is reg I mean the thing is register in the controller and and after that the controller can send that information to the to the node uh we have a deployed to topologies one of them is star like a central node and then another around and then the mesh uh topologies just to test the the implementation uh we have been uh we have focused our implementation the southbound it means that we need uh the core com and actually for transporting the information we required that is in C we use the Jan to C library Pon com from IMT uh and we are using iio coab uh to use coab implementation to send that c uh J data model transformation to the to the to the things and that's southbound actually between the controller and the thing uh using iard can be protected using the oscore as well obviously this is different because it's man the keys"
  },
  {
    "startTime": "01:24:00",
    "text": "are manually set between the controller and the and the thing assuming dynamic or autonomous registration process on boarding process that uh key will be generated during that process but here it's just a manually set and for the communication between the things uh we are using micro do micros score implementation we had the opportunity to talk with the main developer Stefan in in Paris during the meeting so that is uh our proof on concept and we are deploying the both uh both topologies star and mesh and trying to get some performal results this is actually the case one we are this is the mesh the most complex one H in order to test uh how many let's say security Association can configure the controller and this is also the MTH scenario is the same but here the information is just the oscore context to protect communication and uh finally uh as the next steps uh our idea is to continue with uh extending the Gen data models to include some additional extension to a score right now what we have model is just the oore context but there are a lot of extension like Kudos or group communication Etc I also talk about this uh with Marco in in Paris so it's just to extend the jata model with the group communication stuff ER it could be also possible to distribute the prare key between the controller uh in the case one when we have we have the Ed hoc psk base authentication and we could add new protocols not only at hog or or or score but also for example dtls in case is required as I said our idea using this proof of concept is to take some"
  },
  {
    "startTime": "01:26:01",
    "text": "measurements and transport another obvious obvious idea is to transforming this virtualized scenario to a real scenario with the real devices and see how uh it behaves and uh one problem we may have obviously is that uh right now the J are experimental and and we should need a a place to Define and to discuss those uh J models that actually are modeling at Hana and and Oscar so if this idea evolves that's uh that would be our idea what we don't know is the place to do this if there's any place to uh site this kind of a jand mod related with that Hogan score and that's all I haven't followed the the chat yeah I think first of all thank you for for giving this talk um I think one one thing that that people tend to NJ on is uh sending private keys over the the wire um you usually don't want to do this but um the reasons why you don't want to do this are a bit more complicated than than the simplistic rule I just um stated so generally it's it's um really useful to to send Au authorization information from a controller to a device uh when it comes to authentica information um the the problem of course is that the um device needs to have"
  },
  {
    "startTime": "01:28:02",
    "text": "something like an initial identity that that can be used to send something uh to it so you you need to bootstrap this in in some way and people who look at this think uh this is meant to do the bootstrapping and I'm think you are not using this for bootstrapping you are using this for for putting in the operational uh configuration is that true yeah the the thing is the boing I mentioned is to establish the trust between the thing and the controller after that the controller became uh key distribution center a trustable key distribution center right in terms looking at the key distribution okay so so in that sense uh the controller is a able entity that is able to distribute that key material uh the most let's say in the osore uh case where where we have osore only obviously you're setting the symmetric Keys you need to protect the communication between things but as I said that controller is a trustable entity because there is a mulle authentication during the registration so the thing Trust on the controller and the controller Trust on on the thing right and obviously if that case to might be scary at some point uh you have it do uh you don't need to S to send the private key actually the during the registration the thing can send their public key and then that public key can be let's say like a certified somehow so that potentially potentially the controller and I agree with you can send that information to the thing but to me it's it's very important to understand that the controller is a"
  },
  {
    "startTime": "01:30:00",
    "text": "trustable key distribution C after the registration so it's a a the main point you just made is that we already have mutual authentication in place before we actually start using your model yes between the thing and the controller only yeah because actually but but but that is something that happens in any centralized uh solution uh to configure critical uh information if you don't trust in the configur then you have a problem so the Assumption of course in any uh sdn scenario or any centralized scenario is that you have a trust on that third uh party that is Distributing that critical information yeah one one important observation is that uh trust is a liability if if somebody trusts you you have to make sure that you earn this trust or you will create trouble for for that somebody who trusts you um Christian is in the que may maybe he can elaborate on that no I'm I'm the queue for an independent Point okay good so the the the point is uh it's it's nice to be trusted uh but it's also a liability and I think we pay much too little attention to liability issues in iot systems uh people who manufacture large quantities of something are really interested in controlling their liabilities and um I think liability consideration section should be needed for any kind of I that's that's that's right but but in my mind uh since you"
  },
  {
    "startTime": "01:32:03",
    "text": "where you authenticate uh and authorize actually uh that during the onboarding or boing process between the thing and the controller and you establish that in that moment you create all you need to uh uh what is necessary for that trust uh mention so I think obviously that part is is critical not only with this solution but any other solution actually this discussion already also happened in the during the standardization of the sdn and IB and I the same thing and the conclusion obviously we added uh in the security consideration all the uh key distributions uh aspect taking into account the controller has uh the power to send that context to the to the things uh in that case in the I SEC was the routers and everything but actually in the draft we uh inherit the same security consideration from the RFC we wrote related with IB and ik so people have a clear picture about it thank you KR yeah KR um please consider whether some of the modeling that you're doing here um can be shared between Ace and here um I see an expression of of aead algorithm and master key there that you may not even want to manipulate individually anyway because that opens up for other things so those things have already be been expressed in a for example from the confirmation claims for cwts so please look into whether there can be some D duplication between those modelings rather than building a separate tree of it's like in Ace we have an ace Oscar profile and an ace ad hoc profile and now you consider like"
  },
  {
    "startTime": "01:34:01",
    "text": "adding dtls here when there is already Ace work for DT for expressing dtls keys so I think there can be duplication by um looking at what has been done there and this goes in both directions this simplifies things here and if it turns out that for example aif is is not suitable for the the um uh the the Scopes you're expressing here then what you're doing here might also be useful for people in the cwt space to express their their Scopes actually um I regarding your comment actually the obviously the the Gen data model can give you the flexibility to include any information you want or or even a token if you need that actually uh in the figures we show uh there are like two communication between the controller and the things but actually you may send all configure inform configuration information to one thing that's something that's required to that thing to contact with the think uh for for example from think a you send configuration from think a but you you don't need to contact with think B because you have already sent uh any token or anything to think a to contact with to B that is also possible and can be can be extended and another additional comment General comment is that uh if you look at the old score and they mention as far remember some kind of or any other protocol like out out of band mechanism to provide a preure key for example or key material actually this is a solution for that out of land mechanism based on a Model uh based on on this the end okay so just just a final comment from my"
  },
  {
    "startTime": "01:36:02",
    "text": "side Lauren can you be quick uh yes I will try can you go back to the young data model please Rafa uh because one point we we discover when we create the young data model is that we we use at the beginning X string instead of binary but when you do the conversion in C become a Str and so it's not very efficient and I think it's the same for date for IP address so maybe it will be nice to have an extension to to the C mapping and convert these element in binary directly yes there is work going on for doing standin using binary SEO Tes for things that normally are texted in in Yang so if if that goes through we may have a solution for that part okay perfect good so thank you Rafa I think thank you uh the point that Christian brought up that we uh probably need to do a sweep over our various uh models that try to do almost the same thing and and find out whether we can factor out uh some common material I think that's a pretty important uh point and and I think that that's uh actually the subject of a very nice survey paper if if uh we get to this okay thank you so we are already a little bit late sorry about that manage so um some of your points already came up but uh I'm afraid you only have uh 22 minutes uh left now so I'm trying to bring up your slides um something weird happened"
  },
  {
    "startTime": "01:38:05",
    "text": "again but you can always start talking ah okay uh thank you for sharing that c uh and I think hello everyone as well I am not sure how do I change the slide ah okay you have control now okay perfect got it uh so again uh hello everyone thank you for joining and thank you loo and Alex as well because I think I'm going to uh use some of the concepts which they have shared today uh especially about Yang and Sid um and this is more this is not a tutorial this talk this is more of a talk about how do we actually build applications uh for using corcon for our own uh for our own requirements so so that's the that's the main objective uh okay so I think uh two things which we need to be like extra clear so coron is an representation format uh when we are talking in context of this uh sort of uh session and then there is a serialization format uh which is which can be c bar or Json so core conon can be serialized into C mainly but it can also be uh serialized into an equivalent Json which is not defined but can be done uh okay so about the architecture so let's assume that you have a well- defined architecture so you have either a client server model or you have to build an embedded system and in that embedded system you plan to exchange or interchange data using corcon uh format uh right now you are doing it using a Json data and and the Json data has a model or it has at least some structure which is well defined and and uh on the wire the data which is being exchanged like in Jason so so this is what uh you know this is what this cycle looks like you"
  },
  {
    "startTime": "01:40:00",
    "text": "know so so you first is design your y model then you generate sits on them and and register then you implement uh you know C prototypes which which will get into what they are and how do we go about it then you generate a Cabo dump mod dump of your data model and then you programming into Riot which is the target uh OS which we are are using it here and and this should take about zero minutes because we all know it can be autogenerated so so this is just a joke again this is just to be provocative uh but anyway so going on so first uh I'll quickly go through what won't go into the detail because I think most of the concepts is already you know uh sort of explained by L before so I'm going to pick up the same example which he used uh which is uh how do we Define or rather how do we actually describe uh your data structure using a Yang model so he did mention a lot of identifiers he did mention a lot of things uh the interesting part where you talk about the relationships is in the container part mainly so so in from his example you can see the container part on the right so you see uh sensor object and then there are Leaf nodes which are basically uh which have a particular type these types can be a regular enum type unsigned integer Etc which is I think well defined so equivalent uh tree structure looks like this there are some uh uh there it can have list as well and that list has to be defined or sort of identified uniquely uh by its index or or some sort of a key which we call it as a sid key going forward then uh once you have this well defined y model what we do is first we check if there are SES in the registry already but if not you actually generate them right so how do we generate them I think that has also been talked about previously using uh Pang"
  },
  {
    "startTime": "01:42:01",
    "text": "tool and I would like to thank them because I think I I used a lot of their work and sort of reused uh uh their tool a lot and if you think these identifiers are common uh and your identifiers or your sites can be reused by others I think it's a good idea to register or sort of publish them as well okay now the interesting part uh so again I understand it's been a long day so I'm not going to go into the code in detail but I'll just talk about how the prototypes are how the stubs uh should look like so so we want to autogenerate most of the work which we uh sort of generate code for our model as much as possible so that we don't have to type it manually uh how do we do it so there is this tool which is included with the C coron library uh is this the best place to keep it uh we can debate on that but what we what it needs it's called gate steps but it's a small python script all it takes is a sid identifier file once you give it a sid identifier file then uh it will actually generate a header file and then Associated uh C implementation file uh let's see that so so once I do this on the SS generated on the previous example it should look something like this so this is what the header file should look like uh most of the header file are like aliases or like synonyms or whatever shortcuts which we can use uh the reason one of the reason for generating these prototypes is also to not having to remember the Sid of each of your leaf or each of the implementation which you want to do uh so so the header files basically contain function prototypes uh why is there a requirement for key mapping we'll get to that in a bit but uh mainly the header files is three components elas uh encoded key mapping and then the function prototype the implementation part or the implementation file uh"
  },
  {
    "startTime": "01:44:03",
    "text": "contains uh is slightly smarter in that it infers the data structure or it sort of in uh it sort of understands that to reach a particular Leaf you need to go through a particular s and it automatically builds a prototype uh according to that for example if I if you go to the previous exam previous which is uh which is here to select a particular sensor value you need to go through the index because uh only then you will be able to uniquely identify which element or which sub tree you are looking for so going back here yeah so to get a particular sensor value you need to define or you need to have a particular index and the types are already inferred from the sa files and and then there is Auto generated steps for the other leaves which which do not have much uh uh information about it so we put it as void but again we can improve based on that then uh we generate the CBO dump of our model so uh this looks something like this uh which is again a short python file what you have to do is give it a sensor instance of your Json uh now in fact I think we have it somewhere here yeah so so your on The Wire right now it this is the information which goes on your left hand side which is a Json uh serialized uh data and uh and so this is the one which we passed to this tool and then uh we also pass the s file which is which has been generated before and then we tell the name of the header file where we want to dump all this data and what it does is it actually uh takes this uh instance file converts it into a Sid represented core con format and this is done using Pang sorry Pi core con and I think Alex is here who sort of built"
  },
  {
    "startTime": "01:46:01",
    "text": "that tool so this is again then dumped into c bar and this uh dump is uh basically a uint uh unsigned integer 8bit uh array which is dumped into the C header file which we which will be used by the library later so going forward and then we actually sort of uh push it into the riot uh uh and you know this can be used uh to actually Travers a tree to actually uh look up a particular key or to look up a particular Leaf using a particular key so so okay so this is an example where the C corc library has been integrated into a riot application uh and and uh what we try to do is basically have a host uh on the left hand side so this host can be your uh server and then embedded s which is embedded device which is which is running rioto and this rioto is using the C coron library to exchange and interchange the data in coron format this embedded device does require the data model uh which we talked about which has been dumped into a c uh serialize serialized unsigned integer of 8bit array and it also requires uh it ALS Al implements a sensor mechanism so basically this is a function which we implemented by generating the prototypes let me see if I can actually share my screen uh okay uh C can you allow me to share my screen"
  },
  {
    "startTime": "01:48:02",
    "text": "I'm trying to find out which button I have to press I'm sorry no no no worries if it is too difficult then we we it's fine we can just continue and I have a screenshot I can just show that instead I used to know how to do that but uh sorry I do you know what to do here no I was looking for it can can you request it again okay ah here we are yeah okay you have to go to the que and then the que you can ground the screen okay it says all the slots for requested media are already yeah so you have to stop the slide sharing ah okay uh you know what maybe never mind maybe we can do it later I'll just continue with the SE okay okay so okay so we we'll look at a screenshot of a riot running and I'll talk about it but what are we trying to do so what are we trying to do is basically request two things so one is give me the entire tree corresponding to the sit 6005 and this request number two is give me uh the sub tree of Sid 67 or 607 where the Sid key value is zero okay so that's that is what it looks like I have written it in a more legible form which is give me the sub tree where the S key is 60,00 07 and the value of the S key is one uh okay it has to be one here sorry I messed this up but but anyway uh by the way somebody asked that okay what format is this for requesting so I think this format conforms to the ITF core commi 16 so this is where the fetch request is s sort of defined and we are just doing a fetch request using coap uh uh on that uh so you do that okay so this is what you will see uh so you see Riot emulated server on the right side uh which is basically an example uh of a coap server running and"
  },
  {
    "startTime": "01:50:02",
    "text": "then what you do is a client sending the payload once you do that once you do a request what happens is uh it will search the particular tree and then it will return the response which is in C bar uh as well so you see 60,000 for 605 you see the entire tree here for 607 you see the entire information uh here for the particular key where the value is zero so so 60,000 0 so 60,000 z uh and uh and yeah we are able to get the response correctly okay then the question is in real life uh in real life what what's uh what what has been or where has it been used so in real life it has been used uh for a small experiment balloon experiment led by Professor D Don dones from University of gral alss uh the the platform which they used is IM 800B which is a Laura model uh Laura enabled module and uh we actually uh flashed it with the riot operating system which was integrated with coron and it was we were able to sort of query temperature sensor data from it and uh plot it on a on a you know on on our server side and then see uh you know that we are able to sort of query as well as uh you know exchange data with it correctly uh and yeah and and more or less I think uh if you want to contribute where would you want to contribute so then it would be the engineering works there's a lot of engineering work to be done here as well so you know profiling this Library uh integration with z and other operating systems uh there is security consider ation uh to be sort of uh researched and understood because I think the library we did not actually consider that so it"
  },
  {
    "startTime": "01:52:00",
    "text": "cannot be used for production directly then there is scientific work to be done as well like okay what if the your model changes Yang model changes how do we actually go through this uh you know uh and and sort of flash your device correctly and like to sort of update the device without uh a lot of modification then I think loo mentioned it briefly which is is lightweight M2M or S ml integration so if you have that can you use this Library without modifying too many parts of your stack uh and uh and yeah and then there are other links uh if you want to use a library you can use it it's available uh there is a riot Riot integrated example here as well you can click on the uh example you can clone it you can build it and you can see this whole example which I showed uh without having to understand what the library is uh then I have also written if you if you are Insomniac and you're not able to sleep you can read my master thesis as well on this it'll put you to sleep for a good eight hours or maybe more and uh and yeah that's it uh thank you so much uh and I would be happy to answer any questions you have thank you questions while we're waiting for questions I I just have one uh uh comment on on slide 16 okay um so uh looking at the slide that's really hard to find out what's going on in in this seabo dump on the right and we have this this convention of using pretty printed hex stumps for for showing uh seabo data so you would see that the A1 actually is a map and the 19 e65 is the number 605 and so on um so that's really"
  },
  {
    "startTime": "01:54:03",
    "text": "useful and it's uh often also useful to use uh di diagnostic notation so what what's in the middle column of this slide actually is diagnostic notation if I I see this correctly uh yeah correct correct okay yeah thank you for that I make it more clear accent yeah that was just a comment but do do we have questions okay thanks is very interesting I mean maybe it's bit of a detail but this topic of C integration has now come across twice already can you elaborate a bit more on your thinking what could be done there uh yeah sure uh in fact ah okay I don't have a idea so basically what I was able to do is uh s ml also has a Json in typically it is exchanged the data is exchanged on Json uh on the wire so if you can create a Yang model for your CML uh data uh then you can follow the whole uh stream I know so this whole presentation is basically streamlining application of coron on your embedded devices if your embedded devic does use CML you can design your yang model around it to be specific to your data model generate sets uh locally at least for now implement it in C Subs generate your C model and then uh you know program it on the right so what you will see is a very compressed uh coreon format on the wire for your application and second is uh if your server side you can't actually uh change too many stuff so what you can do is add an additional proxy layer so that it can con from this core con into an equivalent CML data uh you know CML data instance which can be understood by your server so that that is what we were"
  },
  {
    "startTime": "01:56:00",
    "text": "thinking you know so on the wire it will be corc but on the other sides it will be uh CML that is what we were investigating during my masters okay great thanks thank you any other questions thank you um so my my summary would be that we have got a pretty good view of uh What uh people are doing with coron at the moment and it's uh def definitely important in particular since we still have have to complete the the coron specification over in the ITF it's good to know what uh people are using it uh for uh what we didn't talk about is that uh coron had some simplifications applied to it recently and not all of these simplifications have found their way into the the implementations uh that people have so there's a little bit of implementation work to do their as well uh but the most important thing is to make sure that coron as standardized as specified actually works with the various uh prototypes uh and and proof of concept um implementations that that we are doing man uh yeah I I agree with that yeah uh so again there are lot of uh one one comment is like uh the sooner we sort of standardize the better it is but it's also important to actually put it into industry so that there's a feedback loop which comes and like it sort of uh either validates the theory or like sort of uh finds the Gap in the theory which"
  },
  {
    "startTime": "01:58:00",
    "text": "we can fix so I think we had several gaps when we were building this library in the theory itself uh which I won't go into uh but but sort of uh yeah we we the sooner we start using it the the better or like the sooner we can complete on the theory aspect theoretical aspect as well yeah so if you have input to the standardization part that that's what the the core working group is for that's what the core mailing list is for so and any input is is very very welome because we will be uh finishing this up very soon no doubt thank you okay so we have seem to have gone to the end of our 2hour slot um the um this um agenda was uh how shall I put it's pretty AGI um so uh I think we we made pretty good use of our time and um uh we will meet in slightly more than than two weeks for the next uh inim if you are interested thank you very much see you later bye great thank you thank you"
  }
]
