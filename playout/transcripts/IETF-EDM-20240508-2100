[
  {
    "startTime": "00:00:18",
    "text": "hello hello how's it going I'm sad they they've uh they enderli my snapcam that I used to have filters on so oh tragic the one with like like the quick hat and everything the fake quick hat yeah so I'm uh I'm too scared to put the real thing on now so I should have tidied up my my office beforehand good meet Echo feature request for blured backgrounds please right I mean some so I think like my I can like add a blur on my like this but that's like my local camera BL go blurry why not and we up all right does this work can you can you hear me I can't see any like EDM flashing lights so it doesn't seem to be working well I just got back from a buing man ofet so they're not very far actually okay good hold on yeah need to make it a bit darker in here there we go he get he gets the right mood at least yeah"
  },
  {
    "startTime": "00:02:03",
    "text": "oh no that's out of frame all right perfect oh yeah it saturates anyway so we can give a couple more minutes for people to join in uh thank you Lucas for updating the draft recently I saw we also have some activity on the issues I just filed one personally um I think uh as far as you know stuff we should talk through today it'd be good to uh you know cover if people have been able to read and review and just have overall thoughts um on the document that's here those um we can also spend some time going through the issues and you know Lucas I know you filed some so hopefully that was can to be a good discussion points and maybe we can get some direction clarification there uh and then also I think it' be good to talk a little bit about just like the process bit of like this technically isn't uh like an IB stream adopted thing do we want to do that on this version or another future version or what we can see if other folks will be tacking along Lucas was um did you want to start with any of the issues you had any um so I'll just quantify I created three just before the meeting which I"
  },
  {
    "startTime": "00:04:00",
    "text": "meant to do earlier today but you know time um but those were they weren't like oh we really should discuss them right now because the're they're most priority for this meeting but they were just relevant things um for example the points that um when we last had an in-person meeting um Cullen raised and and just some examples um I think uh the the material is swayed by my experiences and those don't represent everyone's um so they're very quick or TLS focused and it would would be great to have more rounded um things so Collins is some good examples um we can probably digest them prepare some text um but yeah it' be great if Colin could could do that himself but we will try to do that um uh and and get some reviews and whatever for the next draft probably um I don't know if anyone's been following the working group chairs list and the discussion there um which has been quite interesting in terms of reserved fields or bits for reserved Fields um I just created a tracking issue um because I think there's there is stuff there but it's it's long you know I think what it's speaking to is the fact that you know there's no like as much as we would want there isn't a single answer of just do this like a lot of this is context dependent and what is right for one protocol or the constituents who would Implement and deploy that protocol call is not necessarily correct for for everyone um and so um I haven't had a time to go through some of the citations and the rfc's that other people have brought up on that list of examples of text that says maybe you know if you're going to set a have a reserve field that has no meaning for this version of the protocol you should set it to zero for example and then what should the receiver do with that information should they ignore it must they ignore it these kinds of um discussions and uh to me that seemed really relevant to"
  },
  {
    "startTime": "00:06:00",
    "text": "the kinds of topics we've had here so I encourage people to come to the meeting this week um I don't know if the attendees here because of that um but if not you know we we can try and reflect some of that back into the draft was my thought I don't know what other people are thinking here um I I had not been following that particular thre but yeah thank you for calling that out and also having them link here so uh reading I I can me drop a link to that into the chat as well have the chat go um so I mean it's essentially giving the difference between um you do you have to set it to zero on sending and then you should ignore on receipt versus is you should set it to zero and um must ignore on receipt which is one these classic nits I I happen to disagree with the original emailer but what uh Lucas if you've been following that thread can you summarize kind of where it ended up I think it ended up with a lot of activity while I was asleep um even today so you it's not it's not like oh this was discussed years ago um it's very active discussion and I I ad I haven't been able to keep up to to where it's got gotten to um but you know my my my take would be um some of the protocols I'm familiar with would be a must must not no must send zero must not must ignore sorry um and must in both cases yes yes um and I could kind of appreciate why that doesn't work for all protocols so it's been interest an interesting learning activity from me I don't think I'm"
  },
  {
    "startTime": "00:08:02",
    "text": "now to reflect that but you know I'm I'm happy to hold the pen and and try and come up with some proposal that gives a fair treatment to the different um views that are are in that form um you know that's not everyone you know there are other people here but to maybe come up with a PR that says something but I can't do that right now on the spot unfortunately so um hi everybody I'm not turning my video on because I'm on the sofa on my phone um but uh but um I also didn't follow the latest image just the beginning of the discussion and I'm not and pretty sure because Martin Thompson spoke up or whatever maybe somebody pointed them already to this maintenance um draft that we just recently published in this group because I think that's much more relevant um I'm not sure if this squeezing document actually applies directly I mean it's one of the relevant aspects but I agree I was going to mention 9413 and someone already did so just like hey they all the ideas have already been made in this thread now everyone's just repeating them um unless there's been some interesting stuff today because I haven't checked back in on it yeah and to be hon again I didn't read all the emails but I don't understand where must must doesn't work because it extensibility means that like you you publish a new document and then you have to change that but if you follow a certain RC certain version of the protocol then it must be this way right right so of course like the the must not send doesn't mean that there won't be anyone who sends it because they could be following a future RFC um and similar to like the must ignore it's like it's only if you only know this one you haven't heard the other one um and and the purpose of that must is to ensure uh to prevent collisions because exceptionally if you"
  },
  {
    "startTime": "00:10:01",
    "text": "want to you can do anything you want in another RC it just needs to update this one because of the must and because it's doing that you prevent a collision because you have like a locking mechanism in terms of rfcs that update this one and that's why we need the must so otherwise you get collisions I think it's more discussion about what must and should means then about this yeah reserved Fields I do agree lar I get did raise the question um it wasn't actually lar was responding to somebody else I think but about greasing came up in the discussion thread um and I think it depends on the size of the fields that we're talking about if you're you know in hb2 for example there's like a reserved bit which is always a value I can't remember if it's one or or zero but you know um greasing a bit is is kind of you know a bit destructive and and and it come it play into the if it is say a must and a must um are you trying to do um positive like active testing of of explicitly ignoring the requirement in order to test if your peer is following its requirements um and whether whether that is something we should provide any any discussion of um again I don't have a a good answer um we we do address some of this in the sense that um already in the greasing section um we talk about you know preserving explicit values for the purpose of greasing and the the the effects that you know different the the different size bag of bits that you have have um different consequences on on what you can do um and that that text we have already seems fairly um broad for the purposes that we we put it in yeah I think youor Point earlier the overall"
  },
  {
    "startTime": "00:12:00",
    "text": "conversation about Reserve besides being about what must and should mean uh is potentially more about like the protocol maintenance document but there is definitely an intersection with reserved greasing values and they are as as the document currently points out there special types of Reserve values that like you definitely will send and you definitely have to ignore um and so I think think it's good that we have the labeling like the talking about like maybe you know label them as reserved for greasing to make it distinct from other types of reserved um I I wonder though even like you know to the point of this conversation like should we or maybe that's enough like give more explicit like here's the text you should put in to your document because if people are quibbling about how to do reserved correctly just make it really clear it's like here's here's the formula um I think that was effectively the ask of the thread if I was to channel the spirit of you know is is there somewhere that says exactly how to phrase this um and again some some people cited documents I don't know if they address that question or not um but yeah if there's I think maybe to the point of of greasing explicitly you know it says there's these code points but doesn't say how often you should use them you know and then this is something we discussed on previous meetings um should you know for example the cloud like kich is um will will send H3 grease frames for the first request on every connection um it did that as part of the the early interrupt um that we did and we just never turned it off um we could but we don't but there wasn't anything in the draft to say you have to use these gr values or use them for some proportion or use them unpredictably because maybe people have got used to the fact that we always send it on the first request and wrote some special"
  },
  {
    "startTime": "00:14:01",
    "text": "case code for that um I really hope they wouldn't um but uh we we could add a lot of uh complexity to to add variability of those things um I don't know if it's useful um and also uh in in discussion Sor this came up with a colleague earlier today um some of these things if you are going to go a bit more active in those kinds of things um you need to be able to observe the effects of them and I don't I don't think the document really speaks to that yet in any in a good way so you know if you are to risk breaking something for for good um you know it's like an experiment if you can't observe the effects then it's probably maybe not safe um you know there there are real consequences that could happen to people um and and if we don't speak to that yet that to me that seems like the kind of thing we should do um and and more direct I'm going to file issue for that yeah I can do that or or do you want to do it I'm working right now okay cool yeah just plus one to that I think that's actually a really important part of the document or will be hopefully um to to the point of cases where stuff can be broken uh since I see we have Chris here and Lucas you filed an issue around postquantum TLS you I know there's the recent things that have gone poorly uh with some deployments of which things uh like what was it you know like the classic like pal Alto firewalls screwing up oh yeah yeah Chrome ran into some issues yeah there's there's an article let me see if I can find it"
  },
  {
    "startTime": "00:16:00",
    "text": "so I I wonder like is there something besides you know giving examples of uh for the document like is there something that we can learn from this of like could could we have done something differently or better and is that the protocol variability exercising that could have been done that wasn't done is that as opposed to Classic greasing what do we think um i i i this I was speaking with my colleague bass vastan today um I was trying to get him to come on the meeting but he was sadly unble to attend but this is very much um you know his his bag is postquantum as well and they've been running experiments Etc and stuff and then the point he made um if he doesn't mind me channeling him um but it was effectively you know it would be great if uh TLS clients randomly tried to have sent massive things in the past um but if if they did this uh so randomly and unpredictably um com and in such a small fraction compared to other things um even if they could measure some kinds of failures they might be within the noise of you know other random internet failures so like some of this becomes pretty like statistically minded very quickly and I would say as an engineer I hate statistics as much as I can um and don't necessarily think in terms of running large scale experiments in such ways that to get enough confidence in these things um sometimes even even having those feedback mechanisms are very difficult as well you know if if you're a web browser perhaps you do have Telemetry um obviously we have some people here who work in privacy preserving metric groups and um you know care a lot about that so there's there's a lot of signals you can take in a privacy preserving way but other things are potentially not as well um but that yeah sometimes feedback mechanisms are literally things like uh Angry mobs on"
  },
  {
    "startTime": "00:18:01",
    "text": "social media um saying you know for very specific set of of network environments and equipment and and other things uh that something is not quite right and trying to track that down um we have something called Network AER logging um in in the web um implemented by some browsers and again I know there's some efforts to try and make that a bit more private that that is sometimes a good signal but uh something I've been trying to get over the last couple of years is stronger um or better granularity of H hb2 and hb3 error cases because there such a broad bucket you might know something's gone wrong but again that could have been related to variability or to an experiment or to some roll out of some new feature um but it can be very very difficult to tell um so so you know people deploying this stuff can tend to implement their own metrics but depending on the kinds of failure mode that there is um again is that kind of consideration I think I would roll into some text on um the importance of of observability and maybe different uh considerations or strategies on on those kinds of things so I guess specifically [Music] on I guess there different aspects here but going back to just like the PQ TS thing and like the point of yeah you could have VAR ability to just like randomly do stuff longer and um assuming that there is some reporting or detection of saying like hey when I am doing some greas or variability intentionally I'm going to be sensitive"
  },
  {
    "startTime": "00:20:02",
    "text": "to reporting errors that correlate to that if if that were in place would like would it have been an effective strategy to have you know earlier on do larger I guess is it larger cliental ow is that what need to be done yeah larger cliental lows and it's like you know it's like hindsight is 2020 we can say like yes of course we could have done variability around larger client but like is would there would there be a good way to predict those or just like can you vary all the things like is there a way to give recommendations to new things going forward and like I assume that quick doesn't actually have this problem yet that PQ quick is fine well we we had this problem in quick and we actually fixed it halfway through development uh I remember I wrote that PR back in the day and it was the we called it it was the Q test on there for for postquantum where you could now Fit U your clo across multiple quick packets the first earlier it had to fit in one and then we would have been completely screwed um yeah but but as far as like oif around quick handshake I assume we haven't seen I wouldn't be surprised if there is purely because you know processing one packet is a lot easier than processing n packets you mean more by like end points as opposed to by middle boxes depending on what you define as middle box so um but I to to Lucas's point I'm willing I never implemented it in Chrome but I'm willing to bet that if you split your"
  },
  {
    "startTime": "00:22:01",
    "text": "Cento into two packets you defeat most Sni extractors even if you put them in the I was thinking if you put them in the you split into two long headers that you then put into the same UDP packet to get the same performance network-wise you probably blow through that security box no problem and until they get wise to it right yeah but the the amount of uh like single packet processing doesn't require you to keep State until a timeout and so that's that's a huge performance hit for a box if you go from single packet to multi packet yeah I'm not even thinking you know middle box inspection I'm thinking more just something more like low balancing right until a quick until until the session is established and you have connection IDs that can do stateless routing um you want to ensure say all the initial packets on a new flow uh do do go to the same uh endpoint server say that can um direct them to the same place and that sounds trivial but uh depending on deployment architectures it could be not um and and again you could get into weird weirdness um we've seen a bit of this again just to stretch the discussion slightly um uh recently I I was speaking to some folks about um MTU sizes in quick and and what people pick for initial MTU sizes and and whether they have path MTU Discovery and Etc and and just trying to do I did a little survey of of quick implementations what they pick by default whether they allow customization Etc um not not for the purpos of this meeting but for general interest around the topic and um you know some people have implemented path MTU Discovery um some people like will have it in their libraries but don't enable it on on their deployments um Facebook gave some examples where they tried to and found various R deployments I don't think that's related to Greece but you know if"
  },
  {
    "startTime": "00:24:01",
    "text": "you got to try and S whopping big things and uh I don't know have have something that is actually going to do IP fragmentation even if you don't think it is um would you even know like as you if you're doing variation if that or variability if if that was happening to you or not um so yeah I think it's kind of visibility of the full stack uh maybe maybe that was gory's issue or related to um yeah greasing at multiple layers issue six it kind of feels maybe related to that um is Tommy greasing his video conferencing system I think someone's greasing my uh Wi-Fi [Music] connection came back came back sorry about that um yeah what what do we want to so it's like a higher level of question for some of the older issues we have like gory's um it's not that old it's you know just from the July meeting uh how do we want to tackle uh approaching some of those um because you know Lucas you were very kindly authoring currently um"
  },
  {
    "startTime": "00:26:00",
    "text": "and doing all the work there I know Dave had previously talked about joining I don't know if you've chatted with him but also like do we want to assign topics to dig into yeah I I haven't had the chance I've been very short Cycles even since last summer um they've kindly volunteered I only have a chance to speak to him um I think that speaks maybe how busy we both are um so uh I did mean to reach out to him um in preparation of updating the draft ahead of this meeting and just didn't get right into it um like I say I don't want to be the sole pen holder here I'm happy to to be like an editor and craft it and maintain the the vision of the draft as coherent Etc um it would be nice to um the sense I've got for these issues is it's dressed more like Aid Memoirs like oh I better not forget this it's a question and I'm going to stick it down so we can come back to it and no one's doing it um I would maybe suggest we end up assigning the issue to the person that raised it because maybe they're the best person to answer their own thing um or at least you know we should we should look back and and try and train the queue and decide if it's something we're going to do or not um for sure I I do think overall like taking a pass um at this like the most obvious thing that needs to be expanded to just like coverage of other protocols and other layers um like you addess before so whether that is right saying gory and Dave and colen you like help us write stuff or review stuff try to solicit that"
  },
  {
    "startTime": "00:28:07",
    "text": "for for the discussion about like observability that you were getting to earlier you mentioned like the network eror logging stuff that browsers have but I guess what what practically do we think fits in the document other than like you should report or be able to observe the errors um should we leave it at like the abstract level there and just talk about you know why it's important to do that and being able to kind of instrument while greasing or should we talk about kind of how that actually ends up integrating into the protocol because I imagine like there are aspects where like certain failure modes are like easier to observe or not I'm very torn to be honest because you know if well maybe one of the the first meetings we had on this topic we discussed the an interrupt bug between um apple and and cl's quick stacks and like even in the last week I found a kind of like a R condition in uh Google's K that is now fixed and it was a oneline change um but it was a if you sent a stop sending at a certain uh point in a sequence of interactions then uh you would lose a stream credit and on its own maybe that's not so bad uh over the lifetime of some some connection that might be bad and and would result in a Salvation And the connection ultimately not being able to make any forward progress and timing out um the observ and I'm not saying was that on"
  },
  {
    "startTime": "00:30:03",
    "text": "the server side or the client side or both uh I tested it predominantly on the server side um because like Google server or Cloud flare um oh like examples key Cloud key I see yeah I was able to um take take a a very complicated test case of throwing a load of stuff at the wall and seeing what's stuck and seeing weird stuff in my logs um and keep iterating and actually drill that down into a very simple test case which is great um but unless you were to keep keep propagating that kind of behavior you wouldn't have seen that manifest in in in really any kind of error um other than I don't know I'm not receiving Max stream frames like I'm not receiving new window credits at any frequency um I think for real browsing use cases for example Le there's so much noise so much different usage of streams um in this case it relied on a stop sending those aren't used that often in web browsers um would should should web browsers randomly send stop sending and and cause their responses to be reset probably not unless they're willing to sacrifice things but sacrificial requests would have an impact on um server logs and you know there was a case this week or in the last few weeks where s three buckets were being charged for requests that did nothing so it it's very easy to say oh these these variability doesn't have you know bad effects but it has observable effects and it's easy to spot them I think I think the true answer is it's it's hard um these documents are targeted towards protocol designers and implementers it should be trivial for an engineer with some knowledge be able to say something's broken and then figure out why or or read a log for sure but there's higher levels systematic issues can kind of be naughty I think this bug"
  },
  {
    "startTime": "00:32:01",
    "text": "has been there for a long time um and I only fluked upon it while I was trying to figure out something else that I've been seeing that was weird um yeah yeah I think the one thing we can say is if you do greeing you should also try to do some kind of measurements and and you should be prepared to stop greasing if you actually figure out in a a strong issue or whatever because that's usually the point of time where you kind of go back and talk to the other um implementor or whatever and at that point you maybe want to stop reing so the main point is really about you don't able just squeezing and don't care about it anymore just try to to measure it as well I we got map RG chair here and a IPM chair is there maybe any documents that I I think performance measurement is different but for from from map RG maybe is there anything we could lean on from that group M we don't have any documents honestly there was a cool presentation yes um not that I'm aware of and I mean I know it's like it's kind of it's it's like I don't know how useful to say that you should measure something right but I think it's still useful to say it right there something I was going to say earlier to Lucas's point but I forget it now so sorry I I think I think there's stuff we can say but the the measurements are very domain specific like I I could not write text that is going to be suitable for how to measure the effectiveness of screwing around with bgp stuff you know um and and maybe uh like with with a lot of these things the the potential impact to of of the things you're trying um affects the amount of risk you might"
  },
  {
    "startTime": "00:34:00",
    "text": "be willing to take to do them um and that's trade-off to the benefits that you foree yeah um I remember so but that in itself is also a good point right to say that like when you do breing you have to figure out what the risk and what the benefits are right um Mario to your point of if you are hitting a problem do you stop um I think like that's that reminds me of like then you end up like in some heuristic World also where it's like oh greasing when I'm on you know greasing this particular thing on this network always leads to failures and therefore I should remember you know at least while I'm on this network not do it but in other cases I can do it or when I'm greasing to this particular endpoint I don't do it um and like this reminds me of like some of the stuff we've done to fix like TFO Brokenness of just like ah you just have a herotic where you learn not to do the thing or you try to learn it's like ah quick doesn't work on this network so fail over faster um which is is like also kind of similar to happy eyeballs and then like you get into this complaint of like okay if you're hiding the behavior because you have a hero stick to work around the failure there's no incentive for people to fix or change yes I think we had part of this discussion already but the comment I was and like I don't know what the right answer is but the comment I was trying to make this time was um yeah a if you stop greeing I think you should also take some action to fix it um hopefully but I think the more important point is that if you deploy freezing I think you should also have a way to undeploy it or just stop it because it might lead to situations that you didn't expect or whatever like if if in which situation it is the"
  },
  {
    "startTime": "00:36:01",
    "text": "right thing to not grease anymore or stop at some point I don't know but I think you should put had to do it if needed I mean in some ways some of the stuff we're discussing is not about greasing like strictly it's just about how do you do new stuff so you know how do you how do you roll out a new feature um you know the the greasing is intended to you know keep keep implementations honest I mean as one way to say it um and and kind of benign feature updates say but do do any of the existing documents specifically talk about um methodologies or ways to roll out change um it feels like some of what we're discussing is is that to me I'm I'm just pulling up RFC 9413 to remind myself yeah I mean maybe I have to more think about it but I think it's this is slightly different because if you roll out a feature something goes wrong you have to roll it back but in if you do greasing and something go goes wrong"
  },
  {
    "startTime": "00:38:02",
    "text": "that's kind of the intended purpose right and that's a little bit a different question what to do then no what you do is you roll it back depends what you're using it on right because like you could do like greasing on probes too versus greasing on useful connections yeah but but like what we've had happen in Chrome was we turn it on we get some complaints we turn it off we tell people we're going to turn it back on next month so you better be fixed and then we turn it on but in some cases they tell us no because they're terrible and so on and the saga continues um right but yeah if it breaks things that are useful then sometimes you don't have a choice even if that was the goal yeah this gets a little bit into the discussion we had like you know early on with the whole greasing topic and I think M who brought up like do you do greasing variability on new protocols or like is it called something different like I do think it has a different Dynamic on a brand new protocol um since there has been less time for oifc so it's like it it's something where whatever you get right from the beginning as far as what you make variable and greased you don't have like the roll back problem it's just like your entire new protocol was the roll back problem I think to just speaking to like my own experiences um that there could be more greasing or variability we could add now in in hindsight or you know whatever um but but that would compete for um features that our product folks"
  },
  {
    "startTime": "00:40:02",
    "text": "would like us to develop you know is is greasing a feature that I could sell to customers probably not but what it does is help ensure a healthy ecosystem that could could improve the deployability of future protocol features that we do want um so on its own it's maybe sounds not of interest um and for that for that sector of people it's kind of it's on the engineers to be able to express sometimes the importance of that um right the things but like take like the postquantum stuff like I feel like we've known for a very long time that postquantum will have bigger handshakes and like even before you want to do an actual experiment with using the algorithms everyone knew that it was going to be bigger so like that is something where like you could sell it's like hey you want this feature in the future we're not ready to deliver it to you but because we know you want it in the future we'll deliver like the Readiness for it which is the variability or the greasing in the ways that will'll need it I mean it's kind of similar to like EC greasing where it's like we you know trying to like pave the way even before we do it yeah the important bit is it depends who you're talking to cuz if you're talking to customers they don't care about the future they want it working today and you know an epilot of Brokenness today is much worse than and I you know elephants and puppies in the future because no one cares that long and so like it's really a long-term thing that you can do when you're an established platform when you just do it un un unilaterally and you can't sell it to anyone else otherwise I I could give you a different example of this um which I discussed before relating to H2 rapid reset um in you know we were we were seeing attacks"
  },
  {
    "startTime": "00:42:02",
    "text": "on our systems and trying to come up with various ways to mitigate that um before uh you know the we we got to the resolution of maybe what what the root cause was for our systems it wasn't just the protocol Behavior it was the impact of the protocol on other things and whatever but one of the the things we explored was dropping stream concurrency limits um and uh the people who were suggest that it's obvious you know oh we think this could be related to the amount of work we're doing there's this protocol feature that can control concurrency which is directly related to the amount of work uh let's drop it from what it is to a lower value um surely that'll be fine uh uh the Panic is you know I I don't know what effect this would have when this you know the response was what do you mean why why don't you know surely it's it's obvious from the the spec but uh you know my my my my stories of protocol debugging are this this could go sideways in a lot of ways that are hard to articulate to other people um and and in the end we did reduce it and we did see interrup issues with chrome and other user agents because of things that they had decided to do which are perfectly fine but um yeah uh the this came kind of back to the observability thing the feedback mechanism when a web page fails to load completely is you know maybe closing the connection and then that's done like the interaction between the endpoints is is done the Clos codes are not necessarily uh there for good reasons um and yeah it was you know you could say well well we should put variability in the concurrency limit that we that we advertise and we might have spotted this quicker but uh we we we effectively set this value to 100% and didn't notice for a week until the reports came through in such a way that they were well framed to describe specifically the the ways that"
  },
  {
    "startTime": "00:44:02",
    "text": "certain web pages were constructed to be broken um and that caused real people a lot of pain um and was sad times um if if we did just say we would change concurrency at random that would affect performance for people um and again coming back to the point about product management people you know a lot of Protocols are are designed around improving performance um so risking sacrificing certain people's performance might not be palatable um that's like one of my general concerns for these variability recommendations is uh the kind of if you think in terms of nature finding equilibrium you would kind of rest in the lowest energy State anything else is kind of increasing the amount of energy you have to to use and that's not necessarily what people want to do even if it's the right thing um and yeah knowing the risks now of changing things like the concurrency limit and and the the impact that people saw um it could it could be a harder sell to to do other stuff or we would know now that we would build some of the better measurement Frameworks and roll this out more gradually um as we discussed already so just another anecdote um yeah but I mean isn't it isn't it the case that like before you tried to change the limit you just didn't know what would happen while if you would have gas it you would have known that it didn't work at that point of time I think for the amount of traffic that we get okay you know the the feedback mechanism for a web page failed to load like web pages failed to load for about a thousand different reasons um and if you're an end user uh who are you going to report that to the website operator who who maybe they have their own Telemetry maybe they don't um ultimately"
  },
  {
    "startTime": "00:46:02",
    "text": "to get to the people like the engineers is a very long path even if we were watching ourselves the for for our we're an infrastructure provider to millions of websites that all behave differently uh there's one bug manifested a certain type of website um but you know the in you're saying you only detected it because you had it running for a week and then got like enough reports and if if you would grease it occasionally you would have not detected any problems that's what you're saying yeah I mean some of these things are so intermittent like if you do a reload it goes away and then you know nobody can be bothered filing a bug ticket like a human isn't going to want to waste their time on things um I don't I maybe other people on the call can speak to you know their automated systems for bug reporting and how effective those are um I mean I guess greeing is not the silver pet anyway so all right um I think good discussion some good things to add here I think the whole observability thing is a definitely an important section to add and I'd be happy to help work on that too for text so we're getting near to the top of the hour just wanted to cover some of the just kind of procedural things so I guess first uh when do we want to chat again do we"
  },
  {
    "startTime": "00:48:01",
    "text": "want to have a thing at 120 Lucas are you gonna be there because I when we have the inperson meetings we get you know more commentators and Spectators uh so we can plan for that and that's good I have not confirmed travel plans but I I would like I I think another meeting would be good I I would like to um actual uh more major contribution to the document the last thing we did was just editorial I think it would be great to get towards closing out at least half of these issues if not like all of them or at least making progress so there's discussion um and then you know to be able to give people ample time to review that that next draft so not publishing it two weeks before the meeting but uh you know in a month's time for instance so that maybe we would have more time you I I want to be ambitious with my target especially before I go away on some holiday so um yeah I don't think an inter meeting is strictly necessary um but yeah in person would be good okay uh should we plan for doing something in Vancouver then yep guess I I don't know if I'll be there in person for guaranteed but I I I can di in yeah okay good uh we'll plan for that um and then just like the aspect of like do we want to have this be actually like an adopted IB stream thing um doesn't technically matter I mean we can do it later also um I mean generally that I know what the actual rules for the I stream are like there's no real concept of adoption right we the IAB is gonna"
  },
  {
    "startTime": "00:50:00",
    "text": "vote on it before publication if it's on the IAB stream well no there there is a process of getting just saying like this is something that the IB is considering put like putting on the stream and like it goes just like a notice goes to the community and they can provide feedback exactly so I think this is yeah this this the question when we think ready the document is ready for a first round of community feedback sounded like Lucas wanted to do at least one more update it right so yeah we could wait for more updates and try to get it mature but like there will be also like another like Community feedback period when like the program and the IB thinks it's done um so those like it doesn't make sense for them to be like right back toback we don't want to wait until like we finished the document now let's adopt it and then finalize it yeah but I also have to say we usually get more feedback during this first round when people see in your document fair enough so having it in a reasonable shape is is probably a good idea okay yeah and just for the states there uh essentially it would become a candidate I document while we get the feedback and then it would move into active IAB document and then eventually it goes into Community review IB review and then approved after that that was the the state machine okay uh so aim to actually update stuff like a month before 120 publish that have a meeting at 120 maybe like at 120 do the or around then do the community review and like the candidate for adoption and then moving into active IB docum after that"
  },
  {
    "startTime": "00:52:00",
    "text": "okay uh and then Lucas did you want to kind of reach out again to Dave and just say okay cool feel free to CC me and David on that too yeah I'll I'll send an email out um after this meeting before I forget awesome great um we've taken it most of the hour anything else or should we tell people on zulip that they can go change zulip I think we can call it good seeing everyone all right cool all right I'll awesome byebye have a good night Europe people byebye thanks thanks bye"
  }
]
