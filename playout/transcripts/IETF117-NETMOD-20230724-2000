[
  {
    "startTime": "00:00:25",
    "text": "Hello. Welcome to MetMod in San Francisco, IATF, 117, I'm Lou Berger. Kent Watson is next thing in person. Jason is stern, our secretary is online remote. Thank you for being here in person or virtually. If you are in the room, We've been asked to remind you to scan in It's important for the attendee list And, also, if we end up doing polls or anything like that, you you can fully participate there is a Sort of surrogate, blue sheet, that is circulating. It has the QR code on it if you need it. Next, Jason, Thank you. We are the IETF we have processes and rules that govern your contribution here Lee, anything you say here becomes part of our permanent record. If you're familiar with the note well, Great. If you're not, please visit the link at the bottom of this page. It's important to know what governs your intellectual property that you contribute to this group. Next, Similarly, we also have a code of conduct, please be respectful to each other, treat each other professionally, Again, there's a BCP on it. you can find it at the IETF web page. Next,"
  },
  {
    "startTime": "00:02:04",
    "text": "I think where you're We've been following this process for a while, so this should be pretty familiar to people except Of course, if you're new, If you're here, make sure to scan in. You can do it by using the creek QR code I mentioned earlier that's on the left side of the room or the blue sheet. If you're remote, you made it here. That's awesome. Please do keep yourself muted. and wait till you're called on before going unmuted we are going to use we're gonna try to use the queues the queue control that's integrated with the on-site app. so that we have integrated queuing between those who are remote and those local. So that's another reason why it's important to scan in with the q QR code. Next, Actually, got ahead of myself. Midecocute controls right there. Another really important thing is is we do collaborative note taking. And if you're in on the app, there's a note button. If you're not, please visit this URL and help us take notes of the discussion. You don't have to capture everything that's on every slide someone asked me about it. They really like to do that. If you like to do that, great. just don't feel obligated. The important thing is capturing the discussion and the conclusions from the discussion. Next, So we have we haven't updated our agenda from what was posted earlier. We have a pretty tight agenda, but we also have some good time for discussion on a very important topic. We've been discussing how to handle versioning That discussion has been going on for a couple of years in the group. We've had a last call that generated some great online discussion We have an hour"
  },
  {
    "startTime": "00:04:02",
    "text": "that we are going to try to use to do some good in person discussion. like to help move the We'd conversation forward, and part of that is making sure that the group as a hole is aware of the issues And understands the trade offs and is able to to voice and opinion on that. We don't have everyone who participates in the group. In the room, physically or virtually, So we're gonna try to get the consensus of those who are participating now as is always our process, any conclusions are gonna be confirmed on the list. So we really that's a really important discussion, and then we have some good chartered and also some unchartered items. Next, This slide summarizes where the chartered documents are. the there are a couple of things of note is first, we have two documents that have been in the working group for a while, but not the longest one on this list. that have been post last call for a while. The the interface extension and and VLAN model. had a little discussion last time on it. There has been an update. excuse me. There has not been an update. I've talked to Scott Mansfield about it. who is the current editor And he said that he didn't manage to get the update out. for this meeting, So stay tuned. for an update there, and hopefully, we can close these out and and put in the publication request. I'm gonna actually jump to sislog That one also has been one in the group. It's been discussed for a while. You're the I I believe there's one outstanding issue. Do you wanna if he wanted oh, oh, Okay. So everyone may remember. Cislad was published sort of"
  },
  {
    "startTime": "00:06:00",
    "text": "It went to the RFC editors and misrefs status for some time. we brought it back to the working group because the examples and the tree diagrams that were in the draft 4 out of date because they import modules from the NetComm Forking Group, but the client service suite of drafts. which are still in flight, and they continue to be changing a little bit as those drafts are going through their final AD review and on to the ISG review. And so it will be necessary for even though authors have done a great job updating the draft and also improving the draft. Thank you very much for that. But those tree diagram and and the example modules will likely need to be updated again. one last time as those clients overdrafts are themselves going through last call. mean, when they're finally published. I And Mahesh has author of that slot draft. Yes. So I just have a you're talking about it. I'm planning to post the update for you guys to proceed with the draft? Right? But that's great. Thank you. But still, the client service good drafts are in prior press, they're gonna change yay. again. And so your draft will have to be updated one more time. Okay. Then I would rather not post it now and wait for an update from you. Okay. Thank you. And the last draft I wanna mention on this slide is the very last one on the on the slide. unknown bits, unknown bits, we've been talking at the last meeting, we talked about doing a adoption call, We did the IPR call, and then there were I think there was a disconnect as to what was going to happen next. the author thought We were gonna do the adoption call. We thought they were gonna do a rev. At this point, we'll do have a a brief online discussion offline discussion, and then move forward with adoption. So speaking again, Mahesh speaking on behalf of Jeff that I just caught him in the hallway before coming into this meeting."
  },
  {
    "startTime": "00:08:02",
    "text": "He said he's he's sorry. He missed the updates that or asked that you provided Ken to him. He said, hey. He's more than happy to work on them. either in parallel or maybe still go with the adoption call, and you'll still make the updates that you requested. Well, at this point, the window is open again to make the update if you wanna do that, it's fine. We won't actually issue the adoption call until after this week. Okay. So this time frame to make an update. Thank you. Yeah. If he can get the update out quickly, that'd be best because then we don't have to repeat the conversation about the changes. If he if it's gonna be a while, let us know, and we'll move we'll proceed. Next slide, please? Actually, you can say something. You were gonna next slide, please. So I I think I basically talked to the slide we had the agenda, WE HAD A LAST CALL ON TWO OF THE MODUAL VERSIONING RELATED traps, really good discussion. We have different view there's different viewpoints out of there. we really want to make sure we reach consensus on this topic, with an understanding that it might be a little rough. know, for our process, we don't have to have the unanimous agreement. we just have to judge what the rough consensus is of of working repurchase events. So we are looking forward to the discussion today. WE RECOGNIZE THAT WE MAY NOT HAVE SUFICIENT, EVEN WITH having an hour on the agenda. in which case, we will look for work, online or perhaps less formal discussions or mix mix of those. So in any case, we really wanna acknowledge the significant work that's been done by the author team, And we also appreciate the comments that are coming in from other working group participants. Next slide."
  },
  {
    "startTime": "00:10:04",
    "text": "We received 1 incoming liaison, Excuse me. It's an interesting liaison. Take a look at it. We don't have any request for action on it, It did go out to multiple other groups, If you would like to take action on it, You're welcome to send something to the list, but there is no specific action requested. you might find it interesting. I found parts of it. personally disappointing because they're not using some some of the work that I've done previously in this group, but interesting. Take a look. Dave, Thanks, Luke. Yeah. So I've got a a bbf liaison manager hat on I've read through the liaison. I've did not partake in its crafting. but I would recommend that we send some, at least, acknowledgment back to the BBF, well, we can decide what exactly that content needs to be on the on the list. but I would recommend at least something be sent back. Are you willing to draft something and put it out on the list for comment? usually know, but in this particular case, I will. Alright. Thank you very much. We appreciate it. you know, as everyone knows, we're contribution driven, so having people willing to make contributions is super important. Next slide, please. We continue to be our we continue with our hybrid working approach, I think that coming together in person has actually really slowed down our versioning effort. I one of the participants commented that if we were all able to get in the room that we get closed on a number of the discussions, I believe that."
  },
  {
    "startTime": "00:12:02",
    "text": "But that said, we have to continue working the way we can work. And So I do expect future meetings to be interims. Yeah. Actually, more importantly, it wasn't just this room, but the side meetings that occur while we're here together at the IETF Week. That's when the conflicts get resolved most. The real work We've had the real work of that. If you think that a if you're gonna participate in an online meeting, and you think the formality of a formal interim is too much. and want something less formal, we can do that as well. And that's important feedback to give to us as chairs to coordinate the right type The informal meeting doesn't mean it's not open to all. They're meeting always open to all. at least the ones that we coordinate as chairs, but there's sometimes a perception that the the an informal meeting, you can have different conversations than you can have in formal meeting and we wanna foster those conversations that can happen one on one that we're missing out of missing out on being in person. here. I think that's my last slide, and we're ready to move on. Yeah. So next up, Joe, are you I'm not sure. Is it you were Jason. Okay. Jason, are you expecting Joe to present, or are you presenting? Yeah. I know Joe was presenting. Alright. Joe, have you seen the slides you're presenting? Alright. this increase."
  },
  {
    "startTime": "00:14:02",
    "text": "That's all for you. I haven't actually seen them, but I didn't think I was presenting them. So I I I created some of them, but next slide, please. Hi. I'm Joe Clark. I'm presenting on behalf of the authors group. What we've been discussing Lately on the call, What we've been discussing lately on the call is really centering around 3 key issues. for versioning. With the intent being that if we focus working group discussion on one of the issues at a time. Specifically, we're gonna spend a lot of time on key to one that we could come to what Lou was talking about about that consensus, not necessarily 100% agreement, but consensus. There is more in this deck at that we won't talk about or we won't go through, but you have access to it. that goes into more details about the solutions. But we're gonna focus on these key issues. So next slide, please. Alright. So we have a solution or versioning overview draft. We have a requirements draft that we didn't adopt as a working group, but it's there, and it's now live again. So we we resurrected it. And we have a overview draft of the solution that that's been proposed. In terms of overall module version version handling or revision handling, then we added this idea of a semantic version overlay or a what we're calling a revision label. We a want to introduce tooling in order to determine the which version should be used. So there's a there is a a set of of work to be done, and we're working on that actually. But tooling there and then being able to choose what schema version or what schema overall schema you're going to use,"
  },
  {
    "startTime": "00:16:00",
    "text": "And then finally, the work that's that that kinda had a a lot of initial effort behind it, but we've kind of side sidebar that for the time being. is this concept of a yang package where we can assemble a number of modules together to come up with kind of a let's say, a solution level or or a architecture level, schema, for a particular server. All of that goes together really been focusing on and what's been proposed at last call is around the module versioning and the semantic the module versioning or module revision handling and semantic versioning. Next slide, please. So here are our drafts currently. They're all there. Some amount of of work even if its stub work is been done in all of these areas. And like I said, really, we're gonna focus on the first two there. Next slide, please. Alright. So Jason has done does a very good job about sending minutes every Tuesday most Tuesdays, let's say. We meet via Webex, It's keep me honest here. 9 AM EST, I believe. we get together. He's open to all. We we are not restricting who can come, we openly welcome a lot of participation the people who generally attend those represent heavy representation from vendors some operators are now regulars that show up on these on these meetings. And as I mentioned, Jason, sends the minutes back out for what we discuss. And of late, it's been around these key issues. We use GitHub everything is also not just the the conversations and the minutes from these calls, But any issue we find, anything that's like, oh, we we need track this or we need to come to a consensus or agreement on this. we put them in our GitHub repo. All of the latest revisions and branches of those revisions of the modules"
  },
  {
    "startTime": "00:18:00",
    "text": "and the drafts, they're also in that GitHub repo. you see there. And the name existed from back when we had a design team that was spun up on this, and we just kept the repo the same. Next slide, please. So we had a working group last call on module versioning and the Yang's demand versioning graphs. And then things kinda cool. There there wasn't a lot of discussion on it, and we had to go back make some we made some additional changes based on feedback we did get on the list, discussions we did have, And there was a second working group last call on this. Then that triggered back to some of these fundamental issues. and and I want to harken back to something Lou said. It's been years This has been going on for years, and I'm not saying that to to to whine or complain. I'm saying that because with had a lot of these discussions, and they happened a long time ago. and we've slept since then. And we tend to forget sometimes where the the discussion we we had, why we came to something we did, We presented it at IETF 10 something maybe. But now we're having some of these discussions again. So getting that kind of having all that out on the table would be very helpful to come to a recorded decision around some of this. That is why we've kind of distilled things down to these these key fundamental issues So once we get over that hill, so to speak, once we once we get through that and we we have that may be rough, but we have that consensus. Then there's a lot of additional work that will fall out of this. Some of it, like I said, has been stubbed out. but we have the scheme of comparison. We have interested parties to work on schema comparison. We have interest in actually in yang packages. And we want to be able to focus back on that so that we've spun up a lot of interest. We spun up a lot of effort here."
  },
  {
    "startTime": "00:20:03",
    "text": "We wanna be able to now say, okay. Great. We've got the energy. We have people working on this. Let's make a decision. Let's move forward, and let's use that effort in other places and get more work through It's taken a lot of working group activity over these years, and we wanna Not again, not complaining. Just let's Let's do it. Let's get something done and and move forward. Next slide, please. Oh, I've broken Jason. Ah, good. Okay. Key issues from So key the thing that we wanna spend, I guess, the most time on is this key issue number 1. Do we allow an NBC for those of you who haven't been who we're waiting for the movie, do we allow non backwards compatible changes in Yang. Right now, RFC 7950, section 11, says that We do not. The changes that will will cause operational disruption, we we We do not want to allow. The key what the the key issue we have here and then our work is is kind of fundamentally saying that we do want to allow for or there's actually 3 apps but one of them is we do wanna allow for this. So this is a fundamental question. This is option 1. So we we came up with 3 options, there may be more. Others have already started proposing. I saw something from believe, Juergen today on the list. Option number 1 is We update we the module versioning draft updates RFC 7950 to allow for a non backwards compatible issues. do that. We say, yes, we're going to do that. That means that we allow for these that we we we we offer strong ish guidance with a should not that they should not be done because they are impacting of of an active or could be impacting of an active user base,"
  },
  {
    "startTime": "00:22:01",
    "text": "And we add this non backwards compatible rev being the namespace is a yang extension. So is it applicable it is applicable to yang language version 1.1. So we we we add this. This is the the option number 1. And there's a list of pros there. it does address the requirements that we already put forward. it does allow for gradual adoption. So one of the things that I think it's maybe option 3, but not getting off this slide yet. One of the things we did talk about was if we say, no. We need a new version of Yang, just the getting people adopted just the the the the inertia that people have, the staying with or getting to a new version of yang, even 1.0to1.1 has some been has been a challenge for some implementers and some adopters or some consumers, So do we really want a new version of Yang to get this through? And so option 1 says, no. This will allow us for a more gradual easier support by the industry as a whole. It also presents itself with other not SDOs, but other organizations like Open Config, where they are using a semantic version like concept. Now there are this and there's other things there, but you didn't come here to have me read you slides. We wanna discuss things. But there are cons being negative here. There is a perception that we're kind of cheating. We're saying, no. No. No. You know, we we're we're the the wild west now. We're opening 79.50 up we can have all of these wild and crazy changes And the other thing is without a new version of Yang, with this baked in, It's an extension. It can be ignored. It it's not mandatory to to be able to say that that I will obey these rules and still be Yang 11 compliant. So those are the 2 major cons"
  },
  {
    "startTime": "00:24:01",
    "text": "with respect to option 1. Before we move on to option 2, I don't see anyone in the queue yet, But I figure maybe I'll I'll stop and It's See, Rob will Jason Jason Beecher, Rob. So Jason, Jason Stern. Just one quick note. You mentioned that it's applicable to yang 1.1, but I wanted to bring up that the intention is with these extensions, it's our it's also applicable to yangone.0. So we don't -- Yes. I I I didn't say 1.0 because we're talking 7950, which is yang, 11.1.1. But, yes, you're right. Is that listed? Is the document updated as listing? I'm sorry. Updating both. It is not I don't believe yet. I don't believe it does. 10. before. Yes. That's perhaps an oversight. Okay. So Rob Wilson, Cisco, with us, like, contributor hat on rather than 80 hats. I just had a quick look at Jurgen's. I hadn't realized had posted it. I think you're gonna draft category of something that needs to update RFC 7950 and changes the rules to the MPC it finds a young 1 or 2 into what he's saying, but I see that as variant of this option 1. I agree. I I did read I did read a little of Jurgen's draft, the the text of it. I think there were 3 things there. One is a import by min version, not yet to find a max version, a notation, a since notation on a node level, like this node was introduced since then and an update to 79.50 to soften some of the the language. Kent is a contributor Right. So it did update 7950. but at the same time, declared that that would the result would be known as yang 1.2."
  },
  {
    "startTime": "00:26:00",
    "text": "I so I'm I'm wondering if the declaration of And it being 1.2 would trigger the same concerns that you mentioned earlier, the adoption. So Kent is saying the he's right. The title of the draft does mention Yang 1.2. Now reminded me So I think, Jason, you're back in the queue. My personal take is it would. because it would would it could have the potential of It could have the potential 2 things. 1, maybe opening conversation up to oh, wait. But what about this? And what about that? And can we get this into 1.2 because it is such a hard thing we've seen speaking as a representative of a vendor, Cisco, we've seen a long road to get new versions of Yang adopted. from 1.0to1.1, would it take much longer to get this adopted. And if it does, would people naturally want to include other things in it. knowing that you have that that hurdle to get over and wanting to get some of the maybe other yangneck stuff Forward. Forward. that would be my take. It it it would add, I think, more weight in a bad way on this. But, Jason, did you wanna comment I think it's important to note that you're gonna draft and say it was yang 1.2. We haven't mean, we're kinda jumping onto Juergen's document before we finished showing all the options here. But -- Sure. I mean, option 2, which we're about to talk about, is very similar to option 1. Still, you should not make changes etcetera. But one of the key differences with option 2 is that it requires a new version of yang So I'm not sure I'm totally in line with Rob thinking that Yurgen's document aligns to option 1 maybe some some parts of it, but there's a lot of overlap between 1 and 2 and 1 of the fundamental differences is whether it's applicable, Yang, 1011, or needs a new yang version. So Yeah. Yeah."
  },
  {
    "startTime": "00:28:00",
    "text": "So we're referencing a document that was published this morning just to be clear. And I read it to say it is option 2, not option 1. Okay. Okay. Yeah. I've -- There there were a few elements that do coming to the conversation, So it's good to mention, you know, one of them is he's proposing doing a very minor change but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but but changing to one dot 2. He also doesn't like Sempfir, but that's a different Yeah. It's a different discussion. Well, we may. So, Jason, is you're still the only one in the queue? Okay. Option 2, please. Next slide, I guess. that's where the queue is. Okay. man. So I have progressive lenses up here, and the way that screen is it's blurry unless I do this, which takes me out of the mic. It's kinda small, but I'll do my best. So option 2, as Jason mentioned, is very similar to option 1 in the sense that we instead of update RFC 7950, we visit and we create a yang, let's say, 1.2, 1 some other version. What version that is is is not known. But what that content is And this is where, as Lou was saying, it's very similar to what Juergen wrote It's module versioning plus yangssimber Then there's plus a very limited gang next items. And and we say that because what I said, we likely would get people going, but what about this? And what about that? And it it could has it potential tendency to to blossom, and then we would try to do this in more of a a formal yang language and formal yang semantics definition, versus some of the some of the extension work So the pros of this is it still it it addresses the requirement it meets the requirements that we put forward And we can do this Korean keywords. So we can make versioning. We can make the import"
  },
  {
    "startTime": "00:30:01",
    "text": "Min revision, some of the the import stuff we've done we can make those 1st class Yang citizens. and people can make use of them and clients claiming conformance to this would have to support those capabilities. But as I mentioned before, this can be difficult to roll out to the industry as we've seen we're I'm going off of historics as we've seen his historically with other versions of Yang. people would have to upgrade all of their tooling to support this, both the vendors would have start or the server producers would have to start producing these 1.2 modules with these new semantics, and the tooling would also have to be updated in order to consume them. So that could that could cause a challenge. There would also, we think, add more time to this to get it ratified because now we're saying we're going to 7950. There are other things we might wanna get in it. it's gonna delay that work, which delays other work that I mentioned like the packages, schema comparisons, so on and so forth. And this has already been a rather large effort costs on the working group would would this be a realistic thing to finish? We've already had some interest I see bullish in the in the audience. We've already had some interest from other SDOs in some of this work, what would they do if we continue to push this out? So that's option 2. I'm gonna stop or pause there for comments relative to option 2. Jason. Jason Stern. I one thing that I think is important to highlight is that second bullet of the cons, So, you know, speaking as a vendor you know, I'd be very hesitant to go and I mean, I wanna James. happens. It's an exception, but it does happen."
  },
  {
    "startTime": "00:32:03",
    "text": "I wanna start letting my customers know that. so that they aren't making incorrect assumptions about what's compatible, what isn't. But I can't go and publish Yang 1.2 modules today, I'd break all their tool chains. immediately. So P Yang breaks, if you say yang 1.2, the new language keywords would break So it's not insurmountable, but, you know, when as a vendor or producer of Yang Modules, can you assume that the you know, a a good majority of your users have upgraded their tool, James, with the with the new interpretation of yang 1.2. I mean, think that would take a long time With option 1, I can start publishing modules today with the new value added information. with the, hey, heads up. There's a non backwards compatible change here. All the tools will automatically ignore that if they don't understand it. so I can start adding this value immediately without waiting for toolchains to have to update. It doesn't have to be a big bang where tool chains and modules all have to be done in you know, before this can actually be useful in the industry. Jason. Balash. Lars speaking on behalf also of 3GPP. SA 5, but also partly about Oram who send the Python statement. we have been waiting for quite some time, and it's getting problematic, and there will be pressure to develop our own solution if don't get something accepted here. we Also, both of these groups release new versions of their modules every 3 months about So versioning is very important. So going back to Jurgen's draft We just accepting NBC changes without versioning would also problematic."
  },
  {
    "startTime": "00:34:03",
    "text": "So we are in strong support of version 1 and Yeah. Yeah. with the delay itself is a problem even if there's so option 2 is a good technical solution. Thank you. Thank you. Thank you, Marsh. Don't see anyone else in the queue. So option 3, please. Next slide, Jason. Thanks. Option 3 is very short. Option 3 states strict adherence current RFC 7950 rules. I see Rob, I balance need on top of his glasses because I I was gonna channel him for a here, but he can do a much better Rob Wilton impression than I can. One of the things he said is AD is that if this happens and we kind of just Yeah. It says must not, but we're gonna do these one off exceptions. It becomes very hard as an AD to approve these documents because they're flying in the face of a published, a standard scrap published RFC. The pro, however, is these are very clear rules. that didn't No. You you have to be backwards compatible. This is how it is. This is what was standardized. you have to do it that way. The problem with that is other than the fact that we've already seen cases where non backwards compatible changes had to happen We had to get them in. They just it wouldn't work. The module was broken. The other problem is we just know these are happening in other industries in other parts of the in other parts of the standards industry and other open source industries or other open source communities. This is happening. This is not a problem we can ignore. So this particular solution kinda doesn't even meet the requirements. It's it's not there."
  },
  {
    "startTime": "00:36:00",
    "text": "But I'll try to do again from 3GPP, if I may interrupt. The the philosophy there is to publish every 2, 3 months and then correct it later. and that has worked for them for 15 years. Okay. So This this is what they are doing with Yang as well. Okay. And and, Rob, I I see ear, ear, and q, So Rob Wilson with an AD hat on. So Ben was actually already made the point that this is simply not So as it stands at the moment, I and the ISG are sort of allowing nonbasket nonbaccus compatible change to go through ItFCA modules because, in my mind, there's an standing that we're going to allow some level of NBC changes. And at the point that the working group decides to actually know, The existing office is exactly right, and this we should have I would lock it down and say, no. We can't do that. And I've I've checked the IESG, and they agree with my sort of assessment. I think they may be I shouldn't be allowing these already. And I know there's a case where think Alvaro held on and discussed the documents published with It's the first time that's happened for many, many years because of exactly this issue. So So the option here is is we get really strict, and it's gonna break yang in the IETF. I think it kills off. So I think, for me, this is a would be a dreadful option to go Go down. Go down. Go down. Jason. Jason Stern. I've in some of the discussion, I've heard, you know, the term, you know, like pragmatic exceptions be as a term where I think there's some discussion around, you know, well, let's keep the rules officially you can't make NBC changes, but will allow pragmatic exceptions you know, I I guess, I see option 12 as that case. Option 12 and know, the intention in there is not to make it the Wild West The intention is to have language in the document"
  },
  {
    "startTime": "00:38:01",
    "text": "We talked about, you know, should not make NBC changes. But to kind of have a legally correct description, so we're not kind of, you know, have one rules and say, oh, you know, I'll just look I'll just look to the side for this one and let it slip through where we can, you know, have published rules that match our actual behavior, And you know, your Juergen's Docu published this morning actually maybe has some nice phrasing of of how to say it that we might know, be able to use in some of our are our current documents, but idea is to you know, make sure we do reinforce that it's a should not, and there are impacts but that, you know, the official rules are that sometimes the cost and risk is lower to make the NVC change. And in those exceptional cases, that's when you would choose to do it. And if you're gonna do it, you know, here's what you should do. You should indicate it. with a marker so that your the users and consumers of the modules know what's happened. and it should you know, I I still advocate needs to be allowed for yang1.01.1 modules, which are in wide employment in the industry today. Thank you. So on that, I won't speak for everyone who's been involved in this I personally think option 1 is the way to go. I will admit and even though it came in after the fact, some of what Juergen had said in his draft I liked it. It it made sense, but I I the 1.2 thing, I think, is just going to add too much too much more delay to this. So I'd like more of an option 1 approach. But I see I've triggered Ahmed to say something. Before you say anything, just a heads up people. We're probably gonna do a poll here. We haven't figured out exactly the phrasing, but we're gonna do a So be prepared, scan in, be ready,"
  },
  {
    "startTime": "00:40:03",
    "text": "a number of polls, actually. So I'm Ahmed Hasani. I'm from Swisscom. I've been involved in some of these calls as well before. So think we are more should be doing option 1 and 2 together. because option 1 will give us for something that is existing till we move forward. but I see it as more of a hack than a clean solution. Right? If we want yank to evolve, and want it to be to grow for the next 20, 30 years we have to clean the language at some point. Right? and we keep deferring and hack on top of it and hack on top of it until it become it will reach a point where it's unusable. So we should start thinking right from now. Like, how we can clean it. So the language will evolve in a nice way that will stay usable. the future. for doing that. Thanks ask a clarifying question. Yeah. Yeah. Yeah. Yeah. What do you mean by one and 2 together? In particular, what do you mean by What do you wanna see under option 2? Okay. So option 2 make it as a built in feature of the language. Right? And that means you have a bit more freedom to change things. the language, to make it a bit easier and more economic use. Right? So if I interpret it correctly, what you're saying is you'd like to do option 1 because it fixes our today problem. Exactly. but you would like to start maybe even on some thing called yang 20 -- Yep. -- which is a a general cleanup and full and anything is open. Exactly. Full discussion. Exactly. And that's one take 5 years. It's okay. fine. That's Okay. So so parallel type work. Exactly. Okay. Exactly. Yeah. So I I would say that's at option 4. by the way. And I'm not opposed to it. And there's certain things I really like about it. it's not one of the 3 that we can discuss. Rob Olson. I don't know what hassle I'm wearing, but I I think that the idea of I like working with to try and fix this issue, the version issued now and get that done in I wait. I'm"
  },
  {
    "startTime": "00:42:01",
    "text": "quite supportive of it trying to do a future revision of Yang. think that's good things to do. But I will note that the issue tracker for Yang dot22.ohair has a 100 issues on there. So it's gonna be just sort of whittling those down to something smaller and then doing that work. It's not necessarily a small piece of work, piece of work, piece of work, piece of work, piece of work, piece of work, piece of work, piece of work, piece of work, He said 5 years. That's realistic. I I can't see the queue. I there are 2 in it. I so I don't know if there's anyone The the queue is now empty. Oh, okay. And Yeah. And Cheers in q 2. Oh, Paash. Just as a clarification, I can 3gpp, Oran and Ericsson, myself, we can very well live with doing option 12. So option 4 just we need some option 1 soon. I don't know what slide comes after the opt shop, but Jason saved me. So Sorry. I'm stuck here first. I wanted to go to you guys to do the call. Yeah. Jason First, then when when Okay. Hey, Jason Stern. Just a just a little care around the term option for just wanna be conscious that Martin did post an op what he called an labeled an option 4 to the list So I feel like maybe that one's taken. So Well, I think I I classified it as he proposed basically option 2. So No, Martin. Sorry. So there's your -- -- his Let let's start with Jurgen's? There's Juergen blue. Let's not bring up the Juergen piece I think it's a little too confusing right now. Sorry. This I'm not talking about the organs. So Martin About a week and a half ago, did a separate proposal. Gotcha. But that has not been proposed it has not been reviewed here."
  },
  {
    "startTime": "00:44:00",
    "text": "Nope. Nope. Nope. today? We haven't mentioned it yet today. No. Okay. So as chair, Jason, can you go to the previous slide, please? The question I read was, do we allow NBC changes in Yang? And as I'm reading options 1, 2, and 3, My understanding is both 1 and 2, allow industry changes in Yang. where adoption 3 says no. We're not gonna announce it. Okay. So that seems to be a question that And and then within the options 12, what I'm reading is that do we change the version number? Mhmm. Do we stick with it being 1.1orrevto1.2? And then if we were to rep to 1.2, what I'm seeing is that there's the mechanics how we might do that. being an actual update or a full on biz. So is that a fair way of partitioning up those question or two questions, please. To me, it is with maybe at the end, I know Jurgen's draft does mention an update, but we were thinking that the option 2 would be a biz 27950. But that's what the author team. Well, okay. We can leave out that last bit of decision tree that I'd mentioned, but would it be the other parts that I mentioned? Was that a fair way of approaching it? In my head, yes. Okay. So then thinking to Sure. This is the right one. Okay. So we're gonna do a show of hands pull. which is to I'll just start it right now, but it's Oh, There we go. Do we allow for NBC changes in the Yang? So if you say no, If you say no, That means you're supporting option 3. And you've heard in the you've heard in the room, what the discussion was related to option 3. So, Yes means 1 or 2. Jeff 4. And by no, we mean, you know, do not raise hand. You"
  },
  {
    "startTime": "00:46:00",
    "text": "select that option. Okay. I think the results are clear. It's unanimous so far. that it is working group's consensus, unanimous, consensus. that we will move to and it'll be confirmed on the list, but we'll move to supporting NBC changes in Yang, And now I think we should move to the next Paul. Paul. Paul. How do we extract the next one? Thank you. So, basically, the next one is gonna be on option 1. keep the same version number or option 2 move to a new version. We're not talking about whether it's an update or a biz that's sort of in the noise, that's process thing, the fundamental decision of keep the same version or use a new one is is the main points here between option 1 and 2. almost But that's what's coming. Yep. ready. Give me a second. Jason, are you in queue intentionally, or are you just left over? effects, Okay. we're going. And, again, no is do not raise hand."
  },
  {
    "startTime": "00:48:07",
    "text": "Almost the same number as the last poll, missing one person. at 35 on the last one. Yep. There we are. Yep. There we are. Alright. Awesome. that the results are quite split this thing. Yeah. It's it is interesting. You know, we we we pretty much have a 1 third to 2 thirds split where I'd say about 2 thirds are supporting keeping 1011 one one is the version. but there's also a good part of the group that is interested in the other approach, which is doing something simple a simple 1.2. So so good information. less conclusive. Jason, given that we still have some more time for this I know I know we still have some more slides to go over, but we're not expecting to have to allocate a lot of the time for discussion of the other issues today. But I wonder if it might be useful for some of the folks who said no, if they're willing, anybody to you know, express why they're feeling that we'd have to flip to 1.2, and maybe address what they think about the fact that you know, the authors couldn't really do that for several years until tool chains are changed and distributed amongst operators. to hear -- -- is interested in talking just about why this -- Not to give an issue with -- -- not to Go ahead, Jason. fths, Yeah. So if anyone is interested in in talking about why they supported 1.2, that would be usage Yeah. Just to get a different perspective. would be No. So that would be if you don't mind flipping the slide to opt in 2, And, Rob, you were in queue, and then you dropped."
  },
  {
    "startTime": "00:50:05",
    "text": "was in queue to point out exactly what Jason said. So effectively, a third of the further people voting here said that they want this option, then option 2. They want something in, in fact, if we change the version number of Yang, will impact all clients that force all those clients to move. So it'd be good to understand what's the driving force Flat. And I'm curious if it was something like what Ahman said, which was, is it both, and people voted for option 2 because they wanted the yang 1, that 2 are I'm confusing things more I know right now. I think you're using it. I mean, if you I don't I I I'll look to people who heard it, but I think it was pretty clear that one The second question on option 2 was a narrow change, not a wide change. I don't think people were confused on that, but maybe I'm wrong. Well, as then, yeah, I don't know if it's possible to ask, but I would be very interested to understand that people who voted for 1, the 2, Would they be happy or would they be accept that we do the one dotone now and then continue to Do do one or 2 later or next step? So before confusing it further, we have a few people in q, So let's let's run that to a little bit, Kent, your app as I think as participant? Yes. cantasic contributor and a 1.2a supporter. the reason I selected was because, 1, the rules are what's written if some must not. and I think that's important to stick with. And more importantly, I worry about clients and how they'll react to NBC changes that occurring essentially when they weren't ready for them. I but they're seeing them today. Point?"
  },
  {
    "startTime": "00:52:01",
    "text": "that's been our point of back and forth, at some point, we're we're gonna have to make decision. And I'm, like, I'm I'm good. we are a a a group of consensus But That's the that's the key crux right there. They are already happening today. and and just to back up Joe's point. I mean, open config are making they'll make breaking changes, and they're and they're quite widely deployed. The vendors, Cisco, We don't want to make breaking changes, but we do. to fix issues so that happens. IETF and making breaking changes. So as far as knowing the whole 3, is not following the 1.1 rules. Maybe a few maybe small subset is, but everyone else is doing. Even the The draft is up for AD review. in in net mod, that's got breaking changes in it because the change is the task. -- set date. Yeah. at my hand is still raised, so I'll I'll respond. little bit to Balash's point, I think. So I'm very willing to go to group consensus on this. I just wanted to articulate y. dip dip dip dip dip dip okay, okay, Oh, but I'm sorry. But Tupelo's point, if we were to do it with a 1 to 1, it does not make sense to me that we would then also do a 1.2.2. clean it up. It was just go with what we chose I mean, if we were to do a 1 to 2, I'd view that in the context of the gang next to a much larger scope scope scope scope scope scope tape update, update, update, Oscar, you next. Hi. As an operator having a lot of junk deployed, 1st, but we don't we don't always want I mean, we don't want to have breaking changes, but reality is that they are. Okay? And we'll leave with in the software especially in the software world, with having breaking changes, updating, and having to update somewhere a bit 2, 3 months and make and"
  },
  {
    "startTime": "00:54:01",
    "text": "If needs if things need to be broken, break them. Okay. So the sooner you make the decision, the better, don't don't postpone it. Whatever whatever you do, do it do it now. Okay? So and you believe, that young 1.2. improves what we have, do it. Okay? But do it now. Okay? Don't don't wait. don't wait 1 1, 2 years. Okay? So do it now. I follow I and I also contribute to open config and there. they decided to take to have breaking changes. Okay? Because needed them. We said that, operator. I need to do the use case. if this use case cannot be done, with what you have. Okay. Okay. Okay. Okay. it needs to to break. And and if not, I won't use that standard. Okay? So so here, If you believe wanted to ask, I'm not entering into the details of of 1.2. But if you the experts believe that 1.2 fix listings, do it. I think you've echoed a lot of our sentiment on those calls. Do it now. Yeah. 10. Yeah. Demo of that. So I'm in full support to do it now. This the sooner you rip off, you know, the band aid, the less painful it will be. The only reason why I like adding it at 1.2 is just signals this is a non backwards compatible you know, this everything with this is non backwards compatible. from deep, you know, acting as any software engineering leader. just determining this is, like, can your software release that has some major changing impacting. this thing like, okay. Try to keep the 1.1 as much as backwards compatible. 1.2 is non backward compatible. In in Symbra, that would be 2.0. But I get what you're saying. So we have Jason, Charles, and Rob in queue, and then I think we're gonna do another poll. So Jason, Okay. Jason Stern here. I just wanted to thank Kent and Dan for being willing to come up and"
  },
  {
    "startTime": "00:56:01",
    "text": "and face the rest of us down, and this is that's good. Good good to have the discussion. I mean, one one thing to realize is because it's already happening, the reality is clients are already getting fooled. So They're making they're making an assumption that things aren't changing, but they are. And Because they don't know when it is changing, we have nothing marking it, You kinda have to always wonder with any change of a revision Oh, There might there might actually be a change. You just have no idea, and so it actually causes you to have to carefully look at any revision bump of your module. because anyone could contain an NBC change at least if we go ahead with this and Once it starts getting adopted, you know, they'll be at least we can mark when it's happening when it isn't, and tool change will actually know. Charles Eckel, Yes. I I mean, I was struggling with this one a little bit because my my kind of assumption was if Well, first, I was trying to figure out what we were trying to accomplish with changing the version number. And I figured, well, what we're trying to accomplish is this is making some updates to the gang. So We should change it to 1.2. The thought is if we change to 1.2, clients will continue working and kind of assume that they can ignore stuff they they don't understand. That was my my thinking. If we really want if we really thought like moving to 2.0, I would think would break clients if paid, didn't understand 2.0. So, it sounds like people are saying moving to 1.2 is gonna break clients that only understand 1.1, And if if that's the case, and I think that's Oh, I think. to me seems like a bug in those clients, but if we want to avoid that, then I think, yeah, we need to stick with 1.1 and wait until 2.0 is ready. if that's the the state of the deployments, then I think we just yeah. I I'd rather wait and make all the changes and then go to 2.0. But if we think"
  },
  {
    "startTime": "00:58:00",
    "text": "deployments can handle it, I would move to 1.2, when you make the changes to Yang, seems like the right thing to do So that's why I was kinda confused, and I was hoping to hear arguments on both sides to help me understand the pros and cons a little bit better changing the version number because it seems like my assumptions weren't correct, but 1.2 would not be treated gracefully by clients. and that's how I it happened. I'm confused as to whether that's true or not. Well, there are keywords, then those clients wouldn't recognize So I think you just said a really key point. for the group to consider is if we keep 1.1, what we're doing is updating the rules in a document. If we change 1 dot to 1.2, we're updating the rules in every yang model. And so it's a question of where does where's the ripple effect worse? Or where's the you know, which one is a more acceptable ripple effect? that clients will be surprised that this text chain. This must not is now a should not. or will they be surprised when they see yang version 1.2? And which one's harder to for for the clients to deal with. And that's a question. It's a sub a little bit of a subjective question, but that's what the question is in front of the working even though Bellaj is saying, no. Yeah. I got it wrong, but So Robleton as Countries. I was just responding back to Dan's comment really. And if if everyone was using yang 1 1 correctly now today and wasn't making Embassy changes, then I completely agree move yanked to yang 1.2, that's the point you had to make these breaking But because everyone is using yangone.0andone. one that one on making these breaking changes, I think it's better just to up dates 7950 to reflect reality and pretend it's not not be it's been used in a different way than it actually is. One other point I would make is I think also"
  },
  {
    "startTime": "01:00:01",
    "text": "saying yang 1.1and1.2 is sort of fusing semantic versioning into Yang's versioning scheme and Yang the language doesn't use semantic versioning. So yang 1, the one is not backwards compatible to yang 1, or It's sort of in spirit might have been, but it's not. K. Kent is contributor. Next in line. So you're you're right. Currently backward non backward compatible changes are being made And but I think what's at stake here, and this is a little bit to lose point, is if we were really just talking about making a document change versus a a number change in the yang module, and that was all we're talking about. then that's a very, very narrow scope. But I think what we're really saying is that immediately, if we were to accept option 1, we would then want to change the numbering scheme and and, you know, the other aspects of this whole solution. which then grows the scope too much larger, and that's more than I think we can expect a legacy client to be able to understand. that's where my concerns come in. Yeah. If we're just changing the must not to a should not, I don't have a concern with that at all. It's the larger scope of the implications affect me. We we are correct. We are saying that we're updating the rules, and we're adding extensions that clients optionally choose to support and that humans can use to Jason, I think, Jason, you made the point to signal that these changes have occurred. in the interim while we're waiting for get this Yang next whatever version to to happen. Bahja. It's one of the p one someone who was there at the inception of Yang I remember very similar debates about deviations. something we everyone hates, but practically, it's there. We put deviations there. it's the same kind of debate about NBC changes. why wait with it. It should have been there in 1 does 0 I think."
  },
  {
    "startTime": "01:02:02",
    "text": "Walba, Benoit's coming up. Jay oh, thanks. You did It's gonna just have the second option. Ben Waikla. So, actually, I was trying to remember when we start to discuss this, And we wrote the first draft show with Richard Barn 2017. 6 years ago. So in the past, I made multiple times a command that the IT actually moving faster, We are 6 years later, and we hear it do it now. Right? seemed that people across, you know, open conflict, they understood that there are no mathematical changes. It's a fact. Right? So I'm wondering, are you going to wait again and post it postpose this until we've got 1.2 in the toolings and 2.0. Maybe it's just time to get it done. So I'm a strong supporter of option 1. So Ahmed, it has been from Swisscom. I'm gonna speak a bit from a per operator point of view about the tooling side, Thanks. So Generally speaking, I feel it's updating the pipelines. It's much easier than routers general. So Personally, I would prefer if things break and tell me they broke. rather than silently breaking, braking, braking, because people now if there is no backward compatible change, operators might change something without telling you, and then After we deploy 2 or 3 weeks later, we find something that is not working as supposed to. which is a larger problem than it breaks when we do it on dev and tell us, hey. that's not not working anymore. So when we're doing, like, a pre prod, we would see it. We'll stop fix our tooling life life is good. we didn't have a we have less chance of having problem in broad. which is bigger. So for me, it's, like, Tooling is probably easier to fix. The second aspect is if we go for one point 2 or 2 or whatever new version."
  },
  {
    "startTime": "01:04:01",
    "text": "it will take a bit more time. which gonna make probably a lot of people not so happy. But the other thing is it will take even more longer time to adapt. We have a lot of devices that a lot of vendors, I don't think, once the we have a standard see. The next day, we roll a new blank modules. they will still wait until everyone is updated their tooling because even, for example, if we an operator, update our tooling, 10 others did not, so the vendor will wait for them until they update. That's not yet. before you go, could have interpreted one of your questions or whatever your comments. as being strongly supportive of moving to 1.2. don't think that that's what you said because you had proposed something different earlier. I Can you clarify whether you are speaking to support Keeping the yang version 1.1 and allowing the change. or moving to 1.2or2.x. because I think what you said, it can it can be interpreted either way. Yes. True. But I wanted to to clarify here the amount of effort. Right? that's why it my comments were, like, in the orthogonal to 1.1or1.2. Okay? Okay? So for Personally, I'm proposing We do it now. for 1.1 We learn from it. because when we are in the calls, there is a lot of open issues that were very hard to side on what's backward compatible change, what's not backward compatible change, there is like, if you go to the weed of it, there is a lot of things that we are not sure about it. So let's get it now. So other people who are waiting for it, can use it we can learn from that experience, and then we can move later to 1.1or1.2or 2 or whatever version we we want to have. Okay. Is that gonna fight? I I think so. That's helpful. and it's fitting that you're up because I'm gonna start the last poll we're gonna have on this topic. And while the poll is going on, Rob can"
  },
  {
    "startTime": "01:06:04",
    "text": "speak. The poll is actually whether to follow your option for which is to do option 1 now But then as soon as we have some stability on versioning, move to yang next. So I'm gonna start that, Rob, while you ask question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, question, And Rob is sitting down and scaring him away. Oh, well. Go to the mic, please. these two things would not be linked together. they would be running in parallel. They would be running in parallel, but some people I think are arguing and may feel that by opening the door on 2.0, it makes it a little bit more a deductible to violate that change that must not to should not. That's to slow us down. to sing. Just sing. They're they're not linked. They're not linked. They're not linked. They are not linked. We'll give it a moment too, see if we reach the same approximate count. You have 2 minutes left if you wanna make any final points while we're we're waiting for those last few comments I I think the the points have been made on with Dan was just saying, I I I they're not You said they're not linked. I raised my hand here. I would like to see some of these other features incorporated. I think packages might be a nice set of work that might fit nicely into a new version of yang perhaps. But to the other"
  },
  {
    "startTime": "01:08:02",
    "text": "points have been raised to the sentiment that I felt calls in this time that I've spent, I would like to see this progress because this is a real problem to be solved. and and and postponing, postponing, postponing, just as going to fracture yang or could fracture yang even more. like what we saw with OC. Alright. Thank you. I'm gonna end the poll I I I think that's your closing words on the topic. And -- Yeah. I I I didn't get to present the slides I created, but that's fine. Thank you for hepering me, for an hour or so. so there are I I some more details on the discussions that are open really encourage every participant to review the slides and start bringing up, following up on the discussion that's already happening on less. So So what's the next steps to actually get this to move forward quickly. I mean, is are we gonna have an interim on this to actually try. So I think we sort of closed 1 of our key points, but the other ones, I think, it'd just be as contentious. I'm entirely sure we'll close this one. I think we need a discussion perhaps with you in the room, with the 3 of us, to talk about where we go based on what we heard today. Okay. And I do think an interim on the other topics are good, I'm just talking about this one specific Okay. anytime. Yeah. I I think the other 2 are much less contentious the other key issue 23. Maybe 2 is more, but we need to get through this Okay. Charles is gonna come up. And, Jason, if you don't mind bringing up the next slide deck, Yeah. Charles Ethel. Just kind of, you know, who we just finished our thorough GVP, IEGF coordination call. And one thing I'm wondering don't think we have any sort of active real recent liaisons back and forth on this, but I'm wondering if"
  },
  {
    "startTime": "01:10:01",
    "text": "This sounds like something that would be useful to share with the 3 GBP community. Let them know what planning, and have it in within, like, the next week so that it'll be ready for the August meeting that's coming up. into HPP. Okay. Thanks. Oscar? Thank you all, and look forward to continued discussion on the list. Okay? So we managed to I didn't don't think that we would manage to finish the other discussion on time. what So now we are gonna talk about I'll be in the mic for now. but here. Now okay. with them. Anglo. Okay. Perfect. Okay. So I'm gonna send you the updates of the extensions of the access control list and models. You know that this model was already an RFC. And here, what we are doing is to cover the different the different gaps that we have found when using the junk model in the real life. Okay? So we already presented this in the in some ITFs ago, the document was set up with unable to the to the next slide. The document was was adopted. Next slide, Yep. Jason, next slide, please. Yep. So the document was adopted, and we continue working in it. Right now, we have the GitHub where we are tracking all the issues, which have performed an editorial review. And, for example, have just the fix the JSON examples so we and that were had some some mistakes. And also one of the gaps that we had was that the use of policies now also included a junk code for that. And we were also covering some some more use cases that people were in the access control list. So I see through"
  },
  {
    "startTime": "01:12:01",
    "text": "filters beyond filters and matching empty headers. Okay? So they are were not included in the in the original version, we will go now into detail. Also, for the formal matching the ICMP packets you need to match the code. So here what we also added or included here is an and I maintain module. with those those codes. Okay? So we believe it's better to that this leaves out and the the working group and which in in Ayana, they can as 3, the the codes whenever is required. here, we still have some some open issues, okay, that we need to solve. So one of them is a very common functionality that Today, we are also using in Telefonica for some of these David. matching the ipv6 extended headers So this is very very common functionality. Okay? So that's we need to work out and and add it also, there are some actions, okay, that there that iron. used for some some implementations. And as we will see later, we need to decide whether we include them or not. So here, I would talk later. I would like to request the help of the working group to to decide some of them. Okay? So we have the comment as well from the one that's there, ready ready ready reduction. based on a match, you redidact to an STP server or something, and there are also some matching that we will see later conditions go to the next slide, Jason. Yep. Yep. Okay. So so first, just one of the gaps that we had identified is to to be able to have an alias for commonly used for example, ports, prefixes, protocols. So instead of just having to to refer to March, protocol, 5 on mass protocol, 7."
  },
  {
    "startTime": "01:14:02",
    "text": "or here just to create your your alias and just much ICMP match, whatever you you like. Okay? So just to to create that or match port STDPU. So that that is quite quite handy and quite useful. And here, just the definition of the alias and must be considered quite quite simple one. So can you go to the next slide? So the other this one and the next one comes from a asset of EDPM use cases And here, this particular one was for the EVPN, we PBV flavor. k. In the BBB flavor, you have the the package, like have a, like, a double Mac. and I'm accessing the customer and a backbone identifier facing the the network. So here, the requirement was the ability to be able to filter by this AI component. Okay? So here, you just show show an example of how we we create a filter. So, for example, just we can indicate the lower value of the IC or the rapid value of the IC. and we allow accept or or reject So it covers 1 of the EVP and use cases. So can you go to the Next slide, The other use case that we are covering also is an an came from from EVPN. k? And they are we can have a or multiple multiple villains inside. So here, what we can decide is if we allow to breach those pillars or to root those pillars. Okay? So here, with the help of the access control list. we can perform that functionality that is required by the EVPN service. k"
  },
  {
    "startTime": "01:16:00",
    "text": "So so here, we can just say, or this range of of billings. that we want to allow it's forwarding not. Okay. So we can accept or or reject. Okay? So this also covers use case that this documented in there. Yeah. So, yes, you can go to the to next slide. So the other you case is a matching MPLS headers. Okay? So here is just a functionality that is used today. So you just match instead of matching the IP address or the CTCP field and so on, you're much tied at least the empty less graders. Okay? So here, these are the the different header that are defining that she 30325462, the traffic class, the level value, and the TPL, So here, we have is worked out, which are the possible, matches that we have. k? And here as well, I'm gonna comment later. So we will so would like to have specifically, this part will be reviewed by the MPLS working group. But we think it's better to have all the extensions contents here in in rather than doing a separate document in in MPL is just to cover a small a small part of it. So but this was also a common a common use function available in many implementations. So can you go to the next slide? And here, we have some if you wanna our big corporations and is is which actions among all of those that are present in the in different implementations of access control do we do we use? So the standard model just when you match a pocket, do you ask Do they accept, reject, or drop? that. So which but there are there are more things, okay, that that are done I'm on upon matching a a bucket."
  },
  {
    "startTime": "01:18:00",
    "text": "So here, for example, one of them is just remark in a pocket. Okay? So you you might it match this criteria. you're a market, or you set a different priority we believe these are too close to QS. So we believe this might not be the right place to to put them. So it's better that they are leaving in the QA model. There are also another options that are available in many in implementation. For example, that when you match a pocket, you assign it to a certain BRF. So this is also a very common functionality you deliver it to you you you change BRF or to the global routing table. Also, you can perform a log action. So So whenever you do a match, duke take out a log, or you update a variable. your data counter. Also, some other some other actions that are that would have found is when you match something, you raise alarm, or or you redirected But those, for example, we require some additional setup, for example, the ready date. will mean redirect it to an HTTP server. we believe it's very application specific function that should not be there. Even we have found implementations with that in part of the access control list. Even the rationale arm, we would need to also to to go into the details of which is the alarm that that needs to be to be raised and how so also, we believe it can be out. Okay? So can you go to the next slide so we can go to the open issue. So here, We have all these no. Not net. So our proposal is just to keep the sign and forwarding to instance, the log action, and the update variable content. and leave the rest out. can you go to next slide? So just the next step, we want the working group to review the this doc on the latest version of the document, the changes, and the the can provide you that on this open issues and if you are also happy with the current approach that we are augmenting the the modules or not in a base,"
  },
  {
    "startTime": "01:20:01",
    "text": "case. So now not a new version of the of the model and we want MPLS working group to review the MPL SQS. and the once we have agreed, which are the actions to to keep updated that. So here, open to questions. Only 17 seconds, but there was an opening question that any of the comments I a quick comment. Do you agree with trying to remark the packet, leave it to QoS because that we do cover it in the queues model, And for the AENA ICMP types, Is there an existing type Well, audio of that can be updated. Which one? for the ICMP types I'm wondering if there is an existing type file module that can be updated. we didn't find any. for the ICMP. So this is why we proposed the to be here, but I am happy. Any anyway, if if it existed, it was much much better to to go and pick the values from from somewhere else, but it did not exist. We just Sure. Maybe the I'm saying the exact catch may not be there, but unfortunately, we're out of time. Okay. Hello, everyone. Yeah. My name is, and I will give up data the northern tank in young day model. So quick update on this round has been around, actually. This already complete the second working with last call. And so we receive quite a lot of comments from Andy and Adrian, especially from Adrian So these really provide good input for the policies of this document. So we received actually 3"
  },
  {
    "startTime": "01:22:00",
    "text": "open issue has been discussed on the list. So we some summarize this that will yeah, give update that in a in a later slide. So the main change we made in this latest version, actually, you can see actually like, a removed identity ref type from the young module. and avoid a duplication really try to align with the module hack design. in update 88 to 19. And then we also based on discussion with Andy, we add, you know, 1 k lip to use on sign them. integral value to identify the issue data node we'll clarify the column then meaning. how they can be used there. also, we cover provide some guidance and the clarification guidance on which node should and which notice should not be tagged, Next, So for issue we discussed, we summarize actually, we have straight issue and first the issue is about, you know, tag no way specific metric. In a way, Actually, the idea for these node tagging is classify the data So Andy, actually, I think we may be not necessary as a young officer to tag. the way it's specifying match figure. And we actually do provide the collaboration with provide the analysis for these at this tag note with specific metric, I think that Gongji is you it will have classified, basically, is a specific metric that you can provide more visibility to to the data, actually. For example, you can represent some kind of static with special metric types such as counter or latency. And also, some cases, in multi vendor interobligedic"
  },
  {
    "startTime": "01:24:00",
    "text": "money vendor use cases. You this red helper provider interpretably, for example, when a has a vendor a model, and when a b has a vendor b model. So you may have some lead to represent the similar semantics, for example, the latency. So and they chose a different name. So is kind of notetaker already promote this kind of interoperability. So that's the motivation to really introduce this And about the We also you know, got suggestion from Andy also, I see. And local guy also gave the some suggesting on this And maybe we also have a choice to just focus on, you know, high level class and you know, con contact the node weights based on You know? high level calibrate for the one based on the s ever say a PS category. Also, you may classify based on whether the data is a static data or dynamic data. So we as also we have no strong opinion for these Actually, working will believe this option we we we we're happy to take it. and Yep. So as Jared seems like an opportunity for a show of hands, if I could rephrase, does it seem like the question is, should we move specific tags such as metrics to another document, Yeah. Maybe -- Do you want to you still have comments here. Do you want comments now or at the end? I hope that at the end, Okay, sir. Yeah. Yeah. Thank you. how we discuss Yeah. move to the next the second issue is about, you know, the whether we do have guidance though, you know, which nodes should be tagged or which node node should node actually. I I I think, yeah, this is based on, you know, NDS comments. Actually, we do provide these kind of guidance, actually, I also, you know, add additional"
  },
  {
    "startTime": "01:26:02",
    "text": "guidance in the the new section in section 9, point 2, actually. In addition, some guidance we put in the, you know, section 81 section 8, actually. So you can see actually the guidance we provided, for example, the the the node content, you know, 1 or multiple no tags, actually. Not necessary. All the they know that should need to be tagged, actually. and So all tag value described actually in Section 9 can be, you know, inherit down to the containment hierarchy So I I think that's what we have actually. I'm I'm happy to take them. more important if we're using, you know, still there are some missing pieces. your next So the next issue is based on from aging, and we discussed the the tag phone made, actually. So the currently, we actually use the column in the tag value actually. So So the tag actually comprise tag prefix plus tag value. We use a column that's part of the tag prefix. So we set some rules based the agent suggesting. But there are some, you know, common cases. You know, con corner cases. Actually, columns that can be used within the tag value for example, we may introduce enterprise number column in the tag value, actually, this case that we already describing in the draft So here, there's confusion here. So how do you avoid the confusion? between the tag value that doesn't use the prefix by the content. a code and and also a tag if that has the prefix or and a value. So this Actually, we come out of the the proposal, and we have 2 options. 1 is the way can, you know, Add as restriction make a prefix the mandatory"
  },
  {
    "startTime": "01:28:03",
    "text": "only for the, you know, IETF tag type and vendor tag type doesn't apply to the user tag and type So for user tag, actually, we add a, you know, further restriction for the target value can all mass models start with the user, column. And the second option is where you can make a prefix mentally for all 3 type option. That's we'll completely remove remove this kind of confusion. So Next, Yeah. I'm done. Actually, yeah, happy to take comments, pricing, Okay. I have one has parts of it are contributor, parts of it are chairs, so it's a little hard to to split. Like, can we go back to issue 1? Can you explain why you think it's a good idea to have a tag that is very specific and is basically the same as week, know, the example in the model is You jitter, loss, latency. which are elements in our models? Why would we wanna have tags that are the same as those. Yeah. I I I think we see this, you cheater latency could be the, you know, fine granularity kind of class. Actually, you may have, you know, you know, loss this kind of leave, actually. They may have you know, represent different scenarios, by the way, you know, classify you know, whereas different living in some model, in in the same class, actually. So based on this information you So I I gave you example in in in some multivendor environment. So different vendor, they may have their private model. They may have similar need for as we put in the the similar automatic reducer, different name names so we can use this"
  },
  {
    "startTime": "01:30:01",
    "text": "really, you know, make it consistent to your ease that you capture, you know, the similar you know, So I said that that that that metric related leaf and so we can you know, to give, you know, based on this data to to further, you know, analytics. So what I'm hearing you say just correct me if I'm wrong is is that not gonna have interoperability in our module. So we wanna have interoperability through IETF Defined Tax. No. I just give the the the second case, actually. The the first, argument is may use this kinda, you know, tagged based on measures specifically to provide a fine granularity visibility, you can you can So but I I I think that that's maybe Yeah. Yeah. Yeah. something we we we have. By the way, we are have no strong opinion whether this is already master you have. I I think we should talk about it more on list my question came as, I would say, participant My response is as chair. I'm not sure it makes sense for the IETF to standardize things that allow nons that that are really catered to nonstandard implementations. I'd almost asked our AD what they about it, but we can talk about it on on the list. Joe, you were in queue as we're as the next person's coming up, Yeah. Yeah. Joe Clark, Cisco. I'm Ask 3, I think option 2 is the most sane thing. Just put the prefix on everything. It just makes parsing a lot easier. and more consistent, don't user shouldn't be separate. User colon. It's easy. Then I know if I see another colon, I know what that adds value. Okay. Thank you. you very much. Hello, everyone. This is Tufong from Huawei. Next slide, please."
  },
  {
    "startTime": "01:32:04",
    "text": "Okay. So this presentation So this presentation is about the system configuration. A brief recap is that this work was adopted in November last year, and it tries to describe the handling of the configuration data defined by theroid itself, which we call the system configuration. And the key takeaway of the document is that we have defined system configuration data stop, which is read only to clients but the content may change dynamically depending on some sec factories like the software grades or hardware license is installed. And, also, system is merged with running to become intended and during which process the contents in running tech president our system. This means that we do a lot some pass off system configuration to be modifiable by the client and either a client overwrite a system provider leaf value or configure some additional notes inside system defined at least entry, could it means to modify that system configuration. And, also, 2 approaches are specified to ensure the reference constraints could be satisfied in running client can just explicitly declare the reference system notes. or just use the readout system parameter to allow the thorough. to automatically configure the references and notes in wrong Next slide, please. Okay. Since that IT meeting, the document of this is The high level update is that we, at the precise meaning of reverence as discussed in the last IT of meeting, maybe to most of us, the most common case would be leaf reference."
  },
  {
    "startTime": "01:34:02",
    "text": "would be the reference of system configuration, but we think that there are other cases like the system configuration being present in the one must constraints artefined as the mentored who knows or used as instance identifier type value and also And defined to satisfy the main element constraints this other case could also be treated as the reference. And, also, we try to better clarify the result system parameter and we think that for a node auto copied from from from system, to running, it has no difference from the run explicitly configured by the client. so the node will not be removed automatically even the reference it activated by the client, all the configuration in system disappears. the here, the the general intention is to we to do not want to surprise clients with unexpected change. And to allow the client to have full control over running. And, also, we update the figure tool, which is defined in MDA about the architecture, model of data stores, we currently, we incorporate the system data stock. and other editorial improvements based on justice. comments, Okay. So regarding the open issues, I think there is still one key issue that we have not really finished the discussion. So I just brought up it again and hope I hope hope hopefully, we can see some convergence here, and it's about the of offline radiation of running. So the questions is must just not always be copied into running. 1st, I would like to mention that let aside this document is already the case that the 791583 for to"
  },
  {
    "startTime": "01:36:03",
    "text": "both define that running must always be valid. So it means that the reference constraints must be satisfied, but also the 8342 also indicates that the intended is subject to validation after the configuration transformation to Ronnie. So does this already imply that running alone cannot be valid in MD document, So Regarding this draft, I think there are 3 options. we might need to consider and during each option and some potential impact to the client are given. The first option is that we always require the reference system notes to always be copied into running. and this past the Autocopy might be tensor for the client, but Only the parts that are required to make running be valid needs to be copied. So you don't need to copy the whole The whole content of the system configuration says, for example, the keynote be referenced. And There is a question related to that. is about what is the configuration in system updates, and there is a still copies still in Roni. The current document states that any app of the system notes will not automatically be synced up into running pat, pet, pet, pet, pet, pet, pet, pet, The question is, can we do better or should we do better about this? And the second option that we do not require reference system always be copied into running. And I think it it this might be fine for the system of your client because it can offline merge system into running and as well as implement the transformation to running. So it might be okay, but may may require some extra implementation complex complexity for the clients. But the problem might arise after some LNGA client Mac"
  },
  {
    "startTime": "01:38:00",
    "text": "and implicit reference. and an offline rate of running for the lexicons will break. unless all the reference nodes are copied into round if they heavily rely on the offline validation of Ronnie. So I think This might be the the the only issue. And regarding the opt option 3 is that we choose option 1 now and we flip 2 option 2 letter. And during this I think might might there might be a a young next effort to bridge that gap to that means we require that Ronnie must be always ready to know, but we require we will move their requirements in but still What's the impact? to our lexicons. It's is the similar issue on as the option 2. and how do the this client know it can stop carboning system nodes. into running So in the queue. Yeah. Just to be clear, if we have the discussion, you're probably not gonna be able to present your next slide, and you'll wanna that to the list. Short shots. Okay. Yeah. So thanks for presenting this. So I think I agree this is was the key issue, I think, with the draft is to work out this thing, and that in terms of going forward. So I wouldn't necessarily state it quite as must system as always be running. I think the key question in my head is is running on its own always expects to be valid or is it okay for running to be implicitly valid by doing running plus running plus system merges into intended, and you validate intended it intended validates by implication running is valid, which I think is what Kent and I I think is a nice way of doing it and yoga maybe as well. I was I've asked the chairs. I'm wondering if this is a good thing to ask power in the room on as to whether -- -- working on it. Okay. whether yeah. Why don't you fill us out? So Paul is coming and while while we're getting the wording quite rare. Well, Kent is getting the wording right. Jason, you're in queue."
  },
  {
    "startTime": "01:40:00",
    "text": "Okay. Yeah. Jason Stern. So I I I don't I don't have a solution here, but I just want to bring up two parts to that. So one is a lot of tools today do a get config or check that the the config they fetch from the router is valid So that's definitely a problem out there if we make running invalid or loud invalid. It's it's it is gonna impact a lot of lot of toolchains. On the other hand, you know, if we If we don't allow running to be invalid, Like, if we if we or let me flip it around. if we ever try to standardize configuration groups or inactive config, We might have a solution for the system config. for those two things, we may be kinda stuck if we wanna allow running to be invalid. So I don't have a solution to what I'm saying, but, you know, we may have to also keep an eye to what we might do with config groups and inactive config if we ever intend to standardize those Thank you, Jason. I realized I didn't met a mistake in the question description. so so so Thanks thanks for all Rob. party Artes. we have a poll going. If you can look at the question on your screen and answer it as you see fit. not sure I understand the question. Okay. You can try you can try. You can tell what? can you explain what's That I wasn't sure what they mean by offline running dotcom versus the online running. I see. Woods so offline would be if client work to ask for the server for the running configuration, it gets back a document."
  },
  {
    "startTime": "01:42:00",
    "text": "it wants to validate that using its own cache of yang modules should that that something that we think must succeed? That's what I mean by offline validation. Well, I I guess I had a different way to think about it is is that if you push configuration into running to the to the device, you do a get config, you should get back exactly what you put get put in. So if you put some valid con and if it was accepted, So if you put in the configuration in, It has dependencies on the system, and it resolves it's fine, and you'll get a confirmation back what you put in. it's not their modify or change. So it's just like different thought, but And then I had a completely different interpretation. Okay. Is that maybe cancel it. So I think we need to cancel it and move on to the next presentation. So just repair it, and we we'll need to take it to the list. Okay. Sorry. That's okay. Okay. Okay, Paul. this walk is about the Yang's attention and mandatory notation for immunoslack. And Next slide, please. And this is not a new work, actually, but I still prepare a recap slide to make sure that anyone can honor than the background. And the background is that the project operations can file for various reasons. for example, when the thorough rich rich the configuration went internally consider it as immutable. And such configuration could be some hardware related configuration are built in case of certificates awesome seas. so predefined rules or policies related capabilities etcetera. And immutability is already allowed to do that in implemented in multiple vendors. for example, I I maybe there must must always be a user account called Root and cannot be modified. and it's the aim of this document to define a single solution. instead of the multiple existing vendor specific solution. to firmly flag which notes are immutable."
  },
  {
    "startTime": "01:44:01",
    "text": "so that a client can benefit from this, but knowing the knowing be beforehand with why certain nodes they can't seem otherwise valid, but will cause the server to return an arrow, but it intended to be descriptive and it's more like this documentation. and this document, the existing server behavior doesn't apply to the server without any multiple configuration. supplyashi I I see you with a queue. Okay. Next slide, please. So since the ITAS meeting, I think there are a lot of discussion regarding the transactional and non transactional API. I think, generally, there is a desire to always allow a client to move from any valid configuration to another valid configuration in a single app that So I think there is working group consensus that we think only transactional APIs should be supported. So to avoid the leading to any potential non translational cases, the current document just narrow the scope to only support the system configuration. That means that a mutual configuration can only be created up that is audited by the server. the collide can not create the immutable configuration. And if it tries to modify some configuration, the server comes in the immute body, so we're always rejected. sold. The authors believe that this might avoid the non transactional behaviors. And This is, regardless, the immunobob the immunobob flag is regardless the implementation of the system configuration data stalls. So is independent of that. but Sanjay is speaking on behalf of 3GPP and Oran. I am very sad to see that we want that ATF wants to reject at least half of"
  },
  {
    "startTime": "01:46:00",
    "text": "the 3gppliers and statement, which explicitly asks for client being able to create immutable things which would not bell violate transactional API because if you remove the Leer above, and recreate it, you would be able to in one step get anywhere. I'm very sorry I was not active lately. but but that this is a problem for 3gpp. Roblton as a participant. So just Just to answer your question for or make a comment on yours, one I think you could have potentially a different property that isn't necessarily mutable that says if you were to modify this leaf, for example, has been marked as impactful, then then affect it's gonna cause a bigger change that means you delete the pair list or whatever container above it to have a bigger impact and still modify the configuration. So I think the one thing that I would like to avoid is not be able to go from one configuration to another. But in your case, it might be the same if you were to modify this property that you think was immutable, actually the impact changes much larger. They take down a service and recreate a new service with the other parameters. So for that aspect, I think might that might be a solution to that one. that work can chat after the doorknob after we chat. this is a very important point for 3GPP and Oren, and, yeah, Let's chat. this solution doesn't help with that yet. And then my my views on this is the same they've always had is, I can see both sides of this that I can easily make sure the clients can do what they want and could have full control is always great. I can also see the bit where you see the first slide Device has always been out supporting mutable configuration. and and that's nothing we don't have to add anything new here. I'm not sure that's"
  },
  {
    "startTime": "01:48:01",
    "text": "quite true to how I read Yang or NetComm. I know NetComm says it can felt any reason, but I think that's more to do with, like, out of memory or other system errors rather than what's within the Yang language. Having said that, I do understand the way that servers behave and and sort of documenting that, it makes sense. I mean, if that's how they're gonna behave, that's that's also a useful thing. So I sort of conflicted on those 2 things. The one last point I want to make is that just be out of control running itself. and keeping the mutual configuration system doesn't guarantee you always have that transactional behavior that's supported because I think it goes back to the previous talk we're having about how you do validation running plus system equals intended is if you've got if you're trying to modify running and you got some configuration in system. And, actually, what you end up validating is intended the 2 together. you could still stop a change happening and running because of immutable config in the system. Does that make sense? did to me. So I'm gonna we're gonna let the discussion continue, but we're gonna start a poll on this. There's been good discussion in the room. There's been good discussion on the list. And keep in mind, the poll is on a starting point, not the endpoint. So we're not asking for working group last column document. We're we're we're talking about adopt adoption. So adoption is the start of the process, not the end of the process. So keep that in mind when you answer the poll. Jason was in queue, Subhalage, before you, Jason, please. I guess I just want to echo a bit Rob's what Rob mentioned in his first point. I I would definitely be a proponent that an immutable flag just means that the server may destroy and recreate one of the ancestors above that element, which is either like a list entry or a presence container, in order to recreate"
  },
  {
    "startTime": "01:50:01",
    "text": "basically the object with the new value of the field they're trying to change. that's in line with being able to be declarative in a config and say, you know, this is the config I wanna get to. server make it happen however you need to make it happen. Okay. So Kent is a contributor. First, I just wanna mention, I think this work supports any transactional you know you know transactional APIs. So if Balaji is claiming that 3 DGPs says approaches transactional, then this should be a way to express when certain modes are immutable. A second thing to rubs and a a concrete example, I think, which is in play here, not just out of memory, but for instance, many systems require a a a a user account called Root. cannot possibly delete the Root account. you any attempt to delete the route account would fail. So there's the root account would be a node that's kind of flagged as immutable. To be to be fair to the last speaker, we have to cut the list. I'm sorry. cut the line. Please send your comment to the list apologize for not being able to get to I'm gonna end the the pole it it from from the the poll We didn't have a lot of people responding, but those responding thought if this was a suitable starting point for work for the working group. So Thank you for the presentation and the work, and we'll we'll confirm this on the list. our last speaker. Yeah. This is Qing again. I will present last topic about guideline for author review over the document contain young data models and the So the conversion is 0 1 Actually, story motivation to write this document. You know? for the young guideline guideline original I would say, actually, cover the guideline for the timeline and maintain the model. This cost a lot of, you know, confusion for"
  },
  {
    "startTime": "01:52:00",
    "text": "model also, they when request, you know, when they continually ask question, how do, you know, you know, handle some of these and I maintain the model, for example, they want to add a value or dep duplicate a value they may have 2 choice either they can choose to define the airline antenna module or the they can introduce these new value or duplicate value in the existing model. So this cost, you know, this source of information in the registry actually not a consistent so really want to fix this. Secondly is, you know, for security template you know, usually, we actually assume they apply all the younger model, but That's not a tool. This kind of statement, actually, a little bit, you know, you know, restricted. Actually, we for example, they didn't apply to the abstract data structure. And, also, we here are the discussion in last IT meeting from Kathleen Marietta. As a trusted, it raised the issue about the they lack the code marker for security templates. this is the reason why we really want to write these document next So we make a lot of major changes, actually, try to address this, you know, motivation the issue actually fills the at a guideline for I love maintenance time modules. 2nd, we relax the the rules for the statement for the security template. So this rule number doesn't need to, you know, follow the the the the the CPU template is not required for module that follow the obviously as 87, 89, and Also, we update a young security consideration template and at the statement that I've seen that are listed in the integrated template. to be at least as a normative reference in the document. Next, And we also make a a minor change. I don't want to repeat"
  },
  {
    "startTime": "01:54:03",
    "text": "detail, you can see that. Actually, the most important changes at a code marker for security template based on the trust express suggestion. and we also make a minor change, integrate, you know, some erater. We we identified into this document. That's why we make this piece document. And there are some other, you know, minor changes next And you can see, actually, we update the UIL, ITM are also a guideline. We add a tool every validation for 2 part. 1 is the validation check for JSON encoding example. 2nd is, you know, to at a validation check to the ensure your model fit into the, you know, 9 limited of the an individual jobs. Next, So still, we have a one pending issue, actually, currently security template, you know, we actually relax relax the rules, you know, this cannot apply to the the abstract data structure. Also, maybe metadata annotation described in the obviously, 70 line 52 is another example. Annowise try to explore some other exception example. If you have input please let us know we'll try to fix this. Next, So so this is summary. Actually, Yeah. we try to address the you know, the Alarm maintain younger model issue this risk by the Yamori also, and also we sync some of the requirements for the security templates to restrict, try to fix this, you know, issue document a piece document. So we like, working to consider to adopt this worker with the following scope, the fossil Kynan. This is not a new job that's actually already be documented in the one interview chapter has already, you know, sufficient"
  },
  {
    "startTime": "01:56:02",
    "text": "discussed on the nanomodelmannister, also integrate a a router and a transfer user. comments So Roblton is an ID. I think that for the trust issue, as a starting point, just raising a rash against the existing our see and adding the extra tags would be a good first step because it's much quicker. So I think that's worth doing. And then the second aspect of this is Kent and I are coming with we had change, but Kent effectively said doing the security templates all wrong, And he's certainly saying that we're writing far too much text in templates, and you're documenting too many nodes. And hence, Kent's draft is is much more narrow in scope of what he describes as things are impacts from worth documenting. and and I think Kent's right. So effect of the template, actually, sort of mostly supports what Kent says in some places or some of the techs that sort of justifies that. So I think that I would the security template to be updated to be more more accurately and reflect what Kate's suggestion is is is it as it picks up the nodes that are really are critical, like the ones that are annotated with NACAM rules and things like that rather than documenting all the nodes in module. So I think that that would be worth doing. My last comment here is this is you're doing you have this document, have you contacted the original author of this RFC and checked with them if they want to participating that work or not. Yeah. We do already sent an email to the Andy Burman, and know, if you can email with them and I think yeah, we gotta his feedback and So we acknowledging his Well, we actually added him in a closed section about this currently. a confirmation from him. Okay. So he was happy. Yeah. Uh-huh. He's happy for it to further be this document. Okay. Yeah. Yeah. So As as your first question,"
  },
  {
    "startTime": "01:58:02",
    "text": "What process do you wanna follow to update the template? initially, I was just, like, a router filed against the existing RF see to add in the tags, and I can approve that right. And I think that solves the problem in the immediate term in the sort of we'll need to solve now. So that can be done relatively quickly. those 10 to 4 months or maybe 4 months to get there. And then the working through the document is then not so urgent from that perspective, and we can try and make sure we get the security templates to the point that we're happy with it, and also the CKDs are happy with this as well because they won't decide. But you don't As an AD, you don't see any issues with this document. proceeding. No. Other than needing to update that security template test. Sure. Okay. The second point about Andy, Generally, when we have abyss, we offer to make the original off author, and a co author on the document. So if he says no, certainly that's his right, but I would at least offer that he'd be an a coauthor on the document. Right. With that said, while Jason Jason's next in queue, while he talks, we're gonna we're gonna pull adoption. basically same question as the last poll. But for this stock, Jason, go ahead, please. Jason Turn. So for kind of the phase 2, if we split the security versus the rest, We may want to also incorporate potentially a few things from the versioning work. I can't actually remember if we discussed it in the weekly calls, but you know, for one one example is the Yang Semver basically says that all IETF modules shall use a revision label. So that's something we may wanna also just just a note to the authors that we may wanna make a note there may maybe a few things from the versioning work we wanna roll into that phase 2. Okay. Great. Thank you. So I I I don't think we have a large amount of support but there's no opposition."
  },
  {
    "startTime": "02:00:02",
    "text": "on adoption of this work So that's that's a good indication. We'll talk afterwards. but but but stay tuned to the list. Thank you. Okay. Thank you, everybody. I think it's a very successful IETF 117 session. appreciate everyone being here and presenting your comments and sharing helping us make this a success. And stay tuned for an interim. on on versioning. it's Thank you all. Special thanks to Jason for helping this session run smoothly Yep. Okay. let me grab Rob. Yeah. I answered, like, maybe you should ask me. come you know, just right now. Yes. So let's schedule let's schedule it. How about firstly and Thursday. I'm I'm we'll It's good that what I'm saying. you know, after before 7, Okay."
  }
]
