[
  {
    "startTime": "00:00:28",
    "text": "any anyone who's just joined in the last few minutes we're just waiting for some of the document authors to join the meeting and then we'll be able to proceed if anyone would like to volunteer to take note notes that would be great e e"
  },
  {
    "startTime": "00:02:25",
    "text": "no crickets [Laughter] lots of crickets yeah I I I can definitely help out with it but it would good to have someone else yeah I think Martin maybe might be willing to help along as well at least for the first hour okay if if we want to get a few people to to share the effort that's all good e okay let's give it another minute see if Christine can hop on but otherwise we'll we'll start I think we've got enough Quorum with document editors to um be able to make progress on the issues um Mia did you did you have any slides that"
  },
  {
    "startTime": "00:04:01",
    "text": "you prepared or we just going to be going directly off of the the list you Shar to the mailing list yeah I thought we'd just go the by the issues one by one okay that makes sense do you um do you want me to pull that up on a screen share just so we got something for people to look at um or or would you like to do that uh I mean I think if you can do it that's EAS is okay for can we can you see this I can see something but it's quite tiny yeah let me zoom in how about that I think it well as works I mean at the people have to look at this theirself anyway because there's a huge amount of text or maybe they have looked at it already are we are we ready to start or are we let's let's crack on with it um Chris might be waking up or or whatever and I think his his views I mean this is his"
  },
  {
    "startTime": "00:06:01",
    "text": "um issue but I think the the views are pretty much captured well on there so if you want to take things away Mia that would be great oh okay I'm I'm seeing there we're still missing some people yes um well I guess we can start the discussion um okay so maybe just to before we start on this issue um in case you haven't read the email I've sent on Friday the plan is to discuss today kind of three main issues um I guess all of these some of these issues are a littleit interconnected so effectively we will we will be looking at probably something like six GitHub issues but it's really three main topics um and these three main topics will be uh now that we have that we're using the same pass ID in both directions uh we potentially need to deconflict the use of path IDs if we allow for Server initiated paths and that's the issue in front of you this is like the proposal to add an even odd pass ID split or not we already started discussing that at the last U meeting but um there's a lot of additional discussion now so I'm not sure or like we might have a different conclusion now um just to to give you an overl the other two main discussion points are looking at the Clos CL in procedure or the pass ID retirement procedure um that probably isn't fully clear now so we definitely have to change something here but there's also proposals to kind of simplify that or to um figure out how to remove the sources more quickly and then the third thing we want to discuss is the allocation strategy for connection IDs connection IDs are now issued per pass as you might remember and in order to ensure that"
  },
  {
    "startTime": "00:08:00",
    "text": "both ends have connection IDs for the same path ID because the same path ID has to be used in both directions we have to uh say a little bit more about how to issue the connection IDs to make sure New Paths can be opened and maintained correctly so this is the three topics um because um the even odd split proposal was discussed already at the last time uh we thought it may be good start to start with this issue um yeah Lucas I'm not sure if it helps if you scroll to the very end but effectively um there's kind of a a connected issue here which is really do we want to allow for Server initiated pathes or not that's an issue that we have open for a long time already uh and we didn't decide on yet we kind of said if we have a use case we should do it if not not clear um I personally think that actually there's nothing that um really stops us from allowing for Server initiated pathes um so I think we should just do it but you know that's that's part of the question um but if we do it or not we have multiple um options here so if we don't allow for Server initiate path the last proposal was to still Reserve half of the pass ID space either the even or the odd numbers in order to um allow this later however it's not clear if we really need this even an odd pass ID split even if we allow Ser initi initiated pathes um because you can also find other ways to deconflict and um I think there are actually two cases here what what you want to deconflict one is you the server the client at the same time open a different path with a different for tle but use the same pass ID um in this case you know there's a failure mode but on the other hand if you still only allow client side migration then the client by basically sees the pass validation for pass ID it's already"
  },
  {
    "startTime": "00:10:00",
    "text": "using because it also has a pass validation running and it should just ignore it because migration is not allowed from the server site while on the server side of the server sees a path ID that it's already using uh with a different for it should just treat this as a migration event so I think that case is actually kind of covered the other case is you have the same for tle and both endpoints want to open the path but use a different path ID at the same time in this case we currently don't really allow it to have multiple paths on the same for trle in the draft but we actually could it's like it wouldn't break anything so in that case I also not sure we need DEC conflicting and then maybe the last point is even if we want to do the even OD split we I don't think there's a need to reserve it right now because when you need a new transport parameter to allow for Server initiated pathes you can also Define the even odd split then there's no benefit in defining it like halfway now without defining the other part so I think at least my proposal and also what I discussed was Christian uh unfortunately we weren't able to like um uh sync up on between all the auers so my proposal for this issue is basically do nothing cool thank thanks for that Mia um thanks for the overw I just realize I I neglected to give everyone a view a very quick view of the notall um the ID of notall is describes uh the policies and procedures for participation at ietf events including um requirements about intellectual property rights declarations a code of conduct and how you participate in the events I'm not going to spend any more time going into that um please go and read that if you're not familiar with it or if you need a refreshment um this is very much on on individuals to understand those documents in their fullness um I'll leave at that one um if people want to jump in the queue there we're going to be using the queuing system for meet e um so yeah please jump in and respond"
  },
  {
    "startTime": "00:12:05",
    "text": "with your viewpoints on whether we should be doing um this I've lost my window let me go back um too many windows sorry here we go um on the odd even path ID split Christian chrisan do you want to go I have to unmute Dam that's what you get for being a bit too old sorry um I agree with Mia I mean part of what motivated this this discussion is that on one hand we want to be we want to not close what happened if when people want to have symmetric setup of streams on the other hand I started doing a following the meeting the the last ETF meeting I started doing a PR to uh allow that and it becomes very long and very intricate to to do it because it changes lots of details the pr is still there on on GitHub and and when I saw that I said H it doesn't look like something we should be doing as part of just nailing the last issues and I I did then another PR that says what if we just say that we only use even numbers for the the ID that one is um much simpler because it basically"
  },
  {
    "startTime": "00:14:00",
    "text": "just saying that use 41 bits inste of 42 doesn't make it very complex but on the other hand it doesn't do anything it doesn't allow for actual creation of stream by the by the the servers and uh and so uh basically when you Circle back you say well in any case if we want to allow the server to open pass we have to have a number of New Management stuff like how to control the number of pass how to control the number of connection IDs and that will require additional transport parameters so if it does require additional transort parameters it means that it can be done entirely in a separate extension we as Mia said we do not really need to do it now and if we do it now we are going to do this kind of work which is based on what we think maybe will be needed and that's typically not good so that was my that was my was interrupting any let me no that was my alarm because I saw that the me my calendar was at this meeting is stting in in an hour but whatever yeah um yeah that was I think that was wrong um um so actually this is connected to issue um 332 now which we will discuss at the very end but I think there is a way to Christian you can stay here because I want to check something with you there is a way to actually allow server initiated pathes without any transport parameter um I think we can actually just do it right now effectively um but so I agree if we need if if we do"
  },
  {
    "startTime": "00:16:03",
    "text": "that's one of the options you presented if we do not do the ID slit split then uh we can use exactly what we have now but we have to find a way to resolve conflicts and that way may be more or less simple depending on what we want to do but it it doesn't have to be very complex so yeah exactly so I think for today I would like us to like just decide on the even odd split if we want it or not if we don't want it we can close this issue and then we can have later some more discussion if we want to allow for Server initiate paes in a different way or not uh I think except you have something else Christian Martin is in the queue okay no I you you asked me to stay on that's yeah you can't stay all the whole time you're an author and you're very involved so you want to stay you can so hopefully this doesn't end up with Echo because Lucas is right there um so I think that we need to make the decision on the even odd split now um we can't avoid that decision I was looking at Max paths and how that's spelled and it's currently sort of spelled as a count but also the count is the value of the maximum stream uh maximum path ID that's allowed and it's a little awkward the way that it's phrased right now um because it's ambiguous as to what that means um so being being clear about that now is probably worthwhile uh if we're not clear about it then we we'll likely get in trouble if we start if we decide that we can't just deal with the a issues that that"
  },
  {
    "startTime": "00:18:00",
    "text": "happen so the um I mean this issue came up a couple of times and we tried to fix it in the last verion on an indori basis and then close to related issues um the current phrasing is really aligned on what we have for Max streams which is really the same phrasing it says it's a total count allowed for the connection which which reflects basically the max pass number um you know that phrasing is there in RC 9000 we can change it we can keep it but the the way it is specified right now it's basically the Max uh pass ID that is is specified here that's that's right I think it is still confused in the in the current draft and that's I thought I tried to fix it but I I didn't look at your PR yet I just saw that the pr there so any opinions about having or not having the even not split Quon go ahead yep yep uh so actually I was one of the one that actually proposed to split the pad in a even uh the whole idea is that I wanted to have a clear way to determine who is going to create the pass if we can have a way which is clearly unambiguous to determine who create the path and to solve the conflict if we have the two end points that try to create on different on different for a given pass ID then I'm fine I can we can drop this or if we do not want to support uh server initiated pass in the end at all fine as well but if in the end we need we want to support Ser initiated pass and we want to drop this we need to have a clear uh idea of"
  },
  {
    "startTime": "00:20:03",
    "text": "on how we are going to solve the conflict now yeah can I ask you one question um so the one thing you cannot have if you don't have the even odds spit is to basically say the client is allowed to open three passes but the server is allowed to to open five paths right but is that something that is actually required because at the end you will have eight pathes and that's probably important part right it doesn't matter at the end it doesn't matter who opened the path or does that change or does that effect for you it's just that if you can determine if the client can open three pass and the server can open one pass you may have a finer granularity and a better control on what each endpoint can do but maybe no one care I mean what we definitely try to control is like the resources you want to spend on pass maintenance right so that's like the maximum number of passes you can have in total but like who opened it I don't know if that's really that important you can always close a path and open a new one if you think you want to yeah anyway okay um yeah that's my point Thank You christian yes I mean what uh what I I believe is that uh it's not a good idea to have an symmetry between server and client because if we have an asymmetry then it will bite us when we do stuff like the emulation of IC in which both cooperate to set up a path and so um in the case of not traversal or fireal traversal and things like that you are opening the past but we don't know who will send the first message it might be the server it might be the client and it might be that they both send but only one"
  },
  {
    "startTime": "00:22:00",
    "text": "arrives and and so that's kind of a reason to not have to split Magus go ahead yeah I wonder about what does this Max do with Max uh Max path identifiers and the potential for attack surface here when it comes to because if they if either of the per and client and server can increase it uh an attack you could force the other end point to say oh I will raise this value myself and and allow you to send much more open up try to attempt to open up New Paths Etc and if that's open up an attack surface which currently doesn't exist can I answer that can I answer that go ahead well Magnus the the reason we the the pr was complicated is precisely what you say is that if you have two Max pass competing then you still have to control resource and that means that you have to have agreement in both case so you have to have hey I'm the server I'd like to open 159 passes and and you need to have a counter reply from the client say no no no no your server pass you cannot on seven of them and which is the reason why we want this receiving C or saying the one who's going to be the target for that number of connects or path challenges should be the limiting factor and that's if you split the space at least you could have per directional independent values no no you you you have the same problem because if I say I allow you to open a million pass yeah and it can be it can be unilateral because I am the one all you and you may or may not open those paths then the client can still immediately"
  },
  {
    "startTime": "00:24:00",
    "text": "send a million connection ID for those new passs okay yeah and and and then you have an overflow of the other guys resource so so it's a it's really it's really it's really complicated if you do that I mean it's really twice as complicated if you split but also keep in mind now that we have bidirectional path IDs you actually need to have a path ID from both end points in order to be open to order to be able to open a path right so if you never issue a pass ID for connection IDs for a certain pass ID then the other end cannot open this path so you have an implicit control about how much pathes can be opened or not basically what Max pass really controls is how many connection ID the I can send but if you put that too loose I mean if I send you a million connection ID your memory is going to take a heat okay should we move on to Martin so I'm a little confused now um so so Christians what I read in the document was very unclear about what Max paths means is it is it I apply limit and they apply limit and the lower of the two is the one that's operative yes sorry Christian yes what you said oh great then maybe the draft should say that that that helps a lot by the way that that helps it kind of says it we maybe even odd split yeah Martin it kinds of says it but we have been differing on the issue and that's one of the reason M and I would very much like to conclude and say well tell us I believe we don't need to do this split now definitely I believe that not doing"
  },
  {
    "startTime": "00:26:01",
    "text": "this split would allow us to clean up the draft and make this kind of thing unambiguous but uh tell us Christian do you want to as we talking about Max pass now do we want to maybe jump to issue 332 this is the one about the active connection IDs parameter or do you want to keep that one to the end it might it might be a good idea to sit now unless someone objects because it's clearly clarifying the the issue yeah okay but Magnus is still in the que so let's keep him first so just to clarify is thees 332 help resolve this question that we're talking about now um actually I think it it helps to resolve Martin's question which ient question so maybe we can actually see if if we now say the conclusion here for this issue is we don't want to have the even odd split we can figure out if anybody objects before we move to 3c2 anybody thinks we uh still need the even odd split please jump into the queue right now okay sorry I I I I don't actually think but I wanted to say why I don't think um and this is as an individual without my ch hat on and you the video proof I don't have my my hat on um I I was a big fan of the the even odd split um when we kind of talked about it back at Melbourne uh sorry Brisbane um because as someone more familiar with how stream IDs work and all of those things um it it seemed more natural to carry over that design what I'm hearing here is actually it opens up even more questions and complexity some of that complexity we can design for right and we can write all of the text that we need but adding more text worries me um"
  },
  {
    "startTime": "00:28:03",
    "text": "General um because it's it adds more um interrupt potential areas of things going wrong so I'm I'm being convinced that we should keep things simple because I'm not nor am I hearing a compelling use case for making things more complicated and again that always worries me yeah I think we all in the same boat that we thought this is a smart idea and then figured out it's more compli than we we thought um Michael Ericson is in the queue yes I've already written an entry in the discussion for the is ISU but I think if we go for so initiated path then we should split the path into even and odd or some other way but even and odd is take it straightforward from how streams are done and that seems to work pretty well on the other hand I'm not sure that we need to do this now I think if we add um Ser initiated path it will be somewhat complex like Christian says and then we can also add some kind of in that separate specification we can add the separation of the path DC to even or not and so I Believe Christian can speak for but he said it's complicated if we do even odd split if we don't do even odd split it's actually easier to allow for Ser initiated path okay it could be easier okay Martin yeah I've done it again sorry Lucas um I'm I'm not clear on where the complexities are on on this one U because the the cases that I'm concerned about most here are those ones where um you've got some amount of path IDs available to you and one or other side decides to spend them in in some fashion and that causes them to be I guess bound to"
  },
  {
    "startTime": "00:30:00",
    "text": "a certain set of paths or or what have you and then they're not usable to the other side that's always a possibility here particularly when you talk about um the the server being constrained in how it operates if the if the client can migrate one of those paths then then maybe it doesn't really matter where the path IDs get allocated because the client can just steer them wherever it wants to wants them to go but if the server is is kind of stuck with whatever the client chooses and it doesn't like what the client has chosen then um it it could be difficult so have we work through all of those scenarios to to everyone's satisfaction I'm not sure that I've I'm I'm hearing that in this discussion although I've followed all the other ones so far so I mean I said initially that some of the things are of the issues are a little bit interconnected I think this is where it is but um just to clarify are you talking about generally opening server initiated passes or are you talking about the I'm just talking about General model of how so you you've got a a finite number of path IDs that both both sides have agreed on on having and how those are allocated whether or not the server is initiating them or not and okay so we have in the cas where the is the only one this then it's not such a big deal because then the client has essentially complete control over these things but if the server's got the ability to say close off paths or create new paths um then both sides then have the ability to deny the other one access to particular path IDs in in sort of interesting and potentially destructive ways okay so we have more um issues on that but let me just quickly answer that one so the the P the point with multi pass is you it's multiple pathes right so you always have another pass so you know if somebody doesn't want to open a second person and now there's a loop then um then you don't have another pass you still have only the one pass and you know you should just in the food and you can't have another P so it's like it doesn't break completely and it's really"
  },
  {
    "startTime": "00:32:02",
    "text": "a decision on each side to say you know I you know I support multi pass but I really just want to use two passes and if you want to use more passes you can't have it because that's my decision and so I can't allow for it right and like even if you support multi pass you can say I only want to support One path and I don't allow you to open more pathes because that's my strategy um and it doesn't break it and the other point you can do is you can always if you're unhappy with where you are you can always close a path and then open another path so and of course the other one can then say no I don't want this I close pass or whatever but you know it's just like it's just the additional pathes you have you still should have one working path somewhere so you can of course develop very dumb strategies and put yourself into the corner but you know that's your own fault but again we have more discussion on on C allocation later as well because it definitely needs clarification in the draft too avoid the most dumbest cases okay um Lucas do you know if we have a conclusion on this issue now um I see Michael in the cube I don't know if that was sorry no that's linger last since last time so hav myself thanks okay um obviously I'm a solo chair here M scheduling conflicts which is unfortunate but I would say what what I'm hearing is that there is agreement we should make a decision so we can move on and that we there's there's probably not new information that we can go and gather to bring to help us resolve this we have different opinions but that um there's seems a stronger leaning towards not doing anything right now um there's no strong use cases that people have the server chosen some of the proponents of the the this having these odd even path IDs or speciic path idas uh uh are happy to live without them um and as long as"
  },
  {
    "startTime": "00:34:02",
    "text": "some of the other criteria that they have um and and if if we go for this you know single space as Martin just put in the chat and we discover that there are issues then we will we revisit the discussion of not doing the split and and we'll do it if we really have to um and some of that might come with implementation experience Etc but but for now in order to keep progress we're we're just not going to do this that that's what I'm hearing as a chair um and I will reflect into the notes on on this issue on the GitHub okay so um I believe that means we will then after the meeting close this issue with no actions I will take that to the list um so that we give people opportunity not not everyone could make this meeting scheduling is really hard because of our wonderful uh diverse locations of the authors and um interested parties um so yeah we'll we'll effectively after this call send an email to the list of all of the items from from the meeting and and give people a we all to to to respond um to those things and then we can start to close things out definitely yes I just want to say there is another old issue which is I don't know the number let me try to find it quickly about allowing server initiated passes it's really one of the early ones we had um issue sorry yeah so this is the issue number 47 it's really old so this is the issue about allowing server initiated pathes so um even if we close this issue now you can still have discussion about server initiated pathes there okay um"
  },
  {
    "startTime": "00:36:07",
    "text": "okay um yeah we don't need to discuss it now we can leave that open Okay Christian we are supposed to see luuka scream but it's also just showing the issues so you can just look at the issues yourself um let's quickly jump to issue 332 because hopefully or maybe this answers some of Martin's questions okay um this one uh is seems like a small change but it's a little bit of a fundamental issue from my point of view um and I think we need to discuss it at some point so there is this parameter called active connection IDs which limits in RFC 9000 limits the number of connection IDs the um endpoint can issue to you um the purpose of this is not to like overload you with like 1 million connection IDs and you have to store them somewhere and like use a lot of memory um totally makes sense also be before we go on keep in mind that like it is important to have the limit there it's not important to like have a very like tight limit because storing one connection ID isn't like that expensive it's only if you like get one million right but it probably doesn't matter that much if you get like 10 or 11 or 12 um so this parameter was changed changed in the last revision with the explicit connection ID to now apply per path that means as long as you don't have a limit on the number of passes you again could like issue an infinite number of connection IDs because you can just create an infinite number of pass IDs um however so then we introduce the max pass ID to also limit the number of path IDs however I really wonder if that is needed at all because the reason the point is really to control the one resource that takes up your memory which is the connection ID as long as you have"
  },
  {
    "startTime": "00:38:01",
    "text": "a connection ID for a pass ID and you didn't open the pass yet you don't have any additional State the only thing you need to store is the connection ID only at the point of time where you actually open the pass you will store have to store a lot of additional state but as long as the pass is not open you only have to have to store the connection ID together with pass ID of course but um you know that's the resource you really want to control here the way to control the number of active passes is actually now easy because we use the same pass ID on both sides so only if both endpoints issue path IDs for like issue pass IDs for the same path ID you can open a pass so you can always by issuing um connection IDs or not issuing connection IDs for a certain pass ID you can control how many passes can be opened in total so if we take the limit of active connection IDs back to being Global for the whole connection there's actually no need to even single how many passes you want the other to open you can just control it implicit by issuing not more path IDs together with your connection IDs um again this we we started discussing that you need a good strategy to not end up in a situation where like one endpoint issues path IDs number whatever three and four and the other one issues five and six and then you can never open a new pass but um and you we have to we have to say more about this in the in the draft there's very there's too little information about this in the draft at the moment but on the on the one hand like if you shoot yourself in the foot and you do a stupid thing then it you know it doesn't work um but you don't have like a memory leak or anything like that so um and we we have a separate discussion on on allocation strategy again which we need to clarify but maybe we need to decide this thing first before we can go on with that discussion Martin"
  },
  {
    "startTime": "00:40:02",
    "text": "so I already put this in the chat so um I I've heard a couple of times uh that you can have a path available but you you don't have the connection IDs and so you effectively can't use that path and um I I I haven't thought deeply about this this is just a just an idea but this sounds like this situation sounds more like a bug to me than a feature so I'm wondering if we should do something similar to what we do with the server preferred address where if you if um the server issues um this or sends this transport parameter and allows migration to a server preferred address uh it has to send um one connection ID and the stess reset token um um in in that transport parameter so um the the analogy here would be if if I opening A New Path uh can we have a frame um Can can we have the encoding such that you have to issue a new connection ID for that path as well so you um I'm not sure I fully understand your proposal so the way if you want to open a new pass the way this works is you cannot open a pass with your the other end didn't provide you a connection ID that is or didn't provide you any connection ID with an unused pass ID um so now if you for example you got one connection ID with an unused pass idea from the other Pier you can effectively open a pass but only if you also have issued a connection ID for the same pass ID so it's your local decision to say oh before I can open this pass I didn't issue a connection ID to the other to other end yet but I can first issue the connection ID and then just open my pass and I can do it uh yeah I I I can't tell you exactly"
  },
  {
    "startTime": "00:42:02",
    "text": "what the attack would be but it it seems it seems like having the situation where I can issue New Path and these path can't be used unless I do something else as well um that seems Seems complicated yeah but that's already where we are because you really need both end points to issue connection IDs for the same pass ID before you can open a path I believe so Martin we have to coordinate here uh who who gets to speak uh so I kind of like mutton's idea here um only because uh it means that when you when you create a new path there's something deliberate in that and it like like he said the the um analogy to the preferred address is quite a good one it says here I would like to increase the path count by one to to whatever and here's a connection ID the problem with this I think is once we get into the sort of frame semantics and Logistics of of the situation you can't say increase the path the path limit by one in a frame type you have to say this is path ID blah and here's a connection ID for it and here's a stateless reset token and all those sorts of things um which I think is probably better in Balance but um leads to to weird sort of complexity so so if your if your path limit is up to three and you want to issue number four um you also have to admit the possibility that five might arrive before four does and so you have to deal with the ordering out of order arrival of those those frames I'm not sure than whether it's a"
  },
  {
    "startTime": "00:44:00",
    "text": "anything more than an interesting idea but the idea that you can say Max paths is whatever it was plus 10 and then have those 10 New Paths be completely unusable until youve sent a whole bunch of um new connection ID frames is is a bit strange to me I would I would have I would have said that the multipath new connection ID frame would be sufficient to create those in fact again the problem is you need are you currently you need both end points issuing connection IDs for the same path ID correct are you proposing to change that but uh if if your suggestion is that the um that there's a global limit on the number of connection IDs that you retain and then um each each endpoint gets to choose how the those connection IDs are allocated to paths and may do so in a suboptimal fashion but we'll have to deal with that um maybe you have to have anyway um but if you only open A New Path by sending a new connection ID on that path and there's no Max paths um frame that sort of works as well that's what do anything in that in that case yes exactly that's what I'm proposing here I'm saying if we if we keep the limit of connection at these connection we don't need Max path that might work out okay and that's M's concern I think as well first let me explain why I I have some bad feeling in the back of my neck when I hear this discussion we have a knock in this working group on trying do these things one way go the way into exploring the"
  },
  {
    "startTime": "00:46:00",
    "text": "way to do that thing then saying hey no we should not use the Cs and the connection last number of CID we just wait maybe six months finding the other way and we have the other way now and and I'm hearing say yeah but that other way is not perfect maybe we should try some yet another way and uh let's be clear each time we make a decision like that we delay the production of the result by six months so H when you when you are doing something like that you really have to wait I mean is it something that is important enough that we delay the standard by six months so I mean I totally I I share the concern I feel with this issue we because we changed so many things with the explicit past ID we changed one thing too much here right and maybe nobody realized like we made it more complicated than it needed to be and what I really want to make sure is that we consider this carefully now make a decision and then like have the decision and never with it again right so what you are discussing basically the other model that Martin is inting hat and Martin as well is saying okay the Cs are not in fact created attached to a pass we don't we don't do all these multi-pass new CID thing Etc at all what we do is that we have during the past challenge we are going to say I use that c and indeed you do because you have to pick one and then you say and by the way the pass ID for that pass that I'm creating will be this and and here we can have indeed split or"
  },
  {
    "startTime": "00:48:04",
    "text": "whatever but and and the other and you have also to guarantee that there is another pass ID aail and another C available in the past challenge so basically we would bite something that we have been uh looking at for at least five years that says that when we do a past challenge we have to attach a pass a new CID to that pass challenge so that we guarantee that the other guy has a CID and we also have to now if we don't have the pass ID I mean the CID is attached to a pass ID then we need to have a choice of the CID as part of the P Challenge and if we do that uh I would agree that it is probably better to have a split of pass ID being there's a sver pass ID and a client pass ID and and everything as those two things which creates I mean it's on one hand it does simplify the management of pass on the other hand it has cascading complexity when you are doing things like abandon a pass I mean when you abandon a pass what is the ID you are using can use the S ID the client ID ether one both and the same for all kind of stuff and when you are que well basically that's it it also make if the the connection IDs are not attached to a pass explicitly then it makes things like distinguishing between not traversal and and pass um connection migration it makes that more difficult so it's a balloon I mean if we if we push complexity one way it pops up the other way and that's why I am worried I"
  },
  {
    "startTime": "00:50:00",
    "text": "mean it's one of those six months of delay things before we say oops it was not that yeah uh so okay so I'm so you're commenting on Martin's proposal not on this issue we have on the screen right now about the actor I was yes was going I mean changing that right now yeah yeah I'm absolutely sharing your concern and especially what you said right now this issue to distinguish between a new person and a p migration event that was exactly the issue we've been trying to solve with the expc path ID right so if we create if we change anything and have this issue again then that doesn't make any sense we do solve it now uh on the other hand uh asking that connection ID is always bundled with a past challenge that's something that we can do it would solve Martin's issue um Yan my yeah hi um actually actually I think it's better that uh the actually uh the active connectional ID limit need to be prepared if we want to insist on the EXP explicit passid proposal uh actually we have already discuss this Rao in the pr 292 and and I'd like to explain a little bit more here uh the whole experience P ID design required that the C sequence number to be generated under perp pass instead of Genera for the Hulk connetion in IFC 9,000 and also the rep retire prior to field is also used for purpose as part of the corresponding mechanism and the C design is is that able to work the the transport active uh active connectional ID"
  },
  {
    "startTime": "00:52:00",
    "text": "limit it actually describe the limit of active connection IDs for the connection in I isol and we transmit it for purpose as we change the C location for purpose uh if it is still for the whole connection there could be terrible situations that end points use too much Cs on the previous passes and they don't have enough cids for creating the new pass it could cause the CID allocation strategy to be complicated for implementations and uh also we could set the limit as the active connection ID limit per Pass Plus the pass number but it will be easy for attackers to generate more IDs under one single pass and uh try to force the PE to allocate more necessary memory and it's kind of lot like a attack scenario so I I think for conclusion it's easy and clear to use the active connection ID limit for per pass so just to clarify I don't so if you have a connection ID limit per path I don't think there's an attack here because it really limits the maximum con connection IDs per path right you can't have more than that so um it's it's rather the opposite like if you if you allow connection IDs per pass not per connection then you might have end up with more connection IDs you wanted I also want to comment on allocation strategy so we do have to clarify the allocation strategy it's not clear no matter what we do on this issue and um and you don't have to tightly control the active connection ID limit right so it's really important to have your limit but for example if you say I personally on my side I don't want to have more than five active passes at the same time you"
  },
  {
    "startTime": "00:54:01",
    "text": "should set your active connection ID limit to at least 10 so you can allow migration on each of your five paths um but you can also set it to like 20 or 30 or whatever because it's not like a huge amount of additional memory it's it's just important to control it if you want to be on the safe site the the way how you control the active number of passes is by you not issuing more pass IDs than you want to use so I believe the the CES is is empty I believe the discussion and I don't follow it super tightly on the chat is like drifting away in a different direction so okay Magnus so I wonder if Martin Thompson isn't on to something in the chat there around the configuration are you certain that you will not have seeds that are need to be created specifically to match one entry point through your network to match one what sorry to match I mean saying if you have one address at the interface and address Etc which for example is behind the load balance and you need to fulfill the load balance in semantics then those seeds might only work through that interface while on another interface you can have another structure for sits yes this this this issue we're looking at right now it's not it's not changing that um connection IDs are allocated per path it's just changing the the limit that is singled as a transfer perameter at the beginning to be for the whole connection and not per pass but the connection ID itself will be issued PR and really the the active connection ID limit is not a parameter that should help you help your allocation strategy it's really just a parameter that should limit your memory use and I think that's"
  },
  {
    "startTime": "00:56:01",
    "text": "a purpose we should maintain but Christian is in the queue yeah mag point is correct I mean there are cases where you want to connect to create a new pass and say and for that new pass please use exactly this connection ID because that's a road balancer issue okay but and that that goes towards the same point we have been hinting at is that when you issue a pass challenge you probably want to select the pass ID the connection ID and ifo Factor the pass ID on which you want to receive con that pass Mar yeah just have to wait for the ball here um so I think this is right I think Christian entirely correct that when you um when you challenge along a particular path it it really makes sense to be able to say I'm challenging here's all the ways in which you you respond along this path such that the response will get back to me in a sensible fashion that's I I think very sensible the problem that I have with that particular Arrangement and the reason that I mentioned this thing and I apologize for diverging a little bit from the the core issue here but I think it we'll come back to it is that you have to pick a connection ID to send that path challenge with and you have no idea uh about how that path how that connection ID relates to the address that you're sending to or the address that you're coming from and so um I suspect that there are scenarios in which we will need to be able to say um talk about adding addresses to things and having uh a set of path IDs or connection IDs"
  },
  {
    "startTime": "00:58:00",
    "text": "bound to those addresses um rather than just having a a bucket of them I'm actually I'm not sure I see this use case because if you issue a connection ID no matter for so I'm not sure I understand the issue because if you're issuing connection ID no matter for what path then you have to tell your lord B balancer how to handle this connection ID like you cannot just issue a connection ID and then do nothing right because this is the lens say at your end where you receive the problem here of course if sorry um the problem here is let's say that you have multiple interfaces and those those have different um routing infrastructure in front of them if you if you hand a connection ID out to the other end with no uh additional constraints on how that is used you have no way of knowing whether it'll come in through one piece of infrastructure or the other and I mean you could just issue them and and hope that the other side fix the right one and then some paths will just fail and eventually maybe you'll get get through on the on the right so you're now trying to change the design of multiperson order to make your load B balancer structure easier because you could just tell all your load balances no matter where you are what are the current connection IDs right why does it help you to tell your load M only like half of the connection IDs that you have issued the the load balance has a say about what connection IDs you you use you can't just pick a connection ID and say hey everyone this connection ID is now now me because there's always the possibility that that connection ID is in use at that load balancer and not that an another one so it's always a negotiation if you look at the quick LB draft it's always about understanding um what connection IDs are available on that path and what connection IDs are not and so I don't think you can always just get away with so you have you have this scenario you have two interfaces you have two load balances and they both issue you a connection ID you have to coordinate those load balances anyway because they"
  },
  {
    "startTime": "01:00:01",
    "text": "cannot issue the same connection ID and if you have to coordinate those load balances they could also just know what what connection EDS you have they have issued to the same server instance well there's always a possibility that I could Collide uh because I have they they each have their own conception of what that connection ID is but I'm more concerned about the the case where one load balancer gives you a connection idid but the other load balancer understands that con connection ID to route to a completely different server instance in which case that connection ID will break okay uh maybe open man isue Christian I think we are going into the really are going into the woods I I would like because Martin first that problem is not solving obviously 9000 either it is why no we solve that in a simple way saying that only the client con creates connection idas we just don't have multi not a problem no no no so basically the the scenario that to describe I mean we start from the position of the 9,000 in which only the client Crees pass okay and then you're telling me ah but I want to have several passs connected to different load balancers using different classes of connection IDs that's kind of a new problem that was not in the job definition and I I I am a bit concerned that doing that is basically opening"
  },
  {
    "startTime": "01:02:00",
    "text": "extra requirements that are not addressed in a in in 9,000 in 9,000 the server provides a bag of connection IDs to the client and the client picks whichever to create a new pass and the reason it works is that the server has only one address the client has only one address for the server and it works now if you say we have going to have several addresses for the server you have this new bag of complex coming in and I am really concerned about taking that new bag of complexity right now in the spec because it's a sure way to never convert Dam spe so and I also want to add in the worst case you know it just doesn't work in the worst case you just can't open a second pass and it's fine you have only one pass it's not like the end of the world if you design your l b structure in that way then you maybe need an extension to make it work but you can you can you can open an issue and we can have more discussion there I just would like to actually prefer to go through the issues we already have um I I put myself in the queue speaking as an individual um I'm a bit confused by some of the low balance of chat like the way we we do things is we have like a scheme and and the server that's handling the quick connection actually picks the concrete connection IDs it's using and the load balancer understands and we're not going and speaking to a load balancer and and and you could argue while it's the load balancer decided what what that scheme was or whatever like I don't really care who decided what it is um the person who owns generating the Sid and doing the management of those things is the server and if it's generating values that are going to result in the packet's not ending up to it it's broken um and this is Sooke called proprietary to how we want to root packets in our infrastructure I I"
  },
  {
    "startTime": "01:04:01",
    "text": "can't see anything like that the spec can help or say other than don't don't do it wrong um which seems pretty obvious to me it seems like a tangential issue to to what we're discussing here on 332 um allocations uh strategies for those kind of things great maybe that's something we should think about in the load balance a document or another thing or as a separate issue or a PR here that's all good text but like for the specific issue I'm I'm not necessarily seeing any consensus forming on what to do and I don't know if other people disagree with me if they do I'd like them to speak up because it would be nice to close this out and if that requires a different issue so it's clearer to people what we're trying to solve I think that would help everyone well I I think that we have kind of a consensus and that Maria is in the Mia is in the ra and the consensus is to keep what we have now I mean we we have one problem which is limit the overall number of connection ID so we don't explode the memory of a node and if you said the limit is number of parts multipli by some constant it's still limited that's that yeah so we don't we don't have problem to solve there and if we so so B basically the design we have works from that point of view and I would rather I I agree with you may there just and and Michael been the same observation that what we have does work that's not an operating problem let's skip it that way okay just double checking so for sure both works right you can either have a total connection limit connection ID limit or you can have one per path as long as you define the maximum what I'm saying is if we have the total limit we don't have to define the maximum number of passes and that makes the whole protocol more simple so you're saying it is worth the"
  },
  {
    "startTime": "01:06:01",
    "text": "effort to because like this is kind of having the max pass ideas is solving a problem that we don't need to have I feel the whole Max pass ID approach is very complicated maybe it's just like it's not clearly described but it seems like complicated and we actually don't need it that's what I'm saying so just to be I mean like I'm I can accept whatever side here just want to be clear that it's like it's not about one is working and one is not working it's about we have one which is very straightforward and the other one creates a lot of additional Machinery we wouldn't need but if you yeah yeah the the logical thing is if you don't want to limit the number of C per pass that means that you are going to not want to bind the CID to pass when they are created no that's not the conse well yes in fact you are no no no I don't think so I don't think it would change anything else in the draft the only change so let me say what the only change you would have is you don't need Max pass ID anymore and we need to give more recommendations about how to usefully send this active connection ID to a value that is not too small and we have to like discuss more about the allocation strategy but we have this is undefined at the moment anyway any way so but it wouldn't change anything else in in the draft uh I I think that I mean I have implemented the draft Michael has implemented the draft Yan May has implemented the draft and tell you it's not a problem so I don't know I I I I well I said what I wanted to say okay okay [Music]"
  },
  {
    "startTime": "01:08:02",
    "text": "um okay I am I think also my intention really about this issue was to be sure everybody understand the other option here um I think the default is to not change anything in the draft that's fine for me um but this issue and that's why we discussed the no first has some interconnection with the other discussions we will have next so as long as everybody understands the issue and the different approaches to it it's fine um let's move on okay just as a chair then having had a bit more information I'm hearing people would be okay with doing nothing and closing this with no action is that fair reflection Mia I personally would think I I would would record um the outcome of the inter room to do nothing here I would probably oh we can probably I just wanted to say I would probably like to keep it a little bit longer open to be sure that everybody understands the implication for the other issues but we can also close it for now yeah yeah I'll just put a reflection of the meeting this will be in the minutes again we'll we'll put it to the list and and anyone can can feel free I'm not going to go and close this issue immediately um in case that's your concern yeah no no but I've yeah anyway yeah I think you're right thanks yes okay um let's keep the even so we discussed this already a little bit let's keep the connection ID allocation strategy till the end because I think the more burning issue for us is actually the closing the past closing strategy and that is the main issue here is um 313 give me a second to type"
  },
  {
    "startTime": "01:10:03",
    "text": "okay so in version uh 07 there was quite a bit of confusion about what to do when to close the path I think they were a little bit contradicting or not things that didn't fit together so before the explicit pass ID the closure procedure was the following you send a pass abandon frame the pass abandon frame uh tells the other end that it should not send on the pass anymore that you're planning to tear down the pass um you then wait for three PTO um the other end may or may not send you uh a pass Banner as well it's a should uh in the draft and then after three PTO you actually send um a connection ID retirement frame for the connction ID that is used on that specific path and that we close down the path um first of all now that we have uh per pass connection IDs that means you can you cannot only retire one connection ID you have to retire all connection IDs that were issued for this path and both endpoints actually kind have to do that on both sides because we use the same connection ID on both ends so effectively you can only close the path now if both end points have retired all connection IDs that belong to this path ID um so the other alternative is a little bit to kind of change the signal that we have with path abandoned and also make kind of the retirement more implicit um specifically one thing to consider is that this model of closing a p was very much designed very similar to like closing a connection where if you close a connection you want to have a greasing period where you where you're still able to receive and send data in order to send X and like you know set down the state in a in a graceful way um"
  },
  {
    "startTime": "01:12:00",
    "text": "this is not really needed for multipass because by definition you always have another pass like if you close the last part that's a connection close but if you if you if you have another pass it means you can immediately say I want to close down the pass and I promise you to not send anything on the pass anymore because I can send everything I want on this other pass I still have and that could make things a little bit easier um what that means is I think what we want to change here is to first of all require a pass abundant from both sides so if you send a pass abandon you also want the other one to send the pass abandon and then the pass is Clos and effectively you don't need an explicit connection ID requirement because as soon as the pass Ed is closed everything has been progressed you can forget everything you know about the pass including all the connection IDs on both sides um uh maybe there are still some details that need to be worked out but I think the point is here to have a general discussion about this high level change uh and maybe Christian you want to add something because you have thought about this a lot and you have also opened the issue well the the issue was open after the interrupt in brisban and after the interrupt is brisban we we found that this business of closing the path and retiring the pass ID was kind of ambiguous and the the real point is that if you have abandon a pass you don't care about that pass you don't care so do you care enough about the past that you don't care to First about on it and then say come back and say oh by the way yes please retire this and that and that connection ID and and my my understanding is that people are lazy and if you"
  },
  {
    "startTime": "01:14:00",
    "text": "have an an operating mode in which the laziness goes to not retiring the laziness drives not doing the extra work of retiring Cs and that liness leads to a memory leak at the pier and so I would rather not have that failure mode and say if you retire a pass if you abandon a pass I mean or pass is gone I mean you you are saying I'm not going to use that anymore you're not in a halfway state of some kind of say I'm not going to use that yes you will want to have some little bit of timer because packets are in transit and all that that's it that's all so basically I am for allowing people to be lazy because they will be lazy anyhow and and if they are lazy I would like the right result to happen so actually there is maybe also something that came up in the discussion is there's actually multiple resources connected to a path right so one is the connection IDs which is actually I think the easier part but then you still for example have to remember the pass ID in order to be able to retransmit the pass abandon or to send X for this pass and whatever and then at a later point of time you can only remove the pass ID so yeah and to come to Martin's Point it'd be nice if the encoding was such that you always do the right thing so it'd be nice for example if you always bundled a final act with an abandon yeah but can you enforce that I mean you you can't actually that because you can also send abandon frames for both sides that is actually your interest that is actually your interest I mean I'm looking at uh laziness and self-interest when the parties are self-interested in not having something they lost something they receive sent"
  },
  {
    "startTime": "01:16:02",
    "text": "again because it consume their resources it it makes them run things twice Etc so it's probably okay so again we have to work out the details but on the high level I think what we have what we want to change is that you always must send a pass abundant in both directions so we have a clear signal and we don't require an a separate uh retirement frame after the closure I think that's kind of on the high level what we want to change yeah so that sounds good to me uh in the sense that um you you then have a clear agreement from both sides that I that not only am I not using it you're not using it the um the concern that I'd have then is what to do about reordered packets around those abandonment frames so packet reordering will mean that there is still a timer running uh but at the same time um it should only be reordering that is then in play at that point both sides have a clear this is we're done and uh packets that arrive after those U may or may not be handled that's fine um they could probably be declared lost successfully um if they're never acknowledged but um it does mean that the acknowledgements may have to follow other paths once both side have s s the the abandonment that seems sensible to me I don't know why why we would do anything else okay yes so this point about reordering is something we can just decide if we want to handle reordering and like have a timer or if we don't want to handle reordering and then have a little bit of loss eventually if there's a lot of reordering I think that's a detail but yes so um there's a lot of discussion and there's a lot of details to we worked out here so please read all the issue on GitHub but um so far it sounds to me we"
  },
  {
    "startTime": "01:18:02",
    "text": "should probably work on a PR for this change U Mike yeah I I think we have to have the timer because even though one side is Sy the abandon if you still have packets to trickle in they're going to generate a stateless reset that is interpreted as valid from the other side and unless the stateless reset only blows up The Path and not the connection then we have a problem um if we have a timer where you allow some time and the other side has is able to abandon the path as well which means it's no longer going to accept those stateless resets as valid then then that resolves it yeah I think you have a similar problem actually when you retire connection IDs in IR regular quick so if you get uh out of order package there you also get the state leer set back actually and the thing is when you get that back to the original sender it will realize this is not for connection ID that I still have so it must be a bogus one and and ignore it basically so you actually have the same thing you have to handle it already that's my point okay so I've been listening and and trying to scroll through some of the text on this issue there's a lot of discussion already um I think I haven't digested it I'll be honest but what I'm hearing is that there is agreement that we we should consider this issue properly and that there's something that needs to be done and that someone want well should go and write a PR um I don't know who who that person is Kristen opened the issue um I don't know if maybe the authors want to amongst themselves decide how to address this and it sounds like maybe there's some tax we can borrow from RSC 9000 and terms of design um that seems like a"
  },
  {
    "startTime": "01:20:00",
    "text": "reasonable outcome for this one Christian yeah I can definitely do do a PR on that and I said that in the chat but the statet recess is is a red hering because if you retire CID you also retire the statet recet signature so even if you do receive a stess reset you are going to ignore it because you don't have the signature for it anymore and and so uh the the the timer is useful but it's basically an optimization the timer is say we we do that so we don't send a stat reset that we don't need to send right but no no if if you have if you have retired the the connection ID you have retire the 16 bytes that create the signature for that connection ID so even if you do receive a SAT reset it's not for your connection anymore right the case I'm concerned about is when one side is sent abandon and the other one hasn't processed it yet so it doesn't when there's disagreement about whether that path is still open you have to look at basically the abandon abandons the CID that you have sent not the abandon the CID that you have received received not the CID that you have sent okay so if you send an abandon to say you're not using a path anymore and then you subsequently receive packets I think we have to mandate that timer so that you don't receive packets on that basic basically you you end up with something like the uh draining period of the connection of the connection close so basically you send your connection ID your your abandon you enter a draining"
  },
  {
    "startTime": "01:22:00",
    "text": "period for the pass that draining period stops normally when you receive the abandon from the other guy if you never received the abandon from the other guy that's a connection error me I'm going to write that in the pr and then we can discuss Mike could I ask you to review that PR as well because it seems like there's some interesting stuff going on of course yes I understand this correct well this draining period is basically saying you're waiting for the pair to ensure that it drains it packet before it's response with the path abandon from it side there's some leeway there to ensure that you have the draining time and then yeah and then you have a final timer for any last reordering or something so it's I think that will work fine okay so that that one seems pretty pretty good there's some some good discussion about specifics but I don't think we need to try and resolve that in this meeting and that we can just say Christin's going to write up a PR and everyone who cares about timers is going to deeply review it on a good short timer okay I would like to quickly um jump to issue 366 because it's slightly related um so this is should we require an explicit pass abandon after pass time out uh actually we already have this in a draft the draft and it's like maybe in the wrong place in a draft so it's hard to find we should put it somewhere else so people can find it more easily but the draft already says if you have a PassTime out you should send an abandoned frame also if you try to open to use a path ID open a pass and your path validation fails you have consumed the pass and the other end doesn't know that you have tried to use the pass and you have consumed it so you also have to send a pass abandon on a different pass on a"
  },
  {
    "startTime": "01:24:01",
    "text": "different open path um I think related also to the discussion we had right now on the closing this should be a must whenever you don't use a path ID anymore you must send an abandoned frame um and we this is I think not in the issue but also related to um pass allocation uh C allocation strategies we could even go one step further and say you can even send a pass abandoned frame for a pass that um you for example never received any CS for but you have issued CS for but in the other end you have issued cids for path ID and the other end never issued you some CS for the same pass ID so you cannot use them and then you can still abandon them and say now I want use a different one um and that is again connected to another issue sorry they are all a little bit interconnected which is issue 318 um and that issue is saying should we allocate paths in continuously basically in order and for example if you require in order and you don't receive a path ID you could still abandon it and then use the next one or whatever so this all belongs a little bit together with the path allocation strategy um and I you can you can read this issues yourself because I really want to jump to then issue number 338 but I want to say for what we kind of propose here is that you always must abandon a path ID if you don't want to use it anymore it should not be assured it should be a must and we also want to recommend to use path IDs in order because these things together then hopefully simplify our CID allocation strategy which is issue 338 um okay let's see if there are there"
  },
  {
    "startTime": "01:26:03",
    "text": "are comments Magnus oh are you okay yanai yeah uh actually I support that there is a must for for this kind of situation because and points might have different Idol timeout threshold but the P abandon frame would always give a clear signal that the P close the past without any ambitious yep um yes so with that I would actually lookas like to jump to issue 338 sure let me type okay so this issue is what we discussed a little bit here and there already is how can we ensure that you can actually you know do the thing you want to do you can open a pass you have the right pass IDs and and uh you don't have issued a lot of unused path IDs and C IDs or whatever because the situation here could be um one endpoint issues path connection IDs for path three and four and the other endpoint issues connection IDs for path five and six and then you can never open a pass because they're just not the right connection pass IDs available that fit together um we can probably never fully resolve this solution like if you if you apply because it's really not in possible so if you apply a stupid strategy you might just shoot yourself in the foot but we can try to do a"
  },
  {
    "startTime": "01:28:01",
    "text": "couple of things to make this easier and better and so one thing we want to um recommend here I think is that each end points opens or provides the number of the minimum of the two maximum pass IDs that's announced by both um endpoint so if endpoint says one endpoint says I want to have three passes and the other endpoint say that says I want to have maximum five passes then both endpoints should provide basically pass IDs for three passes at least and you should provide the pass IDs in order so you know if currently pass um All Passes until up to pass number three are used or no if you currently use pass number zero you have a maximum of three pass IDs then both endpoints should connection IDs to issue connection IDs for pass one and two that's a recommendation again all of this can only be a recommend ation um but for example if again if you if you could also close a pass ID for some for a pass that you never have received any cids you could say you know I've never saw any cids from you for pass number one so I'm closing it right now and then we'll send you new new CS for pass number three and then we can maybe use pass number three instead so kind of this is a little bit the strategy that is proposed here and that's why this is all a little bit interconnected and I believe there's much more in the issue that you have to read that I maybe didn't mention yet Lucas you're not muted I'm not sure that's on purpose but of course sorry that's just me um I I have nothing more to to add uh please anyone join the queue if you have some comments on this issue or maybe I didn't explain it well enough so if like Christian Jay or anybody else from the offers want to say something more please do"
  },
  {
    "startTime": "01:30:04",
    "text": "so yeah questions yeah uh just to clarify a bit actually if you do not use a pass ID you still have the max pass ID that limits the the maximum number of pass ID you can have so is it a big issue actually not sure is it a a strong concern in the end no the issue is I think the thing that you experienced during um during the interrupt where basically um I guess you already implemented the even o to some extent so you announced pass ID 2 and Christian wanted to use pass ID 1 in his implementation and that the end were not able to open a path right yeah yeah so to migrate this situation we want to recommend to to issue the maximum number of passes that you expect yeah and also is the pass ID is in order okay I I think I understand you mean that here you expect to use the pass with the the ID in order but if you have forance zero and two you want to use one but you do not have one and you get stuck due to that okay uh if pass id2 is available why not using it yeah so then you basically um so you you have a maximum number of passes of two let's keep it easy right you're using pass number zero already now you issue CS for pass number one and the other one issues cids for pass number two now both of you have issued CS for two pathes and you cannot open A New Path so"
  },
  {
    "startTime": "01:32:00",
    "text": "somehow you now have to retire one of the pass IDs before you can actually issue like for example you have issued pass ID one and before you can issue something for pass 82 you have to issue retire everything for pass 81 and then you can issue pass 82 okay while if you if both of you would have issued for p 81 at the beginning you know you wouldn't even have that problem yeah okay so we actually we should enforce some way that the sender should then use continuously the pass IDs so if I announce pass two I should have announce pass one in some sense it's an enforcement on the center but at receiver side you have no way of enforcing this because you may have reordering packet loss and so on yes so you can not fully enforce it but we can recommend it which we currently don't so we should like put text in there to say it's should and recommend it the only way you can like halfway enforce it is to allow closing abandoning of passes that you didn't even open basically you say I want to retire the path edies that you issued to me even so we're not having a path here because we can't use it yeah so probably we should discuss this a bit in the text I would say and would we should explain why this matters but I'm not sure there is no much more we should do in the end except that please advertise connection IDs for past IDs continuously and it yeah not much what yeah I mean it's two things it's one so like yeah so a a use them in order continuously and B I think the recomend currently the recommendation in the draft is you should at least one issue at least one unused path ID and we could change this recommendation to say you should issue pass IDs for the minimum number of both"
  },
  {
    "startTime": "01:34:02",
    "text": "of the max passes announced so you have just like a better choice of path IDs or you can even open like two passes at the same time so if you say you want to currently recommendation is just like issue at least one unused pass ID um but if you say you want to use three passes in parallel I want to use five passs in parallel the minimum of that is three so you should actually always you should actually issue like two unused pathes in addition to the one pass you're already using sorry I'm not explaining this well no no I I I just mess up with my brother uh no uh just that if both pass if both end points advertise a maximum faity of two let's say you have 0 one two and both say two and and the client decide to create three pass on 012 how can you provide an additional new pass ID I'm not sure to get this because youed you yeah yeah so let's see let's say sorry I forgot something let's say you only have one pass open okay have one pass and now both of the endpoints announce let's say a three then currently we're saying you should just like add at least provide one more pass idid that's unused and now we could change this to say provide two more pass ID that are unused because in total you want to have three so you should provide all the passes right away and that gives you more choice in which pass to pick yeah but you need to keep in the limits of the max pass ID yes you need to keep the limit of the max pass so it's like it's a minimum of the two Max pass announced by both of the ends but then you should issue pass IDs for for this number of pathes instead of just one additional one if it's if the Max passow yes yeah but that's actually somewhat implicitly stated by the max pass"
  },
  {
    "startTime": "01:36:02",
    "text": "ID so but as I said what we're currently saying is we recommend to like provide one unused pass ID if it's allowed and so we would change his recommendation to provide more unus IDs up to the max limit okay but then we we need to enforce and to clearly state that we we should do that but only if we are allowed by the limits yes I think that's like that's absolutely that's already if you go above the limit then you have a past failure and you close the connection so yes you cannot do that so that's the part that uh okay sorry yes but okay for the rest I'm fine okay okay I will leave the floor to yeah ju just saying that if we make a practical recommendation that people do things in order it will facilitate interop it will avoid people having crazy ID that I I just only want to use prime numbers on my cids or or whatever and doesn't cost anything so let's just do that because help people keep in the past that we know works well it's a good thing and otherwise then we have mitigating strategy like abandoning the pass that you don't use Etc that's let's do it yeah and also and that okay that's one of the questions the other one is like issuing passes for the max number of allowed passes or just issuing one pass ID for like one additional pass no we we discussed that already M yes we should recommend it okay you cannot enforce it because packet get lost whatever but yeah we should we should recommend it yeah okay okay so as chair I'm saying that there's interest in in writing better recommendations to improve interoperability which seems a bit like an no-brainer we obviously constrained with exactly what we can say but that um we should do this um and somebody's"
  },
  {
    "startTime": "01:38:00",
    "text": "going to write a PR is there somebody who wants to volunteer to hold the pen on that or are you going to just resolve it as an author group before the next draft I think I can probably give it a try I can also make a a p soling this if you want okay that works as well okay cool um okay as I'm kind of moderating this year I want to capture this and go back to 332 for one second which is the one about the active connection ID limits Okay so um and this goes all the way back to the very beginning of our discussion today I just want to make sure that everybody understands that having the max pass so if you if you don't Define the connection ID limit per pass but but per connection you don't need the max path value you don't need to Signal the max path value you I think you can still use the same connection ID allocation strategy that we just defined right now it's just you do have to do a little bit of guessing or like you just have to you don't know the max pass number from the other end you just know your own Max pass number and you can issue passes for that maximum number if you're not super stupid and said like it's too small value to the active connection ID like I think everything will find in the same um connection ID allocation strategy will work so I don't think this is more complicated so the one thing I want to say here is that if we have the max path parameter we have the max path frame and we also have the max path transport parameter which means if we want to allow server initiated passes we need a new transport parameter for the max passes of the server to also announ that"
  },
  {
    "startTime": "01:40:01",
    "text": "site if we don't have the max path transport parameter we actually don't need a new transport parameter we can just like allow server initi rated passes without any change here without any overhead um I just wanted to come back to that one because we discussed about this at the very beginning I want to make sure that people understand this implication Michael yeah I Al thinking now we're using the minimum of the two Max Parts can't you just use like the Stream So Max streams is in in One Direction only it says how many streams are you allowed to connect to me or set up in my direction and then and then the max streams in another Direction says how many paths are so you basically separate them that doesn't work because then you kind of can send and force an unlimited number of connection IDs passes on the other end yeah okay you can if you signal connection ID you mean for MH for more Pro and yeah because you're setting up State yeah that's yeah that's a good reason so just a clarification question may we we we I posted a comment that we would um issue a consensus call to close this issue with no action is is anything you're saying now questioning that do the outcome um so yes so what I'm saying is basically there is a connection here to the question if do we allow server initiated passes which is a question that is still open we didn't put on the agenda here which we have't separate issue for for a long time and probably we need still some discussion for it right so that is connected to the question do we allow server initiated um passes um and if"
  },
  {
    "startTime": "01:42:03",
    "text": "we if we keep the connection ID per pass limit then having Ser U initiated passes means we need a new transfer parameter which means we could like equally well do it in extension we don't have to decide now if we decide that the active connection ID limit is per connection we don't need a new transport parameter for Server initiated pathes and we should probably decide right now if we want it or not that's not sorry I'm like that that is that is not that is that is not true M that is that is not true okay you could have a global limit on connection ID and then you just have to decide with some kind of TI breaking which one gets to use what that's what I'm saying if you have a global limit on connection ID it's fine but if you have it's also it's also true if you have a global limit on pass IDs if you have a global limit on path IDs it's also okay but then okay but then that's is that okay is that what we have right now is this the global limit on pass ID yeah that's what we have okay it's a global limit negotiated by the two parties okay yeah yeah no you're actually right this was like yeah you're right this was connected to the even odds spit where it would be more complicated but yeah if we don't have that yes you're right okay okay sorry I'm wrong you're right no I think I think this is showing that you know we we do need to reflect even more changes into the document so that we're all like there's there's loads of great details there but they they are potentially a bit confusing and you guys were the authors were holding so many potential you know variants in in their heads to help us get over the the issue"
  },
  {
    "startTime": "01:44:00",
    "text": "that we resolved on path IDs at at Brisbane this is kind of the Fallout from from that and getting us all on the same Baseline so no I think I I'm seeing a clear way people need to go away and make some PRS and I think you know as I say the consensus call on the list will will help do this stuff but it's becoming a lot more clear to me so I I really appreciate people's time at this inter um to to actually uh have some breathing space to talk about these things without trying to rush it all in half an hour or so um with that said were there were there more issues on your list Maria or if we no I think this is the issues you really wanted to discuss we have a few more design issues but we believe these are less kind of burning and less fundamental and less interconnected so these are much smaller we can make a decision and move on so these are the big ones yeah um because i' I'd given us three hours to to get through things purely because I didn't want to rush it through um we're at 1 hour and 45 minutes uh I no one ever complains if I finish meetings early um I think we could potentially look at wrapping up now unless we did want to go and pick through some other topics I don't want to put you on the spot because I know sometimes people like to prepare stuff and there's no point wasting time if we're not actually prepared to have a discussion about things we'll just be throwing opinions out so um yeah i' I'd be happy to start wrapping stuff up but I'm Keen to hear from others if if they object strongly to finishing early um I mean I think you will probably summarize this as a chair on the list anyway but um maybe I can take two minutes to summarize what I understood um on the issues does it make sense yeah you go for it okay um so we discussed six issues today more or less um the first one was about the even odd split and we basically say the"
  },
  {
    "startTime": "01:46:02",
    "text": "current proposal is to not do anything here right now and close the issue um then we discuss the issue that we still have at the Scream 3 spe2 again the proposal is to not do anything here and close the issue um then we discussed about pass closure and this was was issue 313 and we decided to um change the closeup Pro procedure and Christian is going to work on a PR for that we also briefly discussed issue 366 which is about um requiring pass abandoned frames also on timeout and probably also on past failure and requiring means changing the should to a must that was didn't was wasn't discussed much but I think there was agreement and it will be pass of part of the same PR that Christian is probably working on then we um very briefly discussed 3118 which is the question about pass ID should be if pass ID should be continuous I think there was also a clear yes because that will probably make pass allocation easier and then there is the whole issue which is 338 about the path allocation strategy and giving more recommendations about to do the right thing where Quenton will work on a PR last chance to disagree here or on the maining list actually I'm I'm not seeing anything and I'm I'm I'm pretty happy with how things have gone um so yeah thank thank you very much everyone um and and apologies for any datetime um mistakes and late binding me Echo links that W put places uh thank you very much to our note takers as well um and uh yeah I think this has been good uh just in a high level question do the I presume the authors will cut a new draft before the"
  },
  {
    "startTime": "01:48:02",
    "text": "next ITF meeting is that a fair assumption Mia yes I think that's absolutely the plan yes okay that sounds good also before the next ITF meeting I think we want to really have another interrupt so hopefully we can have the draft early on uh so you're saying an interrupt Target for that next draft for the next draft yes okay okay that sounds that sounds good to me um I'll confer with my co-chair Matt after and we'll we'll write up an email and get that sent out um in the next couple of days just to reflect uh this meeting okay thank you thank you bye"
  }
]
