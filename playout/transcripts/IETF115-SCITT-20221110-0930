[
  {
    "startTime": "00:00:10",
    "text": "at all ah yeah that's that's hi everyone let's get started um welcome to this kid working group meeting so obviously our first meeting my name is hanis jupinik and this is from John Gita we are your new chairs for this working group um our first meeting so happy to see you all here note well you've seen that already obviously because we're in the middle of the week Roman uh good morning everyone it's exciting to have our first kickoff meeting I just wanted to publicly say you know as you just did your introduction harness and John thank you for your willingness to serve to kind of get us started so again very much appreciate it yeah thanks Roman [Applause] as you've seen we have a pretty full agenda we we will start with a problem statement document kind of the problem statement assuming that skit uh hasn't been done yet so pre-skit type of thing then we talk about um the use case is same as well yogesh is going to talk about those then we switch into how does the solution look like with an architecture using skit uh we have a presentation about this kit receipts another document uh if you click at the slide you get to the documents themselves uh there's a hackathon report which explains how uh"
  },
  {
    "startTime": "00:02:03",
    "text": "you would use kit uh technology to actually solve some of those use cases and then we have some some time left to for any questions that you may have is there any agenda patching requests haven't received any so I don't see anyone jumping to the microphone and if you go to the microphone please use the QR code to add yourself to the queue okay uh yeah we thank Roman already uh thank you again for getting the working group scheduled so quickly and one administrative thing so we've had regular conference calls um we are going to continue those and I will send out the or we will send out the doodle poll to confirm that the date that we had used or that which was a Monday and the first day called that that is actually good for everyone um but we would switch to using IDF tools and the whole IDF Machinery so that we don't have to use um sort of company individual company sort of mechanisms here okay enough said let's have the first speaker you better do it hey I'm Ori Steele I'm uh here to present the problem statement um we thought we'd start with a quote this time about what Supply chains are and I'm going to read the quote for you all a supply chain is a network of individuals and companies who are involved in creating a product delivering it to the consumer links on the chain begin with the producers of the raw materials and end when the van delivers the finished product to the end user"
  },
  {
    "startTime": "00:04:00",
    "text": "next slide in the context of uh software we're interested in software Supply chains so maybe the van part of the last piece is the only major difference software is an inherent part of everyday digitally enabled life from smartphones to iot Data Centers widely discussed tax on the software supply chain have helped raise awareness of risks many of the other vulnerabilities highlight the need for greater visibility into the supply chain Integrity transparency and Trust to make an informed decision just to be you know concrete about this one use case is a software supply chain focused on software bill of materials also known as s-bombs as evidence to acclaim that's it so um transparency and Trust transparency does not prevent me are you good um transparency does not prevent dishonest or compromised issuers but it holds them accountable any artifact no I didn't put this community remix I clicked the wrong button and the internet is down further evidence of the delicacy of software"
  },
  {
    "startTime": "00:06:11",
    "text": "and we're back so any artifact that may be used to Target a particular user that checks for receipts must have been recorded in the tamper-proof registry and will be subject to scrutiny scrutiny and auditing by other parties what is what does this sentence mean what are we trying to get at here the important part is that when you ask about transparency you want the answer to that question to be answered consistently so if I ask about a particular artifact today and my friend Mike Pro Rock in the back asks that same question in a few seconds he should get a similar answer if nothing has changed so it's important that the that entity providing that transparency not the be dishonest or be choosing how they answer those kinds of questions and so we're interested in creating transparency and Trust in that sense and uh skit um an architecture for trustworthy and transparent digital Supply chains is a link available on this slide next all right and with that I'll introduce my colleague yogesh deshpandi to present software supply chain use cases hello good morning everyone I hope you have all have a good morning and enjoying the session so far and I want to keep you all all engaged thank you already for a great great introduction of the problem statement so I hope everyone is clear about the problem we faced the challenge we faced in the industry today so what I'm going to present here is going specifically a little bit more in detail in the software use case"
  },
  {
    "startTime": "00:08:01",
    "text": "to explain you how this problem gets manifested in a much more clear way rather than little bit on the high level I'm going to go in the Deep little bit deep here so next slide please so as you can see here there is uh the software supply chain is really complex um system you have multiple software producers like the operating systems be it Microsoft Ubuntu and then you have the component vendors who are generating the chips or the firmware's on top of it and then you have the package managers like Pi Pi or any software and then finally there is much other open source code or any proprietary code that gets goes to the integrator who then basically picks and chooses these components to produce integrated builds uh and that to have multiple flavors because different compilations which has different features generate multiple products multiple Integrated Solutions out of the same code base and then eventually it goes to different companies which then load those software onto the devices and the device gets deployed into the field and gets to the hands of the users like we have laptops mobile phones all running comp complicated software and this is the end user who is ultimately using that software so this this whole ecosystem is extremely complex and how do you secure that this supply chain is a challenge in itself so that's how let's go to the next slide so right now today we see integrator has a serious problem it each time it is sourcing it is not having a consistent and coherent information at the state of the each published components and there is no standard way for integrator to query or receive even if we have software bill of materials as as we discussed just now like s-bomb to be"
  },
  {
    "startTime": "00:10:01",
    "text": "getting delivered we don't know how is it the right guy who is shipping me the S form is can can I fully trust him can I fully identify his trustworthiness is the supplied component clean of any unexpected or any problems like vulnerabilities or anything or how do I know that it has not been an accepted unexpectedly modified or or suddenly changed because somebody hacked it and somebody modified it so how does these kind of complex situations and problems the integrator facing today how can he deal with it so we we start with a specific uh scenario we have built here to highlight the problem and explain you and I hope we we all understand the problem and the scale of the problem so here on the left we have an operating system producer be it any anything as I mentioned earlier Microsoft Linux or any operating system producer generates an executable and delivers it to the device integrator to integrate it into its system and it has shipped this binary for device integrator and on a one-to-one channel so next slide please now the device integrator as we saw in the first slide he has taken other bits of components the Box the pink box could not just be one component but again a series of components coming from other places and he has done generated an integrated device software and it has been given to the device distributor for Distributing it by loading it into the on the device now the device device distributor has the device ready it has the software deployed and the user is using that device and suddenly user faces a problem he he finds something problematic with the software he has some vulnerability or he has running some he's running some scan or something and suddenly something pops up he's scared where exactly in"
  },
  {
    "startTime": "00:12:01",
    "text": "which software component is a problem he doesn't understand anything because he's at the end of the day he's end user he's just a user of a software he's not doesn't understand so you go back to the distributor here and here it is everybody's this this slide just flows shows the flow that the end user is complaining to the distributor now the distributor is not much knowledgeable about things so he goes to the device integrator complaining that here is some problem how do I fix it where is the solution the device integrator probably tries to do some kind of a root cause analysis and is not sure though but he hopes to identify and believes that it's the OS producers whose binary or the executable he has received has something problematic that's why this chaos has created has been created but that just a belief that just a kind of a a kind of assumption on here Happening Here so next slide now now here we are in a stuck State basically because everybody is in a limbo a situation where nobody understands what's going on here the uh the integrator is waiting for the Os Os producer to say something about it to make a statement to say that yes there is a problem or not he wants to get an acknowledgment the OS binary producer is still investigating looking at it and there is no coherent way of understanding and shared communication between them this is next time so the deadlock continues basically what is happening here is that the operating system is operating system software producer is trying to show that it did all the steps correctly so you're just saying that look I'm willing to share you the system details how I have built this software the build enrollment the architecture I'm willing to show you everything but he's he's just stating that or he's just showing maybe maybe six months when the problem happened and"
  },
  {
    "startTime": "00:14:01",
    "text": "the time between when he produced the binary and the time when he's uh showing it is six months apart and there is he's just showing it there's no verifiable proof that what he's showing is exactly mapping to the binary which he has given because there is there there is no verifiability in the system and and who knows the operating system software producer thinks that it's the device integrator who is blaming me unnecessarily though it may be integrates integration problem in one of his software so that here there we are just kind of doing a trust and a blame game we are in a stuck situation where each one of them is just trying to play and leave the blame to others and this is this struck situation can have no clear resolution unless we have a standard means to conclude based on verification where you can verify what is happening is a problem you can identify the problem and everybody in the ecosystem can clearly identify it in a transparent Manner and we can held accountability on somebody's shoulders for stress where exactly the problem lies so going further these are the problems we think the customers also faces when he and the end user uses the the end user uses the software as well as the uh the distributor who distributes the software receives that software then it doesn't have any means to assess the risks or vulnerabilities in the binaries we distribute the system integrator has no means to assess the vulnerabilities as well as the OS binary producers doesn't have the same ecosystem in place there where they can see what software is produced what vulnerabilities they exist and when suddenly the software changes how what has changed what vulnerabilities have been fixed and there's no standard mechanisms to track this information next slide please"
  },
  {
    "startTime": "00:16:01",
    "text": "so we identified this problem and that's why we along with our colleagues in the community decided to form this excellent working group which is short formed or acronym desk kit supply chain Integrity transparency and Trust basically we are trying our efforts are towards defining set of specifications which precisely deal with the problem which I have presented you just now to introduce transparency in the ecosystem where an individual can look how the software was built he can precisely download the stuff from in a transparent Manner and verifies next slide please so this is just um the details about the working group which defines compact Integrity protected protocols supporting interoper activity between multiple Supply chains is focused on software supply chain use cases specifically but it's very much in our Focus to include software package repositories container Registries services and in the ecosystem we're trying to we would attempt to build a system which can deal with other use cases also but right now our focus is primarily on software supply chain and we work closely with an already existing ITF standard groups like cozy rats cheap and suit as well and we we learn from them and we interoperate and hopefully we uh we build a greater ecosystem with along with them so thank you everyone I think that is the problem now I would introduce my colleague Anton who would explain you the architecture of State ecosystem thank you so much thank you yogesh so no I'm going to present the current status of the architecture draft that we have produced so first on behalf of all the author of"
  },
  {
    "startTime": "00:18:00",
    "text": "the architecture I would like to thank everyone who commented on the mailing list of submitted pull requests on the GitHub for the architecture next slide please so I'm going to start with the overview of the core concept of skit and for the people who are there at itf114 you may notice that we have slightly updated some of the terminology but there is still quite a bit of controversy on some of the terms that we use to describe the concept of skit so there is still possibly some challenges coming and don't hesitate to make your position known on the many list so uh starting from the left side of the picture we have the verifier so the verifier is the person that is consuming the software artifacts and everything that we do in skits is for the benefits of the verifier so every day people that's new software and they want to know what's uh what's a bad things could happen if they use uh software or help them decide whether some software is trustworthy so the other important concept at the top is the concept of the artifact itself so this could be of course a very wide variety of things by Design we are very abstract in the architecture about what the artifact is it could be a binary package it could be a container image it could be escaped could be a git tag really anything we only um so uh the other important points is that uh we want to provide information to the verifier about the artifact and uh one of the observation is that the information about the artifact can be coming from many different kind of sources Heights so it's not necessarily only the author of The artifact or the owner or the producer of the artifacts"
  },
  {
    "startTime": "00:20:00",
    "text": "that can provide useful or meaningful information to the verifier about its trustworthiness and that's why we introduce on the right side the concept of issuer so the issuer it's any entity that can provide meaningful information about the artifacts that you use so it could be not only just the author of the Gods it can be the distributor of the code it can be even automated systems like Ci system build system that provides build reports this is very meaningful information that you can use to determine or audit the artifact that you are consuming so in general we call the information about the artifacts the statements and the definition we have of statements in the architecture is extremely Broad it's essentially any serializable information about the artifacts and what we require execute is that we want to hold issuers accountable for the statements that they make so we are going to require all issuers to sign the statement they make and we are going to standardize the formats that they use to sign this information and this is what we call a claim so that's the info the the claim It's The Sign information from the issuer and we are going to explain a bit later this climate Insurance process in the next slide the other critical concept and that's kind of the stronghold concept of skits is the idea of the registry and this is where the terminology is still a little bit controversial so initially this was called the transparency service or The Ledger Service uh now we use the registration or the transparent registry or the notary so if you prefer any of these terms um it's uh there is still a little bit of uh the children being made about what is the right way but the concepts of the of the notary it's an authority that is"
  },
  {
    "startTime": "00:22:02",
    "text": "partially trusted so the verifier is going to rely on the notary service or the transparency service to figure out information and to make sure that this information is globally consistent for all verifiers which is going to give us some of the security guarantees that we provide with kit um and the the role of the of the notary or the registry is that it's going to take claims from insurers and it's going to verify their signature and is going to register them inside the registry which is this evidence that a structure that you can use to make sure that everyone has a consistent view of the claims that have been made by the issuers and the the second thing is that we require them to produce a standardized evidence which is called receipts and the receipt is going to be able to prove to any verifier that a particular claim has been registered on this register registry service or the transparency service next slide please um Dave there was a question yeah Dave Taylor's terminology question or comment um comparing this to like the rats architecture uh and I'm looking at um and so I was listening to your description of the registry and rotary service where it says that verifies information from issuers or the entity on the left is the verifier and it doesn't use the word verify on the left side so there's a little bit of terminology confusion that says the energy that verifies isn't the verifier um yes and you mentioned the little scroll piece there you called that evidence okay which in the rats terminology means something uh in which case the verifier on the left really is a verifier in the same sense as rats is and the other one isn't really doing verify and so just ask if you would elaborate on Hank if you actually agree that the one on the left is a verifier in the same sentence as uh rats and if this is evidence and if so then say more about"
  },
  {
    "startTime": "00:24:01",
    "text": "what the registry does to verify because the verifier is the one that actually does the appraisal yes so I think to summarize your points what you're saying is that the verifier verifies the transparent claim of the receipt not the claim itself so it's a bit of an abuse in something that is a fair point uh I will as I will explain later the the claim can also be verified by the verifier it's a kind of advanced form of verification but yes I I do understand that the client terminology is a little bit problematic and of course has everything in the architecture it's still a early draft so it is possibly subject to change yeah so I guess that I'll let uh in case Hank has anything but um the it would be useful to draw comparisons in text to the rats architecture right one way to do it is to say the registry is like a rats verifier and the verifier is like a relying party yes another way to do it is to say that the registry is just a store and forward caching service maybe it checks signatures but it doesn't look at the claims or whatever and the verifier here is the verifier right both of those are potentially valid architectures and I don't know if you mean one or the other or agnostic that both are okay right and so that's kind of my questions in the terminology yeah okay basically they've said it all I think yeah so um so yes if the uh verifier looks into the claim so and into the actual statement that is signed by the issuer then it becomes more like a verifier on rats because it has to have reference values and policies about the content if it is just adjust yeah and that is that the Simplicity we provide here with transparency if it's verifying the transparent claim it becomes a signature Checker in the end because it is not necessarily required to look at any statements and to understand them so that's first of all"
  },
  {
    "startTime": "00:26:01",
    "text": "nice uh but then also we understand the claim is used now for the third time in a different way and so I I understand we understand that and and making a mapping like that will also maybe probably make us converts a a place to look at how to improve it in the end uh I just wanted to add with what um Hank has mentioned yes there is a little overlap with the terminologies between skit and rats but I think they can coexist with clear definition boundaries what an interpretation means in skit may or may not have the same interpretation in the advanced world yes and I think hopefully the next slides will explain a little bit more but we still have one person in the queue um Dan are you okay good um if you go to the microphone please uh use the tool scan the QR code and and put yourself in the queue remote participant thing can also see your name that's kind of benefit uh thank you uh dendro the atnt um I I like the architecture I'm just questioning the need for this forked uh you know verification process is it is it absolutely necessary to have a notary uh service registry where in reality you can actually pass inbound with the artifact the verification and then the second part is basically also about you know the issuer and maybe this is a bigger problem for Supply chains I'll use the the log4j example you can have five issuers in a one supply chain uh you know flow that will issue a log for Jake um you know being part of their um their components who do you trust who how do you reconciliate in the end that is exactly the same one how do we address that thank you okay yes you need to ask yourself if you want to respond I will start with the first part of the"
  },
  {
    "startTime": "00:28:01",
    "text": "question so the first part of the question is uh yeah what is kind of the role of the of the registry and can we just pass the claim directly from the issuer to the verifier so the reason that we introduced the notary is to give a stronger guarantee to the verifier that's uh essentially the whole point of skit and that's to make sure that any claim that is accepted by the verifier the issuer can be made accountable for and I will give some examples of the attacks that are prevented by using the notary uh in the in the future slides um this is saying just small editing um there's also of course the benefit of a uh um the point of Singularity provides Simplicity to a scalability and and things that might have no idea what the statement actually means so putting trust into this fog enables like billions of devices to just forward it to the policy engine for example they have nothing to know about it which isn't possible if you can't put this trust into the uh middleman yeah so so it is a for scalability and also for offline validation and I think that's a two or critical features for the audibility in the end thank you hi everybody this is Elliot um so I think there's another possibility there Dan which is I submit a claim to the registry and I get back a response and then I query the registry for the verification as the as the claim as the claimant and then I just incorporate that in my packaging and that way and that way you don't have the you don't have to go online if you don't want to but you can if you want to what's important is that first of all the trust anchors be in place so that the trust is is"
  },
  {
    "startTime": "00:30:01",
    "text": "possible and second uh as part of that there should be enough information in the verification to say here's how you can do this yourself in terms of contacting me from the registering artery so make sure that in the response yes there is a an identif an identifier a URL or a URI or something like that yeah so I suggest you know it's uh of course uh very advantageous feature of the fact that you can attach the receipt produced by the notary to your artifact or to the software so that you don't need to do any online track and that's uh as also Hank said a way to have to avoid the for the verifier to understand all of the issuers of the artifact that they consume and it's very difficult to decide whether they trust them using the semi-trusted cell party of the notary let them verify everything offline and let them apply very simple decision or policy as a verifier hi this is Brendan Morin and just to provide a Counterpoint to the uh deliver the claims with the artifact side of things I noticed that firmware was one of your use cases and if you're delivering artifacts to constrained nodes you probably don't want to deliver all of the claims with them that would actually be a terrible idea so the uh the the point there is that that means that you need somewhere to store those claims or you just lose them and this gives you a standardized way to do that sounds good I'm looking at the line I'm not my uh where's my okay sorry I didn't see the ACT come up uh Michael perock here so uh yeah I did it I think another key aspect about kind of"
  },
  {
    "startTime": "00:32:02",
    "text": "having an independent notary of some kind is the intersection of time especially post event right so if you had software deployed with some particular package that had a vulnerability unknown at the time later on that vulnerability is fixed possibly even inadvertently right you don't realize this being able to go back and backtrack after an incident to understand why when and exactly where that vulnerability existed and having that record of time and when did this exactly happen who witnessed it did were there multiple attestations about this particular item right uh you know say a third party verification Etc all in one place so I think that notion of intersection of time especially in post event is absolutely critical when going through and analyzing uh an issue yeah Eric not much I was gonna ask things around the same thing right sort of a registry notary you could just record here's a set of you know claims and I'm gonna store them I'm they're not going to disappear they're sort of handling non-repudiation right but you could also say well don't you want to keep track of what's the most recent version of that software yeah but normally you need to have a naming scheme so they can actually do that and then the question comes out do you also want to have reference to the CVS that were in that old version right so what's the actual scope of this because it could actually balloon into something very big right as opposed to just being a trusted repository and no semantics is uh we expect that uh some notaries so first of all there isn't going to be any synchronized notary for everyone so every company or every organization can operate the whole notaries and some of them as you said are going to be very sophisticated so for instance they can indeed on for advanced policies to make sure that verify your only consumed the most up-to-date version and this is a"
  },
  {
    "startTime": "00:34:00",
    "text": "something that's uh I think is in scope for some of the notaries but of course they are also going to be very very simple notaries that simply regards on the on the registry and provide this evidence persistence storage of all of the claims and that is of course much cheaper to operate so so in summary we expect that there will be many levels of complexity on the instances of notary that are created in the white uh okay weapon from Huawei I have two questions first uh I'd like to know what uh to what degree the uh the issue uh will be for example uh for for example Microsoft will deliver the OS operating system and [Music] um and well Microsoft exposed um for for example which which employee developed which code to the notary service or some kind of that and second is about here the notary service will verify the information from issuers and the verify will also do some verification I I want to know the difference between these two verifications okay so uh first otherwise the first question so the first question is uh I think actually I understand it as a privacy question right so for instance if you have an s-bomb that is for instance let's say your git history it's a very useful information but some of its maybe privacy sensitive right so yes if you have for instance the Microsoft Windows s-bomb it will have the name of every Microsoft developer that contributed good right and in some cases the question is should this information be released to everyone or not right and um in general this is essentially your choice of the notary so if you want to uh"
  },
  {
    "startTime": "00:36:02",
    "text": "only partially reveal some of this information you have essentially control over what other claims in the registry that can be publicly accessed or you can introduce some Access Control to the rgc if you want to mitigate some of these concerns and as for the second question the question is the difference between the check applied at the notary versus the checks applied at the verifier so this is explained in the next three slides so please bear with me I will explain it okay thank you very much we had okay the other person dropped out of the queue but uh let's keep on going yep peace thank you so yes so as I said in the previous slide there are three important flaws of uh processes in skits so the first one is claim issuance the second one is uh validation of claims at the notary and the third one is verification verification of receipts at the verifier so I'm going to start with the first one how do you actually issue a claim so um it's it has some so as I said previously the claim contains a statement and uh skits doesn't really uh assume anything about the format of your statements you just needs to be able to serialize it into some kind of byte string and it could use all kind of standardized or defined formats for for carrying s-bomb for instance so there are many many formats and the goal of skit is to support all of them the second piece which is also interesting and a little bit controversial is how are you going to represent the identity of the issuer right and this is where we have to make a technical choice for interoperability and uh one of the things that is specific to skits is this ID that the evidence that is produced by issuer we want it to be long-term rights which means that you want to be able to"
  },
  {
    "startTime": "00:38:00",
    "text": "go back in time and verify all dividends and one of the important requirement that we identify is separation between the long-term identity of the issuer and the short-term credential that the issue are used to sign the statement and that's why we currently decided to use uh distributed identity as the framework to represent the issue identity and our expectation is that because of the flexibility of did in terms of defining new methods this should be compatible with all kinds of identity systems including for instance pki based Onyx 509 certificates or identity system based on open educonate any kind of protocol you should be able to Define dag methods to represent the identity of a of an issuer using the ID and you should be able to associate verification Keys using the did resolution mechanism which transforms this stable identifier into sets of credentials essentially selling keys so the last point is um that there are some standard sets of informational headers that must be part of the skids envelope and so when you want to produce a claim you need to combine your serialized statements with this envelope information and currently in the current architecture we use the following mandatory field and so the most important one is the issuer so as I said the issuer must be in the current architecture did identifier that represents the long-term identity of the issuer then you have the information about the artifact so for any claim you want to know what artifacts does this claim refer to right"
  },
  {
    "startTime": "00:40:01",
    "text": "and that information is encoded in the feed header and that you also have the content type which tells you what format you use to represent your statements so if it's uh for instance spdx s-bomb then you need to put that in the content type uh you also have two additional things so kid is a mechanism to select the right key from the reserved did documents so you can have a you can change your certificates but keep your same the ID and the kid will tell you which uh which certificate to use to verify that particular signature and registration info is used to uh will be explained in a later slide next slide so then uh moving on to the registration of the claim so this is the the process that is uh done at the notary when you want to register a claim on the registry service so um so first of all the uh the person that actually submits the claim does not necessarily have to be the issuer himself it could be some other party and the reason for that is because uh sometimes you want to take a claim that has been produced by someone and you want to import it into your own skit instance right so in that sense we separate the notion of being someone registered the claim and being someone who hides the claim and so someone think is that we only require explicitly in the architecture that the claim must be authenticated which means that's the notary needs to resolve the ID of the issuer and verify the signature using the key indicated by the key ID in the claim so that is the parts that all notaries must perform and that guarantees to the verifier that if"
  },
  {
    "startTime": "00:42:01",
    "text": "they trust enough the notaries and they won't have to do this did resolution and the signature verification themselves um and the second thing is that the the notary may also apply all kind of access control for her authorization procedures for deciding whether the claim can be registered or not and that's it's not really the uh trusted part of the decision is that you have to decide for instance as a notary uh worth the issuers that you trust or what's the issue that you consider valid and as part of this process you are even possibly allowed to inspect the contents of the statement itself right so you can have a notary that looks at uh automated logs and for instance will apply some vulnerability detection or try to detect if the respawn that has been submitted contains vulnerable information and if it does it will rejects the registration and all of that the the notary has full freedom of applying any check that they want the only thing that is required in the architecture is that the notary Mass return if the claim is accepted uh a skit receipts which is as I said the proof that uh it's offline verifiable proof that the statement has been registered in the registry okay so the last flow is the verification that happens at the verifier right and uh there is a little bit of subtlety uh there that is introduced because not all the verifiers are the same so there are different levels of sophistication between the verifiers so I'm going to start with the simplest type of verifier and that's verifier that mostly we trust the notary and the idea is that we want"
  },
  {
    "startTime": "00:44:01",
    "text": "to have the easiest time for the for this type of verifiers it should be very easy right so you should be able to validate registration completely offline and using minimum information without having to even look at the statements inside the claim right and uh so for that you are just going to use the receipt validation procedure that is defined in the receipts pack and make we'll talk about that in the next session but of course uh you have some verifier that don't fully trust the notary right and um in that case they can repeat if they want to some of the checks that were applied at the notary but uh so this type of advanced verifier we call them Auditors and the purpose of the Auditors is to have effectively keep the notary honest right so if nobody cares about what the notary is doing then you don't really get a very strong property for the everyday verifier but if you have some Auditors that actually verify that the notary is checking the issue or signature properly and it's applying its registration policy properly then that essentially keeps the notary honest uh so there is also uh yes I think we covered in the question most of the points um but there is one question yes I think there is someone in the queue so just a quick clarifying question um is the notary or is the auditor replaying the whole Ledger or just relevant to some particular application um what what exactly is the auditor auditing uh-huh yes uh so uh so it's up to the auditor to decide so it's possible to audit the full Ledger of course the text can take a lot"
  },
  {
    "startTime": "00:46:02",
    "text": "of time but you can also uh partially audit in the sense that you can for instance select an issuer and only replace the registration under the claim for that particular issue or any kind of subset right so so I think part of the point that is maybe not answering your question is how do you as an auditor how do you query The Ledger and currently we have decided we are not really specifying what is a standard API for auditing or accessing the registry and that is definitely one of the open items for the working group to work on whether we so what kind of queries uh what kind of apis can be used to actually audit The Ledger that is still an open question so and it's an after-the-fact audit or does this happen in real time no no it's after all the facts okay everything is after the fact okay um or a steel just to restate the answer that was given there's sort of three ways to think about the audit process the simplest case is your auditing a specific transparent claim like one the more advanced cases all transparent claims made by partic associated with a particular issuer and the third is the entire transparency registry which it you know would be very expensive that's it okay so no the going back to what we discussed earlier about the the what is the guarantee that we give to the verifier right because ultimately uh there is all of this machinery for the issuers to operate the register the notaries so all of that it only makes sense if there is some benefits for the for the for the verifiers and so the the main benefits of heat is to guarantee the accountability of issuers so we want to be able to prevent uh"
  },
  {
    "startTime": "00:48:00",
    "text": "equivalating issuers which would be a class of issuer that give different claims about the same artifact to different people and that's uh uh kind of a way to distribute um bad code there is also this idea of accountability of the notaries themselves so we don't want to Blind it also notaries and that's why the registry is there to keep all of the evidence to allow an audit after the facts uh of what registration and policy and what tracks were performed at the registry right and this gives the both the auditability of the claims and auditability of the registration policies that were applied by the notaries question yeah thank you Deandra the 18t um now that everybody convinced me that Registries are good I just still have a challenge with the architecture because as far as I understand you look at the architecture you got the issuers and verifiers and that gets uh replicated so a verifier can be an issue or maybe using a different registry and at that point I'm questioning how will the Registries inter inter-registry trust yes um and and and then how do you really reconcile um with this because as soon as you said that everybody can have their own registry I said oh my God now I hate centralization but I hate message distribution thank you yes um obviously that that's uh that's an important question and it's not an easy one and we are uh we had a lot of discussion about this during the hackathon and uh this will be addressed uh in some of uh hang slides in the hackathon report yeah I basically just came up to say that there's a hackathon report where we talked at length during the hackathon specifically about this inter-ledger scenarios and there's some good visuals and uh Hank and I will be speaking to"
  },
  {
    "startTime": "00:50:01",
    "text": "that Dave here I was just going to ask if you can elaborate and just say more about um how you detect incorrect questions yes if you can just say more so I do have some concrete example to show you okay so so this is a concrete example of uh an equivocating issuer right so it's an issuer that uh is going to um uh to produce two versions of the of of the software and one is going to be using uh honest Scott and one is going to have uh malware or virus or whatever so in that case the issuer is a malicious one and he wants uh to attack some of the users and the idea is that if you first the so if every verifier is going to require a receipt from the notary then the only way that this would actually be possible is if the issuer registers both of these claims on the notary and then two things could happen so either you have a quite Advanced notary that is going to actually look at the contents of the claim and possibly detect that the second claim is a bad one in that case the second grade may even not get registered at all uh but that's kind of optimistic so pessimistically let's assume that the notary is relatively uh basic and the boss claims actually get registered so in that case you still have the registry itself uh as uh uh essentially long-term proof that can be used to detect by auditor that the issuer was equivalating and it can keep the issue accountable because you have enough proof to blame the issuer so the the non-reparation arguments through the through the Ledger I'll tell you that it was the issuer that was manifested that's right"
  },
  {
    "startTime": "00:52:00",
    "text": "did that answer the question Dave um I I think so let me tell you what I got is the answer um that your definition of correct relies on the same answer being given to everybody yes if you give the same wrong answer to everybody it is not incorrect that's cool that's right and so that's the definition of incorrect is that it has to be the same for everybody so it doesn't mean that say you know Microsoft couldn't publish something and say this actually comes from Fubar or whatever so you can do spoofing and stuff and I understand you're actually solving that by the signature checking and the trust in the issuer rather than checking the values of the claims though if it comes from an issuer you trust you just assume that they're actually not lying about any of those things right so correct just means it comes from an issue that you trust and they're given the same answer to everybody and that's the answer to my question exactly that's not exactly I think that would be important to capture sort of in the architecture document if it's not there already yeah the other just because this is about the fourth time I think the same form of question has come up so if you refer back to ori's Second statement on what transparency offers the first thing is yes we can see it but the really important second thing is you have to have registered your claims at a verifiable point in the past in order for them to be valid which means you have to have all of your operations laid open which means you can't selectively lie cheat repudiate or whatever and and it's a responsibility on the verifier to not accept statements that are given post facto out of band or whatever because otherwise all of these other Things Fall Apart so it is a whole system responsibility okay Diego okay two a couple of things regarding the roles of the notary the issue you mentioned one thing that will somehow concern me when you say that the notary is a very simplistic one and cannot verify that the malware is there or not my understanding of the notary is"
  },
  {
    "startTime": "00:54:02",
    "text": "that this is a totally I mean the operator of the transparent registry is not going to make another additional text because in that in that case the notary would become an issue it doesn't I mean you're not against that that you have notaries with issuers inside that make a additional issues but my understanding is is that the notorious yes I mean it puts an envelope a sealed envelope around wrapping the uh the uh decline right or are we thinking about other roles for the notary because that to complicate the whole thing you know so the notary role can be a little bit more complicated I have also a slides on what it means for the notary to perform additional tracks but the semantics is that accepting registration of a claim is a far it's a form of endorsements right they're not basically yes at minimum we require that it means that the notary must have checked the issuer signature that's the Baseline uh but you can you can also uh perform additional checks for which the endorsements in the receipts would be essentially a witness that these checks have been performed on that be an issue a role rather than this is not an issue at all it's it's um it's a again there's a difference is that it's an endorsement you accept you accept a claim that was made by someone having checked some additional property but it doesn't mean that you are authoritative for that particular information the claim Remains the responsibility of the issue and that that brings me to the second is about I mean composure issues because in the in all the examples the issue is apparently the developer or the vendor of the software but as an user I could make want to make another issue to issue another thing that say I tested it and it was right yes and that's fine right that's fine your Uncle Rich to do"
  },
  {
    "startTime": "00:56:00",
    "text": "that so as I said you can collect a large number of claims for the same artifacts including yeah so or compound used yes uh okay so I'm going to skip over the next slide because I think I'm a bit uh running longer than I should be so yeah running a little bit of out of time but um I I've maybe we could shorten the policy you want to shorten the policy about this one uh so I was hoping to just uh brief okay maybe we can go to the last one which is how do we solve the use case right it's a customer yeah yeah okay so yes I think this one we don't really want to serve because this is supposed to connect everything I've explained towards yogesh as explained before so uh it's basically a summary right so um uh we want to be able to assess the risk of social availabilities from the artifact that we consume and we achieve that uh by requiring at the verifier to have this uh endorsements from notaries or the purification of the receipts to make sure that everything can be audited later and that's the issuer ends notaries are kept auditable so the architecture supports uniform methods for issuing statements so that's the first row that we reviewed the verification of the Integrity authenticity and timeliness or freshness of statement that's the role that is mostly assigned to the notary and creating consistent abundantly verifiable recursive statements that's the role of the skit receipts and that's what drives the verifier flow uh so user defined are the policy for determining which statements are trusted so unfortunately you are able to skip over my policy slides because there are three types of policies as a policy at the issuer what statement do you endorse do you sign there is a policy at the notary what claims do you accept which"
  },
  {
    "startTime": "00:58:01",
    "text": "is a form of endorsement and then there is a policy at the verifier is this notary or what additional check should I perform right so I hope that was a useful overview of the architecture everyone is welcome it's available on the data tracker to submit comments on the mailing list and suggest improvements thank you ah excellent um are there some further questions on this uh this topic so it's obviously a lot the document contains terminology talks about other things we spoke about just now and and more because we skipped a few things uh and so it was our impression that um we should do a call for adoption on this architecture document there's a kind of a starting point so that we have something to to work with and I'm going to of course we have to confirm that on a mailing list but I wanted to do a show of hands uh using our famous show offense tool if I um figure out how to formulate the question um um why do you support people okay okay so in essence I'm asking in a"
  },
  {
    "startTime": "01:00:00",
    "text": "complicated way of whether you you agree um or if you don't trace your hand disagree with adopting this the architecture document as a starting point that I'm saying as a starting point because like as we as Antoine mentioned at the beginning of the talk test the terminology is the rough edges and of course uh there was feedback during the meeting which we we need we we need to capture and I'm sure a lot of other things missing okay I'll run it for a few more seconds okay uh so here's what I have and I end the session oops uh it was 36 to 3 so um set this for a meeting minute taker um 33 36 people were in favor and three were against them um that's a pretty good response um we'll do a confirmation on a mailing list next week and uh yes see how that goes and uh that's what I wanted to say okay thanks so I'm going to another to make uh for the receipts hello everyone Mike from Microsoft Mike official okay next slide okay we need to get close to the microphone just eat it is that close enough okay all right so we talked already a bit about receipts and entrance presentation so uh I'm going to summarize it just a bit so what does this get receipt it's basically a proof the proof that the skid claim has been successfully registered in a"
  },
  {
    "startTime": "01:02:01",
    "text": "transparency service and okay ignore terminology we know registry you know do all of that stuff I'm going to call it transparency service in this presentation um registration means that you have your registration policy is applied and what that means what Antoine said already uh you know you need to verify the claim signature and there can be other policies obviously then as part of registration you store the claim in the registry so The Ledger you produce eventually a receipt and return that to the submitter and obviously if we Define apis Etc then there's always also a way to retrieve the receipt not just by the submitter but also um you know at a later point in time I think we'll probably do that and yeah the important bit is that the receipt you know it's it's an offline um verification of the claim so um we should probably qualify that what that really means um but it it means all the points that happened before has have happened and you can by verifying the receipt you can um make sure if you trust the notary um that those things happened so yeah it's quite simple it should be simple I think that's that's the idea next slide okay so now we get into a bit more um of what and receipt actually is and if you think of in a transparency service you can think of it a bit like an electronic notary so it does certification on the authenticity odd authenticity sorry I'm German salt for me um of the claim signature so that's one"
  },
  {
    "startTime": "01:04:01",
    "text": "thing and then it also certifies any additional registration policies uh applying to the claim and so if we look at it like that then treating it like a counter signature on a technical level also you know peeking a bit into you know cozy counter signatures or any other counter signatures like in CMS Etc um then it means you have this nice property that you can embed receipts in the the unprotected part of your claim and so you have this nice bundle and you don't need to create another wrapper structure that makes it even more complicated and so we basically take inspiration from cozy counter signatures but it's not exactly that and I think yeah I'll talk more about that on the next slide so next slide please so why do we need a new format then um can't we just use standard cozy counter signatures for that since it sounds the same well not quite because a cozy counter signature would countersign a single individual claim but in transparency Services usually what happens is you put claims on The Ledger and then eventually you sign the democratri root of that ledger and and so there's a bit of an indirection there and that's that's handled with inclusion proofs and this extra step means we need something um you know that allows verifiers uh to do this step and we had some discussions that we've now abandoned um on whether we can you know kind of shoehorn those those details in existing cozy Concepts so actually do use normal cozy counter signatures and we had the idea of okay maybe we can actually"
  },
  {
    "startTime": "01:06:02",
    "text": "um you know just create like a new uh you know skit received signature algorithm and then stuff everything into the signature bytes and make it a bit more of a meta thing but the community um widely disagreed that's a good idea so I think we'll just abandon that because it would just lead to too many um you know roadblocks on the way and people generally agree that exposing the concept of transparency the fact that you have ledgers you know they do have inclusion proofs a bit more to the top of the format um seems to make sense and if anyone wants to look up the discussion we had on the mailing list um there's a link at the bottom next slide all right so don't look at that too closely it's just a very rough first uh draft and I'm kind of I'm really glad that we have so many people in here that deeply care about formats and that are also involved in cozy and structures and all of that so the idea is we have this new thing we call it receipt and uh we have very likely I mean at the moment we do have a protected header we can also add an unprotected one if that makes it easier to you know slot into existing structures and then we have all the other stuff which is the inclusion proof the actual signature and yeah and then we have to figure out exactly how that works one of the challenges is that we have to think about multiple types of you know ledgers because they may have different local trees even and and slightly different ways of ways of hashing you know the leaves and and the intermediate nodes so there has to be a bit of flexibility on you know we call this at the moment the tree algorithm"
  },
  {
    "startTime": "01:08:00",
    "text": "but we have to see which parts we can make common in this format and which parts are just kind of like a like an algorithm that you have to Define somewhere and then um you have to define the the pieces that would go into like you know something like a signature by its but in this case it's not a signature bytes it's more like the um yeah how do we call this natural bytes um but yeah let's um and I think that's where we'll have a lot of um actually discussions uh and I hope we can Converge on something that makes sense the protected header what do we have in mind for that is that it's it's not too much different from um you know the protected header what you could put in there in in normal cozy signed um messages so it needs to be some kind of identifier of this the the transparency service so that you can do key lookups um and have um you know a strong identity over that and you know there even on that level there are there are variations on what that could be um it could even be a did at this point but you know there are some services that may use mainly certificates so you know we have to see how that how that all fits together um certainly it would be a little bit nicer if we actually since we already intend to use the IDS for for claims it may make sense to also do that for um the transparency Services themselves so and then yeah as I said we have two algorithms um Microsoft has recently open sourced a kind of prototype implementation of this so and for that we use CCF and again the format for that is is this uh you know draft but we can imagine that there are"
  },
  {
    "startTime": "01:10:04",
    "text": "um and apart from that there may even be different variations of uh receipts so we have some some thoughts on um you know the kind of the primary receipt when you store something in The Ledger but then also something like uh when you read something from The Ledger and you want to get extra guarantees that this is still fresh so there may be different types that also we have to encode somewhere in there yeah and then in issue time time of registration it's very useful um yeah and then the proof as I said that's in the draft by the way we call it contents at the moment but maybe that's not a great word uh proof is also probably not a great great world uh so there has also been some suggestions to actually split this up into you know kind of Ledger bits and then have signature as a separate field maybe that works uh let's see um next slide yeah and we had an extremely short slot India because the uh working group session on Tuesday um so just a few minutes to advertise that I guess and and you know get the idea oh there was no immediate objection but I wouldn't necessarily count that as approval or anything because the time was so short so if anyone has any you know feedback or wants to collaborate on that uh you know find us on the mailing list and we will also do the same really engage with the Cozy folks and work together on defining bringing transparency to Cozy that will be the goal I think that's the last slide but yeah okay any immediate feedback on on the receipt custom like thumbs up okay that's good"
  },
  {
    "startTime": "01:12:01",
    "text": "excellent okay so I don't actually know who's next okay so that's Hank was the hackathon report great and Orient as well all right do you want to sit on the on the previous topic okay yeah so or or SEO just to ask about the draft status for receipts the document associated with with this is are we at a similar stage uh for a call for adoption for the working group or do we still want to wait for the call for adoption for receipts I I would let it settle uh still a little bit until we like there's some like um as next steps on on so in general uh we have to use case document uh which I expect to to be Rewritten and improved um and then there's the architecture document which has obviously lots of open issues like getting some of the terminology sorted out so that we don't uh don't use different terms all over the place would be would be good um and then that uh that um people do have a call for adoption of the architecture document next week and so I hope um this advances and I mean while there was more feedback from the from the Cozy group um and also from this group I think the attention is still at the architecture level use case level use case description uh right now because of our first meeting obviously but um yeah Roman hi Roman Janelle I was jumping the queue to really endorse that position for the working group let's get what we want to do settled and then you know we can talk about how we want to solve it because I don't want to get us in a position where we're talking all about solution things while we're iterating what exactly we want to solve and I think that's just going to give us a lot of focus given what Roman said I'll just withdraw from the queue"
  },
  {
    "startTime": "01:14:00",
    "text": "I said wise words hi this is Hank um I'm gonna give a first part about what we call a hackathon report we did not produce any code at the hackathon so we uh we wasted a lot of paper I'm apologizing to uh the impact on trees um next slide please so what we were talking about is the thing that uh again is a terminology snuff who saw the administrative information that is about the artifact is the statement and then the statements can be big so we are talking about how to detach the actual um and you register that the actual statement from the place where you register the statement so that you can have a tree because most of these Registries slash notaries are trees hash trees macro trees um we would like to um separate terabytes sized statements from that we found 1952 that says not our problem do this on the application Level ah we found 1954 that has at least the how to find things via that I think based on through these two fragments and maybe a location where to find it I'm doing some cross advertisement here this can of course be a URI that is resolvable or a CRI that is resolvable or a URL or a CA URL crl sorry that isn't actually a thing I know so uh yeah"
  },
  {
    "startTime": "01:16:01",
    "text": "you know the it you're also for humans your eyes for humans crisp of machines and and this will be big at some point so you want to make the small and concise little proposal is to actually uh I'm not sure if this have been done before so if it has been done before uh we were happy about pointers but create a detached cozy envelope especially for the sign statements in skit next slide please and maybe Brent wants to say something before but next slide please again you should know this oh yeah yeah it's a good thing but shoot is different it's just saying yes and maybe we will do it the exact same way but we have to go through all the steps again to find out if you're doing that with access hempstick so I'm not entirely convinced um but maybe that's the result so discussions why um there are things out there so we want to not only just build totally new systems with our building blocks we want to help uh existing systems we want to be integratable into systems easily so and one of those are content addressable storages they are already out there like a ton of them and and that would be in trouble support of those and I already highlighted as a spoiler that statements can be big and there might be drawbacks and having the statement included in the tree and then there are also regulation problems uh first of all it's uh it might just do them want to expose it you want to expose the fact that you are accountable for what you say you want to expose the fact that you said it or what exactly was said if you want to have more fingering control about more than the notary might uh allow for so these are then hosted somewhere else and you have more fine-grained control about the accessibility and then again there might be a person identified information in there so of course we have to address that uh some"
  },
  {
    "startTime": "01:18:00",
    "text": "of them disclosable claims there's work in w3c about this um might be a solution here but again that is a separation of Duty and uh that is again another reason why we would like to do this and now Michael has a hands up uh yes Hank I'm gonna iterate the need for statements being big with some of the data sets we're dealing with and software assets we're dealing with that feed into this um I did also want to ask with your experience with the hackathon side did it expose anything around like terminology and use cases that you know would Echo support for what Romans stated earlier as far as landscape core architecture because I'm noticing a lot of conflicts between terminology slide to slide uh yeah me too and and so so imagine having a time from Saturday to today and not being able to resolve these we apparently need a working group to help so that is my first initial response also we have I think we have developed a few good proposals that we will admit to the list so there's another thing so the hackathon also has something about that but we can't show everything the hackathon because of you know time um so um go let's go to the next output this is basically output one uh output two is also about statements and uh so this is my title we are not the curators of a thousand semantics um somebody was talking about policies that check the content of statements at the notary or registered level yeah um this is not a centralized thing that can be standardized you can maybe standardize a module interface for some specific statements that you plug in but they're self-responsible for that maybe even issue your own claim on the registry that you're responsible for that that would be funny but also possible um it is actually a nice system so um so"
  },
  {
    "startTime": "01:20:01",
    "text": "but the important Point here is that maybe some of these statements are not opaque to the Note 3 by standard maybe we want to create some standard statements and we can go to example a which is um this deferral hash link and there's the actual statement that is a standard statement that we could Define and there might be more than just this one um so the proposals here to define a small set of named and registered standard statement structures that are actually transparent to the node View and everybody using Solutions uh in the register notice system so next slide please um there are two examples um that we found uh interesting to discuss there might be Universal ones like a revocation but we don't really revoke anything because we are audible after the fact we refresh our opinion foreign of course we were wrong and maybe it's still okay to say the one thing like build buildings with this I'm doing a non-software analogy right build building for this and 20 years later it's like yeah okay buildings are still fine building of this but it's not fine for humans so maybe not the buildings for humans with this and and so this is an additional information you want to augment and so that's that's something that is a semantic relationship that can be transparent so refreshing a statement could be a a standard uh statement structure that is also not opaque to the system then we've talked about endorsements a lot I is you're talking about the um another statement that's already in there and that might be something that you really want to elaborate on that could be for example yet another transparent statement so why this is in support of the solution so we can't just build building blocks because they look nice we won't enable people to interrogate them into the systems or build new systems with them and typically you have uh something to query"
  },
  {
    "startTime": "01:22:02",
    "text": "for the information there will be apis there will be indexing servers there will be huge scalable systems that help you understand that I want to and can use this software so in order to do that you need some well interlinked things and now going through the third output there might be interlinked things that you don't understand uh with open next slide please exactly there might be references to other transplant statements that are opaque to the notary and maybe even to the consumer at some point Auditors might understand them or a very very informed end user might understand them and still you want to understand easily to build graphs that they are linked so there's a semantic relationship that is super simple that is kind of obvious when you don't want to talk about content of statement that is this this statement refers to the other statement like a refresh would restore of course uh refer to its complement and um now we are asking ourselves how we uh do this actually um if we can't really infer by the statement content because we are not the curators of thousand statements how do you do basic relationships and is one Edge like you know connected is that enough is that enough as an agnostic way to do this and next slide please and then micro can say something I do I just wanted to emphasize an interesting thing that's kind of topical in the US we have a food safety regulation that just hit the wire uh it's been debated for a while but is now going out where the FDA has specified the content and the payloads and all these things that have to be collected but it has no mechanism right or way to go ahead and actually provide auditability on when certain events have happened from a traceability standpoint so it's this intersection between the digital side and the physical side and so one of the things I like about this is that it provides that ability to say"
  },
  {
    "startTime": "01:24:01",
    "text": "oh yeah these guys over here said what content has to be tracked what types of events have to be tracked and how you need to be able to get that data back to me and this provides a mechanism to verify that data so it's highly important from that food safety aspect for sure so yeah and a lot of other supply chain world in the software supply chain World okay now okay whatever so why um so again as I said integration into existing system uh is is really really important to us we want to have feedback of people who are who can see a benefit of adding uh components to their solution and understand how integration really works in the end and um I think uh one example here is uh that you need uh your own software and you you actually have a few transparency services like and already sorry registers that again terminology and that you trust so you need a remediation Guardian because you know about your vulnerability disclosure report of about use software and and you can actually identify that software via Suite in your system so that's a complicated query all these things have to be kind of followed in a semantic transition array there's some um there's no direct relationship between them and still you want to have a remediation guidance because what you want to do is the most important thing for incident remediation so that is a good I think example why why these relationships are necessary to some extent and why we can't still make them specific to the to the state and content because that again might be pii confidential or totally obscure or in an OCR and not OCR PDF endorsement I I've seen these things everybody's seen these things right so it might not be as as possible as you like and so um so these are digests from the hackathon um um there were more but uh literally digesting three relevant topics out of two days of hard discussions all over"
  },
  {
    "startTime": "01:26:01",
    "text": "the place I think that's a pretty good summary of three of those and we'll hand off the multiple The Ledger a scenario to to Ari if there aren't any questions here right now and that's not the case sorry I'm gonna have to move this down a little bit there we go yeah right so um there's a number of wait like as Hank just mentioned there's a number of ways where there might be some uh first thing pointing to a second thing and based on the architecture you've all seen today you can probably imagine there's more than one way to do this um so we thought about this we talked a lot about this at the hackathon and we have some strong statements to make about how we think it should be composed and if you agree great if you don't agree also great and please share your opinions about this on the list and engage in the documents and issues but I'd like to explain this picture just a bit because you can see here there's this first statement there's validation the issuer performs the issuance operation they get the sign statement we called that a claim earlier we're not talking about the terminology problem anymore and then there's a registration to the trans to create a transparent statement and this is the first place where you have these two things the sign statement and the transparent statement and you could link from either of them to the beginning of another process so which should you link from not the signed statement and that's our opinion based on many discussions so I'm just bubbling all of that up if you have a good reason why you think that this is good um or you know the other one that was"
  },
  {
    "startTime": "01:28:01",
    "text": "bad um please come talk to us we'll be happy to have those conversations but this is the ye yes this one is the one we think uh should happen um and you know there's there's good reasons lots of good reasons for that but the the main thing I'd like to point about point out here is that in the next slides you're going to see some several sort of arguments about transparency services and so this one is more useful in those contexts than the previous One X slide so um we we talked about a software uh supply chain use case before and I wanted to show um another you know brief summary of an example um in a different sort of domain um and I wanted to explain what it might look like with a single transparency service to solve this problem and then I'm going to show you some other pictures that have some additional benefits in terms of confidentiality so in this story here we're going to have a device driver author who's going to make a first Claim about some GPU Hardware firmware versions measurements fips certification I have uh that first claim is going into the transparency service and we're getting receipt out then later an OS vendor is preparing their OS bundle vendor name fips compliant build versions and they're including this first receipt here and this little square failed a year to process UTF encoding deal is signifying that this is there could be a problem here in the inclusion of information about this device driver's output and so I'm when I'm trying with this little black question marks is trying to indicate that there can be at any point there could be inclusion of information that you might want to get back to and that's why you want those going into the transparency service so"
  },
  {
    "startTime": "01:30:02",
    "text": "at the end of the second process a second receipt is generated and in this final one um uh you've got claim three and claim three is from a cloud service provider and they are going to be creating some claims about the information they have about receipt one some information they have about receipt two the workload measurements and SLA promises and they're going to generate a final receipt and in this um this is what the auditor would see if they view this transparency Services each of these claims and receipts and in this case we might imagine this cloud service provider is offering a new magical streaming video streaming service on top of an operating system and some GPU device driver information to process video at scale and so they want to get committed transparently to all of the components that go into delivering that service in case in the future something bad is happening with the video streaming processing and they need to do an analysis so that's the story and the same story is going to hold in the next slides but we're going to show a slightly different version of the architecture we discussed next so same architecture but different deployment models I should say so and this one here we've got the same story but we have now three transparency services and in in this case here I'm not no longer having Unicode uh parsing issues because I'm just here to to talk to you about the the flow in the happy case not in the case where there's a an error injected in the system um in this case we have receipt one and receipt two going into claim three so this one the OS vendor doesn't see that intermediate piece um because receipt one is going over the OS vendor and into the cloud service provider directly instead of through the OS vendor so this is one of those cases where it's like did I bundle that dependency or did I ship a binary that"
  },
  {
    "startTime": "01:32:03",
    "text": "would require the integrator to bundle that dependency this is a difference between this one and that one um before and also the transparency services at the bottom now we're not commingling claims and receipts from three parties into one transparency service we've actually given each of them their own transparency service to store these next slide ah questions in general I agree with these two models the fips certified as a bit confusing sorry let's just do that example hypothetical example kind of claim being made and I I was just fishing for good at good good words other than claim one and claim two yes because they're the OS would need to certify with it yeah yeah that exactly awesome um next slide so the the main point I want to make here is that in the case where the transparency service is segregating claims um previously we were looking at the auditor's view across three separate transparency services and maybe each of those entities operating that transparency service is going to comply with that auditor and that auditor will have deep visibility into the the claims on that transparency service but it is also possible to have just the view from the device a driver author's perspective which so for my transparency service for my device driver artifacts um I can see everything that I've put in there and I can see all the receipts that I've got and that I can hand out to all of my friends who desperately want"
  },
  {
    "startTime": "01:34:01",
    "text": "the receipts from me but I can't see any of these other things so just go back for one second to show behind the cloud one more time there's a lot of complexity that happens afterwards but I'm as the you know original if you think about it in the original definition from the beginning of the slides the raw raw supply chain materials producer they don't get to see how their outputs are consumed at every intermediary from that point on in time um one forward one slide again to them they make their first raw material output deliverable and then it goes into the supply chain it moves along they they still have visibility into the transparency service that they're anchoring their claims and they're generating receipts from but other parties are consuming that information and seeing those receipts nested into subsequent layers within the supply chain so we talked about these different uh deployment models for the same architecture and the benefits especially in terms of confidentiality and uh you know segregating um by use case for the different vendors Etc and this was another output from the hackathon not code but pictures that's it I think uh Mike perock here Ori did the topic of say in this case right the vice driver author getting receipt one of the thing they checked in did the topic of um the author knowing who was requesting their receipts out of the transparency service come up at all uh yes so yeah go go back one slide um so here it's very clear uh you know cloud service provider needs receipt one um and you can imagine that maybe cloud service provider is just one of many cloud service providers that needs receipt one the important part is that"
  },
  {
    "startTime": "01:36:02",
    "text": "the receipt one is there and can be given out to anyone who may need it did I answer your question so um does the author oh the author uh oh who the cloud service provider right so device driver guy does he know that cloud whoever is using his stuff I I suspect Antoine may be Q to answer this question but I think the short answer is the access control policy for the transparency Services the gating factor that answers that question and not the original issuer of the claim so the answer is no the original issue of the claim is not informed every time a receipt is handed out to a relying party or requesting party um in yeah uh yes so right so my comment is on this idea that you always have to when you are consuming or depending on receive data in other transparency it's always because the downstream and one other thing that was discussed in the academy is not just only how to refer to these dependencies by value with a detached thing but also there is a question of how do you actually refer to this dependency by reference in a way that you can have essentially a global addressing scheme for accessing claims that can be registered at any transparency service so maybe you can give us some idea of what's best way to create this kind of global access to claims I'm not sure I fully got the question there is it is it how to discover which transparency service will offer me which kinds of receipts for claims no it's more like if you want to refer to a claim but but uh just uh it's uh uh"
  },
  {
    "startTime": "01:38:01",
    "text": "um yeah so in the case where a claim is a Content addressable identifier to a large artifact sitting in an artifact repository how do I find all receipts for that content addressable identifier across multiple transparency Services a query in question um and there's a section in the architecture where we talk about potential querying interfaces that could help um and in Antoine's slides when you're looking at the header you're seeing the content type the feed and the issuer these are all hints about how to get back to the claims you're interested in yeah I just wanted to kind of highlight to why that this model is uh very much uh specific to us deployment where the device driver author is maintaining its transparency service and it's kind of the rest of the how it it's received is utilized is really not for him to kind of proceed make on uh make understanding but this one is this one is the right one to say that the receipt is gone is gone who's who is using it is up for up to them to basically um put it into down down the line yeah so so this is not a system for creating you know some form of global surveillance over the consumption of all claims and receipts this is once these things are are are um secured by the transparency service where they go is that the discussion of the people who hold them absolutely yeah I hope that clarifies a bit off yeah thank you yeah custom moment um these are all services where we really want to have a choice I think that's really important um of course the question really is who has a choice"
  },
  {
    "startTime": "01:40:00",
    "text": "and uh if one author publishes through a specific transparency service I don't really have a lot of choice if I want to use that that offers output which transparency service I use and I think Beyond Integrity which is right now our main consideration I think we also have to look at confidentiality at some point confidentiality yes yes and in particular the Privacy aspect um I think they're pretty much orthogonal in in many ways uh but I think in the end it is support for the whole system to function to have certain quality criteria with respect to privacy that that these Services may or may not fulfill yeah um so it's for instance possible for for a integrator to say I'm only going to work with transparency services that provide certain privacy guarantees as well excellent yes so in this picture I made each of the sort of tiers a different color but you could imagine that maybe device driver and Os vendor use the same kind of transparency service but the the third one uses a different kind so that's to speaking to your question about choices in transparency service um you know if there's only one then there's not a lot of choice there we'd like I personally would like to see a lot of choices in interoperable transparency services and then the second point is about the confidentiality and that applies to the registration policy from the architecture uh slides before so if my registration policy is I'm going to be very careful about registering anything thing that isn't by that's by value I want to only include registrations by references that's my preference because I'm very concerned about accidentally including large amounts of information that might can include pii the registration policy can"
  },
  {
    "startTime": "01:42:00",
    "text": "communicate that to potential transparency service consumers so that they can evaluate that policy and decide is this the kind of transparency service that I I want to uh you know submit data to do they reflect the Privacy values that I have yeah there are several actors here that have different priority requirements and you really have to look at all of them and maybe one of the jobs of a transparency service is actually to improve the quality of another transparency service by offering services that have additional privacy criteria you just want one other thought on that is um I think it's mentioned somewhere in the slides but the idea that part of my registration policy evaluation might have to do with claims I've already seen have already been been anchored so I think that's another dimension of what you're saying yeah thanks for the answer I I just want to reaffirm that uh it's a critical part of the architecture to enable flexible Federation so it's completely okay to have multiple transparency Services you don't have to agree on a single transference service to foreign State uh in your policies which uh transparency services are good enough from your Viewpoint as a consumer of a claim to know that it's auditable another very important point is that uh uh as we said earlier when circling is issued uh there may be some access control and dissemination but essentially it's out there and it's com it's perfectly acceptable for the same client will registered in intermediate transparency service to make sure that it remains available so in the on the slide for example if West vendor doesn't know or doesn't trust transferences at Israel it would typically re-register the first Clement to its own transparency service or possibly a transparency service history to make sure that it passes the Reliant participalities and we are building a"
  },
  {
    "startTime": "01:44:01",
    "text": "lot of flexibility there I know you you can have a policy that is super demanding but that that's really not uh mandated by the architecture I guess I'm next um I I like I like the the way it is depicted I'm just concerned about how um a cloud how do we address this in a SAS or infrastructure as a service model in which you're basically running some applications or some workloads on a on a cloud provider how do you trace the dependencies um and and and that's one use case that I'm I think it's missing in our um you know uh work because it is a very complex dependency because you don't know exactly what you're running on top as a customer unless you have some very well packaged claims that say well these were given to you but maybe that is the solution I just don't know I think it will be worth uh you know taking into account that especially since you brought up the the yeah because in the end I represent an operator and for us uh risk management is the most important thing and what we want to know is if if there's an incident how how do I make sure that I I assess my risk I shut down some applications I turn off some some devices whatever right so I want to be able to use that use case rather than going from you know the issuer to the verify I want to do it the other way around yeah so selfishly but that's the way it is yes it's it's a great Point like we're telling a story um kind of in the line of the original definition of the supply chain from the first slide starting with the raw materials producer there's another way to tell that story starting with the the end consumer sort of experience of you know using an artifact you know this we"
  },
  {
    "startTime": "01:46:01",
    "text": "we tried to tell the story in the software use case the art of the final artifact is having some challenges and how do I trace backwards from that final artifact and every step of the way that components of that artifact were integrated and passed along there was a risk assessment maybe not a good one but but there could have been and we can improve the quality of the risk assessment at that time that it's the valuation is made by making it easier to identify the information that's relevant to the risk assessment and that that's the sort of one of the higher level objective and to be clear the risk management on software uh you know supply chain is only one piece of the big puzzle you got processes you got you know actual physical Supply chains and other things yeah I just want to emphasize the fact that we should look from a customer perspective from the user's perspective from an operator project why do you need this in the first place well the reason is because we want to be able to uh to know what's affected how can we remediate and how how to uh address the issue thank you foreign this is I I love the architecture I'm seeing it makes a lot of sense one of the questions I had and it refers to someone when we look in the receipt structure you know the the receipt basically the statement was made the receipt claim of the receipt provides verification of all the steps above have proceeded like kind of the thing has been registered it was signed it was accepted the notary X units policy how do you deal with policy changes over time because there are certain inferences I want to make from the fact that I've received from this instance of this skit yeah knowing what I know about its policy but is that policy change yes that's going to change the inferences I can make given the receipt so one of the things we've already looked at and there's been some prototyping of evaluating this is embedding parts of the policy in in the Registries themselves as claims so you can imagine a bootstrapping scenario for"
  },
  {
    "startTime": "01:48:01",
    "text": "a transparency service that may be the first couple claims are all the current state of the art for the policies that will be used to evaluate subsequent claims that might be included then over time when one of those changes you can actually provide a receipt that the policy changed and then when there's a attempt to register something that violates the latest policy but would have previously been accepted you have some ability to even explain exactly you know what's going on as part of that that makes a lot of sense and that's when I was thinking through is probably when that's kind of where my mind went to the first but you then have trust in the operator of the notary in a way that you didn't before right and that you're then trusting them to keep their policy up to date to keep registering and keep me apprised at the latest whereas a malicious transparency service it changes policy over time and prevent or rather present different types of split views yes this receipt over here met this policy that's already over here didn't and I wouldn't necessarily know about it yeah so that that's an important part um and I think we've skipped over the the freshness component in your slides Antoine but there is a freshness component that answers part of that question so if I wanted to prove that the a given policy that was evaluated as part of a registration was the latest there is a mechanism to do that and there's tree structures underneath um there's a tree structure that supports the inclusion of the claims we there's many different terms for this but I one term I think of it as the right tree and then there's a tree structure that can help support the freshness of the receipts I think of that as a reed tree sometimes combining these two allows you to answer these kinds of questions you're asking however you are trusting that that transparency service operator to manage these trees consistently so if you don't trust a single person single entity to do that fairly then you might even want a"
  },
  {
    "startTime": "01:50:00",
    "text": "multi-service system that was mentioned you know by carsten and Cedric as well that makes sense so I think I mean I would would say in terms of feedback like making that point explicit about what things you are and aren't trusting in this architecture because I think that there is this assumption that you don't need to trust the transparency service yeah actually you look at it and maybe you do um the other quick comment I had was earlier there was a comment about time stamps I mean when you have multiple instances it does get have things to say about how we can keep those timestamps you know have timestamp integrity and things like rough time and so on Hank go he's on the Queue anyway okay I'll step down thank you hey Chris and I'll see you um tmu so I I just maybe it's more to you Antoine so if you don't somebody mentioned the comment and there's an answer about if you don't trust transparency service one then maybe you have the does that you don't trust transparency service one and so then you resign it um so like help me understand because time matters a lot here so if you don't trust a service that a provider is using then realistically you have to ask whatever provider to provide to at a date of issuance go to multiple transparency Services right yeah I'll try and Antoine gave the answer before I'll try it again in the case of receipt one the time stamp for that is related to claim one in that transparency service in the case of um if I if I want to Anchor claim one again uh to to transparency service two I'm gonna get a different time for that anchoring and and so that's totally okay and there's a lot of reasons why you might want to do that I think Antoine or Cedric mentioned uh something so maybe I misheard it uh for the explanation so"
  },
  {
    "startTime": "01:52:00",
    "text": "I'm good that I just was looking for the clarification foreign exactly so um we have a mega ton of things here in the ITF that are dealing with trustworth in this proofs and rats and such uh so um one idea of course that we initially already highlighted in the first buff is that every no that a transparency service is not a monolithic service can be a set of replicate nodes all of these must have the independent and circuitry proof based on uh well that's technology remote registration the TCG Global platform ietf all of them at the same time there's a lot of uh if they've said this here there's a lot of CCC output that is going to uh classify the qualities of um the uh the nodes you're running on the confidentiality for example in this case and um there's a corresponding uh ID called attestation results for secure interaction and rats that can basically be incorporated and received to understand what are the qualities I'm trusting in here right now so these are trustworthiness qualities that you trust not only just assertions and then we were talking about freshness and time um also a very strong red topic so a inside a node of redundance consensus protocol working uh nodes of a transparency service you can have a distribution of a new Epoch or freshness with Epoch markers using for example signed uh civil time tags or traditional tsats time some token for things so uh timing is of course very important to us but this is complexity that we didn't want to bring up in the first session but yes we're thinking about that of course thank you it's not uh yes Antoine again so I just want to say a few words on these questions about"
  },
  {
    "startTime": "01:54:02",
    "text": "policy and policy updates because we didn't really cover that in the architecture so [Music] um so I think this is quite uh important right that for the verified year you want in some cases to have some ideas of what policy will applied and we are discussing uh as part of the architecture of the mechanism to actually have ways to indicate in the claim itself what policies are meant to be applied so I think one of the very important kind of uh claim that we have is uh C control claims so a claim that updates another one and in that case even if internally the notary knows that a claim is more recent than another one it's not necessarily obvious to the verifier without having to look at the payloads right so this is why uh there is kind of this topic of being able to have a declaration of registration policy that can actually be interpreted by verifiers and so that's kind of one way to better understand the guarantees that you get at the verifier from checking the receipt and there is also this aspect of freshness which is very important right so if you are using a piece of code you want to know that you have the latest version that's a very very common use case and I think for that as already said we can actually specialize the receipts so we can have form of receipts to prove ocsp style that you have checked you have the receipt is collectively fresh for a given window and you can do that without having to do any online check just as we have with staple.csp right so this is a kind of um mechanism that can be used to address this policy and between different transparency Services yeah just one point on the registration piece in this um visual you have here you have claim"
  },
  {
    "startTime": "01:56:01",
    "text": "one claim two and claim three and they're coming into three individual transparency services that means they're each being evaluated against the registration policy for that service there's a minimum set of evaluation which is mentioned previously and you can imagine actually all three of these sharing additional policies layering so that they're all going to implement the minimum in their own way but they might be able to share actually major chunks of policies amongst each other for specific to certain content types for example you can imagine a lot of use cases where they've all agreed to handle you know spdx s-bomb in a very specific way and they can all share the policy for evaluating those forms of claims yes and and uh to the last question which was how do you actually trust that that policy that was meant to be applied that ts1 was actually applied right and this is where uh using things like uh remote data sessions or attestation to actually prove that uh that transparency server applies the policy as it claims uh of course you always have the auditability aspects but that gives you only a pastor your guarantee if you want a guarantee at registration time then you need something stronger thank you um I I wanted to highlight the point which Dan Dan mentioned here is a great point that uh these slides start from the device manufacturer but thinking from a cloud service provider I think what I want to touch base on what exactly Hank I wanted to highlight or elaborate more that in confidential Computing we do talk about workload measurements and workload registration so that precisely addressed the concerns the cloud service providers or the users of the cloud may have about the security guarantees provided by the applications that run in that kind of an environment"
  },
  {
    "startTime": "01:58:00",
    "text": "so though we have not explicitly put a slide which goes at the other direction but that doesn't mean that we have ignored that kind of an aspect into the system and second thing I wanted to highlight is these transparency Services as as Anton mentioned has a very well connectivity to the rats architecture where these transparency Services when running in a particular security boundaries can very well attested to enhance the trustworthiness of these services okay thank you okay thanks all right so uh we've consumed our aob and wrap up time but it was a good discussion so we didn't want to stop it um but if there's anything someone has uh would like to bring up then thank you um one last comment um I like this work and I think it will benefit tremendously companies like mine one thing that concerns me the most I didn't see I didn't hear a word about s-bombs in this discussion and and and and and and and uh it may be implied but there there are these standards that already Trace dependencies so if I have actually an s-bomb that is truly built from ground up with all the dependencies and the and the and the and the and the digital signatures and the uh you know the the traceability at that point it is a com combined uh artifact and it is probably what what many people assume but I'd like to to make sure that in that in the process we are acknowledge the fact that there are already standards and we may have hybrid modes of of addressing this and I I want to make sure that that's actually captured because it may come out as basically we're creating another you know we're decomposing the s-bomb into some Atomic"
  },
  {
    "startTime": "02:00:02",
    "text": "artifacts that then can be traced thank you sorry I know why I asked Hennis because we are running out of time so I'm not sure whether I should be speaking here but Dan great point I think I in my slide I mentioned explicitly about as well so on my slide software use cases one slide does mention about s-bomb yes we greatly acknowledge the great work they have done and that is the first step of standardization where you you standardize the software dependencies or the components various components using as forms be it spdx server Cyclone DS what we are building is on top of s-bomb where we add the transparency to the s-bomb delivery mechanism and as bomb verifiability mechanism so it's Step Ahead in the right direction thank you be unfortunate brand out of time uh maybe allow me for a quick comment yeah this is just to come up to my mind and uh the examples here shows that clamps are some specific content but uh what if the client says that um please refer to some URL link to see the com uh details and uh yeah okay very good thank you yeah thank you all and thank you specifically k for taking notes there was obviously a lot of uh discussions [Applause] foreign"
  },
  {
    "startTime": "02:02:52",
    "text": "foreign"
  }
]
