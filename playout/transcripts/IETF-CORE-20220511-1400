[
  {
    "startTime": "00:00:13",
    "text": "i'll take notes but anyone is welcome to help out in here of course oh hi francesca i made it so yeah let's wait to one past and we start okay so welcome everyone to this intermeeting of the co-working group uh i'm marco tiloca my co-chairs are high mahi menetz and carsten berman and as usual the not well applies and this is an official itf meeting we've been recorded um be sure to be familiar with the not well if you're not already it's not only about apr it's also about code of combat so please be nice and professional with one another the agenda for today is about three documents problem details conditional attributes and dns over co-op and we got a request from bill for an agenda bashing to discuss conditional attributes as first time first item due to time constraints uh we should be"
  },
  {
    "startTime": "00:02:00",
    "text": "okay but any further bashing to the agenda otherwise if none then build the floor is yours and the slides are available to share can you hear me bill others can hear me right yeah we can hear you we can hear you yeah i cannot hear bill i could hear him three minutes ago should have started three minutes let me try again there you are yes okay there's something happening with my machine so uh there is a good chance that something might go wrong but let's just hope that this is okay now yes you hear very well yeah please go ahead and take control of the slides they are available to share yeah all right okay so um hello everybody and uh i see that we don't have very many participants today but there's everything in jabba um but um uh i firstly apologize that i couldn't stay for the whole session and i needed to start i needed to start the the presentation as there's the first first presenter so uh but let's continue uh so i'm going to be presenting the conditional attributes are draft the work that's going on there"
  },
  {
    "startTime": "00:04:01",
    "text": "um the the quick update is that uh a few days ago i was we were draft uh version zero two and now we have moved up to zero four um uh the the reason being that as soon as i updated to zero three um there was uh another um addition that was uh sent to the uh to the document and then i i then uh incorporated that just just in terms of this meeting so so version zero three had uh something to do with the with the parameter names and then version zero four has this uh reference code and uh to take the the list of the two first um the reference code was uh simple update uh it's uh just uh that the previous code um was from the old uh time being draft uh it existed for a while and then the other thing also was that we changed the the parameter type of band and so on so that it was a presence parameter rather than one with a boolean value so uh michael updated the draft we included the functionality of h inside the draft as well what i mean cell reference code as well so not very controversial quite straightforward and then the next part was about the parameter names and um i wasn't here at the last interview meeting we didn't have a discussion but in the idf 113 we were discussing about the the parameter names in conditional attributes and there were some uh opinions here and there so some people were kind of okay with anything some persons assume that there will be some possibilities in future that there might be some overlaps in in the way the names are used and there might be some clash bill is going for me hello can you hear me i can hear bill okay so my microphone just went on mute"
  },
  {
    "startTime": "00:06:00",
    "text": "for some reason um if i could just continue uh speaking from where i left off and uh please let me know if if there is a disconnect from my audio so at the last uh call meeting we we were talking about the parameter names um and the simplest option seemed to be to to amend the attribute names slightly uh without calling it a namespace but anyway just to prevent any kind of clashes it seemed the best thing to do is to is to uh prepend some something to the parameter name so so i decided that maybe c dot something might be nice so p main becomes c dot p min uh and so on down the list and that's uh that's the only um change i made to the the draft and that's all that's all that's been done um otherwise all the issues have been resolved so this is okay with everybody then we should be moving to working group last call thank you so do you suggest what c dot means you suggest an opening no i don't it's just conditional no it's just easier than c c a dot something because i just thought that we just saved one character yeah yeah you could also use question mark or something like that yes maybe it's not the best character to use what would you suggest constant i don't know i haven't thought about it i think c dot is fine but uh um yeah so that will be an faq"
  },
  {
    "startTime": "00:08:03",
    "text": "we might have to um of course answer some questions about that but but essentially it was just a name it was a character picked at random and and it seemed to be a nice one considering we have so many things starting with c yeah i'm just wondering what the next draft that picks up on this convention is going to do if they also were using c or um maybe using a different one and maybe we could warn a little bit uh on on how we plan to use this in the future i mean this is the infraction on the front law of the server developer obviously forget the bcp number and so we will do this with a lot of restraint um yeah that's just a meta comment it doesn't in no way uh influences the the the progress of this drought [Music] yeah i think i think we we will have to wait for comments from others as well and then and then see uh if there is need for for change here um but essentially it was just uh the simplest thing to do to to prevent um any kind of like um overlaps in future of course if if somebody decides to do that then no anybody can use these names of course but they seem to be the most obvious way of doing this right now yeah there's also a comment in the chat from michael this button looks sort of official i agree okay okay thank you bill uh any more comments questions for bill and then i think indeed the natural step"
  },
  {
    "startTime": "00:10:00",
    "text": "here is to uh start the working group last call on this document uh for two weeks so we started today ending on wednesday 25 so i'll open the call on the list after this meeting and then please provide your feedback and comment there okay thanks a lot bill for this work thank you thanks thanks for accommodating me today sure all right next to the following document we have custom for problem details okay um may 10th uh yeah okay so um we had a pretty good discussion about this two weeks ago so um i'm i'm going to quickly remind people what this was a about so there is an rfc 7807 that gives some some structure that you can use to send back um with an error response what that error response actually is about so for instance if you have a shopping application or an application to start some action that costs money you could have someone trying to buy something um that they they don't have enough balance on their account to pay for excuse me and then you uh could receive this problem detail statement and this has a number of standard components type title detailer"
  },
  {
    "startTime": "00:12:00",
    "text": "instance and a few application specific components like balance and accounts the um this is being used by 3gpp and because 3gpp also wants to be able to do similar things in the the co-op sieber environment they were expecting that we were going to finish our problem details document which has been sitting there since july 2020 waiting for the completion of coral and uh they really need this uh like next month um so uh we uh agreed to to quickly finish this in in a way that hopefully will still show a way forward to doing this in coral at some point in time but we cannot expect coral to be done next month so we we discussed two approaches last meeting and there was a little more discussion after the meeting and um there's also a ton of discussion in the rfc 7807 bis uh github repository because the the http api group is discussing what what the next version of that document would be and um it's really very interesting to to see that they try to get by without a registry and that's uh uh that has turned out to be very problematic so we decided whatever we want to do will probably make the use of of the registry and in particular the the type element the type member excuse me of the the json map"
  },
  {
    "startTime": "00:14:01",
    "text": "that's a uri actually structurally but people actually pull put the simple strings there and and without knowing implicitly invoke uri resolution ui reference resolution and and you get weird results uh uh from that and so on um so we we really decided we didn't need that type thing but what we need is something called custom problem details entries which not just gives the the type but also all these these other things the the balance and the account from from from this example these are really things that only mean anything in the context of their type um so it's probably a better idea to actually define them in the same environment in which the type itself is is being created um so this is a little bit like a cw2t in the end there we also have a map with with members um that can be registered and the the interesting point here like cwt um you can have multiple elements i'm saying element again multiple members of that map um which are registered separately from each other but that combine into a reasonable picture of the problem so you might have a general custom probability entry for the status of your account and then you might have a specific uh entry that comes with that that explains how that status of the account didn't quite make the execution of the request possible uh so that there is something a little bit like multiple inheritance going on"
  },
  {
    "startTime": "00:16:00",
    "text": "here but without all the problems that has in a programming language and that can turn out to be a quite useful way to actually factor the the problem detail space so this is an example i had the last time um that has hasn't changed so the idea is that we have some standard problem details that have negative numbers a title detail in instance for instance and we have registered uh problem details that have non-negative numbers unsigned numbers as their uh map keys and these numbers zero and one these are actually defined in the the specification that is used for registering 47-11 so they are not themselves registered because they are nested in the namespace of where the 47-11 is being registered but yeah they they can be defined by by whoever registers 47-11 and there is an interesting little problem that i think we are not discussing in the draft right now uh what if that person who has registered 47-11 uh suddenly thinks there should be a number two as well we haven't discussed this um but that's actually a detail that will come up in a minute in a different context anyway um because we don't expect everybody to actually register these things you also can use a ui um in in a place of the registered number and that means you can actually keep the whole specification to your api uh documentation and"
  },
  {
    "startTime": "00:18:01",
    "text": "um yeah go ahead and and do experimental stuff so we don't need an experimental range and so on so generally documents like the 3gpp documents that actually standardize these things will of course go ahead and and uh define um tags to be registered uh while uh company x that just wants to build an api um internally that might just use this uh mechanism here okay and um what probably also is worth mentioning is this this example where we use multiple inheritance where we have a common set of problem details that are sent with every problem detail said i'm not sure if a process id and a process name are great examples here maybe we should use something else and uh something that that is specific uh to using accounts um yeah something like this can can be used for multiple inheritance of a composition um i should be saying so this this is pretty much what we discussed two weeks ago but we have now written this up and and it's in the current draft dash o3 we also have discussed what happens if somebody has a 78 or 7 specification and really um just wants to tunnel this in in one of our problem details and it turns out that's relatively easy because we can just define a custom problem detail entry called 7807 that's the number of the we register for this thing um and that has"
  },
  {
    "startTime": "00:20:01",
    "text": "two entries zero and one uh that are predefined which are essentially taking the type and the status that that we don't have um in the um base uh sibo uh excuse me co-op problem details uh because we didn't want to mirror the type thing and the status is in http status which is not so useful so we have a different thing called response code uh for for code but if you really need to show an http status you can just tunnel this in a 7807 problem custom problem details entry so this direction is can be done today the other direction uh possibly tunneling um coil problem details uh instance in 7807 uh problem details instance is a bit difficult because 7807 does not have a registry so we cannot really indicate whether a problem details um object actually does this now 78 7807 this is uh going to define a registry i think that that's pretty much decided so when 7807 bis comes out uh we might quickly register the inverse direction of of the tunneling but we cannot really do this now because 78 or 7 bits is still under development and i think it will become stable only really at the end of this uh process so we can do tunneling in one direction we cannot quite do it in the other direction but it's basically how we would uh do this so yeah that's essentially the the set of things that are really about uh uh"
  },
  {
    "startTime": "00:22:00",
    "text": "problem um details but we have one more uh uh problem so when we recognize call this we definitely should include http api um on on the list uh so so they know um this is being last called and can maybe uh contribute some of some more of the wisdom they have accumulated in the 708 bis process again the the github repository is really just amazing you you learn a lot from there so there's another problem that um is really a sibo problem but it's not not so surprising that we have this um so in in sibo we usually do things that that are for for constraint devices um so we we haven't had an actual need in cbo based standard yet um to support tax that is meant for human consumption and human here is not the developer we of course have lots of tech status for the developer but a random end user sitting in in sri lanka and and trying to get the singley's error message and so on and it turns out that unicode isn't really that useful in certain regions unless you pair it with a language tag so uh quite a while ago peter axel uh went ahead and registered tag 38 to be able to to do this so there is a tag that has been around for for almost a decade now that defines a array of a language tag and a piece of text as a way to do this and we generally like this thing and"
  },
  {
    "startTime": "00:24:01",
    "text": "would have loved to to use it but there is a problem here because the the internationalization people have decided you really cannot infer a writing direction from a language tag and you really need to read these two two references that are on the slide to fully understand why that is the case um so you often can guess the base direction but this this guessing is is very ad hoc it's a little bit like media type sniffing uh so you will be right 95 percent of the time um but you you essentially as a sender of these data objects you don't have a way to influence the guessing process so it's better to actually be able to include something that's called base direction in the w3c documents i'm referencing here and which is essentially atr rtl or nothing which which may mean something like auto so there you give the the other end the license to do their sniffing they're guessing uh process but if you actually want to to say shalom in in a problem detail then you really should be telling people this is a right to left uh string and it this ring is actually really funny because uh in my editor it's shown left to right and in the slide presentation software it's right to left so it right there demonstrates the the the problem while i was editing these slides anyway so this is new this is something that take38 couldn't do so far and of course we could decide let's just uh do this completely separate define a"
  },
  {
    "startTime": "00:26:01",
    "text": "new tag for direction or actually probably one hr tag and one r2l tag that's one way of doing this the other way is actually including the direction information in the existing array and to a and to b differ in whether we define a new tag for that let's call that n38 or whether we fix up the existing tag definition to actually include this possibility as well and that's maybe something that that really the cyborg group should be looking at because so far we haven't done this with tags we have kept the domain of tags constant and this would be the first time where we actually fix up a tag definition at least from from from the the side of an ietf process the the zero standard doesn't tell you whether you are allowed to do that and of course when we use text in cyborg we assume that you can use new unicode characters when they become available so it's not like we have completely nailed down um the the set of zebra documents that can be probably interpreted uh but this is uh in a tag and again we we haven't done that yet on the other hand it's um it's essentially from the point of view of somebody who who tries to do the the right thing for initial internationalization um this is just a severe bug of of the existing tank 38 definition so this would be a bug fix a bug fix that conveniently gives us the"
  },
  {
    "startTime": "00:28:00",
    "text": "the functionality we need here but that is really required for any proper use of this tag 38 so i would feel much less unhappy with uh to be then i would be for instance in in fixing tag for the floating point tag uh to actually increase its domain to big num exponents we have a separate tag for that that's 264. and that's okay because different areas of application will be fine with tag four or will need the additional complexity of two six four so it's proper to separate that but here for for language taking um there is no proper use to use a tag of for a tag like 38 as it has been defined because you need to supply the direction information at least according to the consensus of the people who are who have been discussing this subject for the last decade or so um yeah so the the text on this slide is is taking right off out of the document so take 38 would be um defined as an array with two mandatory and a third optional element the take 38 direction would be a false or a true where fault stands for atr and true stands for the rtl and while we are there we might actually import the language text syntax from rfc5 into the cdl so people can can check that if they have a way to check their zebra documents against cddi so the the summary from the authors it's too bad that uh thomas cannot be here due to"
  },
  {
    "startTime": "00:30:00",
    "text": "a conflict that came up recently the the view from the authors is that this is ready for wikileaks call thank you kirsten is that really the last slide yes any comments questions to carson especially on this seaboard side any early thought on that christian for example sounds like no um okay i've read the whole document this morning i think it is pretty stable and also considering the urgent uh schedule um i'm fine with the working group last call and actually we may even consider um a little shorter than usual one like terminating on friday next week for example the 20th that should be still enough time to get comments and i can provide a review would that work for you kirsten um certainly um the the i think the the of all the the um elapsed terms we use in the itf the the working blast call period is probably the the most uh sacred uh so i'm i'm not sure that we are so urgent that we actually have to violate that um but you you can could make it so that in in the next interim we have the results so you could make it tuesday evening or something exactly then we can close it on the 24. yeah that's fine and yeah it was the plan already to include um sieber"
  },
  {
    "startTime": "00:32:01",
    "text": "in the loop uh as you said http api will also be put in copy yeah that's great and yeah you can see from the chat christian has all your issues but it take the uh the zebra point separately uh in cbore as it's done here i'm going with it okay and you can also review so we should have two reviews at least otherwise more are welcome okay then we'll start working group let's call on this and thanks for putting this up so quickly nice karsten and thomas yeah thomas did most of the work so yeah thanks go to thomas specifically all right thank you then and then we can move to martin for dns over co-op yeah um [Music] let's can you share the slides uh i can uh but you are able to just in case you want okay control they are available yeah uh i don't see them so go to the thing uh at the top where there's a hand right to the hand yep ah thanks sorry i'm gonna choose your slides okay great i'm sorry i'm not still not used to this too um okay so yeah uh hi i'm martin um i want to talk about our draft again the dns queries of a co-op draft and so first i give a quick introduction"
  },
  {
    "startTime": "00:34:00",
    "text": "for those who don't know about this and then go right into the discussion section basically picking up what we started at the last itf meeting so um our attack scenario is basically that we that people can eave drops dns requests and as a counter measure we want to encrypt this there are of course solutions like doh or doq but we but as most of you know this is not feasible for the constraint iot so our proposal is to do dns over corp and use encrypted communication that we have there with either dtls or score and this also would give us some additional advantages that by the co-op api by the core uh suit that like block wise transfer or that we can share the system resources with the co-op implementation making this the implementation of dns a bit smaller and yeah basically uh from the update perspective we didn't do much on the draft since itf but we did do some evaluation first of all about the caching last time i spoke here we presented two options on how to deal with discrepancy between the co-op max h and the dns ttl ttl um and uh this was do it like either do it like doh or do it like with this what we now call eol where we basically adopt the ttls to the minimum ttl so basically one is one of the ttl so all of the tdls are zero and where during our evaluation we notice that most of the times"
  },
  {
    "startTime": "00:36:01",
    "text": "at least in the end user settings these ctls are always the same because we always have the same record set um so we have also now a simplified version where we basically just say okay take the ttl and set it to zero and then at the client we set it to the max h and of course this only uh assumes that there is one record set um cases where there are multiple records as this for examples in an end user setting the cname um where you have the cname but most of these this time at the times these ttls are also in sync so here's our evaluation of this as you can see in the cdfs for when there is no caching most of the methods uh actually compared we use different methods other than the one the fetch method we presented in the um we proposed in the draft so we can actually see the caching effects and with the do h-like approach we already get some see some huge benefits for of course get and fetch which where the responses are cachable but for posts actually we see some disadvantages um due to the additional overhead and uh with uh year ltts we actually see a little bit of a um a little bit of an advantage of that the smallness of the advantage is actually because of our setup because we just had two hops and so there wasn't much that could be optimized but we get with a set uh there is some advantage um because um fetch and get profit from it and the um year out benefit"
  },
  {
    "startTime": "00:38:00",
    "text": "benefits from the cash validation where we have ten percent more queries received in less than two seconds within the first three transmissions with get because they get uh gains more benefit because the query actually is fragmented and with fetch we get about five percent small queries in the first uh retransmission um then the other issue i wanted to bring up again is how abstract the draft should be um in uh that was this was a little bit discussed on the mailing list that and rather than to doing some heavy protocol uh specifications specific by just the rest api that the server needs to implement and then leave the specifics to the implementations um carson interpreted this as that klaus was only pointing out the so-called restatement anti-pattern however when we discussed this a bit between the courses there was some disagreement about this uh so that that we don't do this but maybe we do this um so just to bring this up on the discussion again yeah and uh just to not have them forgotten but in the interest of time i didn't mention them here uh there's also these other two points of uh do we need consider observe and a sibo based message content format which uh i started the discussion thread on the mailing list as proposed by marco last time so are there any questions yes carson yeah on the zebra based content format i"
  },
  {
    "startTime": "00:40:01",
    "text": "think that's a good opportunity to actually factor this out into another document yeah that was always a plan uh sorry yeah so observe would be really interesting i haven't thought about that very much but i think that that that's really great so one of the uh we have this project going on where we try to do [Music] network security based on mod specifications and and one of the problems with mod specifications is that they describe connectivity in terms of dns names usually at least and the problem is of course if the ip address behind the dns name changes um you actually have to change your network filter and so something like like an observed function would be interesting there but this is more of a research thing right now and not something that that we already know how to use operationally um but back to the previous slide um when i talk about the restatement anti-pattern there is something that that is really good for people who are trying to use a new protocol in a new environment which is giving them examples of how that new protocol works in that new environment and i wouldn't want to lose those examples but the the danger here and the actual anti-pattern is if the document tries to make normative statements that essentially restate elements of the normative references"
  },
  {
    "startTime": "00:42:02",
    "text": "because it's just way too easy to suddenly change the base standard that you are ostensibly are using and the the worst case that can happen is that you actually fog the ecosystem by by creating a special version of co-app that is needed uh to actually run uh your your protocol so that that's the problem with the the restatement uh anti uh pattern uh i'm not sure anybody has written this up but in in the the time i've been in the idf i have seen this multiple times and and often with actually ugly uh results and and so so referencing standards have unwittingly changed the reference standard by restating things in there and so on so let's try to avoid the statement anti-pattern so let's let's explain this in term of um let's define this in term in terms of what what the uh co-op service interface is um but let's also have examples that that bring this back to to the ground and and so you can have both feet on the ground and see what that actually means um and of course by by doing this as a rest yeah api is so what i don't like very much but anyway um doing this by by defining this on top of rest patterns of course gives you the the best reusability of of this uh specification um so um yeah that's just a general advice to to uh draft authors we have seen exactly the same problem uh when people were putting eap on top of cowep so they they were trying to explain for"
  },
  {
    "startTime": "00:44:00",
    "text": "for every eap message how that is mirrored in a co-op message and of course that means they have to explain all of cohab again or they are defining a new protocol that it all is almost but not entirely unlike corp and we managed to to stop that there and uh i would i haven't reread this draft in in a while but i i would love if we could avoid uh running into the same problem here um i don't think we fall into exactly that trap when it comes to [Music] basically forking the standard interestingly enough when it comes to examples we saw that for doh exactly that problem happened when they used the exam when we when you look at the examples because it seemed that some of the servers basically or some of the users expected the url for the dns resource to be like it is proposed in the examples even though the actual rfc doesn't say anything about how the url has to look like like um i don't i think it was like subject indian s minus query and so basically every user of doh now expects the the doh server to present to serve the dns messages at dns minus query even though that isn't in the standard um but so for to give some example where the example basically defines the standard somehow [Applause] but but but from but actually for our example if we lesson learned or from that situation we try to make it clear that this is not what uh we want and i actually think we need use the root resource basically uh to"
  },
  {
    "startTime": "00:46:00",
    "text": "make this a bit clearer but other than that well we set use fetch and we said use block voice transfer when the message is too big but i don't think we basically said that something that contradicts the actual standard maybe with a coup block option this could run into problems but on the other hand when it comes to rest apis defining rest api um i'm a little bit afraid that it then becomes too abstract and then we have differing dog standards because while the implementers implement the rest api uh how they do it is differing with uh among the implementations a bit that's what my fear is when we maybe do it too abstract you have to be very definitive in what you actually want to lay down and what you want to leave to the implementation so generally we have tried to define um interactions on resources and leave it to the server what the exact ui for that resource is going to be so the the entry point is server defined and we usually then use resource difficut discovery uh to actually find this place and since resource difficult discovery meshes nicely with service discovery this is not just unnecessary overhead but this is actually useful so you could uh go for for for a multicast request this is there anyone who has an arty equal something and um then uh right ahead use that as a dns reserver um yeah but what you just should try to"
  },
  {
    "startTime": "00:48:01",
    "text": "avoid is saying oh and then a retransmission happens or this needs to be done in a separate response or something like that that's fine for an example but that's not uh fine for for actually defining the protocol yeah i guess but we don't do that but um we can we can go through the draft again and uh maybe maybe find some ways where we can be more abstract i guess but yeah if you're already doing this this is great um i just wanted to point out that this restatement stuff is happening as it did in the ace working group with the the eap over grab work and let's let's try to minimize that as much as possible and i need to read the thing again okay any other questions or comments well just please continue the discussion on the i think four threads we have on the list on the different subtopics yeah there was sadly little feedback uh last time but maybe um push putting this on the table here again maybe um some more discussions can happen right yeah i didn't send in a formal review but i remember seeing the draft living through it and being very happy so i probably need to repeat this exercise yeah that would be great yeah so um the the way i see this is that we we"
  },
  {
    "startTime": "00:50:01",
    "text": "need a couple of people who do what what i just said uh and uh if if these reviews point out that this thing is ready for adoption um then we should have a another look at our charter and see whether we actually can fully justify why this is in our charter and and then adopt it yeah probably for adoption there need to be also be some to do in the draft be extinguished but i mean that can we do that we can do in the next round of the draft yeah so we don't have to to have a to-do free document to adopt it we definitely have to do a to-do free document to last call it but if people who really would like the general direction and uh agree that that a this is something they want to spend energy on completing um and and b it's not going to to kill the internet or something like that then i think we should go ahead audio retarder okay uh so for my end there's not more things to discuss um so your plan is to do a next version when uh we didn't discuss this right now but um i guess at the latest for the uh um cutoff draft cutter for the itf 11514 though i'm not sure if we participated but i guess we will um yeah so uh cut off for the 114 which i think is in july mid july or something"
  },
  {
    "startTime": "00:52:04",
    "text": "great so who will be the reviewers i will who else i mean there was some people already who uh said during the itf that they want to review but we didn't receive any reviews from that maybe those people can be reactivated and i also wanted to ping maybe some dns up people if they could look over that yeah i think it's important when you're pinging the dns of people to say we are just in the state of adopting this so tell us where we are completely wrong but we we're not yet looking for the last dot on the eye and then the cross on the t i think that that's usually important to explain the the what they should be expecting yeah okay good so if you if you remember people who have promised to do reviews and they haven't done that yet just tell the working group chairs this is very much okay to do and that's our job to to nudge people to put in reviews okay i will do so thank you martin any more comments thank you all right then we are in the aob any other things you want to discuss in court today sounds like to know so we started two last calls we talk later in two weeks"
  },
  {
    "startTime": "00:54:01",
    "text": "talk to you then bye bye bye bye"
  }
]
