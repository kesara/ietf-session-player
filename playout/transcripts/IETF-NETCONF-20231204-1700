[
  {
    "startTime": "00:02:58",
    "text": "CHD okay good morning good afternoon good evening are you guys able to hear me I am y thank you okay um I'm still missing my coach here let me ping him so give me a minute"
  },
  {
    "startTime": "00:04:27",
    "text": "okay uh we are already 4 minutes past the hour uh so while we I wait for Kent to join let's get started with the uh administrative stuff uh so this is the interim uh meeting for net count working group it's a two-hour session we have to follow pretty much the same guidelines we do for the regular net meetings so they're not well applies in this case so I'm sure you guys are aware of it but in case you're not here are a list of BCPS you can go through and same applies for the code of conduct um we strive for mutual respect and dignity for all now to the administrative stuff you guys are already logged in but in case um someone is looking for it this is the link for it um pretty much everything else Remains the Same as a regular meeting uh as I mentioned it's a two-hour slot um we will of course follow the queue in the meet Echo for folks to be able to speak and do uh remember to remove yourself from the queue once you're"
  },
  {
    "startTime": "00:06:01",
    "text": "done uh we do encourage you to participate by also taking uh contributing to the minutes and is's a link to uh the notes let me just see if I can cut and paste that in the chat window in a minute okay the agenda for today is to go over uh the restcon next uh restcon next and netcon next we started a bit of the discussion in ITF 118 in a side meeting and per is leading the effort in that so thank you Sam for posting the link to the notes so at this point I am going to hand it over to uh per to kind of lead the discussion primarily I think we want to correct me if I'm wrong is that we want to try to classify issues based on whether that this is um what's the importance on them and then maybe also try to address the question of whether the issue requires a protocol change or can it be done with the existing protoc but I'll let you at this point take over yes uh uh finally found the unmute button um yeah so the idea is to uh go through exactly what mahes said uh can you all hear me we can great thanks um so uh we started this in in"
  },
  {
    "startTime": "00:08:02",
    "text": "um in ATF in in Prague uh started looking through uh some people uh also uh reported more issues um and uh I I guess what we would like to aim for is to classify what can be done now who's interested in doing that work uh and just also close issues that are already fixed or ongoing um and uh I could uh start by sharing my screen hopefully that works un sure though or does anyone else have any other suggestion for how to just to say Annie looks like he's in the queue for asking a question question yes go ahead hi um yeah I missed the the side meeting obviously but wouldn't the point of net comp NE next be a new protocol version so so it's it's kind of like the the discussion focuses on what the next protocol version would have in it if it's just some little add-on thing like the you know ad hoc approach that the working group has been taking for the last 10 years then it doesn't really need a new protocol version and it doesn't need net comp next you could just make a proposal and do it um so the whole point of of another protocol version would be fixing things like the lack of warnings the lack of Json or seore um those require I think a new protocol version uh and would be worth doing you know so I thought the discussion is about what the next"
  },
  {
    "startTime": "00:10:00",
    "text": "protocol version would be uh I guess there's a discussion before that to to um prune things that don't need to be uh done with with a protocol change I guess is that correct I think that's a fair uh understanding of what uh what I am thinking okay right so Andy to reiterate what per said the idea is to go through the issues that have been logged into the GitHub to determine whether they are indeed um they whether they do require protocol change or is it something that can be done today without actually upgrading so once we kind of classified the issues and given them a level of importance or uh priority then we can go ahead and actually ask for who wants to work on that right B do you want to go ahead and share yes yes [Music] let's see if this uh Works can you actually see oh no not as yet no let's try if I can share the entire screen instead okay"
  },
  {
    "startTime": "00:12:00",
    "text": "now you can see now we see your screen including your yes so uh I have uh I can obviously not uh can obviously not uh write any this was really [Music] annoying so we'll do it this way instead so um I cannot take the take notes at the same time so U feel free to do that otherwise I guess most of the uh interesting minutes will be in the actual tickets and uh I suggest we just start at the bottom and uh go through them one by one I think some are quick and we can just see if they uh three things if they can be closed because there's already ongoing work uh if they require a new protocol version or if they do not require a new protocol version I don't know if we have labels for it sorry uh no so we don't have any can you make the font large enough that it actually use is the full screen because I cannot read anything thank you of course thank [Music] you so do we have something here no so we need a label for uh need next Maybe"
  },
  {
    "startTime": "00:14:00",
    "text": "so this is what we'll use either close them uh don't touch them or tag them with the need next is that okay yeah so silence is consent as you all know after the many many video meetings in the pandemic so um this is enhancements to work with lists lists in Westcom I would say that this is ongoing in the list pagination and can just be closed okay so I'll just close it sure put it on to the next one so correct a attack value in response mode for data resource existing case to I would say that this should not be done in the isue tracker maybe but in the and there's already or this actually needs next time maybe uh so I'm just trying to find the right as I'm swapping between Windows yes so it looks to me the comment on the is that the it's beyond the scope what R can do so I think we should need to fix this so I think this is something gets"
  },
  {
    "startTime": "00:16:00",
    "text": "done in the next version of Ron okay without know the specific issue so we need some new protocal version uh needs a new RFC so I think I think that's that's probably yes um okay but but [Music] um so should the aim be to to fix this uh bolt it on the existing version of rcom or spin a new version or fix it in a new version of rcom Andy you want a comment on this first um isn't it implied that any accepted or verified AA is part of the next version It's doesn't seem to be a procedural issue uh I haven't checked the Arata was the Arata accepted or was it hard for document update um just from a overall uh perspective it's really confusing to to users to have a real peacemeal approach to the protocol so so when changes like this are are made it's actually easier on on them to just have a new protocol version and now something that was told we're told to do a different way now it's totally different and we're doing it another way um I I I prefer to have that done in a new protocol version especially something like uh returning errors that we said it's a certain way and now we're changing it but uh I think it's it should be clear if it's an accepted uh Arata then uh or if it was hold for document"
  },
  {
    "startTime": "00:18:00",
    "text": "update then then yeah it should be part of the document to work out later but um I wasn't aware of this uh this issue but it sounds like it needs correction in the if in fact it everyone agrees that the the new error is better so I think this is this changes resource denied to data exists here right but it would break clients of course so let's say that it needs a new protocol then okay moving along uh restructure the uh vest conf eror messages uh in short it should better um be better tailored for HTTP uh and the error handling there and error reporting instead of uh basically just copying netc uh I would say it very much needs new protocol version [Music] okay"
  },
  {
    "startTime": "00:20:06",
    "text": "so I I should know this but I don't but I think this might be changed in list pagination um but I don't know on the top of my from top of my head does it Andy would have opion this appears to be uh a request to treat um lists and leaf lists as uh as a collection so in right now you you have to specify as specific um instance you can't supposedly access uh just the entire list um that would require a protocol change because the the text says something about if it's a list then the equal sign and you know a list with keys must have the keys specified in the URI so that would definitely be a uh that would be a soft uh change because if a compliant uh you know client isn't going to do that right so the ones that are absolutely no way am I going to support are where you take away something that already worked and then a bunch of customers are going to file reports bug reports because all their regression tests start failing okay not going to really support that but adding new things and and"
  },
  {
    "startTime": "00:22:02",
    "text": "adding stuff to the erors uh not redoing all the errors just adding more stuff to what's already there is is great for a new version so support that but this looks like uh you know interesting to do but uh needs new version so what is added in list pagination is the Yang data XML list um which uh makes a collection and and wraps the entire XML document in a top node well I I think this this is uh it seems to be a request to access the you know the resource URL as um uh see with the U could address the list itself with just playlist instead of having to specify the keys so that requires a protocol change it seems like it could be interoperable and you know if it makes sense for the operation I don't know so I probably add it as uh needs a new protocol version unless you can verify I mean it's in section 2.2 in the list pagination rest contract so it's very much uh uh in in those ongoing work okay so you're saying you're able to do it without actually changing the protocol uh well you you changed the protocol for uh so if you support that or if see right you have a bolted on"
  },
  {
    "startTime": "00:24:00",
    "text": "support for XML list so making list and leaf list as data resources but but but you wouldn't do that with the UR because then you'd be violating a must in RFC 840 and you wouldn't want to do that so you can't be doing it in the Target URI because that requires the keys that's what this this ticket's about um so so the es comp protocol has already defined how a list is encoded and this request is to let it let there be a different encoding as well yes okay I I uh uh I wouldn't be in favor of like another RFC if you support that one then you support breaking RFC 840 I guess so I guess the ITF is a different view of of must uh requirements now I think what is saying here makes sense that I think this is requires new PR version but you could do it in a minor update as it doesn't require a major change or breaking change it might be worth when we flagging these to flag which one would require like a breaking change to rest comp from which ones are just additions or minor updates and ignoring bug fixes okay so are we satisfied with mahesh's comment here I mean this this needs more investigation probably 3 two one yes [Music]"
  },
  {
    "startTime": "00:26:04",
    "text": "um so this is similar but H this changes things up a bit but for Json to change the encoding of uh when you um for list items right so even if you address one list uh item element you will get it enclosed in in list uh um brackets and then the element in braces but instead you it should be in braces only uh Martin has a comment that this follows from RFC 7951 go ahead Andy I guess Andy you're in the CU right uh oh hello oh sorry um yeah yeah I'm not supporting changing RFC 7951 uh and and it would have two different ways of of encoding a list that um is actually it also doesn't support streaming and a streaming server you don't know if there's going to be any entries let alone know how many so you have to just start the array so we're going to continue to do that it seems like a uh any change that Pro allows flexibility without value I you know"
  },
  {
    "startTime": "00:28:00",
    "text": "know why we'd want to do it is uh this all right not supporting so anyway this would need a new protocol right not for a minor update that's correct and there are of course additional suggestions from uh from Martin also right this could be returning just the list entry itself uh yes so yes so not wrapped in the list name Etc yeah so the question of whether we adopted is something we can take up and after we have classified the issue yeah but it very much needs a a new protocol version anyway it would break everything too um I was just going to make a comment on that one just look into it so I think it's a question for Andy here it is um it looks like potentially you could allow server to return either en coding so that would be one option would that would force clients to to understand both of them so that would meet your streaming requirement I I'm not sure this is a good thing to do or not um I'm just trying to figure out if that's an opt plausible option or not no I'm not not in favor of this change of at all I don't I don't uh want"
  },
  {
    "startTime": "00:30:00",
    "text": "the client to have to guess what's going to get returned I I don't see the value you save two characters so what um you know so i' I'd rather have the client be consistent think the the are this particular working group is has been consistently server Centric and it would be a good idea to stop doing that okay okay so enable to put to move a list entry without needing to supply the entries contents would be uh uh it would be uh convenient right I would say this needs a new protocol version agree disagreeing opinions no no okay uh and replace the rest of Yang data with uh uh the Yang data structure extension instead um makes the protocol more uh self-contained I guess because young data is used in several other places um you know because it exists but uh maybe not so um well well formed would need a new protocol"
  },
  {
    "startTime": "00:32:05",
    "text": "version hi so um I need to um take care of a family matter at home I'll be back in one minute sorry right and so while per is St let me see if I can take up the next item uh H GTP 3 quick based hp2 as a transport think this really sorry uh yes so this is your ticket um mahes yes so as I was saying when you stepped away is that um I think this question came up in a different draft also uh there's nothing to say that uh of course um we cannot support it's dtp3 currently I guess um we haven't had uh well we have a draft that was uh proposed in the quick working group to try to support net uh NETCOM over quick but uh I don't know what work or if this would actually require a new protocol I was just going to Quick comment on this one so as I perceive it the the potential key benefits of quick for net or resof is that allows separate streams to have separate flow control so if you're doing something like streaming Telemetry across quick connection you can stream multiple separate streams and"
  },
  {
    "startTime": "00:34:00",
    "text": "if one of them blocks it doesn't block the rest of them so that's that's what I perceive is the main advantage it allows streams to be handled more cleanly rather than having separate um HTTP connections to achieve the same thing so that's the benefit uh the downside is it it has to be encrypted which um you can't sort of have no encryption with it uh and it's presumably quite a lot of work although there are quite a few standard um quick prot called stats stack implementations around I think my standard I mean probably open source ones so um so I think it's definitely one that's worth considering it's not necessarily obvious to me we want to do this but it be worth talking about I don't know how I'm in the queue but uh I can't see can I speak yeah yeah uh so uh is there any major benefit using quick instead of using for instance UDP notif with flow control You' basically solve the same problem right um I would have thought the advantage of quick over UDP is that you can you get fragmentation for free so whereas youp notive it would force you to fragment the packets probably less efficiently I think if you using quick you would fragment them better but I don't know for sure that's the case okay other than the benefit for the question is of course that you're trying to answer is does it require a protocal change sure I don't I don't know if it does there I mean H2 and H3 are pretty aren't they pretty transparent I I don't think it requires a practical change except if you wanted to make use of quick streams so that that's the and again you can make use of"
  },
  {
    "startTime": "00:36:00",
    "text": "those streams in HTTP 2 as well I think it's the same for both of them you don't really get the benefits without Qui yeah you have the head of line blocking still in H2 right yes which you don't have in at all in H3 and the other the other Advantage for uh h23 is that you can uh get quicker startup effectively you can make a request on the first packet if you it's previously been open I'm not sure that that matters for the where for where net comp from rest conf used I can't think that's that important but might be mistaken so if we put it like this the comment say doesn't need new protocol except for streams and then label it as need next anyway sure or like this maybe it's more clear like that okay let's continue we are here uh deprecating or obsoleting the combined data store resource and I guess use the nmda data stores instead I'm trying to [Music] remember why I open [Music] this uh so so I can I probably also comment on this one so isn't this the fact that within NDA we move towards an"
  },
  {
    "startTime": "00:38:01",
    "text": "architecture where the data stores are far more visible and so you have a separate operational um separate running separate candidate conf already had a separate candidate but we added in I can't what the RFC number is uh the reson operations allowed you to uh Target those data stores directly and hence I think the question is whether we need to retain the existing net conf mechanism having this combine data store view or not or whether it had a future version of res comp you could potentially either deprecate or OBS it depending on whether it's a minor or a major version new version of netc sorry rest conf and and's going to comment on this as well okay so sorry Andy go ahead uh I was just going to say that uh in in like 10 years we've had one request to implement rfu 8520 7 we're we're finally doing it um there's no way you could take away the uh existing combined data store with Rush conf data I mean to what what is what problem does that solve I guess what I I would ask and and it's just going to absolutely break everything I think 95% of of uh the usage of our stuff is non-nmda okay and the only thing people like about nmda is getting the operational value of config equals true that's that's why they do it so uh keeping that in mind it's great add this but I don't see why we take away anything that that's used by 95% of the um you know users out there is there a use case for taking away the stuff that the it's there I guess if you want to make force"
  },
  {
    "startTime": "00:40:00",
    "text": "everyone to do nmda then that's the use case but I don't know it just doesn't seem necessary Kent as a contributor I think the use case is really why we did nmda in the first place um certainly getting the operational value of config equals true but also um there's the we're having to create State modules know as a transition strategy um all the yangang modules have to have state modules for uh representing State data for legacy or non MDA servers and it's a little bit of um a typical debt that we're carrying forward and I think the idea is to at some point we can let go and no longer have to maintain and support those State modules so per for now at least classify it as a protocol change required yes and then we can take it up on the question of whether we want to proceed or and it was what 8527 and you seem to have the number in in the cache rest com extensions to support n 852 yes okay so we're now at the exclude query parameter um some discussion but to add uh negated"
  },
  {
    "startTime": "00:42:02",
    "text": "Fields um query parameter this has been discussed on list as well um with um seemingly negative uh um opinions about it Yan you wrote something in the comments maybe you might want to add to why you think it's not it's problematic all right so uh service tend to evolve and add new functionality and they they may be nice and add it in a sort of backwards compatible way but if clients have this exclude feature they will sometimes be surprised that new data that they didn't expect will arrive because they didn't exclude something they didn't know would arrive in the future so I don't think this is a very smart approach neither for the clients and not for our for us as standard body so I would I would motion to close it [Music] yes so should we close this done I'm suddenly market for close we and then if we unless we get hear back from the okay"
  },
  {
    "startTime": "00:44:06",
    "text": "um okay yeah I tell speak yes is better because CH is not is in China is's not able to join this call so maybe in one of the intering meeting oh yes which is more friendly to China it be better to have him able to defend his position uh in me yes exactly so let's typ it out this way thanks um or now here so I wrote this uh I don't know how uh useful it uh it is um to have keep Al lives in the protocol um if no one else thinks it's needed we can just close it I thought it could be neat to uh for instance for to keep um connections open for instance for a long running subscriptions um go ahead Andy uh um yeah this this is a a detail in in rest comp that that could use some work uh there's always problems configuring um engine X or Apache to to handle ssse correctly es especially they don't seem to flush the data very well and then they also time out and and these kind of problems so so it is an actual problem with the protocol it needs fixing and requires a new"
  },
  {
    "startTime": "00:46:04",
    "text": "version I guess I'm next in Q um I just going to say that the client server drafts do uh enable the configuration of keep lifes and in general it's the uh up to the initiator of the connection to maintain the upness of the connection so uh you know primarily needed for call home for you know if the server is going to initiate the connection and the server has to actively um test the aliveness of the Northbound clients and um you know fail over to another server if or client if necessary um but it certainly is the case that clients can themselves already today um do keep Al lives both netcon and rcon you know ncon rescon servers um either using SSH or TS it there's no new protocol that needs I mean maybe it's a question of what layer right so both assciation TLs are on top of TCP there are TCP uh keep lives but no one suggests using them because they're not encrypted um so then you go into s station TLS you can do keep lives at the at that those layers uh which is great because they're encrypted um I mean and sufficient for our needs but if necessary we could even do keep Al lives at the neck comp breast conf layer protocol layer uh maybe that's what Andy was suggesting but I don't know if that's needed well if the uh the client uh initiates the ssse which it has to do uh that it doesn't send anything so you and it and it is an ex the serers an expecting anything on that connection it's the server that's just"
  },
  {
    "startTime": "00:48:00",
    "text": "sending ssse and it uh so I think it would require some sort of change so that the the the server knows to send these and the client knows to expect them and they would be application layer pings your s sorry your SS is um on top of TLS right um htdp on top of TLs but it's like don't really want a a like a transport specific solution uh and all right yeah I was gonna say I mean certainly it could be TS supports keep alive so you could do it that ler but okay and I think it now can be handled somewhat with uh configuration options in that are specific to the servers like engine X so so I you know I don't think it's a musthave but it certainly uh could help some some issues with ssse and now there's a whole other thing that's replacing SS I guess so uh I don't know you know what the future of that is you're referring to UD sorry HTP notice yes so is the overall consensus that this is not something R comp can address I mean how how would it work with uh going uh through proxies and stuff like this where you might uh terminate"
  },
  {
    "startTime": "00:50:02",
    "text": "TLS I mean if you have a a restom server behind a TLS Terminator Gateway whatever and then a client on the other side the TLs keep alive would not help there you would have to have a rest com specific keep alive for the entire chain right yes that's a good point um I mean and we say it's a rest um protocol fix but I think it's more s fix we'd have to introduce a dummy message like server has to send a dummy message at least once a minute or something like that yeah there already the if you send with only a leading colum it will effectively be a comment in the Stream and the server just uh returns Echoes back whatever it's a like a ping basically or Echo sense it already exists yeah that was about to say this doesn't need next uh we could update 8040 make a recommendation if we wanted to yeah okay um so we're at xath filter and uh which so today rest conf only has the fields query parameter to uh to select nodes that you want uh in to do a select in your in your um uh get config basically um but it would be neat to be able to have an X path filter instead more"
  },
  {
    "startTime": "00:52:02",
    "text": "powerful so an example would be thisan and more interestingly would be to have the if you bear with me it in an HTTP query method which is uh currently standardized in the HTTP working group where you uh have basically a get query with uh payload so then you would not need to escape uh the xath query in the query parameter and URL in code and so on and so on uh I don't think this would need on new protocol versions to um be usable backwards compatible go ahead and uh well this is already supported with uh like the net comp operations through rest comp uh and and this x path isn't complete because there's no extended names and so there's no xmlns namespace bindings thank goodness so um I think there's a uh doing it in the payload sounds fine there's way to do that uh Suppose there could be more but there already is a way to do this how do you do this in how do you do this in West today the there's something called the operation uh resource so you can invoke the get operation or get data from from rcom with a"
  },
  {
    "startTime": "00:54:03",
    "text": "post um I could look up the section but it's it's the post uh method for the operation resource uh I suppose you know it could be replicated through in a new rcom version as well okay so Andy why don't you go ahead and add that and uh so per if that is the case then we can probably U make that a recommendation for people who want to use more filtering mechanisms yes so you mean the invoke operation mode uh Andy with post right and of course it doesn't require a protocol change no but it needs uh it it needs [Music] um okay we can look into that later then we're at the this one that is defined in the netc um issue list instead so I think we're done with with this this is basically just copying that uh netc [Music] uh error handling"
  },
  {
    "startTime": "00:56:00",
    "text": "issue I think we should discuss it there instead so let's go over to the NETCOM list or if anyone has um like any other suggestion for things that should be in uh rest other pain points if so write a new issue for it so we can go can I I was just going to ask a a broader question here and this is maybe not the right places at the moment we have two separate protocols NETCOM and rest comp uh is that the right um split in terms of is the right answer here we should be doing a new version of rest comp to cover like extensions in just that direction in a separate version a new version of net comp is that the right answer so I think maybe that's a question a sort of meta question that we should always be asking ourselves is uh do we need both of these I think the answer is potentially yes they they're used in different places and have different purposes but I do note that we have these two uh two separate pral to achieve the same sort of thing you mean if we should just decate one protocol and continue with one of them I I guess so or or I think so because I can't see how you can really align these two into something new I don't think that that would make sense but but it's that was just a consideration that I have is there's two practical here uh is that definitely what the industry wants and needs this it's access to Yang data which is finding a lot of applicability so I think uh they were both needed and and one one's as intended for more lightweight operations and integrates well with a"
  },
  {
    "startTime": "00:58:00",
    "text": "lot of existing tools and then there's existing net comp with just has you know more serious um uh operations that are harder to use so uh they're they're quite different uh in use I think um and should should both continue do they need to like have exact same functionality I don't I don't know uh let the you know let the market decide so but uh I think there's a a lot more interest in a a version of net comp that can support Json and cabore that's like what we're hearing in large capital letters uh from from CS customer so not so much uh problems there's really no one's having any problems with rest comp actually it's actually doing quite well on its own based on you know what's what's out there and I see in various drafts people are are using J uh Json examples with rest comp operations and the latest uh te's uh Yang modules are doing that so not in favor of taking away rcon okay so so one more again it's not uh and I can't remember I'm correcting this am I right in thinking Andy that resom mandates XML and Jason is optional is that correct and is that still the right way round if we were to do a new version of resof I'm not sure that's the case I think it it mandates one or the other and we didn't force EX ml but that's my memory of it yeah that's right Andy it's one or the"
  },
  {
    "startTime": "01:00:01",
    "text": "other and and the popularity of Json cannot be understated at this point it's like late to the party okay where yay let's support Json yeah great so Rob when you started I thought you were also going to ask question of uh compatibility between the two protocols if you're going to take up the work of Ron next and neton next is the also the understanding that weyy to keep and the answer is I don't know so I I think it's I think these I think all these questions are worth asking and the working group should discuss them have threads on them um I think listening to Andy's um voice and things because he has a lot of experience in terms of who's deploying what I think that should weigh quite heavily in terms of what we do here um and I think also we should look at um what where we want to prioritize trying to update both these at the same time would be better for the working group to focus on on net comp next first and at least you know capture what we want to do with rest comp but say if we're going to focus on one of these net comp has a higher pressing knee to fix it I agree with with Andy that's supporting both Jason and seore in in net would be desirable and there's other things I think could be clarified and cleaned up in NETCOM as well that would be helpful so I don't know whether they need they need par feat parity um I think I think all these things be good to capture either issues and and have discussions on them dis discussion threads of those spe specific things I guess I'll jump in uh Q um so in my other life I'm working with a uh web services company and we do a lot of rest Json type interfaces using swagger API and Json"
  },
  {
    "startTime": "01:02:01",
    "text": "schema it's really quite different but I gotta say it's very inferior to restom and yang um maybe Yang could be improved in some ways I I did actually find some things that Json schema could do that Yang cannot do uh but we could fix that um but just by and large that whole ecosystem is horrendous in my view having come from everything we've been doing in netcon and restcon working groups sorry netcon and netod working groups um so I'm all in favor of trying to maintain parity between the protocols and honestly the only thing that's not yet supported is confirmed commit if I if I I if I don't know if anyone knows of anything else that's not supported in RC but confirm commit is the one thing that I'm aware of and being that close it's seems like it's um desirable to keep them feature parody uh can't I actually agree with that uh that uh feature request because we implement it so you should put it on the list and and I agree we should try to do both protocols and and bring them both up to date that's that's the point of doing these updates is like you get experience for six or 10 years and then you then you update the the standards and uh I have found that there's a a level of detail when you're talking about networking equipment and the whole internet infrastructure that's just way beyond the capabilities of the average you know application programmer and I'm sure the guys at Boeing you know feel the same way about us okay that our procedures are just just ad hoc all over the place uh willy-nilly compared to what you have to do to get a an airplane in the air so uh it's all relative and I agree that the networking industry needs"
  },
  {
    "startTime": "01:04:01",
    "text": "Yang and uh it's only getting better uh and the Yang models are are really pushing the limits of Yang that I see coming out man they are really complicated so you know and that's what languages are for to be used so so it's a good thing actually that the the compilers handle it and everything's working okay uh so where should we move now to the NETCOM list yes let's start at the bottom copy config on factory default data store so Rob you seem to be uh right up on the isue maybe I think juran's comment is also relevant here right he's saying why just factory default go ahead Andy um sorry I'm really confused isn't this a readon data store what why would a vendor let you overwrite the readon um factory default I'm not getting that maybe the intention was to copy the factory default into another data store like"
  },
  {
    "startTime": "01:06:02",
    "text": "startup I don't know I think the I have to look it up but the there's already RFC on the factory default data store and I think it already supports copying it to in front uh to other places this one is from 2019 yes suggest so I I just think I don't know what the I don't know what the issue is here that we're trying to solve so it sounds like the suggesting we update copy config to add in a new data store operation and then my comment there was why don't we uh just um use copy data instead I mean I so I think so I think a meta question here is if we update a new version of create new version of net confies do we deprecate or obsolete uh some of the operations so we don't have copy config we force it using copy data for example or do we deprecate the old ones and carry them on so I think that's another question is related so so maybe uh we need a use case for this yeah I think we should at least add uh or try to understand what is the use case yeah and Chen will Who filed this case it's not here uh again trer friendly time but I note that this issue"
  },
  {
    "startTime": "01:08:00",
    "text": "was filed in March of 2019 about two weeks after nmda was published so why didn't he choose copy data like Robert is suggesting is unknown to me so let's uh add this and continue so support for binary encoding do we need to have a large discussion about this no I think we just know we want to do this so uh me [Music] okay so confirm confirmed commit procedure needs clarification if persist parameter is used Andy might be able to clarify or take the wheel let me find it on um I think the the issue was persisting after a reboot or this may be uh uh already in the RFC and and doesn't"
  },
  {
    "startTime": "01:10:03",
    "text": "need any uh changes certainly wouldn't need a a protocol version um yeah this this is really old okay so it was like from four years ago it could be that we've already clarified this as as well but I I think it uh the issue was after a reboot does it need to to revert and and it does so I think the this is uh just my misunderstanding at the time it this isn't a non-issue that it does revert after a uh uh it reverts so that means that the persist is over and it doesn't carry through so I think that's what the customer was asking about is is can this persist keep going even if the server reboots so it would sounds like a would be a a change of behavior from a must to so that is a protocol change okay so I didn't I didn't understand yeah this is kind of a deep knit is is like what happens to a confirmed commit if the server reboots you're you're you've done a a com a commit with the per persist but you haven't done the second one to confirm it and so and when you come back I think the RFC says your your confirmed commit is over and it reverts back to uh as if the confirmed commit failed is treated as a failure and I think that's what the the clarification is is I'm not sure it really says all that in"
  },
  {
    "startTime": "01:12:00",
    "text": "RFC is it stated on list maybe in some discussion all yeah so I think this like needs a further examination to see if this this is deep in the weeds of the implementation of of confirmed commit but it is used uh confirmed commit is used and people want it to work the same I guess on all servers that sounds like reasonable reest just quickly I agree more examination the thing is about uh commit confirm I mean the whole reason for this is because while your client pushes a update to the server it could lose its connectivity to the server like for instance it's reconfiguring the VPN over which it is connecting to the server right so it loses the connectivity and then later on it comes back up and it can get reconnected and then do issue the confirming commit now from the client's perspective if a server rebooted or not it doesn't know it it is you know server comes back up and it can get connected again and it's going to try to issue the confirming commit so I guess we need to consider it from client's perspective as well uh what does it mean if the server reboots okay continuing uh this commit Z light should accept vendor specific information today does not the XML scheme for net does not support it as far as understood"
  },
  {
    "startTime": "01:14:02",
    "text": "um uh existing tag seems to indicate that it needs a new protocol version um go ahead yeah yeah I guess it was me that said that it was likely breaking many new CL I think this is a good idea we should do this we have come up and had discussion on the list several times about can we return more information about for we do together with okay or together with something else and I think people are already doing this in some cases but only when it's been negotiated in some way with the server there's some extra capability that announces to the server that the client will understand this anyway but it's sort of breaking the xsd but it's a good thing to do go ahead Andy um I was just going to say it's uh uh it's fundamental to to net comp that you know in the xsd it says you can return okay or you can return data or you can return uh RPC error and and this is wrapped up in the whole issue of of that xsd problem plus RPC warnings where to me this is just there's no special case here you want to add warnings uh to to uh to an okay then that would require a protocol change but it' be worth doing and it could cover a lot you know any kind of data that the vendor would want to return you you could do that and I fully"
  },
  {
    "startTime": "01:16:02",
    "text": "support warnings I don't think uh it was a good idea to leave out an error tag which permitted the use of warnings this major oversight uh in 6241 so so th this is uh should be done and and maybe you know consider the larger issue of of of just returning stuff along with okay and also data we can't even return it in within an error right now because there's no error tag that allows it which is should be fixed okay is there more discussion or should we carry on let's carry uh we are here clarify meaning of default operation replace in any config uh perhaps you can present Rob issue uh I'll need to read it first uh yeah uh yes effectively I think um so I guess for me the net comp RFC in general is sort of um I'm not sure how closely bound it"
  },
  {
    "startTime": "01:18:02",
    "text": "is to Yang so and again I don't we have issues to track this but the sort of cleaning up the RFC to to make it definitely tightly bound to Yang and also to take the bits that like protocol specifically into net can't F uh the stuff that aren't isn't uh well the other way around as well just clean two ivly think makes sense so in this particular one I was talking about the way that you handle like the replace operations and the other operations like that I don't think they are necessarily um as clearly specified as could be and actually you had to dig around in various places in the different rfc's I think to get the exact Behavior you want so I think that that's something that potentially could be more could be better clarified here so again I don't think it's a changing Behavior I think it's just you know we should if we're can to update these practical specs we should say look what changes can we make to make these specifications clearer okay and as Rob has I think already added there's a clarification label attached to it so maybe that should suffice for what we want to do with the issue uh yes but wouldn't it uh so what would the action be done clarifying raata is not possible so I'm clarifying RFC so I I think it just means that when you produce when you produce a new version of the RFC these issues that are like clarifications we look through to see if it's something where we want to just tweak the text to make it clear what the behavior is so not I don't think I disagree with Andy in terms of what he's saying the existing behaviors documented as it just um I'm saying other people who read this found it"
  },
  {
    "startTime": "01:20:02",
    "text": "unclear and I can't remember this one one came up recently again where uh other people colleagues were reading the rfc's and they came up with different behavior for things as to versus what the rfc's meant and so these those things I think when they come up they're worth highlighting the saying that people are misreading this so we should get that clarified I I agree it's uh this this specific behavior which is intentional that copy config uh will delete um nodes that aren't there and it it's is confusing but it's done intentionally so it could could use new text I guess but not to change how it works but it is possible to get this wrong I've seen it uh several times this this actual issue has come up several times of someone asking why isn't it work the same way and so so you so you are correct it must be confusing okay next uh use of quick as transport um the good news on that is there's supposed to be there is a draft that was written but not presented in the neton foring um so there's some interest only"
  },
  {
    "startTime": "01:22:00",
    "text": "question now is whether who whether the authors are willing to take up on it and as Rob points out we need to understand the benefits which we do kind of um with multiple streams only question again which we kind of answered is whether we need a new protocol for on not shouldn't this be a restcon issue we're in the netc issue tracker are we not this is for R and this is for net yeah you can I you can use it as replacement for TCP basically Kent quick directly without without any HTTP context okay so similar answer for I don't know I haven't read this draft uh I don't know how it rolls things but for uh as I looked up here for rest comp we said that it needs next for for streams otherwise it's compatible so should we say the same thing here I would imagine so but but also to be clear is unless we're going to change the protocol to uh make use of those streams in some way I don't see that quick will give you much of any value over just using TLS so that so that's the thing is that we could do this but it's got to have a there's got to be a reason to do it and so I think it comes down to is uh would we have optional support for streams in some way that that could use this"
  },
  {
    "startTime": "01:24:02",
    "text": "because without that there's no benefit uh but again I'm not sure we'd want to get rid of support for TLS over TCP I suppose we sub subscribe subscriptions uh even with neom it'd be possible to have a second stream for the subscriptions yes and well I think you uh yes and and you get also even more benefit if each of your subscriptions U that you make potentially comes back on a different stream if you want that behavior and so if you had a particular stream that you know was flooding or doing too much sending too much data getting back pressured you have the ability for the other stream data to come through so in terms of flow control and Telemetry doing stuff over quick looks other like a surface layer to be quite attractive but you have to there need to be some other changes I think to even just configuration changes or changes to like Yang push to enable those other I thought or subscribe notifications maybe yep let's carry on oh that was the last one on that page clean up of the spec relative to Yang XML and this was the one I was talking about earlier um so effectively the Yang you know the Yang spec has all these XML examples in there um it'd be nice if we actually had"
  },
  {
    "startTime": "01:26:02",
    "text": "an a SE probably a separate RFC documenting the XML encoding of Yang in the same way that we have the one for Jason um so that would be nice to do whether there's the willingness and effort to do it it's just like this meta comment is that we could go to some effort here if there was the energy to clean up these specs uh so that they are better structured longer term uh for evolution and readability this is not a new idea this has been discussed you know five years ago as well that is correct and I think uh the likely scenario what what would actually play out is that it happens along with the yang next work well there's two steps right I mean the net mod working group could do Yang next and factor out the neck C XML bits from it and just allow Yang to define the syntax and semantics there but separately the NEC work group could move ahead today uh not even waiting for netod to do anything and try to define the equivalent of 7951 for XML true um hi I I think uh Martin has brought up several times the issue that ripping out all of the XML examples and everything from from net comp would make it harder to implement people really find it useful to have the examples so going to another document to see how a net operation Works um I don't know that would work but I maybe you're just talking about moving the normative text to another RFC"
  },
  {
    "startTime": "01:28:02",
    "text": "and then referencing it here that that maybe that's yes what you mean yeah the plan would still keep the is not to rip the examples out would be to move the normative text somewhere else okay hopefully the examples stay in the same RFC as the operator uh okay okay good so no more action here in this comment sums it up yes uh except the the part about actual the cleanup uh so what should we jot down [Music] then so personally I I mean this is my view I think this is worth doing but there is a there's quite high cost to this there's a higher cost to doing this than many other things because it's talking about like restructuring the documents um but I think it would help longer term in terms of Maintenance so I see value here but it requires people to commit to doing it"
  },
  {
    "startTime": "01:30:09",
    "text": "so is this a fair interpretation comment on the screen take that as yes yeah think so yeah thanks um so next cleanup hello capability and verion negotiation and I would say there might be a few of these so if we check this one uh hello and verion negotiation [Music] um and um maybe this one capability negotiation between client and server uh maybe one more I don't remember maybe the flexible en coding I don't remember but uh some of them are related least I think so clean up of Hello message capability and consider version negotiation so I take it that this is to try to remove the redundancy that's occurring now because Yang Library uh the overlap with the Yang library and uh so you know it definitely is a need next type item cuz we're talking about changing the protocol to whittle down um the Hello message so it doesn't have any redundancy to"
  },
  {
    "startTime": "01:32:06",
    "text": "it go ahead I think this is one of those things that we already fixed with something called Yang one one young one one modules armed listed in hello so it's just a matter of getting rid of the Yang 1 Zer modules out there true so it might just be a question of actual removal of the hello text in the RFC okay so so this is Yang one1 uh so the text I guess uh per could be that um clean out the hello text from the RFC or remove the text drafting to hello from the RFC go ahead yeah I still don't understand what you mean by that so we already have RFC text and when you see clean up from the RFC I'm not sure which you're talking about if that's the Yang or the NETCOM I'm referring to NETCOM but maybe it's isn't that text there that is um that might need to be removed but do you want to change NETCOM I mean the existing NETCOM I mean this one thing of making a"
  },
  {
    "startTime": "01:34:00",
    "text": "new version of NETCOM like one. two or something and there you can do that but the existing versions of NETCOM and yang I suppose have to behave the way they do don't they right so what I guess I'm saying is yeah then the next version of NETCOM would the or the RC would probably remove any reference to the hello all right so NETCOM 1.2 would do the same things as already done in Yang one or something say that you go to Yang library that is good I think I think it's may be difficult to get the NETCOM new NETCOM RFC to talk about Yang modules but but yeah sure um yeah I this is not Backward Compatible and and we certainly cannot take away the Hello message is is needed and you don't know if the other peer supports uh base 1.2 before you send your hello this is a fundamental part of the protocol that already works and and yang 1.0 will just go away by itself and and it's already taken care of it's the text is actually in 7950 it was never in uh 6241 so it's it has to do with uh the what was called the module capability and it's just another URI to net comp uh there's it's just a list of Uris in the hello and that's all net cof cares about uh so no changes needed in net comp it's it's uh already taken care of in 79 950 section 564 I believe"
  },
  {
    "startTime": "01:36:20",
    "text": "okay I think I think we can skip 13 because it was a naam next and we don't have a list for naam next but there's no changes in net comp this is optimizing naam and don't need to waste time on it um [Music] 13 uh where is n next actually before that we do have the Json encoding in saw that as well take the me yes so uh from there of tickets about different encodings can we tie them together yes uh I can try to fix that after um can do a new uh tag hold encoding label I use that"
  },
  {
    "startTime": "01:38:09",
    "text": "one that I'll fix the other encodings afterwards mention C but I guess that's the maybe the binary encoding um on the page two here the other page so knam uh uh White uh yes so so was there an aim next uh tracker or there's there's not an Anam next tracker here so we should be able to do the work here if needed I mean it will still be in the NETCOM group right within our Charter um naam is one of those modules that you know wh which group does it belong into the you know the but I guess whichever I I neon published it originally right so it makes sense that neon would publish an update I would suggest keep it here till we have actually created an acam next okay is there some label"
  },
  {
    "startTime": "01:40:01",
    "text": "with needs action or something oh okay keep it like this [Music] like uh private candidate data stores uh I think we could just close this since the work is ongoing agree yeah um what's it called is it like this draft J Net pre can I think um so now we're here stop on error and continue on error should be optional floor is free go ahead J I think balash has a good idea I I also see this is could it could well be optional but it would require a new protocol obviously if you do that okay carrying on make lock and unlock"
  },
  {
    "startTime": "01:42:17",
    "text": "optional perhaps a similar conclusion as the last one go ahead y yeah similar in that it needs next but here I'm a little bit less uh interested I think we are moving more towards a lockless world than having more interesting lock modes or something but it would definitely require a new prodal okay carrying on sorry just on that last one it it's already optional to use is the question or the request to make it optional to implement I believe so gotta so extend the notification header to support Yang X paath and version uh I think isn't at least the version is ongoing work a yang version but the notification version is an ongoing draft right I don't know if it's adopted though so uh at least the second one is work that is currently"
  },
  {
    "startTime": "01:44:02",
    "text": "ongoing the first one I done know for so um we leave it with a question for Tomas to answer the CL there was a clarification uh so Alex Post in the chat window that um uh even the EXP is uh work in progress so we can close the issue okay and I believe same is the case for the next issue yeah I think so as"
  },
  {
    "startTime": "01:46:12",
    "text": "well we're here right fully Define the merge operation can't perhaps you can say a few words sorry can you scroll down a little bit your screen's hiding the top sorry or so I can see the top oh my I haven't looked at this forever can you scroll down now a little bit I'm trying to speed read it all uh okay having to do with Leaf list and bits so I mean I guess it's the text if the parts I copy P it just need to be clarified I'm guessing uh the I mean we if common if implementations are commonly combining and not replacing then we should document that as the solution or what was intended yeah I agree I think we should probably clarify so it would be just"
  },
  {
    "startTime": "01:48:02",
    "text": "updated text uh but could that be part of an erata or is it all scope from uh you you can fata I wouldn't I don't think I'd verify toata as in I think that it's probably too ambiguous to fix uh certainly the botom bits I think to me is it's not I'm not sure that's intuitive to me that you would merge the two values of two leaves together depending on their type the one for leaf lists I think is intuitive but the one for bit seems a bit odd to me so then we label it as need next as well right no I don't think so we're just talking about clarifying the existing protocols so where would it be clarified oh that's you were saying yeah it could be next but I mean Perhaps it is an A or hold for documentation or something like that but um and we may want to split these out having a separate Leaf list one for leaf list and a different one for bits so we can discuss them I don't have any personal opinion about this you know if it's intuitive or not I don't have that sense I'm really just interested in capturing what it is that it's commonly implemented Andy can you say about Yuma Pro what it does when merging leafless and"
  },
  {
    "startTime": "01:50:01",
    "text": "bits um well it certainly doesn't mix uh bits bits is just one leaf but each in if you're uh talking about Leaf lists then it only affects the the instances that that uh are there so and it's not very useful right you you you can't change the value of a leaf list because it value is the key in a sense that's the one area where we heard a lot of comments people would like to be able to handle Leaf list a as a as a um complete thing uh and and not the individual instances um but uh it's not supposed to be um you know bits is not supposed to be the the same as treated the same as as a leaf list I think the operations could uh use some clarification actually getting a a few customers really focusing on this lately they they'd like consistent Behavior everywhere imagine that and they're getting pretty demanding but it's it's it's uh an important thing to make Yang better than everything else is is to have this uh guidelines and consistent behavior of what's the difference between a merge and a replace and uh I guess this needs clarification I don't know there any changes but um examples on on what a server supposed to do maybe um are needed so how about uh um per week file it as two letters and and mark it for I guess for document"
  },
  {
    "startTime": "01:52:03",
    "text": "update and then go from there so I also wanted to as for as entering the comment to do a time check so we we have 8 minutes left um we suddenly won't be able to finish all the issues the one is we do would need at least one more meeting to kind of finish going through all the items uh which we'll try to schedule I guess in January uh but separately also I think we have the qu question of um interest level and who wants to Take On The World so we'll try to I guess address that in the next meeting is that my understanding can per yeah yes it makes sense that we would schedule an inter room uh for January I think that's a good agenda for that meeting as well okay that mod will also be having an interum in January as well as IV so we'll have a a couple competing interims to deal with okay um I I will try to update uh on the issues list if I had any comments rather than slowing up the meeting so so I think everyone should go through the issues list and update with notes if you make it think it'll make it go faster I think the big discussion is is how to do uh what I really want which is uh flexible message en coding just like HTTP so so uh that's at the the message level not at the session level like we did in the first proposal but it it's would be a a huge win to to"
  },
  {
    "startTime": "01:54:00",
    "text": "support Json and and seore I think everyone is in agreement it's just how to do it maybe is uh where there's some work to be done Andy do you want to file a separate issue for that how do you want to track then M there's already an issue for uh encodings in fact I think there's two issues for encodings right but I think what uh Andy is kind of broadening that thing from just encoding to a flexible message format right I mean I he made a reference to http so I'm assuming media types where you know the client can uh specify the accept format I see um but you know going back to a comment that Rob made earlier uh what is our true intention here in terms of maintaining protocols going forward um you know I mean I'll say something outlandish which is that I wouldn't be surprised or it wouldn't it would be uh unsurprising to me if we focused on rest conf going forward well I I don't know there's still a lot of usage of net comp and there's the content type and the accept uh mechanisms are are really too complicated but uh I have a proposal how to do this and if you look at co-a content type as as uh um I don't want to you know totally change the protocol but the the ability to say I'm using this this media type and I want uh Json back or I want seore there's already way to do it for"
  },
  {
    "startTime": "01:56:02",
    "text": "Yang push Yang push you just specify the encoding and magically uh you violate the the protocol and send what they asked for but so but it's not there for like large RPC replies um which is not as important so uh I you know can understand if we don't go that direction but uh the same kind of flexibility that's already in rest comp is would be good for NETCOM okay uh thanks Andy for that suggestion and also for the suggestion to that and mentioned for everyone else is go ahead and feel free to update the issues section with your opinion or suggestions on what you want to do next with either an existing or a new issue any other question or comments before we close the meeting uh just a quick comment I apologize to the working group for not getting here on time I meant to but for some reason the I secretary's email to me with the interim uh meeting invite didn't come through and uh so if it's not on my calendar I don't know it exists sorry about that all right uh thanks everyone and we will meet in the new year until then happy holidays bye thank you very much thanks everyone thank you holay well done by"
  }
]
