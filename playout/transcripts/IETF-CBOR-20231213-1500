[
  {
    "startTime": "00:00:06",
    "text": "hello everyone to this last um meeting in this year of the COO working group um I'm not showing any spec special slides today because you all know how this works not well applies Etc um let's start with the agenda um if some people come late um they'll still see that we'll kind of agenda will take us few minutes a a minute or so anyway um for today we have the shepherding of the drafts that recently passed back through last call um the next steps for the common deterministic encoding and then a block on cddl 2.0 um where Caron has slides for which Carson has slides for um on the topic of um C use and other sdos um some one very recent recent cast added that there is something about c c LD so we'll talk briefly about that as well and yes that's what's on the agenda now any additions to that changes that we should make um in terms of shuffling or what is in there um hearing none I'll go ahead with the status of the uh updates through the grammar of cddl and the new grammar of um C diagnostic notations those have passed Rec group last call um after ITF 118 we've um exchanged a few mails and I will be sheering those and I've already started um reviewing them for sh shepher review and unless something comes up there which I don't expect to um we'll have a um uh no I'm I don't I don't have slides for that so I'm just um working off the uh working off the notes and cast"
  },
  {
    "startTime": "00:02:00",
    "text": "actually I have SS for that oh okay yeah then um I'll just pull them up and yeah hold that y okay um so there is yeah perfect thanks um and with that they'll get their Shepherd review and should be on their way I can promise that this will be done this year but um they're not too long so shouldn't take we have a pretty interesting bubble in front of a bottleneck at the RFC editor so lots of stuff that should be published now is sitting in the RFC editor Q so that that will be interesting after we have completed uh the process yeah but I I would suppose that even with even if the sheer if I managed to complete the shepher right out this year um isg review and Etc would take some time until this Tak his RC editor anyway so let's see let's see how that works out yep um on the CDE um SL um Caron you already have presentation right so please continue there yeah so my um um perception is that uh we we are pretty sure that we want to do this and we want to do this without spending another year or so on it uh and the the document should be useful for this um I think we we need to uh put some attention to detail in there and so far the only place where we have found a need for that um is Nan payloads not a number of payloads um but I'm not entirely sure that's really the only one"
  },
  {
    "startTime": "00:04:00",
    "text": "so um it it would be um interesting um to to hear from from other implementers but on the subject of Nan payloads uh the problem really is that uh this is a pretty dusty corner of I e754 and uh the interoperability specifications in 754 are well yeah pretty full of holes um in particular because implementations of n payloads actually have diverged in the past and and i e was not strong enough to Simply say okay that that old implementation and that ship that that you can't even buy anymore that that is now non-conforming because we are agreeing on something so we have to do a little bit of of it E's work here which is not exactly what you would want to do but but in the given situation that that may be quite appropriate because really people haven't implemented it because it's so incredibly hard to to find useful information about it so the role of the CD document could be to add a little bit of guidance uh here what an implementer of a generic uh CA encoder decoder should do um but even with that I think it's it's uh fair to assume that many won't Implement even basic support for n payload so uh with with that U hole or or limitation in in the the full compliance to the specification however you want to uh call it um it's um probably not a problem to write up the the deterministic encoding for that anyway"
  },
  {
    "startTime": "00:06:00",
    "text": "uh because uh uh well if people want to do it then they can do it right right away so uh we actually help uh Implement us here we don't are not putting any undue concern on that that's probably language that that we uh need to to put in there that that says um okay we know that n payloads are are a Dusty corner and uh we we don't necessarily expect people to implement this on the occasion of implementing CDE but if you want to do it here's some information on on how to do that could could you maybe say one or two words on what the what the issue with non payad is I mean I've I've hadn't had my fingers in that corner of floats for quite some time um my understanding is that non payloads are essentially like there is a nonone flaged by some things I think in the in the exponent and then the mantisa is kind of freefor all and it doesn't have any equivalences anyway because there's only Power equ equality defined on floats in the first place and any none is unequal to any other none anyway correct what so what do those non-conforming implementations do that we would um where we would be doing it jobs well what one issue with n is that the the bit that actually tells you whether the N is quiet or signaling um is defined uh we know where that bit is but we don't know which values mean what um since that was an inability problem everybody has essentially agreed on on a particular meaning of that bit uh which of course I I forget I think the bit set is quite quiet and the bit not said is"
  },
  {
    "startTime": "00:08:00",
    "text": "is signaling I I don't remember but there is now a a common way of doing this and we actually make reference to that in the U preferred preferred encoding discussion in 8949 so since it's typically not particularly helpful to to send a signaling uh n um we um I mean you you can send it but people will not be able to do a lot with it because it will immediately signal um you typically are interested in in inability on the quiet uh uh n um and the the other thing that um the preferred encoding does is it actually does um requests you to uh use the most compact uh form so you would use a float 16 for for a nan in particular for the the quiet man that everybody implements it's probably a good idea to to have a common form and and not have the three lengths um for them but that of course means that you would have to Define uh which long n payloads can be um abbreviated with which uh shorter um payloads and uh that that is again something that 754 is not explicit about on the other hand it's pretty obvious what you want to do you want to do exactly the same thing that you're do doing for non um so you essentially check whether the rightmost bits are zero and if the rightmost bits are zero then then you can use the more compact uh representation by by by elighting those rightmost bits so a non non payload is essentially the sequence of binary digits that is after the binary decimal"
  },
  {
    "startTime": "00:10:04",
    "text": "point um with so it it uh truncates from the right not from the left as as integers usually would do but that that's already true of of other floating Point numbers as well of course okay S I don't know yet what kind of I don't have an opinion based on that yet but at least I know what to think about well I actually have to do a little bit of archaeology and and look at my implementations how they actually handle uh this uh I would expect they already handle this the way I have just described but I have to look it up and maybe fix um some of those and I might learn something from from the fixes but I think that's the the one remaining thing we we should simply specify and um even if 754 doesn't give us a lot of Guidance the the the actual implementations to as a point of curiosity to judge to kind of to to make something of the silence that I hear around this otherwise um could I get a brief maybe show of hands of who has ever worked with floats no matter whether or not in seore in the first place of those round"
  },
  {
    "startTime": "00:12:00",
    "text": "okay so I I I I I I will I will I will I I will Mark I will Mark in for for later review that for late for kind of for the later summaries that this is indeed a niche topic yes and and Michael's jet comment I think is is pretty important uh that uh we have to make sure that we don't build in a trap here for uh people who who um actually aren't interested in the floating Point stuff at all but have to deal with potentially malicious senders that uh put an Nan into a payload making the implementation explode at the wrong time in the wrong place and uh we we have to uh make sure that doesn't happen but that that's that's actually a bug in SEO and not a bug in in city so so it's actually probably okay if the seabo library has no support for floats at all right you've compiled it out completely right so you receive this thing yes just an unknown the place where it's dangerous is where the library has support for floats and we weren't using them uh she didn't test them and then you get some yeah some thing in there and you try to print it and whatever right yeah two two or three years ago I probably would have completely agreed with you uh with the The increased attention for floating Point uh processing in in machine learning models I think that is changing and we're going to see more of this floating Point stuff in the constraint environment as well um so I think we need to pay additional attention and I still have this this draft that actually looks at modern uh"
  },
  {
    "startTime": "00:14:02",
    "text": "machine learning en codings for floting Point numbers there are a few more that we probably need to support in arrays right posits for instance and uh yeah that that's on my program for 2024 but there there are also 8bit uh floating Point values and and other interesting things that machine learning people are using and and so we probably should put in support okay I think that was some some useful guidance and and how to develop this so it it is okay to have some of this discussion in the CDE document even though it's not not a core CDE issue but uh it's a convenient place to put some discussion uh in that that will also be helpful to the CD people okay thanks um I think with that we can go on to cddl okay so we have four documents about CDL in the pipeline right now two we already discussed so the the CDD grammar fix and and the literals uh document um so the the next one that we should uh probably wrap up is the more control uh document so um the much of what this"
  },
  {
    "startTime": "00:16:00",
    "text": "round of adding control operators to CDL is about is uh doing more for supporting both Jason and CBO as the the target representations in a single specification so we have a lot of things that that convert between text and binary so we have base 64 support and and things like that uh so you can all do all this without adding tons of comments and and tons of of uh ad hog code um it turns out that uh there are of course other representation uh techniques here for instance uh a number could be represented by by a decimal uh representation we already have that in there and uh now we have the first example where somebody wants to have a hex uh representation and instead of adding half a dozen more control operators with all the formatting support they actually want fixed four digigit text numbers um with the zerox in front um I decided that it probably would be a good idea to Simply add printf to cddl um which uh of course is u a pretty big thing and we probably need to spef ify down a little bit to what we actually expect to uh support so that there uh I expect to to have another round on on this document where the print of support is specified to more uh detail um the question is uh is there anything else that we should support in this round and for that of course it would be interesting to see what what cddl are we using um there are almost aund ITF documents that now have cddl in"
  },
  {
    "startTime": "00:18:00",
    "text": "them so um it is getting a bit tedious to to um actually check all of them and see which which could get uh which would benefit from more C support so getting input from the people who actually use this uh would be the most useful way to to move this forward and I'm wondering how we actually can can solicit that of course CD users are in the ITF and also outside the ITF um so we we would have to find a way to to reach out as they say um to the the outside ITF communities as well so I have some some U pretty good input from TCG which is also where the Sprint F stuff came uh from and um yeah if we have channels other people who are using CD we should try to use them to to uh put a lid on on this document of course you can always do another one uh later on uh but doing them every few years or so is is probably a reasonable um rhythm I'm just wondering if it make makes sense to contact work it at least for within the ITF where it's hard enough to contact working groups that have used this EXT that have used cddl extensively maybe send a mail to say the four or five working groups because they are likely not to be subscribed to se or readed um but their own lists they might more easily read that might"
  },
  {
    "startTime": "00:20:01",
    "text": "GA us some attention yeah so we would uh allot them to this thing and to the next slide as well um that sounds like a good [Music] idea of course what we also could do is is have a kind of a cddl focused interim for interim segment uh for for each of these working groups um but maybe we should do the general call first and then see if they interest interest good so the final one on the set of documents that we currently have for cdl2 Z is the modules um document um this is actually in use in some specification so for instance I I copied um uh number of lines out of the Reds UCCS um document uh where we want to say hey import the the rest of the uh rules from RFC 1952 and those people who already have an implementation of the modu spec can do this with semicolon hmark and the other ones will have to do this manually um I don't want to put in a normative reference here because that means that UCCS which already is is has been delayed uh a lot would get more delays so this this should be finished uh very"
  },
  {
    "startTime": "00:22:00",
    "text": "very soon so this is a kind of a uh hidden reference to to the modules draft and I would really like to to reduce the number of occasions where we have to to uh do this so this this should also be completed reasonably quickly but we need feedback from users so we we have the same problem we have for for the previous slide and may we can combine the the two uh requests into one so maybe this would be a good time for a PO who in this room has actually used the modul stuff PA's open now ouch yeah which is not surprising to me because the the core people who are using uh cddl really are using it for constraint systems and you often don't need this for constraint system you need this for more complicated stuff like like the stuff done by TCG or in the Reds working group and so on um so that's maybe part of our problem that that the people who do the more complicated uh work actually don't go to the SEO working group in which case in which case it might make sense to accompany the"
  },
  {
    "startTime": "00:24:01",
    "text": "um uh to accompany that mail um asking for input about those two uh with an invitation to join a particular interim uh if we if we want to designate one so say say the last one before the next ITF something mid-February or so um we can we can designate that in now already or by the time we send that email out and and then gather a bit of a larger crowd for for discussion on that yeah sounds good a thanks ARA that's also a good pointer okay so we should have some some common meeting with the relevant Global platform people very soon I think I yes uh the uh three editors of uh client API which is the universal API for connectors to any security component specifically a TPM or a Mars from TCG or a te or a trusted app inside of a te or a secure element um that's the first of the core apis and it is also used by entity attestation protocol API which is a wire protocol using eats that's vast L more mature than anything in ITF rats"
  },
  {
    "startTime": "00:26:01",
    "text": "and the third is a universal key store that's completely operating system and application neutral um and is undoubtedly going to get widespread use because of being promoted by the global platform te work group so do we have access to those documents they are all in public githubschool but we were talk Monday we were talking about import slash include functionality and how really nice it would be from their point of view to have it already published yep oh and relative to floats about a year and a half ago um Jeremy and and his whole larger group from te and TPS work groups uh decided to hell with floats forever we're not putting them into or libraries yeah that that sounds good to me um they they may come up in weird places um the difficulty is them bleeding into core like the internal API between Tas"
  },
  {
    "startTime": "00:28:03",
    "text": "and um a te and they really don't want that because they are certain that there are then going to be um implementation errors yep yeah so there there always needs to be some some um uh little Chinese world that keeps the floting points that you actually need um in in an already represented form so if you have a health certificate that that your um HBA A1C is 6.5 uh and somebody wants to send this as a floating point then then your U certification for uh that that certificate is not going to blow up just because there's a floating Point number in there fortunately there are C uh there's C encoded binary string um binary strings that contain C for those CES absolutely right good so I'm done with the things that that are on the agenda I have a seventh slide just for for reminder that there's something else on our plate and um we need to continue getting um input from from implementers and spec writers uh as I said uh we have input from the dnnc people and so this this uh is going on but of course at some point we need to decide we are done with this and um Can"
  },
  {
    "startTime": "00:30:03",
    "text": "can publish a first version and um then start working on the next yeah um you have this nice word time box in there um I'm I think I think we're stuck at the point where nobody is making a suggestion so I'll just make a suggestion and wait wait for the group to say either kind of do it um cut it earlier or cut it later um so if I say um so I would go into these negotiations with end of February 2024 um does this sound good for you so what exactly do you want to have in in end of February 2024 um a cut B Bas basically um a new feature cut off so but by that time it's like everything that like if there are editoral kind of we can still have editorial changes and and and kind of um fixed BS and stuff but end of end of Fe or whatever the time would be um let's say that we don't um we don't kind of push in new ideas un unless there are really bugs to fix here okay so we would do the working plus call at that approximately that time yes I mean the second working R SC obviously yeah I think this should put us in a good position to have something that we can say that that we're done with um by by the next ITF good great that that was easier than I expected um okay"
  },
  {
    "startTime": "00:32:00",
    "text": "um any anything more on that otherwise you also have a point on on the cldd um at least added to to the to the agenda so Ira question is do we have a timeline for CD 2.0 sorry I keep forgetting the chat we what I can say is we don't have a milestone for that yeah what what exactly is that because there are several pieces in there we don't have any Milestone so whatever that would be it is yeah um so I think we have these these pretty much independent two items more control and modules I mean we have to finish the other two documents as well uh but that that should be happening now this is just procedural stuff uh so I would probably be happy with uh having a a freeze of those um early next year as well don't know if this needs to be the same date I think we are a little bit further along here so it could be even earlier um but uh uh doing some some time boxing here is probably useful as well yeah so this would be more control and modules and of course the there is a third item which I have been calling cddi 2.5 because that really is is adding something to the fundamental model uh which is about annotations uh and I think there are lots of of uh applications where we want to have those annotation um but that's not something I would be"
  },
  {
    "startTime": "00:34:00",
    "text": "able to put a timeline on yet next year so one one piece that that we have been working on in another working group is the Json path uh specification so the first thing we probably would want to do is uh see how we can make path useful for SEO and and in cddl uh so you already can use it for for any Json U specification that that uses cddl uh but we we have to to say how it it would be interfacing to that and you would have to extend Json path with uh sio uh elements so Ira also sees February as a good feature freeze for modules and more control sounds good to me okay so um so um that that that communication is a good point to mention um so cast will you um summarize the because the the mail we talked about earlier um"
  },
  {
    "startTime": "00:36:01",
    "text": "belongs to those uh to those two things um will you will you send a mail out to the relevant working groups I will do that or I will send it to you so this can come from a working grou chair yes thank you for great and we have a plan okay so I still have this other thing I wanted to briefly yeah talk about okay I can forward that me to Global platform and TCG great um I just wanted to to point out that um the the Json LD people have finally noticed that people don't really want to use Json for applications that either need uh good encoding efficiency uh uh spacewise or encoding efficiency TimeWise um so uh they are looking at how to uh introduce seore in their uh applications and by the way they started"
  },
  {
    "startTime": "00:38:01",
    "text": "out by putting in yl uh there's now a yl LD um spec which is a community group spec at the moment so it it doesn't have official w3c recognition but it might might get some soon um so this points out that they really want to to uh um spread out to to other uh representation formats than than just Json and there already is a spec that is called cldd which essentially documents what one implementation did and I'm I'm using the term document pretty Loosely because it's essentially um that's describing what the implementation does that doesn't provide any rational or or highlevel view of of what's going on there um and so it's it's essentially a variant of of SEO PC the the way it it's being defined uh right now and of course we probably want to do a little bit more there um because uh Jason LD of course is rdf and uh maybe there are better ways to to get rdf represented uh than going the The Detour over Jon LD um but of course the JD people want want uh to somehow integrate that into the ecosystem so there there are lot of non-technical aspects coming in here that that I I don't fully understand anyway uh that will come up and one thing that is important to know is that c document is just the description of an implementation and and"
  },
  {
    "startTime": "00:40:01",
    "text": "that's great so it it's certainly a basis uh to look at um but it it's not uh fully fleshed out uh specification for for c um and U there's also well rdf of course has has lots of interesting encodings and the the question is uh just like Json ad is a good way to uh represent rdf in in Jason in a way that people that don't want to run the whole rdf Machinery still can use some of the information um that same thing might be applicable to to CBO Jason now has this this interesting mechanism Jason 1.1 called framing uh which controls how the rdf information is shaped into adjacent so you you can using this framing stuff you can uh make sure that that Json NDS is actually more useful than just as a transport format for something that you uh turn back into have to turn back into rdf for processing anyway finally after like 10 years so um I think we can discuss how how useful this framing stuff is I I haven't actually worked with that uh yet but um so there there's lots of things going on there Technical and non-technical and I just wanted to point out things are going on and it's not like this is a done deal but it's something that we will be able to to influence um if we want to and uh so uh let's keep an eye on what's going on"
  },
  {
    "startTime": "00:42:00",
    "text": "there so kind of personally having used um a lot of CRA and a lot of rdf um if this shaping is finally there that may make a lot of kind of I I think that for for the use case where seabo is relevant it might be worth looking into whether there can whether um we can do something like shaped only um Jason cabore LD um because if you're using seore you likely don't want to be explicit by the rules anyway so can just as well provide the shape and the context all out of band always and then we start getting into a then it starts it can be interesting again because we have that shaping and that shaping might if kind of looking back to the annotations might even provide an equivalence to something like C based triples or whatever um using some CDL transform and then it's the question of kind of which transformation language do you use but if the encoded C is equivalent to some rdf no that that that there might be something in there and it can be kind of if it's useful in in both directions and you can grad your implementations with the shape I I I should probably have a look at at shape at this at that shaping here yeah I think one of the problems here is that those Transformations can be very lossy and um the the Jason LD world is is very much uh under control of of this an pattern of of shaping your design by the examples you come up with um and uh of course you have to have examples when when uh doing a design but uh if your focus becomes making these examples look good um even"
  },
  {
    "startTime": "00:44:03",
    "text": "if you have no hope to actually get something as clean uh in the real world application then then you have a problem and um I I would like to avoid CLD to to have the same problem so it should be something that can be machine generated in a reasonable way and uh if you actually need to pack something use something like Zeo packed um but uh don't don't require some hidden semantics uh buried in the compression mechanism which is what C's really is um okay so careful with those Transformations because they may be very lossy of things that people who work with Jason L uh find important thank you that's that that was a bunch of good pointers comments those interested in in in in in kind of more um more comments might also want to look at the chat but I think nothing was added there that is worth repeating here um any other business that we should discuss today hearing none uh thank you Marco for um writing most of the minutes um have nice holidays and see you all again when the interims resume at some point next year um which that will tell you thanks see you"
  },
  {
    "startTime": "00:46:02",
    "text": "then thank you thanks bye-bye thanks"
  }
]
