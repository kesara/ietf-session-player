[
  {
    "startTime": "00:01:05",
    "text": "Yeah. I Sava, Okey dokey, everybody. We're getting started. We So hello, everyone. This is the second part of the technology deep dive on BGP. And, hopefully, you saw the first part, which was on Sunday as an afternoon tutorial."
  },
  {
    "startTime": "00:02:03",
    "text": "If you have not seen it, it is available on YouTube, and it's really good. And, have to tell them it's really good. So this is gonna be the second part. Even if you haven't seen the first part, the second part should still make sense. I think that that's it. So take it away should make part. as much sense as the first Exactly. So you, everybody, for coming. So the first section was basically BGP for protocol developers. You know, if you did know much about BGP. Looking through this room right here, we see a lot of people that, know, know anything a little to an awful lot of DGP or at least in one case, actually helped Right? There there are several people who should be up here instead of us, but We're the, ones who are the soccer's and said yes. So this point where I should actually go with the clicker because we actually wanna advance So you'll note in the data tracker. This is called the dump truck site. Not because we specifically wanted to do dump trucks, but because Warren really, really likes dump trucks. Smack. We'll work it into the talk anyway. So little bit about us. So I've been doing BGP for best time that this guy here currently, I'm one of the IDR chairs. So, you know, part of my day job figuring out how to do the new things and try back to break all the old ones. Been doing this roughly about 2000 with a small background as an ISB. Similar things, not quite as small of an ISP. Started a little earlier. Next, So of our favorite quotes from, know, Doctor Choi P. you BGP is a very useful tool. It's very sharp. And, occasionally, you get cut by it. So part of the talk here is discussing how things have worked out well for us and sometimes how they actually don't. So, yeah, BGP was invented because the internet needed a routing protocol that wasn't EGP. It really did. And"
  },
  {
    "startTime": "00:04:02",
    "text": "then BGP 4 was invented. Because, the internet needed Classless routing, And since then, it hung in there a long time. So, yeah, stabilized at version 4 in, 1994. And see. Counting my fingers, and that's been a few years. So, yeah, 2, Jeff has, nice, presentation on YouTube. If anybody wants to dive into a lot more of the historic minutiae, but like, the why it didn't die. 20, 25 years ago is because It has just enough and just the right kind of extensibility features. And probably the biggest thing about it is BGP has to be incrementally deployable. Every time you add something new, You can't break everybody else. Least you hope you don't bring everyone else. We talk about that, throughout the slides. You know, the second part is, you know, when you actually do wanna deploy the features, figuring out how you actually scope that is an interesting set of challenges. So, no. What what's actually interesting out of BGP if you're somebody that's a routing geek PGP is a path vector protocol. What does that actually mean? Well, you you no disrespector fairly well. The distance in this case is theoretically a list of autonomous system numbers. It's the thing that BGP actually uses, by the stuff at the beginning, especially it's gonna be very beach P101, especially if you attended a native talk. But important things here is that, if you are doing BGP. You know, there are 2 different sort of primary scopes you worry about internal where basically you're expected to be full meshed. Everybody gets the same route as everybody else. An external. And, you know, that's the place where interesting stuff is expected to be happening."
  },
  {
    "startTime": "00:06:00",
    "text": "Internal has semantics that are kind of sort of a little bit like IGP semantics, although not really. So What's the state being passed around DGT? Well, Routs are destinations. We call them network layer reachability information. We like long words. And a vector of half attributes. And, you know, for a lot of people, especially you've, spent time doing other stuff, you know, anywhere else. It's a key value protocol, you know, it's sort of high level. You know, you have a sense of how it works. And Most important one of these things is the actual AS path, which is the vector of ASs that stuff has passed through. And anything about BGP? Operational practice is mostly done through policy. You know, configuration that lets you actually control what's accepted by BGP, how it gets propagated, how it gets used, PGP is actually a pretty straightforward protocol until you actually try to make it operate. No. That said, you know, BGK runs over TCP port 179. And and we have to put the stuff in something. Yeah. So, it's widely observed that, PGP carries around a lot of different stuff. And It's it's kind of just one more case of the, the old syllogism. Know, we have to put the data in something. EGP is something. We have to put the data in BGP. Yeah. So, you know, the problem is, no, people have very strong opinion I'll actually can you can you back up one thing. There's one one thing I I did wanna cover. Which is that, People like to talk about how they wanna flood their data so they're gonna put it into BGP because BGP is awesome for flooding, and really no BGP doesn't flood. There is like no flooding feature anywhere in the protocol. It it That that's not a thing. It doesn't exist."
  },
  {
    "startTime": "00:08:00",
    "text": "However, it does give you distribution semantics that end up getting routes everywhere as it's normally configured and deployed. Yeah. It is actually very chatty as it's doing that. Convergence for BGP source of several papers, and we're not going to cover those today. Like, who's saying, you know, people have very strong opinions what you actually should carry in BGP. And, you know, one of the things that you have in IATF is if you are Constantly being asked to put strange things inside your protocol, well, you know, it's popular. DNS is another favorite thing that people want to put stuff inside of. You know, they're popular. And the problem is when you're starting to look well, what can you actually shove into these things? Now people start making analogies. Hence Warren. I was like, Is the protocol a dump truck? How are we gonna throw all this stuff in here and carry it around? You know, large. It's solid. It's doing its job well. And maybe If it's really successful, it's even bigger dump truck. The trouble is, you know, people that usually start talking about these things as being dump truck. Well, what they actually think is is a different kind of thing. Not everyone sees it the same way. No. So if you're gonna carry your stuff around, you're gonna have opinions a lot of this breaks down in terms of, you know, not should the protocol carry the thing, clearly, we have had success carrying all sorts of stuff inside of BGP. But we're concerned in our operations about when we're carrying it around and does it go to where it needs to. Guys you have a dump truck or a garbage truck doesn't necessarily everybody everybody wants you to stop by their house. So Yeah. What what do we use to carry in there. Well, hopefully, the ipv4 and ipv6 routes are not a controversial use for the protocol. If if they are, it would probably be time to end this session. So in obviously, IDR, which Jeff Co chairs, is the the main group that looks after standardizing the core protocol."
  },
  {
    "startTime": "00:10:00",
    "text": "There's also the grow, grow, group that, is kind of the the the ops side of talking about how BGP is deployed and used. And grow and IDR work together hand in glove they they the the ALA is pretty well. So but wait. There's more. Ellen. Clearly, the first things we carried in were just IP reachability. And that was enough to keep people very busy for a while. Eventually, we start putting in exciting things like virtual private networks and know that, you know, blossomed into 2 or 3 versions of, you know, the group that is now best that carries stuff around. Flowspec is an absolutely exciting and useful and absolutely terrifying going to blow up the world thing as well, that gets carried in BGP. It's its own talk. I gave a chat at, a prior nan about how useful it is and how it has also caused no terrible things in the world. But, know, the problem Doctor 20p said earlier, you know, these things are you is, is sharp, you will get cut sometimes, so be careful with what you're carrying around. Some other places that we get some use is that, you know, we can carry links state in there. Beach beelink state protocol mechanism that is also used by the link state vector routing group. And, you know, we have a lot of exciting stuff that's been going in there and off a lot of segment routing in particular, takes advantage of the fact that you could actually program segment routing using link state, no mechanisms. As an aside, I will point out that pretty much anything. I mean, I think anybody who's done any work on on a protocol that's been around for a while has eventually worked out that no matter what you think you're writing your protocol to do, not what it's gonna be for 10 years later. So PGPLS was absolutely positively only there to allow monitoring stations to extract"
  },
  {
    "startTime": "00:12:02",
    "text": "you know, link state information because they didn't wanna snoop on the on the IGP because that would be rude. You know, it's definitely not supposed to be used for for anything operational. I think we probably if we go back into the, you know, minutes of of IDR meetings where it was being discussed, we we'll even find that. Oh, oops. Yeah. Thou shall not carry extra in link state. Well, thou stuff heart doing. Yeah. Yeah. know, as Why is BGP popular protocol? Well, you I was talking about earlier, popular when the protocol and its deployment model in particular gets aligned with additional use cases. Was John saying, well, we BGP doesn't really flood things. You know, you throw it in there. It does go around and just as importantly, it actually passes across multicriber boundaries. You know, this is something that most of our IETF protocols don't have a generic feature. So This is often the motivation to at least look at Bgb for these sorts of things. Of course, Going back to the earlier slide, if it looks like a note key value protocol. It looks like a generic Tlv thing that you can just an extra thing in there, and that goes along for the right. That's a happy day. No. The trouble is, you know, if you have all these properties, It's easy to do it. Sometimes if you can't stick it in Tlv, maybe you just create a completely brand new, address family for this stuff. N, n, you know, if if you can put an address family, you could put it inside of a path attribute, you can do this as a inter domain thing. Everybody went to dump truck pulling up to their house? Not usually. So the operational model matters. So Yeah. Problems with putting everything into the dump truck is that it slows the dump truck down, it The the the dump truck has to drive a longer route, And maybe you put so much stuff into it that it breaks. Hopefully not that. So this is both true when"
  },
  {
    "startTime": "00:14:00",
    "text": "thinking about the implementation of the protocol, but it's also true when just thinking about actually moving the data through the network. So, of course, one of the issues as we are discussing with Lusbeck is there's consequences when things go wrong, especially you know, everything is inside of the same dump truck. So Theoretically, the Internet's not the research anymore. We make a lot of our money, you know, for people in this room. Getting things actually done, anything from the trivial of carrying cat videos to helping remote surgeries happen to interstellar travel. BGP is the Internet routing protocol. So we care about it, for doing everything day to day. And the trouble is when something goes wrong, each of these often part of the root cause for large scale outages. HP is just a routing protocol. It's software. Sometimes it's just bucks. And we talked about how policy is important. You know, how things are deployed. Operations matter. And for that means, you know, how you actually build your implementations are going to impact that. Really? And Unfortunately, this goes back to my Picchu Coucha for last night. Sometimes complexity is your, you know, enemy. No. The more complex things are, the harder it is for operators to do things, And when you're doing this in a massive distributed system like BGP, this is going to be a problem. So let's No surprise that people are very sensitive about what goes inside of the thing. I have a tiny footnote on on that slide. Which if I've seen at least one paper that reports to prove that BGP is turning complete. Meaning that, you know, if you deploy enough BGP routers and you deploy just the right policies on all of them. You can make it deter and complete. If anybody actually has a citation for that. Maybe you can drop it into the chat. I certainly don't remember"
  },
  {
    "startTime": "00:16:02",
    "text": "what the paper was or where it was published, but I think that is a great, demonstration that, Definitely, you can configure it in a way that is probably too complicated to reason about. You know, so the question is If this is so important, we've actually gotten the useful things done. Why don't we just stop them to clear victory? Well, sometimes it's just the right place to do the work. No. One of the challenges we've seen in IETF is we we do have popularity. These are because we use cases that need solutions. Have problems need to solve. And sometimes we have the right place to do it. The question is how do we actually do it on the safe side of things? And, The big things we have to worry about is scoping. BGPs primarily as a protocol interested in 2 flavors of soaping. Where the reachability itself can go. And the stuff that's inside of this giant stack of TLV is called path attributes. How are those scoped? So Yeah. We we talked about this, on Sunday, but you know, the the base protocol, the base BGP protocol just does ipv4, you know, cast. And if you, you know, read through that whole RFC, you will see encodings for IPV 4 prefixes, and that's all. Because of the fact that we have these path attributes that are extensible in just the right way. It. Gives us the ability to which other stuff in there, including, first of all, ipv6 routes, and but later, you know, lots and lots and lots of other things. Basically anything that you so Jeff talked about BGP being, you know, more or less, you can think of it as a"
  },
  {
    "startTime": "00:18:00",
    "text": "generic, although very kind of weirdly non orthogonal key value protocol. The The extension that gave us ipv6 support gives us pretty much arbitrary key thing support. It's you define a Nafi Esafi. That's your code point. Into that particular database of keys. Yeah. And The other thing, other attribute of that aspect of that is between any any given pair of VGP speakers that are talking to each other. They send what's called the capability at when they initiate the session. To tell one another I support this Afi Safi combination it's not advertised, it's not supported. And therefore, the the scope of how any given Happy savvy can travel, is scoped by the connected set of BGP speakers that support that given Afi Safi, unless we talk about things being leaked from one address family to the other, we're not gonna talk about that our way. So for the most part, scoping, again, very important. The trouble is the biggest scope that we have today is the internet. So when stuff does cross over into internet scope, things can get very interesting. So The other problem is what do you actually carry your sessions on and, you know, how many sessions do you keep when you could keep all your eggs one basket or you're gonna have separate baskets. HV is quite happy to carry every one of those address fan ladies all on the same session. Sometimes this is not a great idea. You know, talking about link states in theory that was expected to be completely separate in practice People will just carry it all in the same one because it just works most of the time. Sometimes you want to actually carry the address families together because there's, you know, actually useful this for your bundling. You do one, for example, Your labeled unicast trim keyless to go across the same family that carries your IPV 4. You're gonna use it for tunnels."
  },
  {
    "startTime": "00:20:00",
    "text": "And sometimes, you know, you have no resources with these things. Ideally, you're analyzing things for safety. Scaling and, you know, sometimes just operational complexity. Do you choose to go for altogether, or do you go for splitting it up structural segregations, ships, and the night type things. Are very important for safe operations of EGP just as importantly mean that just because the protocol can carry things all in the same protocol, doesn't mean that you have to deploy 4 words, head of line blocking, Yeah. So How do we how do we extend BGP? Everything's TLVs. TLV is all the way down. Owned by the way their is unfortunately not a completely uniform set of conventions to how the TLVs are built at every level, which is regrettable, but true. But, anyway, the the, more or less, the rule of thumb that practitioners use is extend an existing attribute when you can because among other things, we have a fairly limited universe of code points for path attributes themselves. It's just a one byte field type field. If you need new semantics, then you find a new path attribute. And a huge part of the, you know, sort of excess of the viral nature, if you will, of, of BGP is because it's possible to add path attributes that are what are known as optional for reasons that we covered on Sunday and transitive. And the transitive part means that if I'm a router that speaks attribute, Fu, and Jeff Seroder that doesn't. And Warren does"
  },
  {
    "startTime": "00:22:04",
    "text": "Well, I can take my optional transit attribute give it to Jeff. He'll look at it and say, I don't know what this is, but it's transitive, and he'll give it to Warren. Who will then look at it and explode because I formatted it wrong. But I led us into a slide that wasn't the right slide. I mean, it was. My talking was the wrong talking. Oh, it's it's the right answer, and, that's next slide after that. But, you know, it's like, you know, Sometimes you have to decide, you know, where the stuff should go, you know, filtering path attributes becomes part of this equation if Everybody needs to be able to pass stuff around. Well, sometimes we don't want them to go everywhere. So being able to selectively pass them along filter them is sort of interesting. If you're doing the optional transitive stuff, The whole point is the ignorant router can pass it along to the all wise one know theoretically, it knows what to do with it. But That transitivity property is, you know, as John's saying, part of the problem sometimes. So what are we on here? How you talk to this one? So part of the problem is that, no, as things get passed around. We're talking about the the biggest scope, that we have right now is the internet. So when we're talking about things that look like IP Richability, which a lot of our best style protocols are actually doing. Now, it's often the case that protocol mechanism contains IP. So our layer 3 VPN stuff note has around these, labeled routes that have things like route distinguishers, under the covers, The important thing is that in there is that it has IP addresses involved. So this means that when you're passing around things that As part of our feature set, contain IT, a big portion of the headache you have deal with is that they can pass back and forth from context that might be scope locally. That's the whole point of a virtual private network."
  },
  {
    "startTime": "00:24:02",
    "text": "Or maybe it actually touches something get distributed into the internet. And Certainly, with these days, we have, you know, specialized applications like HEP fabrics. You know, that BGP is used to bounce stuff around in this as a switching environment. Those things interact in many circumstances, not only with fee but also with, you know, internet context. Steph is expected to be limited scope You have to be very, very careful about, you know, does it leak or not? Does it grow? Does it transform from one thing to another? I think if we have a rev this deck, we need to put a hold my beer meme in there. Yeah. error handling. It So subject near and dear to various scars that I have. And Jeff has too and probably warrant too. So Yeah. Rfc4271 is completely biased towards correctness. In that, we If I'm a BGP speaker and I receive something, a thing that remember that that I attributes that I forwarded formatted incorrectly and gave to Jeff who we gave it to Warren. Well, when Warren got that that attribute, he looked at it and said, This is formatted incorrectly. Oh, wailing, wailing, something has gone wrong on this BGP session. I can't trust anything about it anymore. The only thing that I can do is reset it. And that's awesome because that PGP session was carrying you know, a million routes and, a very large amount of customer traffic, which now has to slosh somewhere else. And people become unhappy. Happy eyeballs are no. And all because I formatted a path attribute wrong that Actually, maybe nobody even cared about maybe it was even just like some test that I was doing. So"
  },
  {
    "startTime": "00:26:02",
    "text": "And this is horrible for a number of reasons. One is, like, you know, the the thing that I just said. Also, there could be a lot of warrants. I could have sent it to Jeff who could be a route reflector who could have rep you know, several, you know, all of you fact, I could be the only person in this entire room that doesn't know how to how to properly, form this attribute. All of you could know how to do it properly. Jeff sends it to all of you and all of you reset your sessions to Jeff. And when we come back up, we make our sessions again, and you send straight back. And then we do it again. Yeah. This is like daycare. You bring your kids off there. One kid's got a colon. It brings it to everyone. So as John's mentioning, and I was like, we we had incidents that, caused us to decide that something needed to change in the road call. So 7606 came around and Now, our, our focus was stop dropping session, stop shooting the messenger for things that they're passing along, but they're not the actual fault for. Have a principle of minimum necessary force instead of maximum force. So So This was targeted towards increasing the resiliency in you know, the face of no original correctness. It's not perfect. You know, it's really tricky to get right. It's we're spending off lot of our time in IDR is analyzing new features to make sure that No. Air handling can work in a safe fashion. The problem is when things go wrong in BGP, black holes happen. You have things like zombies, you know, BGP is a stateful protocol. I hand something off to you. You're expected to remember it. You're expected to use it until you hear something different. So if we get something wrong, And you accepted and the session still up. It's gonna stay that way for potentially forever. I send the route to Jeff. He sends it to Warren. Warren looks at it and says, This route isn't right. I'm no longer gonna forward for that prefix toward Jeff. Now he's forwarding way off to the other side of the world."
  },
  {
    "startTime": "00:28:04",
    "text": "His customers are getting substandard service, but maybe it takes quite some time to figure that out because there's 900,000 other routes that are still forwarding in the right direction and just this one that's going off the edge of the world and has suddenly had its latency go from 50 milliseconds up to 5000. Oops. So we keep on talking about, you know, beachbies theoretically you know, key value protocol and we got TLVs in there for, you know, the the actual values. Well, If you think about your typical, you know, key value protocols, a lot of the stuff we'd like to build that easy and extensible and usable, we'd like to actually have self describing you know, adjacent or something along those lines. The keys are actually present there. You can figure out what it means. And sometimes the structure is allowed to be, you know, very relaxed. You can't do that when you're passing around TLVs. And more importantly, when you're incrementally deploying things across dozens of vendors with slightly different interpretations of things. You have to agree what things actually are gonna mean. So the challenge you have is Yeah. We got one numbering space. We have one byte. And despite the fact that, you know, this protocol has been going around for 20 plus years, we've actually only gone through 45 of the things we can use. A couple that are set aside. We have a few that are deprecated, but more importantly, When somebody screws up and makes mistakes, It's burned forever. You know, if somebody decides they're gonna start deploying something and they got some shipping code somewhere, something falls over and explodes because you handed something to a feature that so so so somebody put in early implementation for, and it's not clean. Different feature. Well, the code points effectively spoiled. You know, so, well, you're used to Diana type things of once you've been early assigned something, theoretically, it gets given back after a couple years. We treated basically dead for a very, very long time, which might be until the sun goes call the clean allocation matters. Another sidebar. It"
  },
  {
    "startTime": "00:30:02",
    "text": "suddenly occurred to me that we never actually laid down the the ground truth that Everything in BGP is a lovingly handcrafted binary format. There's, you know, and and got none of your nice encodings, none of your self describing many of your schema compilers, none of your many of your fancy stuff. It's, and and that's also why as I was sort of complaining about earlier, a lot of our formats are just slightly idiosyncratically different because are lovingly handcrafted. By whoever happened to be holding the pen for the spec at that moment. And this is in radical contrast to our doctor Tony P from the beginning who loves his you know, his protocol is very lovingly schema driven. Security. You know, this is always something that's very exciting topic when you start talking about BGP, the internet is blown up somebody's hijacked by prefix and, you know, what to do about it. And, you know, yes, we'll be mentioning each piece. So talking about some very boring pieces. Now, again, HP runs over report 179. Yeah. Yeah. Why do we run TCP? Well, because back in the day, the folk that we're putting together didn't want to invent their own transports. And just as importantly, they Remember EGP, which actually did its own stuff, Wrong. And they didn't want to be responsible for the bug. Might be able to point to somebody else that, you know, this is, you know, up to TCV. Gives us the boring things we care about. It's reliable. It's stream based. And that means that we can encode large PDUs in there. You know, think your typical ethernet, now 1500. HP packets are 4 k, which you can't necessarily do over that unless you got jumbo grams. No. A stream. It works perfectly fine. But this also means we get every single sin that TCP is gonna give us as well. That means that, if you have slow sessions, stuck sessions, drop pack 10% packet loss in TCP, your throughput goes completely to help. So"
  },
  {
    "startTime": "00:32:04",
    "text": "these are all things that, you have to worry about and effect this side anybody that works on BGP for any length of time eventually becomes at least a Well, great. No TCP expert. TSP doesn't give us privacy. No. Theoretically, you could use ipsec for that. And over ipsec, works perfectly fine. The gotcha is that, you know, just boring TCP is vulnerable to attacks. At least Why is this important? Well, BGP sessions sometimes stay up 4 months and occasionally 4 years. This means that if, you have something up, And you have somebody that knows there's probably a BGP session there. Gee, there's a router here. It's a router I think I know this thing's advice. Let's go ahead and cook the bear. And, you know, very early on, people are doing NASDTC, reset attacks. Which Very shorter freight. Yes. Right. Resulted in, TCPMD5 being, Invented, implemented, specified, Shipped, in I don't remember how long it took, but it was like under a year. Which was pretty impressive. Like, peep people look at it now and they complain, oh, well, got, you know, this problem or that problem, but, when you consider that people, you know, the internet was getting, you know, kicked over by people by script kitties, you know, Sir, I I think a a pretty, a pretty good invention under fire. It it has now been replaced because, or is in the process of being, let's say, deprecated and gradually eased out of be who's got, like, even a little bit of a sec flavor. And you say, and I'm, of course, using MD5 to protect myself. They say, are you insane?"
  },
  {
    "startTime": "00:34:00",
    "text": "And, there's a nuanced discussion to be had, but you're having a nuanced discussion, you've already lost, so it's better to just invent something modern So security of the data itself, you know, it's like even if you protect the transport, BGP's a route by rumor protocol. John hands the thing to me. I hand thing Warren, well, how does Warren know to believe the thing that I handed to him? I could be handing him anything and claim some shot. Which has caused a lot of hilarity in terms of how BGP gets operated. You know, people will sometimes accidentally lie, they'll take somebody else's routes and announce them. Some people will reannounce them and change attributes in some strange way. No. No. No. HEP expects as part of its normal perceived behaviors to change things have, I have, often, this means you don't get to do something like an IGP. We're not flooding. We're not able to sign the entire packet. So we have to do something else. There's a tendency to want to use the AS path, which relatively looks like this path vector of, you know, where we're passing the routes through from provider to provider. Well, its main purpose aside from being useful for route selection is to prevent routing can actually give you a sense of who touched it if you could actually believe them paths can be forged. So Yeah. The Address space is unless we're talking about legacy address space, which is a whole another thing, assigned by IRS, and it's more or less hierarchically distributed down. And, The the the the history of Trying to secure BGP has looked very much like I mean, it's it's It's looked like whack a mole, and it's looked like trying to pluck the low hanging fruit for a and a lot of the early low hanging fruit was, oh, I fat fingered my router. Oh my gosh. Dear me. I seem to have announced"
  },
  {
    "startTime": "00:36:04",
    "text": "you know, my entire continent to you, and I really didn't mean to do that. So the the nice characteristic about that kind of thing is that unintentional and I didn't go in and deliberately mess with the AS path to make my illegitimate announcements look as though they were legitimate. So For that, you can, there there's a really fairly simple and fairly well deployed now. A technique called origin validation. Which helps protect a lot against that kind of oops. But It still doesn't protect you very well at all against somebody who's lying to you on purpose. So the question is what can we do about the lot? It's, you know, when start talking about that thing, assuming you're not actually trying to make money by selling expensive CPU, we start talking cryptography and and BGP land that tends to mean we're talking about HP sec. BGP Sex, a mechanism where We signed the AS path hop at a time, along with the destination that's being carried And in principle, this means that if everybody's exchanged all the necessary keys, you can validate that know, everybody that's gone a long way has no touch this thing. They've signed you can believe it if you're willing to validate it. This does remove ASPATH forgery as one of the pieces of attack. Unfortunately, By like all kinds of, the way, just security, you have to get, like, really nitty gritty about exactly what your threat model is and there's like a whole page full of ask risks. Oh, so Why can't we get this thing deployed? You know, this thing pops up, you know, in conversations with regulators on a semi regular basis. We have to tell them, and, you know, this is why not So part of it is just simply that anything that is a PKI is"
  },
  {
    "startTime": "00:38:00",
    "text": "anybody who's one of the actual security experts at night, Jessica, tell you PKIs are complex. And Well, that That said, RPKI origin validations proven that at least some level of it is tractable for operators. Based on the model we're working through today. And that's for a relatively small set of things. A set of, you know, prefixes and, you know, the originators that go along with them. Origin validations, unfortunately, also proven with RPKI. Errors can happen at the people running those PKIs. We've had actual outages in the internet from people when there's been scrubs inside of RP guy. You have to be willing, since it's a PPI, the trust, the hierarchy. You know, there is a reasons to not trust the hierarchy, you know, whatever former ADs will tell you in detail about such thing if you care about it. But, you know, fundamentally You have to have that trust. And if that trust doesn't exist, and more importantly, since it's the therapeated around the planet. You have to trust somebody that's maybe not in your own region depending on what routes you're trying to use. But, you know, something that you actually are willing to trust these things assuming that you think that this is tractable. Crypto is expensive. You know, it's part of the the whole point. Want to actually make sure that, you can get the job done. And this usually means solving problems that are hard. Signing and the algorithms that's specified for BGP sick is actually reasonable cost. Validation, unfortunately, becomes more and more expensive as the AS Path give longer. And this has a unfortunate disproportionate effect on the edges. Sometimes there's smaller ISPs that are running older equipment. They would take part of the penalty. And and quite honestly, the biggest problem, and this is where I spend an awful lot of my day job is that your CPU All your CPU belong to BGP. We use the CPU as hard as we can and often the boxes are side, you know, it's it's sized for that. The problem is if you're already really busy with stuff,"
  },
  {
    "startTime": "00:40:02",
    "text": "Adding all this crypto on top of things is a interesting choice. You're willing to degrade your performance, your convergence time, And does the security really buy you anything for these at the moment are edge cases. The other problem is that, the signatures themselves end up making things large. You know, in older systems, maybe don't have a lot of memory lying around. There are people that could, you know, really know, annoyed if you actually throw an extra couple of beachbee communities on things. Log up your data structures, if you're having that conversation you're not ready to actually put PGP on your router. One one other footnote on this is that, not noted there, but all of the crypto operations are public key operations you know, unlike some some crypto things that we do in our other protocols where we use you know, do a public key handshake at the beginning exchange key, and then everything is symmetric key after that. Now now that's not how this works. It's all you know, object level security, and it's everything is a public key that's associated with more or less with an AS. So that makes things harder. So problem is that BGP sec does not the other solve all the problems. And this is one of the other unfortunate conversations when you have to talk to regular years that are, Zealous about deploying beach bsec as the, you know, end all meal. Beach music only can verify that the router has touched all the of the AS path. Doesn't guarantee a single thing thing about how traffic flows across the network. So So if you've seen some other, you know, bots running through and some other proposals or IETF, both in IDR, Ciderox and other things about assured forwarding, and I'll think have been touched. You know, those are not necessarily guaranteed out of HP SEC. Now that is just saying that the routers touched it, how it gets forward. It's up to you. Just as importantly, you know, since forwarding of BGP really depends on"
  },
  {
    "startTime": "00:42:03",
    "text": "all this other stuff in the dump truck, you know, that impact forwarding. Tunnel encapsulations, communities that redirect things. All this random bits of magic that people keep like adding in. Well, BGP only covers the AS path itself. Right. It addresses one very important piece of the attack surface, but it There are lots of other bits of attack surface still left. And part of that is replay. Each reset doesn't stop replay. What, you know, the key kicks and other crypto folk I'm gonna tell you is the best answers to rotate your keys. You tell people in BGP land that you're gonna do an operation that involves re announcing your entire table. They're less than happy about these sort of things, and that's the tool they're given. Right. of The the the analysis is fairly unattractive everybody re announcing all of their routes on any kind of a reasonable redredredredredredredredred So it also doesn't help you secure your peering relationships. Speech speaks just simply says that yes, you're allowed to pass things from a to b, and, you know, it's actually touched there. Doesn't actually tell you whether, you know, this is bad touch or not. So part of it's also just simply bang for the buck. You know, anybody that's, studied security in any flavor and knows that security is fundamentally about trade offs. And that we have different expectations depending on who's involved in the system. And part of this is, There are different motivations. Some people might have need for perfect security. Some people might want to okay security. If you make the cost the same for everybody, No. One size does not necessarily fit all. Just as importantly, you know, if you're mis designing your protocol, You can't fix it after the fact. No. BGP, just like most of the things in IETF was not originally designed for your behavior. So we're trying to actually figure out how do we actually plug these things after the fact. Yeah. I would I would personally call that more Not so much. You can't fix it after the fact because I don't wanna say that it's impossible to fix, but"
  },
  {
    "startTime": "00:44:02",
    "text": "It's a lot harder to, you know, it's the proverbial rebuilding the plane in flight. So pairing relationships we mentioned are not protected. Know, that's a problem that's being looked at across various working groups. No doesn't really care from a protocol perspective what sort of ISP you are. Sort of interesting as EGP actually did. EGP had a sense of hierarchy, which is a little weird. If you want to have some fun, you know, with history, go take a look at the spec And, you know, if you wanna have extra funds, start debugging it. Operationally, though, what people tend to do for service providers, for years been, you know, called Valley Tree Routing, you know, Gal Rexford style routing. And, you know, the general idea is that, you know, a provider of a given level hierarchy. Think passed it up. Doesn't usually expect it to go backed out. You're all sort of effectively converging towards the core, and the core will actually found secure way. Things go wrong when you violate that thing, which actually might be No. Policy in terms of your configuration and policy in terms contracts you've actually signed with people. I say that I'm not supposed to announce these sort of things. And when you do, you have things like you try to yank all of YouTube's traffic, you know, through tiny service provider in the wrong side of the planet. And You know, these things are usually just oops in the most cases. But the protocol can actually do Normal things through misconfiguration that have significant planetary consequences. Well, we have this sort of accidental hijacking That's one thing, you know, malicious. Once you actually have just find this is a, you know, that you can do on purpose, you start worrying about how do you deal with it? You have 2 tools in flight right now, both of these being worked in, out cider ops and actually now open policy ran through IDR. These things are allowing us to actually start validating the peering relationship themselves."
  },
  {
    "startTime": "00:46:00",
    "text": "I think the main takeaway on all the security stuff is number 1. It's complicated. And number 2, it's still very much being worked So what's what's in our future? HEP is successful because, you know, things have worked out from incremental deployment. You make things extensible, make them incrementally deployable and, you know, things have actually worked out great. Address families have, you know, been a wonderful extension I was you to add a new thing provide structural segregation if that's how you choose to deploy the thing. Allows you to add things sort of safely into the protocol And, know, stuff goes in the path attributes and generally is you generally successful, but not always. In particular, because these things can pass through ignorant devices. The problem that we have mostly is about scoping. Stuff has gone places where it doesn't matter. Sometimes the stuff that doesn't matter leaks back into some place that it does and things go kaboom. There's also been some regrettable decisions made in the name of efficiency. Some of them are just a little bit annoying, which we talked about on Monday, like, variable size size fields are a perpetual thorn. In my side anyway. But then also, in particular, some address families contained in the NLRI, which If all were right in a hole, the NLRI would contain only a key There are a number of address families that contain key material and other stuff. And there are reasons for doing it that way. I'm sure that I know for a fact that it makes implementations more efficient but it really makes, it turns out that it makes the deployment story a lot harder. Yeah. A lot of this is about building limited"
  },
  {
    "startTime": "00:48:03",
    "text": "domains or things. You know, a lot of the VPN type features we're doing at this You know, those things don't generally belong on the internet, and we don't really have a good way clean house behind us. A lot of these things are impacted by transport headaches. If you're actually carrying around the dump truck, you know, efficiency of transmitting stuff on the wires. Very interesting. We have some, you know, Nice work going on. The seed note carrying DHP over other things, including quit. No. No. No. Were sort of desperate for some features that would make things nicer for BGP at the you know, literally the internet and, you know, the layers above that. Quick as one option that we're exploring for some of these things because in some cases, extra type, you know, OSI layer fives, you know, actually having a proper session layer. Able to send multiple things in parallel, can actually let us structurally segregate within the same session different address families so that we don't have to worry about quite the same level of pain if something in what address family accidentally takes down the whole It also makes things like graceful restart, potentially a little bit easier because if you have things on nice frame layers, that means that you can replicate PDUs a lot easier between no two systems that are supposed to be sort of in sync with each other one can take over from the other in case of failure. Just as a very quick outline of this graceful restart bullet. The the base protocol has remember how we talked about how it was biased in favor of correctness. And if I saw any kind of an error, I said, you're in saying I'm resetting the session. Well, At time of session reset, you had a complete copy of of all of my routes. I had a complete copy of all of your routes. There's no way in the the base protocol to reconcile those. When I bring up a new session, it just all starts from square 1. The cost of exchanging all of those routes is"
  },
  {
    "startTime": "00:50:01",
    "text": "linear in the size of the routing table, more or less. Which threading table has gotten kind of big. So that no longer looks like maybe maybe, maybe, such an attractive operation to have to do casually. And, you know, hence this this bottom bullet where there's been quite a lot of lines of code under the bridge. Trying to, reduce the the number of times when we actually have to do that full a routing table exchange. Gosh, it would have been nice if we had a design that lead to that, but we do. So part of it is now billing application profiles for resiliency is something we should look at. Know, right now, It's almost impossible to go to some vendor including us and say we want an implementation that doesn't have everything. No. No. Set of coders are usually working on one big code base if you're very lucky, if you're not lucky, have, you know, a dozen different code bases doing roughly the same thing. They were different forks. So And if you're a service provider and you went to an potentially filter things that are only important for you. It's one step tricky. We talked about earlier how those code points haven't been burned very fast over the years, but so over half of them, have nothing to do with the Internet. There's a lot of service providers that would like the feature that says throw away anything that's part of this VPN stuff. I don't care about it. Don't ever let it get near me. And we don't really have that as an easy mode right now. Probably a discussion topic we'll be having an IDR sometime over the the the current year. Trouble is we don't want to filter things by default. Just because, you know, attribute 100 isn't defined today. Well, what happens when it is? Maybe the internet service providers will actually care about the new thing. Right. The the fact that, filtering these things is not a 1st class feature of most, most implementations, hasn't been out there very long. It isn't heavily."
  },
  {
    "startTime": "00:52:04",
    "text": "Used is, I think, probably the reason we still are using BGP. If everybody had started out, you know, on day 1, saying I'm filter out everything I'm not using, and the protocol would have also fired right away. And, you know, that would be that. And once you get into TLVs themselves, you know, as John was saying earlier, Yep. Sometimes the best answer is to throw the thing in an existing feature. Rather than trying to put something new together. But the minute you start doing that, how do you filter slices of TLVs. That's that starts getting tricky. Your policy starts something really hard to write. Ships in the night should have been easier. No. If you didn't plan on keeping things separate, it becomes really easy for things to start overlapping each other. Right now, in protocol, it really wants to have a single peering session be between two devices on the same addresses. There's no easy way to do multi session as part of the base protocol. Even if you have that sort of thing and you have them running in parallel, policy starts getting nasty. So Implementations tend to go towards monolithic, no, for code sharing. And what this means is operators end up with features that they don't care about. Which means that they have bugs that might be in the code path that they should be getting tickled by. AGB is perfectly happy to deal with things as an ignorant speaker. Maybe it's nicer to be able to say, wanna play dumb. I don't care about this thing. You know, if it passes through and hits somebody that actually cares about it, well, that's their Hey, Warren. Ask me what the difference is between a good feature and a bad feature. Hey, John. What's the difference between a good feature and a bad feature? Good feature is a feature I want and a bad feature is a feature you want. Yeah. So address families, you know, We added it. It was incrementally done. We talked about it on Sunday, and, you know, this is the thing burked out really great."
  },
  {
    "startTime": "00:54:01",
    "text": "Rib is a database. The Android is just the key. It and no. Yeah. If only, if we would have been thinking about it a little bit more in those terms, we probably would have to designed it a bit differently, but as I mentioned earlier, we've got all kinds of NRI that you can't just treat as an opaque bit saying. Why does this make me sad? It makes me sad. Because it means that every time I want to use a new Afi Safi for something, I have to teach my entire network infrastructure about it so that the thing can transit through the network. Unlike path attributes that have a transitive flavor? Happy savvy do not have a transitive flavor that can flow through a route reflector without the route reflector actually knowing the nuts and bolts of the semantics of that athlete's happy. That was too bad. Yeah. And, unfortunately, when you have path attributes, you can ignore to those. Anuraya, you don't get that option. And as a side effect, this means that we can't generically do the treatise withdrawal behavior the error handling document, that we can safely deploy these things ingred stuff. Everything is lovingly hand coded. Yeah. So trust domains do need to be better in the protocol. Know, we've managed to actually do a fair, you know, job in terms of allowing flexibility for operators via policy. We have RPA RPA has roots for, you know, again, who do you trust? Do you trust the hierarchy or not. Well, you know, that's a way of actually building a global level of stuff but that has interesting operational challenges all of it. And so Applications. Can provide their own scoping, especially cooperating with the JSON Service Providers. But, you know, that's, doing lot of work that, a is gonna be covered in scoping work and IDR soon. The bigger problem we have is that when you start worrying about how do we throw these things out? How do we split things? How do we decide"
  },
  {
    "startTime": "00:56:00",
    "text": "my features that are in your future or my network and reachability is better than yours, and I'm not elite trustiers, start heading towards this internet. Yeah. So, maybe I complained enough about encodings already. I think a lot of this has has already been said. It's all overlapping. And, you know, basically a lot of these recovered in our irks slide from Sunday. No. If you're doing nice regular Tlv formats, you have nice regular simple code. Less our ancestors that worked on the protocol, this didn't work out so well for us. Maybe there's some work for us to go to something schema driven. Maybe in BGP5, whatever that ends up being in the future, we can do better that said, you know, we're 20 plus years in the beach before when we on gluing an extra feature. So Oh, years. Oh, 3rd 30 years. I'm feeling we'll see. 3 years. 3 old. Better framing layers as I talked about. This is something that IITF as a whole would benefit from. We have quick. Quick isn't quite a nice frame layer, but you know what those streams help That's something that'd be nice to talk to. One of the other headaches for BGP is that all these NORI crafted into one big bit string. Well, there's nothing that makes easy parse things out. No. Did I successfully parse you know, a complete valid set of things, or do I have a set of malformed things that is successfully parsed. There's no way to actually check that right now. So How do we get future? to the How do elephant? you eat an Yeah. Yeah. One by the time, one day at a time, one internet a draft at a time, and an awful of the chairs making unhappy faces of the microphone. No. This is IATF We get here because we're trying to make the Internet better. You know, PGP has managed to successfully be a"
  },
  {
    "startTime": "00:58:02",
    "text": "extended. We've done things incrementally, and, you know, this is a sign that we've been successful. At some point, you know, may want to actually change things on a holistic basis and maybe maybe then. It's finally actually time to call it HP tomorrow. Thank you everyone. We have time for questions if such things exist. Hello, Elliot. Hello, Elliot? Hey, everybody. How, first, thanks for this great overview overview and actually deep dive. You you I I wanna say first of all, that this is probably it was not only with the talk good, but the comments in the chat really got are are hysterical. So I I suggest you go back and review them when when you have the opportunity. Awesome. Thank you. To the first of which is that Brian and I have been sorted Trying to figure out how to look at futures from a you know, from a BGP standpoint or inter domain standpoint. And as the independent submission editor. I actually have several submissions right now. The scion group who are looking at endpointbasedrouting mechanisms, their their goal was to sort of introduce a, you know, security as a 1st class concept, but there's what your top demonstrates is that The devil is all in the detail. Right. In terms of going day by day, getting operational experience. So terms of BGP 5, Wait. What are the things? And where is what what would you want out of a BBP 5, then what might you pull from a concept like scion, and how could we avoid"
  },
  {
    "startTime": "01:00:00",
    "text": "Let's just say the the the morass that turned that that BGP tech has been in in terms of trying to get it deployed. And and I use that word morass advisedly. So, me let me stop there and and again, thanks for the talk. I thought it was excellent. I I think that that is an awesome and thought provoking question. And I'm not gonna try to address it on the fly. But I would like to offer to, you know, get together with you and have a detailed conversation at, you know, some point of mutual convenience. I don't know if Jeff wants to try to Do this live. At least of the one piece life. So cyan is, you know, a bit about the forwarding model. So GMP can sort of be, you know, twisted a little bit the doosan And I think a little bit vice versa. You know, science of looks like, you know, fat sort ASs from our perspective. I have some questions about the internal forwarding models. I didn't intend to, you know, give to the science authors, but, you know, clearly, there experiments are going well. And, you know, we look forward to making seeing how these things cross pollinate. Okay, I'll just add one last comment, which is I hope I'm looking at 2 reviewers. For these for this work. Sure. Sign us up for Yeah. I'm like, there's Rudiger there. I see him. And Oh, kind of that would give a negative review. Two points. One, as you were talking about VRPKI based security, I started thinking, oh, it took us so many decades to actually do it So that, we are using technology from a time when nobody was thinking about and I guess and I guess, that's going to hurt. Yes. There is at least algorithm agility of a sort in BGP sick, but I mean, the fact that that exists does not mean it's gonna be able to transition to PQ. I just like beyond my pay grade. it's"
  },
  {
    "startTime": "01:02:04",
    "text": "Well, okay. The underlying X 509 probably already is the base problem. The other point is yes, I could imagine a holistic rewrite of the old thing, and I would deem such BGP5 as some thing that's never going to fly This is another thing that, you know, probably deserves a much longer discussion in bar somewhere. I have some thoughts, but but go on. Yeah. But for actually improving the things where you were talking about, well, okay, the head crafted bit string level of data structures, which reminds me of the state of the art in the fifties before assembly language, and yes, at the time when BGP was first drafted, kind of things looked very different from now. A large router had a ram of not more than a megabyte. In the meantime, and, in particular, in pretty recent years, we have done, we have made, a major progress in the, domain of data data structure definition and handling in IACF. Yes. And kind of Very rough sketch. Do for dotone Elocate, allocate an AS path attribute number that has not been used so far. And define it is Starting a seabor object. Uh-uh. And all and all and all of it all of the tools that are recently available become available. And,"
  },
  {
    "startTime": "01:04:04",
    "text": "kind of nasty question would be can you can you estimate how much how much, effort can be cut from IDR work because of not discussing any presentation layer fiddling. Blamed. 2 sets of media things. So the the post quantum I think is an excellent illustration about why BHP sec is challenging to deploy because even if you had infinite CPU to throw at the job, What you're actually talking about for BGP because it's planetary wide is How many tiers of in class citizens are you willing to create by people that, can do all the crypto on their VGP. Versus the ones that can't So, you know, this is a thing to keep in mind as we're looking at any security features. At some point, somebody can't afford the crypto have to make sure that they can still use the internet. You know, you know, second piece in terms of representations, seaboard is a very nice format. Self describing schemas can help us to some extent biggest problem, one of the things we know dear from BGP, you know, in terms of validation, even if you have flexible encodings that have corrected this built into them, which is a nice property to get out of seaboard. The data matters. And what the data is for, the semantics those types of code bindings are things that self describing simply not going to help you with. The real challenge is in schema. We've had chat, chats with this with 20p about rift and thrift. Having a scheme is great. Having semantics nailed down is wonderful. Now the trick becomes in your incremental deployment story. How do you teach the planet as a whole? About the next human. One tiny back question. If the self describing seaborne does"
  },
  {
    "startTime": "01:06:01",
    "text": "with a schema definition that, is using symbolic names that will be well chosen. See Yes. By itself, it does not help cementics, but neither do the ASCII art diode diagram. Exactly. And, you know, like, CDBL for a CBOR gives us, you know, one step towards, you know, better schema. That said, again, it's, again, how do you distribute around the planet the semantics, what they mean, and just as much how this is software plugin to the stuff. Right. Hello. Good evening. Thank you very much for the talk. This was like this was super exciting. And I I actually learned some things. There was a a point you made on the way to sort of like the future that quick is not a framing layer. Which is true, but it's getting pretty close to being a framing layer construction kit. Right? So, I'd actually like to know where the work is happening to look into maybe BGP over quick. And how as, you know, somebody who thought a lot about how to build you know, other transports out of quick, how I can help with that. So, myself, Jeff Tonsura, Ying Zheng, and Alvaroetana are basically taking a stab at the 1st round of HP over quick. Our goals for the thing are to leverage the good, you know, features that we have out of the protocol today is streams for Afi Safi Separation. It solves a huge problem for BGP being able to survive when things go Quick gives us the multiple streams. They don't necessarily give us, unfortunately, one of the other things we want of a framing layer, which is, you know, where one frame starts and one frame stops. That the OS that could actually run this layer can do to help us with things like nonstop routing. So this is about letting"
  },
  {
    "startTime": "01:08:00",
    "text": "something outside of the BGP ecosystem, not only absorb the frames, but also pass it over to other layers in a a more transparent fashion. So, Brian, do I correctly understand that you probably would be interested in having at least a preliminary discussion with these guys to see if there's Yes. Great. Great. Because I'm thinking, like, I I, you know, I don't wanna make stuff you know, in the TDD, but I'm thinking there's probably some, connection ID trickery you could year Okay. This time has been spent. well Excellent. And, the engine have the microphone in a second as part of the follow-up. let Of the things that, I think is a useful piece of the exercise we're going through is I as best I know, we're probably one of the first, you know, control protocols, know, routing protocol style things you the IITF. Trying to do stuff with quick. So a lot of the things that we're stumbling over is a good learning exercise. Thank you. This is from future way. So as one of the cursor of the PSP or quick draft. So as jotting people, we are trying our best to understand quick but we will need help from we'll we'll honored to get help from quick people. So we make sure we use quick streams correctly, if there is something we can do better, That would be great. So, looking forward to the collaborations. Cool. I will I will go read the draft and then we'll set something up. Thank you very much. We'll we'll send you an email, and we'll Yeah. Cool. Thanks, Brian. Tony. Hi, Tony Lee Juniper. Couple of things. I wanted to point you at scion to look at very much at security architecture. Cyan does not assume that we have hierarchical CAs. And this is probably the best thing about the proposal the problems that we have had with blast radius of CAS is a serious issue. And Sion just avoids that because everything's local."
  },
  {
    "startTime": "01:10:00",
    "text": "Now that has some transitivity properties that has trust properties and security folks should give us some good advice and have a long discussion with us. I'll buy the beers. That Second point about Zion look very carefully at the data plan. I looked at it. It has certain things that are interesting. But one of the problems that has to sit it allows the originator of the packet to mandate the path. That sounds wonderful, but that means that the transit providers cannot do traffic engineering anymore. Right. The the the commercial implications of that are vast. I would think. I was gonna go go and say fatal. So so I got serious problems with that, and and maybe we need to have a thought about that. Yeah. 0.3 back on schemas. Skhemas are wonderful. They deprocessed and then they spit out code for you. And then somebody up dates, the schema generator, and you're screwed. This is a problem. Don't jump blindly to schemes. Nobody is doing any blind jumping. And especially in terms of line jumping, yoke Snyder's spent an awful lot of work working through a well established thing 509 and ASN1 and is finding bugs that have been inside the code that is you know, older than some of the people in this room. React. Hello? Was it worth shows me fine. but it Yeah. Maria, seasonic, developer of Bert, I'd like to note some, some things on the side. Basically, regarding a BGP over quake, it has some problems with, bootstrapping the routers."
  },
  {
    "startTime": "01:12:00",
    "text": "You have a completely cold network, you are adding complexity, especially, when we are speaking about CLS in Kuwait, So there would be probably needed some quick, without CLS, Republic quick a o. Like the CPAO has. And then I am quite willing to think about using a quick instead of DCB. But, with the TLS, we are basically having problems with, time bootstrapping, which is not a problem with routers, right now, we have problems with certificate remote lists, and so on and so on. So this is something very much of all consideration. The thing with, with Skimas and Seabur and so We are currently looking invert into, Yeah. Into a concept where all that's all the data, not data points, but generators and parsers direct generated from young So, we are basically we couldn't find any any useful tool which would do this for CBOR. So we are basically developing our own and there may be some tool quite soon that would, show, that would generate parzers and generators based on the given young. So if he wants to update the API, update the format, you just put something into the young and it gets the code for yourself. And you just access it from the other side, by names, symbolic names, and so Yeah. That's it. Thank you. All we need is quick, but without the security bits. Actually, the the security business, one of the fun challenges we have So one of the things we have intentionally not addressed in insignificant detail on the current draft. We're spending most of our time talking about the BGP ish things. We know that security, especially the certificate stuff is going to be"
  },
  {
    "startTime": "01:14:00",
    "text": "very interesting. Right now, we don't have for BGP any flavor of deep authentic location layer. AO just simply says, you have the same shared secrets for a given cipher. And, you know, we'll get some ability to start off with authentication where it actually matters. And, you know, we know that, there are scenarios for deploying ISPs that, that's actually important. There's a nice presentation on the, peering b b stuff during, the grow session earlier this week. That might benefit from some level of certificate architecture. Yes, we have to have, you know, basically, the dumbo deluxe is the bootstrap think Ying Chen has a comment here. Yeah. So, sick TRS definitely help me with BCP security, right, but I'll also pose a lot of challenge for BCP session to come up. And so so far, the drop we have focused on the real BCP protocol part. We set off leave the TRS authentication part separate because that's the the part really bring up the quick connection. So that that that If there's something be quick, transport expert TRS security acts X-four can help us We'll need that. Opportunistic, quick, Yeah. Exactly. Yep. And I think we have an empty queue, and that was the last word. Was empty. So thank you, everyone. I hope this is a good talk. And hopefully, this will actually be useful for the future as well. Yep. Yep. If you have ideas for future technology deep dives, different technologies, different protocols, etcetera. Please come and talk to myself or Brian, or Spencer. Spencerdawkins. Have a good day, and enjoy dinner. Thanks a lot."
  }
]
