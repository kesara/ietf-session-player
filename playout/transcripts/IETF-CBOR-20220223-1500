[
  {
    "startTime": "00:00:07",
    "text": "hello everyone can you hear me this looks a bit like it's gonna be hello good evening good job so i hear you carsten i see marco and everyone else's java users uh so carsten uh while we'll wait a bit for weather to see whether others join um have you had the chance to look at the notes i sent about the uh in the shepherd review of the uh file magic looks like a level it was beyond the two minute threshold so i didn't get yeah but that's certainly something i will do tomorrow uh speaking of file magic just to confirm francesca um you will be the responsible 80 for that one like basically for all keyboard documents probably that's right yes okay"
  },
  {
    "startTime": "00:03:22",
    "text": "okay i've seen i see ricotta has joined us too that makes at least four um five of us so um i'd say let's get started briefly ah thank you marco for taking over on the note side um we have full four minutes yet yes but and michael you just joined in to disprove what i was about to say that if whether i started three past or at five past you won't make much of a difference"
  },
  {
    "startTime": "00:04:03",
    "text": "is for past somehow the agreed upon time to wait well it's my my empirical take on how itf meetings work of course people are coming later but these are usually very few okay but then again we mean the the the first minute would be anyway just to go over the things that have popped up being that a uh quick is looking into cdtl for maybe specifying a json format and i think carson you put that there and there is an update on notable tags now with the enumerated alternatives or the enums and that would be anything for today anyway is there anything is is there is there anything we should add to the agenda right now well we could briefly talk about the text you were proposing for edn yep that's a good point okay uh then on the topic of quick ex um considering cdl is there anything you'd like to say about that exceeding the point in the minutes that's basically a point a pointer to their current document yeah so um i got a really interesting mail from i forgot the name already it's incredible uh from one of the keuler guys and um so they they were essentially asking exactly the right questions i mean if"
  },
  {
    "startTime": "00:06:02",
    "text": "if i meet a student i'm giving a specific task and and they ask exactly the questions i i know that they will need to be on need to have answers for to do that task i'm usually amazed and so i'd love to have the person whose name i forget as a student and so the the my intention is to actually follow this this course a little bit and at the end uh right write it up in an internet draft um so because we already have the text in the mail so we might just copy it over so this might become the seeds of using cddl um draft or something like that so right now it's just happening in in personal mail but expect to to bubble up something to bubble up from that soon would be nice it would be nice to have and to see the larger adoption are they are they bumping into anything where cd where cd dl is reaching its limits or is it really like ctdl does the task and you just have to use it right i think they they have everything they need partially it's also a matter of how do you actually put cdl into a draft or rfc so that's also something we probably should uh document best practices uh for but i think for everything else we we have what we need and the only thing we don't have is this uh"
  },
  {
    "startTime": "00:08:00",
    "text": "perfectly working cddl tool but that's not something the working group can do so i'm still working on my next version that i'm supposed to have under the christmas tree um it's getting there but probably not before 113. but part part part of that that how to put cdd ln in an internet draft might be doing something about accepting cdl as a formal language because i've now written my second or third chapter right up where i've written that there is formal language but we have don't have tooling to automatically verify so i can paste everything around yeah that's probably something that we we should be really pressing for when when we have a cdl tool that is fully up to speed so the the other formal language tools that are out there um typically only do syntax checking now the the version two tool already can do that uh but uh of course it it's much more useful to actually do validation and or generation and then the the quick people actually picked up that you can use the cdl tool for generating instances and the one thing the the tool doesn't do at the moment apart from from some pesky bugs is making sure you have full coverage in these generated uh instances so that's one of the the nice things about abnefgen that you can get that there"
  },
  {
    "startTime": "00:10:06",
    "text": "okay questions comments hearing none let's move on to notable texts okay i found the name of robin sorry about i'm not remembering that but there are so many names around rob robert and bob and i always get confused there anyway um on on the notable tags uh i got another reminder from the haskell people that there is this outstanding proposal to have tags for compiler managed alternative data items so of course everybody can can up come up with a random handwritten cddl for for doing alternatives but i think the interesting observation is that language environments like haskell thrive on these alternative data items and it would be good for their compiler to actually be able to to put case numbers there that we can translate into tags um on on the sieber side so you don't have to allocate a new case number for for every new data type but you can share the case numbers between them so um i actually put that proposal into the notable tags document and did a blunder by by requesting to use tag 101 which was earmarked for something else and i"
  },
  {
    "startTime": "00:12:01",
    "text": "was promptly corrected on the mailing list but i think it would be good to have a few more eyes on this before we send the request to ayanna so i think that's all i can report um of course there's there's also um uh jacques reminded us that there's also the the old uh problem statement uh tag proposal and i think we also should pick that up at some point it has been two and a half years now and uh yeah we need to be quicker in handling this type of process one thing that that occurred to me already when when looking through that a few minutes earlier is that i think it doesn't say anything on the on the stability of of the semantics especially when um when they are like uh used with a compile with a compiler that automatically assigns them it might be helpful to say something like different protocols might have different stability guarantees that might range from it only works within the same build to these not these numbers are part of our protocol yeah can you send a mail to that effect to the list can do"
  },
  {
    "startTime": "00:14:11",
    "text": "any users around who would volunteer that that additional pair of eyes it's never too late michael um i think what you're asking is for me to read your email and determine what not i agree with the logic for alex is that right is that the right question well the question is is the text in notable tags good yeah good all right not just yeah it's a couple of pages yeah and there was a little off-topic discussion about how to preserve all these wonderful things we can do on the zebra side if you ever have to tunnel stuff through uh jason and i revealed something that has been hidden in plain sight for a year so which is that the sibo diagnostic tools have such a channel mode and i tried to cook up an example for my email and of course immediately found a bug in it um so i have submitted a new version of sibo diagnostic tools five minutes before the meeting and uh yeah that probably needs a couple more eyes but i'm not currently proposing to standardize this until we gather more more experience that"
  },
  {
    "startTime": "00:16:00",
    "text": "uh this actually works right and it's what people want to have because there are of course tons of ways to tunnel cbo through jason you mean more than just making a json string and packing coded zebra through there yeah that's certainly one other way to do things in some cases that may actually be an efficient way of handling this so okay um the next next last point then would be the the proposed text for ext for the extended diagnostic notation i've just sent a mail about that two hours or so ago um basically picking up on the tag 888 that might be the stand in for the dot dot notation and i think these would be useful so my use case for having actual tags for the for this for the uh edn's is primarily that um i have many tools to use sibo with and i have exactly one tool to use zebra diagnostic notation with in both directions but especially in parsing so any way to get um edn through that tool into the application it actually knows what weird"
  },
  {
    "startTime": "00:18:00",
    "text": "what those precise tags mean would be helpful so the two tags i've proposed are um one to say one that uses suppose both would you take the um would take the text name of the thing that of the version of the edn that's being used say cri and then the variations are to have either the either the text version or the the text version so the thing that is actually [Music] marked in the diagnostic notation say http colon slash something if you're wondering why i'm talking so slowly i'm at the same time typing the examples down so that would be either a tag that encapsulates the see your eye string and then the actual cri in or attack that that uses that cri string and then has the literal the text literal that is supposed to be there in diagnostic notation i'm not even sure we need the first one but i think that the second one would be useful to separate the concerns of interpreting the diagnostic notation parts and representing them well i think the 887 would be useful uh so you can essentially uh keep the information that something is a cri uh in your structure so from the application point of view 87 would be transparent it doesn't mean anything but if you do a diagnostic output of the data then the the diagnostic mutation processor can"
  },
  {
    "startTime": "00:20:01",
    "text": "actually show what this stands for yeah provided of course it does know that particular that particular label right so i think there is not much harm that would come from registering those and whether a tool would actually implement them [Music] would be a separate concern but to me um having the so especially on the python side um there or on the side of everything where the the pros the processor does not yet have a particular schema to fit data into very i think it's just helpful to have the intermediate form around um when when producing output and input because the processor that has the schema information around could just do things in a single step but when well when when you just have a single object that you a single variatic object that you pass around this would really be helpful yeah we we may want to rethink whether this is really harmless when we find the first 8887 in a live protocol exchange yeah but then again um the i already have this example of what i expect can what kind of harm i expect can come from having a tag 888 and [Music] some mitigation might be that that generic processes just scream when they see that and especially and tools that do diagnostics unless they're explicitly instructed to um to not pro to let let them through and accept them because what is coming in is not"
  },
  {
    "startTime": "00:22:01",
    "text": "sieber as you see it on the wire but zebra as you receive it as part of a diagnostic output yeah so there is a more general concept called annotations so we we might have a way to put something into a c bar that can be ignored at the the level of the application that is supposed to process that zebra but that provides additional information for other applications that are looking at that sibo uh including diagnostic processors but but also other statistic tools whatever and we didn't think about a way to to indicate annotations in 2013 and we might want to think about um a way to use tags for that so that any kind of annotation is visible as such um so this is pretty much the the uh must process versus can ignore critical versus elective thing with additional semantics that uh processing this tag is really elective and you're supposed to to take the right hand side as the the meaning in the left-hand side is the annotation now vice versa so it would be good to to be able to identify uh that as a general concept but i think we can think about ways of doing that so when when you look at the examples in the documents we are working the next observation is that tools like the cdl tool already have annotations in the diagnostic notation and so this is put into diagnostic notation"
  },
  {
    "startTime": "00:24:00",
    "text": "comments right now and this is again a place where it would be good to to be able to hand that over to to it okay if if we want to if if these annotations are not something that is happening in line but more as a say reification of city of seaboard which is probably one way to do it um then we may want to consider that simultaneously with any machine readable version of cddl to avoid having diverging reifications of cbor on also on the binary level yeah so the the cdl tool version 2 actually builds a parallel tree uh for the annotations so what that looks at the zebra structure and then builds a tree that that looks like the seaboard tree but has the annotation information in it and this is a pain to do but it's the the only way i know to do this in in a general uh sense um so if if we have better ideas for handling annotations uh for sibo i would really be interested"
  },
  {
    "startTime": "00:26:09",
    "text": "something that i i don't have a clear idea there but something that i can do is look at what uh what yaml processors do because they often have ways of adding information about serialization and all those things yeah back into the objects they are serializing i can tell you what i did for the cdl version one tool i just just used instance variables but of course that only works for boxed types and for unbox types like like integers and floats i had to use delegate type and unfortunately there is a long-standing bug in ruby that it cannot do delegates for floating point videos uh correctly so that they stopped me in the tracks uh some time ago so i never fully completed that annotation approach yeah that's not a feature in ruby but it's just that the the ruby implementation i'm using doesn't do delegates for floats right yeah instance variables are certainly the the the right way to do this at the at an implementation level but uh yeah then again we we would need a way to transport instance variables in sibo and then again wind up having a different one an extra wire format for that yep"
  },
  {
    "startTime": "00:28:03",
    "text": "um so that looks to me like something where a great bit of salt is needed still if we want to reap the maximum profit from ruining it yes i mean we can do anything at any time but doing it right maybe a little bit harder i mean the given that such annotate yeah given that such annotations might be applicable to to several tags that already have somehow transparent semantics uh like anything that is numeric big name style we might need to retrofit these these annotations onto onto tags anyway so we could do the same also for the edn text but knowing where things go probably makes it easier to do it later so okay um is there any any experience we have in in in the group here um"
  },
  {
    "startTime": "00:30:00",
    "text": "about storing or expressing metadata of of cdl that oh sorry of cyborg that we might or any do you have any pointers around or any any experiences that we might want to consider in this in this larger block what i need to ingest is the the yang metadata uh mechanism um they have essentially done something that is very very xml specific so that certainly won't bought over uh to what we need but it still might give us a nice uh set of requirements um and it's also interesting to look at the way they they made this available in the json uh the representation we haven't done the work for young sibo yet um so that probably should be part of a general view at the annotation issue of course over in sdf we have the the mapping file idea which is a way to have the the metadata or the additional data be in a separate file and have pointers back to the main file so that that's also a way of doing that i think that that's just a very common pattern for which there are many solutions"
  },
  {
    "startTime": "00:32:16",
    "text": "okay um then any other business anyone would like to bring up anything we should talk about today let's have a quick look at the meeting schedule so we still have one meeting on the ninth um good point i'll have to look myself yes that's the schedule and i'll stick with that but and that's after the drafted lineup yes but then again we don't have anything that we will present in a regular meeting during itf 113 anyway so it's just it's just about whether any documents can be uploaded for the atrium or not yep okay then thank you everyone for being here and participating thanks marco for doing the minutes and see you all in two weeks goodbye and reading the chat uh in a week at sixteen hundred no oh four no one bye no oh four no oh yeah yeah um and we're not meeting at itf 113 i think right sorry to say again please so we don't have a scheduled meeting at one one three"
  },
  {
    "startTime": "00:34:00",
    "text": "no we don't okay i just wanted to confirm that in the yeah yeah so uh but we will see you later i'll be there yes okay wonderful see you"
  }
]
