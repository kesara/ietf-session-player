[
  {
    "startTime": "00:00:17",
    "text": "good day everybody we'll wait another minute or two just to let everybody join so hold on almost [Music] there good afternoon noon or good morning I don't know my body is so messed up from Time Zone jumping and remote bacteria that I have no idea what time it is my sleep schedules are really messed up but say lovey that's what we do also been training to get to the list of interim meeting so I can find the note taking autocreated entry for this meeting and I'm failing there we go thef web page is not doing so um as an advanced note if anybody is willing to help me take notes I'd greatly appreciate it uh we'll get to that in a minute but I will drop the link in chat [Music]"
  },
  {
    "startTime": "00:02:12",
    "text": "all right why don't we go ahead and get started uh you all know me I'm sure and uh this is Claire is not going to be able to make it today unfortunately she has she's at a conference today uh so you just get me unfortunately uh yes Thomas uh at least some people can hear me right loud and clear thank you Martin and uh that confirms that it's Thomas's [Music] side all right uh so anyway we will um we will Begin by going over as a reminder the not well applies for for the ETF to allf working group meetings that includes inter meetings um you should contact your lawyer um but essentially if you contribute to the ATF process um you will be subject to legal requirements associated with [Music] it I think everybody knows about the setp working group that's why you're here nobody attends interim meetings by random chance we do have three um documents you know to sort of consider um you all know that um so this is my summary of where I think we are an apologize uh the chairs both had a very busy uh last month or so um and we're a little out of touch but I'm uh back back in in my proper seat um so the I was actually under the mistaken impression to make things worse I share two working groups they both have an architecture document and one has gone through last call and the other hasn't so they they Blended a little bit my mind um but the"
  },
  {
    "startTime": "00:04:01",
    "text": "soup architecture draft actually hasn't been through last call yet which is I think a mistake that I put into um my note yesterday and it is pretty much ready and we'll go over that in a second um the setp core I think is actually getting close from what I can tell from the conversation but I'm looking to you all to uh let me know if that's the case and the ATP use case document um I think is a little bit further away just because everybody's been concentrating on core um but it seems like it's in good shape as well so my plan is um that today you know uh we'll discuss um you know we already did introductions and announcements so the two primary things that we'll do today is um I believe that the working group believes that um the architecture document is ready for last call and uh that should take it just probably a few minutes um I do note that there was a update to the diagram suggested by Dennis and uh that seemed to be well accepted as a good replacement so we might want to issue a think A-5 if I remember my counting properly and then we'll do a Last Call on that um then the set PE core I think there's probably more um uh information to discuss there and I will turn to the authors to uh help drive that discussion today and of course if there's any other time for other business um the if if people want to discuss the use case document today too um that's fine oh Thomas excellent glad to hear um 05 has just been uploaded so let's start with that um I think yeah as a quick reminder remember that that all uh working group discussions should really be held in meetings like this one uh not inside private meetings and um I think everybody has well understood our scope but in scope is you know Network to network transfers and out of scope is how internally to a network that might be handled that's expected to be future work sorry for the PDF tab damage it looked fine on my screen when before I"
  },
  {
    "startTime": "00:06:00",
    "text": "gave it to meet Echo but um and then we will be meeting at ietf 1220 in Vancouver uh Vancouver is an absolutely beautiful city uh so you should try and attend if you can otherwise we will see you remotely and that's it for um today's announcement so let's start with uh last call architecture so uh Thomas do you have anything additional to add other than you you created A-5 and it's pretty much ready to go to last call is that correct uh yeah that's TR thanks um wz so the only update I did literally uh the file been sitting there for a whole you know almost a whole week uh was the diagram with the arrows that um Dennis had requested and and I literally just uploaded um before this this meeting so it's it's up there and I think we are good to go um and we can talk about um the sa core you know uh after we close this one all right uh that sounds good does anybody else have uh things you want to talk about about the architecture document uh last call for comments before last call um which is a weird [Music] statement all right that's about what I expected so thank you Thomas I will issue that immediately possibly during the meeting well I'm not taking notes so let's move on to the core document and again um Thomas and Friends I'm kind of wondering uh what where we stand um I glanced through a lot of the document I think it's stabilizing especially with all of Anthony's wonderful suggestions are there outstanding issues that you think you know need a lot of FaceTime today uh not so much the only outstanding one for core uh was um so so in the in the initial uh stage one of core this there was this IDE aidea that you know we're"
  },
  {
    "startTime": "00:08:00",
    "text": "going to have a multi round uh protocol here's here's the proposal here's the counter proposal you know just just like you know where is this like the Ike and ik V2 protocol but then somebody pointed out to me but that actually all this back and forth really should happen in stage zero and by the time the Gateway G1 and Gateway G2 are ready to proceed they already know exactly you know all the parameters who the you know originary beneficiary asset identification and so on and so on and really the the the purpose of the first messages in stage one is is is basically look here's the stuff we agreed before in stage zero and then Gateway two will just signed yes agree and then the commence the formal commence of the two-phase commit um begins right and so if you look at um core now there's this you know section I think 7.5 that that really should not uh be there and so the the next stage is to delete that in our um editor discussion so that first thing the second one second item that's probably smaller in in in um in importance is um some of the editors when we were discussing this uh notice uh in the message um uh body some of the messages there's this thing called the client oh uh what was it again client number something and um uh and so people people asking me well hang on don't we have a session ID number that is always carried in all the messages for a given session and so if you already have a session ID do we really need yet another ID this kind of does does the same thing and so"
  },
  {
    "startTime": "00:10:00",
    "text": "uh the thought is is just to stay with session ID and you know remove that um extra parameter that doesn't seem to be needed and now related to this and and W you could probably give a bit of clarification um my understanding with the ITF specs is that we Define you know some mandatory payload components you know and then maybe some optionals but there is this notion that um at least in the routing working group this uh this V vendor U vendor specific extensions right so this is a a question that that somebody asked me L you know you know if a if message you know x uh has you know four items in the payload and and my implementation already does this but I want to add you know additional payloads that are product specific to the company can I do that and my quick quick answer was that yes you could but um I don't know how to actually um do that I mean would a vendor actually write a special document or is is that out of it's not ITF business um to um to handle these vendor specific extensions so that's that's the other sort of question okay great um uh lots of information buried in that I'm going to pull back and do one at time um so with respect to the the comment about you know the back and forth about what is actually going to be um transferred should happen in stage zero that makes sense to me um you know the one I I guess from from my perspective and again high level perspective right is that um essentially it happens in phases and we should have named the the the stages 10 20 and 30 so that we had room in between to Rum like we did in"
  },
  {
    "startTime": "00:12:00",
    "text": "basic and many years ago um because the reality is it's really a flow right you have an order of things and we happen to you know start with one and then we had to add a zero you know accordingly but zero will probably have sub components too where it's actually doing identification of the other side followed by then you know a 0.5 will be um deciding what should be um transacted or whatever um so Thomas I guess my question to you is if we remove what I think you said with Section 6.7.3 um that really just defers the work until later and is the core protocol useful without that negotiation of what is actually being described I mean it's still useful but essentially uh to put it another way it's really not Deployable in the fial yet because you don't you don't know ahead of time what you're going to transfer so we can transfer an arbitrary blob that both sides agree um and that's out of scope for the moment is that basically your conclusion yeah it was a it was more of a question to the group um do we want to allow you know proposal and counter proposal multi round at the start of stage one to to and you're right was it would make the protocol usable um because then you can you know go back and forth or do we want to move this multi around you know negotiation to be in stage zero which means it's going to be future work right so I mean my my view is that you you shouldn't have a multi-round within the protocol because you can that can just be an you can Implement that by having a an accept or refuse so when the when the uh proposer says I'd like to"
  },
  {
    "startTime": "00:14:02",
    "text": "transfer this sender if you like the receiver can say no or yes basically and that then finishes the protocol at that particular point and then if the sender wants to propose something else that would be a new proposal to say okay how about this and then the the other person can say yes or no I think it's simpler and cleaner to do that then to have you know a complex protocol which has a sort of multi-round negotiation um what happens if for example the sender wants to come back with another proposal you can go on forever yeah I mean that is the problem with with uh protocols that involve some sort of you know random communication that's a good point so thank you Anthony uh Dennis uh yes a couple of points um starting from the the last one um I am under the impression that the stages refer to phases basically um if I recall the history of the discussions we had this is because we have a three-phase commit protocol so we divided uh the flow in three stages uh and this is kind of aligned with the um the steps of the three-phase commit protocol in theory which is you know what is in section seven of of of satp core um which is leaving us for uh minus one of the first which is stage zero for all the things that have to be back and forth um between client gateways and and networks eventually so there is an internet draft that I propose for stage zero that is trying to take in account all that stuff um the thing that I I see here is that definitely in order to"
  },
  {
    "startTime": "00:16:00",
    "text": "start with stage one we need to have what we used also in the email discussion list called a transfer context this is also associated with the fact that we are talking about sessions and there are session IDs and there eventually might be different session IDs whether we are recovering from Crash or other things so uh I don't know whether in core we could introduce the notion of context of transfer context that might be not only one idea D but uh a bunch of stuff that is required in order to proceed with a Protocol no matter in which stage we are so I don't know one proposal I mean suggestion for me to be to replace the session ID with something that we call transfer context that is defined eventually elsewhere But it includes session IDs because we may not have only one session ID depending on how we implement the recoveries and stuff like that so my suggestion would be to keep with stages and be aligned with the three-phase commit theory of the protocol so we have three phases three stages okay and one negotiation stage before so two suggestions use transfer context instead of session ID and keep the stages now one last comment here I believe that if we would like to make architecture and core aligned there is the picture that we introduced in uh in architecture uh in 5.5 should be aligned with a picture that we have in 4.1 in in core and in that case there is an arrow missing from client to network in core so I said maybe many things in one thing but I mean okay um there's a suggestion you to modify 4. one picture in in in core thank you Dennis so let me"
  },
  {
    "startTime": "00:18:01",
    "text": "ask you one clarifying question to follow on which is uh you talked about a discrepancy between diagrams in the two documents do you believe that your diagram that you've proposed for the architecture document is the correct one and core needs to adapt it yes that's I think it's it's it's more General again it's my view but in core we have arrows from client to network and Gateway in architecture and in core we have arrows from client to Gateway only um so I would say that 4.1 in core should have an extra Arrow going from client Network y y we we'll do that thank you Dennis sorry my my my bad no I I just saw it thas we here years now as I was posting architecture five I said oh damn I need to update the diagram in in um in core as well but yeah that's that's on the to-do list actually can I have a question so so Dennis I think in core we said that the session ID is derived from the context ID and the context ID is an identifier it's a value that's a stage zero um negotiated between the applications and that um one context ID could in fact map to multiple transfer s sessions right so it could be that you know Alice and Bob using App one app two says you know I want to transfer $1,000 from Alice to Bob or I I want to you know send you two tokens part of this transaction and um that means there's two instances of satp that's actually running each with the same context ID but each has a different session ID because it's you know so in other words"
  },
  {
    "startTime": "00:20:01",
    "text": "the the context idea is is an application layer identifier that that brings together multiple instances of satp transfers yeah yeah I you know and then it could be also bidirectional right so a context ID Alice sends to Bob Bob sends to Alice in the same context but each one you know sa can only do unidirectional and so you're running two separate um sa instances in you know yeah I see I see your point the the I mean in my mind and the way that I wrote the draft for stage zero is that there is only one context for one transfer instance and the context contain the session ID eventually it may contain several session IDs depending if we recover so we reestablish another session ID for the same transfer so there is only one context ID for one transfer instance um this is also to go in in in sync with previous things that existed in the past in literature when we are having transaction contexts in in the in distribut transaction processing there's only one transaction context for one um three-phase commit protocol basically instance um so but but actually it's something that we can we can discuss I mean if we have a context ID and we know that the context ID contains all the session IDs of one transfer instance then it might be simpler because you have an immutable ID for the whole transfer instance I'm I'm with um I would say Thomas Thomas's approach here is is the way that that we Implement in our in our system we have a we have a sort of if you like a context let's I don't call it a context ID but"
  },
  {
    "startTime": "00:22:01",
    "text": "the the context ID as Thomas described it in other words you have a number of transfers that are grouped together and um and when you you may choose to actually um commence a transfer based on things which are happening in other satp transfers so whilst we're only looking at a single transfer now if you if you have this um group ID or um it doesn't sound like the tennis you had in mind that context ID would be used for this but I think a sort of grouping ID would be quite useful because then um I may say well Alice and Bob are doing this transfer of money and then somewhere else as a completely separate satp transfer they're doing some tokens but I won't commence the money transfer until I know that they've they're ready to commence the token transfer some of the words they've been through um the first stage basically they've agreed it everything and then I would say Okay commence the commence the um the remaining two phases if you like of the I see I mean the thing is the following I mean it's an open question to all is um how can we if there is break in in in the sequence of transfer for any reason and if we have to reissue a session ID to continue for example in case of recovery what would be the unique ID that references this whole transfer instance if we have multiple session IDs that for any technical reason need to be issued over the course of a transfer instance what would be the unique ID that refers to the the complete transfer instance so if we have"
  },
  {
    "startTime": "00:24:00",
    "text": "to define a transfer ID somehow which is immutable because it starts and it completes whether it commits or R backs it's it's only one thing what would be this immutable ID that will refer to the transfer instance in case that we have different session IDs that's why I mean I'm introducing the the notion of context of trans of transfer context to be this unique immutable ID that refers to the specific instance that's all so so Dennis just a quick thought we can we can we can bring this um on the mailing list so I mean could the context ID in fact be a data structure I'm not a number could it be a a data structure that has definitely if you yeah if you check I mean one proposal again doesn't have to be because I propos the one that we adopt but in when I was writing down the the stage zero uh there are several IDs the network IDs that Gateway IDs there are several session IDs in case that there is issuance of new session so all these things it's it's a structure actually that I call transfer context and that one has one unique ID so there we can stuff everything that we we need over the the course of the transfer instance uh and we know that that's specific transfer instance has just in mutable ID which a complex which is could be a complex data structure it's not just one ID it's an ID that refers to a you know a rich set of information yes it's adjacent structure indeed so is this is this a bit like the state of the satp transfer so for example within that structure would you uh yeah actually it's only the the set of IDs that are necessary for the transfer because the state it's inherently uh saved in both"
  },
  {
    "startTime": "00:26:03",
    "text": "gateways um so if I mean to me what we need is the identification of assets to be transferred the identification of networks the identification of sessions gateways so all these set of identifiers are put together in what uh it's called the transfer context which is an a Json structure of course that has an ID and refers to the instance the transfer instance so if there is locking if there are things that typically you have a Network that has different you know requests for transfer for the same assets uh if you would like to to implement something like optimistic locking or pessimistic locking then we know in which uh transfer instance these assets refer to I mean are associated to Dennis quick quick question so so let so you have the data structure and so let's say um we had that two two sessions two transfers part of a part part of you know one big transaction so for each and each has a unique different session ID and assuming there's no crashes is there some way at the satp core message level to point back up to the context ID or the transfer ID so so here's here's I know my session ID because you know Gateway One Gateway 2 is running it but given a session ID can I look up somewhere to find out well actually this transfer instance unidirectional is part of a bigger multi you know yes that's the yeah that's the how do I look how do I look up how do I how do I you know reverse yeah there is there is a this API 3 that connect to eventually Registries from the Gateway so when you negotiate uh at stage zero and you establish a transfer context then you"
  },
  {
    "startTime": "00:28:01",
    "text": "can register this transfer context to a registry and both gateways can can look up that transfer I mean there is an idea of the context transfer that in stage one the 1.1 could be uh established between the two gateways but this is something that gateways can look up on an external registry via API 3 can I just get this clear in my mind so the transfer context is the basic information about the transfer that is persisted somewhere and um if a let's say one of the gateways crashes and then spins up again it could retrieve that context so it knows that it's you know US dollar tokens going from Network five to network six and various other things and I presume at some point it would then have to be able to recover at what stage am I in in this transaction correct so is that is that what you're talking about when you talking yeah yeah correct I mean and if you if you check I mean the the internet draft in stage zero Annex Annex yeah yeah there is a transfer context example there where there is a transfer context with a whole bunch of things including session IDs preview session IDs active session identification Network like w is proposing identification of assets with IDs of assets I've got yeah so we can B basically stuff whatever is necessary there and we can register that to a registry so via API 3 the gateways can access that uh transfer context at all times not only gateways also external uh entities even clients can do that so uh"
  },
  {
    "startTime": "00:30:01",
    "text": "you can eventually you know abort one of the transfer instances but if the assets are in a different transfer instance then the other transfer instance can continue um so we don't have you know one request on the network that lock the asset and no one can touch it's like a pessimistic loocking we can if we have a transfer context and we know which assets are there we can have eventually competition of different transfer instances and the one that wins actually will invalidate the others so all the others have to roll back for example um so that's the the idea there I mean we could put a transfer ID in the context if you wanted to Thomas but I think or all that information could be at if you like what the thing we call the sort of transaction manager which is the bit of I think in in the in the client basically the client track of that no no this is no that's good good idea Anthony um I'm sort of sorry I'm I'm thinking aloud um so so so basically if the if the tcid you know and I'm looking at the annex here Dennis if if we have the tcid there uh you know and sety coure execution begins right B basically what you're saying is we don't need the session ID the the session idea is the context ID actually we may for technical reasons we may need a session ID because typically you say you have a crash so you have a session and uh for all the things that like you know we use in the the nons and all the things that we have so we don't have replay attacks or anything we can have yeah session IDs for technical reasons we might be having a an active"
  },
  {
    "startTime": "00:32:00",
    "text": "session ID um and of course the example that I'm giving here is the fact that typically you have a crash two times and there is a new action ID so they have three session IDs for one transfer context for the simple reason that there are may be crashes there may be things that are restarting so you establish a new session ID and if you like to establish a new session ID you refer back to the transfer context which is mutable so that might eventually ease uh any any sort of recovery or any any sort of technical uh reason why you need to reestablish a session ID not important right now but but uh and right now it says I think core says session IDs is randomly generated by by Gateway One the client side but I don't think we've said anything about uh binding the session ID number with the TLs session like you know so TLS has got its own internal session numbering right do we want to tie that to our session ID or is that like independent that's interesting um I cannot answer that for the moment the the thing that drives this whole discussion to me is that whatever happens during the execution of of satp transfer instance we must be able to have a unique immutable ID to refer to otherwise it would be extremely difficult if we have sessions eventually if the sessions are regenerated by Gateway to understand where we stand for a specific transfer instance no no a agree agree I'm more like well what do we put in set in core is is my you know I would yeah how do we think your your setup stage draft with core I would suggest to say the same things yeah maybe transfer context that is an immutable ID referring to a transfer instance might be okay for for core H"
  },
  {
    "startTime": "00:34:03",
    "text": "because we in core we say okay whatever happens there is an ID that refers to the transfer instance okay fine and then we can have whatever is necessary multiple sessions eventually regenerating sessions for a Gateway um because it might be both sides maybe the Gateway 2 is crashing and then reestablishing the with a different session ID for Gateway One or say I mean I had this previous session give me a new one and then G one should recreate the session so there might be different um you know scenarios on why we need and how we have to reestablish the connection between the two gateways eventually so if we say in court that there is one unique immutable ID for a transfer instance then we have some room to Define uh you know whatever scenario is necessary later on or is on an anex or a nonnormative vendor specific way so why don't we do this I'm trying to figure out how to um this has all been great discussion in general and it seems like we're we're um coming to a conclusion roughly why don't I suggest this and see if everybody agrees um Dennis can you write up uh proposal especially considering it ties to your other draft of what you think the the session ID and the transaction ID should be um how it should be defined you know and how we need to modify core accordingly and send that to the Mist for further discussion does that seem reasonable sure absolutely yes hopefully that's okay with Thomas and Martin and the authors yeah yeah mailing list mailing list is always sort of the default sort of you know medium yep okay well face to face is important to to come to the resolution of where I think everybody agrees today but but until we see it in writing of course it's hard to confirm"
  },
  {
    "startTime": "00:36:00",
    "text": "so yeah happy to do that yeah thank you okay all right so that was topic one which is sort of the multi-on protocol and we actually handled I think one of other Thomas's uh questions about the whether you know the message ID needed a client you know number as well um so I think all of the ID discussion is essentially done somebody correct me if you believe that there's more to be done there um and that brings us to Thomas one of your other questions was about the mandatory versus optional protocol components um and so absolutely you can create a protocol that allows vendor extensions in fact we tend to encourage extensions in general regardless of whether it's a vendor extension or a future ietf specification extension um so it's helpful if you can define a place where other payloads might be defined um you know so there's multiple ways to do it and um I I don't have a particular thing to point you at is this is the way because there are multiple ways that it's done sometimes there are naming attributes where uh you make sure that all name all field names and you know adjacent structure or whatever uh uh must conform to you know this name if it's in the standard or um you know it has vendor colon as a prefix if it is a you know an extension or something like that um there's ways to do that there's also you can uh say that no extensions outside of this subfield are allowed and you could have you know a vendor extension array of of additional payloads or whatever um and you one of the important things"
  },
  {
    "startTime": "00:38:01",
    "text": "to to put into that is probably the notion of if any components in this field are not understood they should be ignored um so then you get into you know issues of um you know are they critical or not um and you get you know you get all the way down into negotiation of of whether or not extensions are understood and you know responses and things like that um I don't think that that you need to be too explicit especially in in sort of you know the first version of this uh satp core document I will say I I I in the long run I suspect that you know we will because this is such a new field within the ATF I can't imagine that you know five years from now we might actually start working on version two of this document so thinking about that ahead of time of what happens when we add additional Fields what happens Happ s when we add additional parameters and things like that what is a V1 client supposed to do when they encounter components in a structure that they don't expect um and so putting in wording like that is is sort of critical and typically it'd be ignored or um you know if you believe that at some point in the future you'll have you'll want to be able to specify fields or you know from a vendor or from a a future standards model that says um this field must be understood please cancel the session if you you know if there's a mandatory to recognize Fields so you can put in a flag into a field or something that says you know mandatory um uh where then if if the if the other side doesn't understand it they know that they're supposed to abort the session rather than continue um so there's all things to talk about that was a whirlwind of of random thoughts but um that give you enough to go on Thomas if you're going to alter the"
  },
  {
    "startTime": "00:40:01",
    "text": "document or I should say authors in general that includes Martin yeah no yes no thank you that really helps so so um so basically in the opening message of satp you have to say V1 so that in the future it might be V2 and so on and so on so yeah so that's good um and um yeah I think I think I I think I understand the vendor extension could just be like vendor Name colon or something uh but but we definitely need to put um space in the payloads you know to anticipate ex ex ITF extensions and and vendor extensions okay great um yeah so so do that accordingly um and uh I'm sure we can come back and review that once you've put together a proposal for how to do that um the last thing that I want to bring up today is is um if you go look at the setp core uh document status you'll see if you remember way back and it was like the- z00 draft uh the HTTP directorate actually reviewed it and you know I I warned the htb director at the time that they were very brave to review a z00 draft of a brand new working group but but they did we should definitely make sure to have something let me put another way authors please do go back and look at that as we're getting closer to the end uh to make sure we've handled all of the issues that they've raised I have a strong suspicion that many of the issues raised by the HTTP directorate um will be um obsolete because the draft has changed so much since then um but it is probably worth looking at that because I'm sure some of them will still apply and they'll give us another uh probably review at some point in in the future too um and when we do a Last Call on Corey will probably request the security directorate to give us an earlier review"
  },
  {
    "startTime": "00:42:00",
    "text": "than average as well because um this is such a security related protocol that an early review would be helpful uh hopefully that all makes sense yes yes thank you is okay uh with that uh with that uh any other topics people want to discuss today yeah I mean we I mentioned earlier about the accept and reject um of a proposal if I look at the existing draft um you basically have one message which is a transfer proposal message so that's from the send a gateway to initiate the the asset transfer and then you have two messages which might come back from that one is the transfer proposal receipt message and the purpose of message is to is for the server to indicate explicit acceptance of the transit transfer initializing St claims so if I send back a transfer proposal receip message I'm accepting and then we would move on to the next um to the transfer commence however to if I if I don't want to accept that message the only way of doing it at the moment is to go to the transfer counter proposal message which is um it basically says uh if the server does not wish to proceed with the current transfer the server must respond with an empty blank counter proposal message so referring back to our discussion about whether or not counter proposal messages should be you know"
  },
  {
    "startTime": "00:44:01",
    "text": "there should be this counter proposal um part of the protocol um I I would recommend that there's some way of explicitly rejecting rather than just sending back a blank counter proposal because if we decide not to do counter proposals then there's no way of rejecting a message um because the the only other message is the transfer proposal receipt message which is a um which is a an explicit acceptance so either transfer proposal agree actually no no good idea Anthony and I agree so we have to like scratch our heads here because uh so there's two two cases when the Gateway two is not happy right so Gateway two says okay you know I like nine out of your 10 parameters but I don't like one of them so I'm going to send a counter proposal for just that one thing that that I don't like and then we can go back again so that's that's one uh and then there's the case where okay we've we've done too many rounds here back and forth back and forth and we can't seem to agree on on anything uh you know something and then I quit so the an empty blank kind of proposal is okay I give up and and quit right now so the question is is is it implicit the is the counterproposal reject explicit the way you said you know counter proposal reject but when you reject is there some followup if it's a reject uh and I suggest this other parameter that means they're going to continue talking and and Gateway to is not giving up right so it's it's it's I agree with you I'm trying to find the right words is it is it counter proposal read reject including suggestions or is it counter"
  },
  {
    "startTime": "00:46:01",
    "text": "proposal reject I quit yeah I would say reject and maybe just have a reason field yeah it could just be reject and then you basically put in a reason yeah so so so looking at go go ahead look at the chat I think I think this is this is this is part of the the question you know should this be in fact be stage zero or stage one because because Anthony one of the things that that that we've discussed in the past was that you know by the time Gateway One and Gateway two begin stage one they're they're pretty clear on everything like there's no ambiguity there's no negotiation it's literally pulling a trigger and that running stage one to the very end you know stage three should be you know in milliseconds because there's no back and forth you know about about parameter negotiations okay well which would mean that you there's no option to reject I mean at that point you say you've already accepted in stage zero some somewhere outside and then you can't yeah yeah so yeah so this is the correct people to jump out say no right and so this is one of the the drafts we want to you know develop is is a stage zero negoti ation spec stage zero could be completely you know offline basically it could be any mechanism I mean I could say I could be have a telephone call with you and say look we want to do this transaction here's the terms and at some point we enter into stage one by which point I may well at some at some point I may decide you know we have to go to this business where we've legally agreed in effect and this comes"
  },
  {
    "startTime": "00:48:00",
    "text": "back to the points I made in my suggestion about this idea of having settlement finality but um I would I would prefer to see a an accept or reject in that stage one okay I'm just reading uh yeah Ram thing yeah no no I think I think right now for stage one Gateway 2 can always reject you know he here's here's the initiation claims that we agreed in stage zero I'm just I'm just collecting it you know last last chance you know here's the 10 things we agreed on and then if for some reason Gateway 2 says you know what I don't want to proceed it can always send reject and then session terminates exactly that's that's what I'm trying to that's what I'm trying to get in if we should that be in if we if we're going to move the um the counter proposal out of stage one then should we replace with a reject message yeah agreed we need a way to to Gateway To to say you know for some reason you know all the all the back and forth we did in stage zero is great but you know for some reason business or technical I can't proceed so so yes we need a way for Gateway two to say reject okay yeah that's that that's that's agree no this it's a it's a wording question Anthony the this um explicit versus implicit and I think the reject is more explicit there's no like ex there's no like yeah I think we've we've all come to conclusion that an accept and an explicit accept and reject makes a lot of sense and this is a clearer form of the protocol where what I'm left wondering in this conversation is are you keeping counter proposals and so I"
  },
  {
    "startTime": "00:50:00",
    "text": "think specifically to you Thomas first I mean Anthony was saying we shouldn't use them uh which I can see the arguments for and I could see the arguments for keeping them so where are you leaning right now or what is other people's opinions on that I think looking looking at the traffic I I think it's going to be stage zero um where the the counter proposal right so so basically if if you read um core now 7.1 is here's the proposal 7 uh 7 sorry sorry 7 um three here's here's the proposal and then 7.4 G gway to says Okay I I like it here's the receipt and then now 7.5 is is reject is just what Anthony is saying is so instead of counter proposal it says transfer eject yeah exctly which is going to be very short message okay so fantastic so the conclusion I wrote down in the notes say the counter proposal will move to Stage zero and the core protocol will really only have an explicit accept and reject in stage one correct correct correct thank you great uh thank thank you Anthony this is good this is good input you kind of made up my mind today yeah good thanks good good discussion all around um uh we have nine minutes is left is there any other topics people want to bring up actually was queing up for uh raising hand here I don't know yeah thanks I just noticed I was not sure whether that new apologize so um if we move the all these negotiation back to to state zero uh there is definitely way to formalize all the the terms of the negotiation and eventually we can have also a placeholder inside the transfer context eventually so we could say this trans Contex is happening uh subject to all"
  },
  {
    "startTime": "00:52:00",
    "text": "these things that have been negotiated between the two parties so there is definitely uh a way to put uh the outcome of all these negotiation in stage zero before stage one um the other thing that I wanted to also raise here is that in all the three-phase commit protocols there is always silent failures on on the parties so the the the transfer multiphase transfer protocols always assume that one of the parties can can leave uh without noticing especially for networks so there might be several reasons why the in stage one the receipt uh may not come at all or may come because Network to pulled out or application to pulled out from the uh for any reason from the specific transfer instance um and there is no problem in a receipt to have negative or positive so commit or roll back or continue or abort uh this is intrinsic to all of the the three-phase commit protocols so this thing that we're discussing about uh having in stage one Gateway two uh refusing could be something that can happen at any stage of the protocol at any step and that's also the power of of s p the fact that we can have a abortion abort of any of the parties and the thing will still roll back uh and keep a consistent State I think your the suggestion of putting the negotiations or encoding the negotiations into the context is a good is a good one precisely that that means that everybody can you can prove what was agreed"
  },
  {
    "startTime": "00:54:01",
    "text": "beforehand however in terms of the um the the the roll back and the consequences of stopping a transaction this is going to be something we'll probably chat about when we we're at the party in Vancouver is the um legally in we need to have this settlement finality point in time what settlement final he means for in amongst Banks is when you go past that point the your legally committed so there's a difference in what you do before then before then before you go to that BK to that particular point and you have to Define when that point is if people pull out then everybody rolls back once you've gone past that point there are different actions so if somebody pulls out after after that point then it's more like the um is more like a catchup process so you say well look you you are committed to actually catching up on this it has to be done we can't all roll back out our databases because you've decided to disappear basically it'll be like a node going offline in in the Bitcoin Network and it comes back on again it then just has to catch up so I think there's it'll be more complex than saying somebody can just disappear and and the thing and everybody else just rolls back depends on that on whether or not they're legally committed to that transaction at that point uh I agree Anthony the thing is maybe also the this differencing point of view also comes in the email exchanges now that you explain it I understand your point of view better uh in in satp the thing that we are trying at least my view of it is that we're trying to make sure that from an engineering point of view things are consistent now the implications from a business perspective of what happened if"
  },
  {
    "startTime": "00:56:02",
    "text": "there is a roll back and eventually a unilateral withdrawal from the transfer of one party without a specific business reason then this is a different story but in terms of the protocol and exchanges of messages from what I understand in satp we trying to ensure the engineering the technical part of the transaction and of course failures can occur I mean things you know technical things might go wrong uh like recoveries from crush or or even you know the fact that there is another transfer instance that actually went before us and took the assets so we have to roll back because there are no an answers to transfer because there is a a you know competition and there is a transfer instance that succeeded before us for example any sort of of reasons but my view and again correct me if I'm wrong on the whole group the acid view of the properties of satp are more at the technical level so we ensure that things will go okay and roll back is okay technically now the implication of the roll back it's a different thing eventually we can go back to the transfer context and say that during the negotiation phase you have committed not to roll back so you have to pay penalties and stuff fine but for satp uh Pro protocol it's just the technical acid properties of the protocol that we're ensuring so if I if I may you're both right um you know the reality is is that uh you know the ITF is an engineering body um but there are you know Anthony there is absolutely a Tipping Point where in the process of a three-phase commit with acid properties you know something was either transferred and I argue that's really you know sort of the legal point or in um there's there's a whole issue of"
  },
  {
    "startTime": "00:58:02",
    "text": "making sure that something is you know burnt properly on one side and and created on the other minted on the other and things like that um I don't think in the it's in the scope of the ietf to document the the legal aspects of it um you know where that Tipping Point is where the recourse for a failed satp engineered protocol should turn into the legal framework for proper you know asset recovery or damage retribution or whatever it might be um it would be interesting to make a note of that in the protocol um and and Anthony you're you like spot on right at some point you know nothing's really harmed yet but at some point after a point in that in the protocol where there's a silent fail on one end or whatever it might be then all of a sudden um you know a business relationship has failed in some way um and one of the things we've assumed since the beginning of the working group is that there is business relationships to some extent you know that Define what happens when when when something fails or there's a legal agreement you know of of uh these two networks agree you know to communicate with each other and things like that which happens in the routing world as well um uh so we are about out of time but I I definitely want people to think about that particular case further and maybe we can bring that up at a future um meeting possibly in Vancouver if it seems like there's more discussion that should be happened there um because I think there's important parts Anthony go ahead we we can talk about it later on I think it's yeah I'll I'll leave it there for for future enjoyment yeah okay great w yes very good point all right so with that I think that we are at time so let's go ahead and quit for the day um I think this has been a fantastic discussion um so thanks"
  },
  {
    "startTime": "01:00:00",
    "text": "everybody for contributing um I will go start a last call for D5 um I will make it probably four weeks as that sort of our standard which is kind of long but it is a it is a long document and there's no you know immediate rush in the first place so I congratulate the working group for getting to the point of getting to a last call that's a non-trivial thing to do uh it sounds like we have a little while longer to go with core um please keep the chairs up to date with you know if you're if you believe that you're ready and most things have been resolved let us know so all right thanks everybody and have a good rest of your day or evening or night or whatever it might be m"
  }
]
