[
  {
    "startTime": "00:00:04",
    "text": "foreign past just to give time to be able to join yeah makes sense and that's right Carson it's exactly the same file just for reproducibility you mean it looks strange with uh the phones especially on yeah on the name of Jaime yeah I I want and your name also yeah I wonder yeah we reported that to meet Echo already so I think they're looking into that but it's something you only introduced as it looks like yeah so I know Christian is in a car for a few more minutes and and yoren will also join a little later he told me but I think we can start in a couple of minutes"
  },
  {
    "startTime": "00:03:03",
    "text": "foreign yes thanks for the links to the minutes I'll try to take notes except for the presentation I plan to run any help is very appreciated took 10 seconds for the chat message to turn up in Java thanks Richard"
  },
  {
    "startTime": "00:04:01",
    "text": "foreign a few minutes with the introduction anyway um so welcome everyone to this interview meeting of the co-working group I'm Michael Jordan my coaches are uh I'm a Jimenez and Carson Mormon this is an officiality of meeting we've been recorded and the note 12 applies it's not just about IPR it's also in the special about our code of conduct so be nice and professional um to each other and today we have a relatively packed agenda compared to usual entry meetings uh we are supposed to start with a number of open points to discuss about the Kudos draft on key update for Oscar and then we have a point that we can really discuss with Michael Richardson especially only between uh 14 14 and 15 UTC if he actually manages to show up from another conflicting meeting and then we also have the all-score capable proxies document and I plan to give an update about and and then we have also Co-op over God from Christian um if we see Michael doesn't show up uh at the expected time perhaps we can uh pull up cop over Gap actually what do you think Carson sorry did you just address me and yeah I was asking if the possible agenda bashing to be flexible with Michael would work yeah so he sent another message that she also had some some misunderstanding of"
  },
  {
    "startTime": "00:06:02",
    "text": "the train schedules and so on so he will turn up at some point in this hour and then we will just do that item I think all right great uh that said I think we can uh get into Kudos then yeah sounds great let me try to share the slides [Music] there you are okay yes um so hello to everyone so today I would like to present here some updates to the key update for score Kudos draft and I'll start with a short recap and as you may know it this draft mainly contains two let's say porch one related to the actual Kudos procedure with the lightweight way to renew the old score Master secret and master assault um and also a part about the aad key usage limits specific to oscore uh defining appropriate values in terms of a number of decryptions and number of encryptions and how you can extend those core contexts to take into account the counting and the limits but today's main focus really mainly be Kudos there's one point about the limits also um so going to the next slide this is uh General recap of the Kudos freaking procedure so the fundamental idea basically is you have a message message exchange where you exchange dances and one and two and these are fed into a update CTX function that internally produces a new Oscar Master secret and master result and after procedure is finished the"
  },
  {
    "startTime": "00:08:02",
    "text": "peers can continue communicating with this new context and part of this procedure is relying on an extension of those corruption so we extended it with a nonce section and a bit a byte before the announce which defines the length of the nons and also some additional signaling bytes um that we have defined to keep observations or not and when to use the perfect the forward secrecy mode or not and as you can see in this figure here in the bottom left but now I want to go in to um the open points for the day and these are the ones we have listed um I'll go through them in more detail later on but basically it's about this uh the first one is about the flat bits in those corruption and some considerations on those then we talk about a single method for updating the key material that's related to this update CTX function next is whether or not we should have a negotiation for the followers secrecy mode or or not then it's related to the content about the key usage limits and possibly relocating that next it's about extending ad hoc with EAD items for Kudos so peers can learn through an adult execution with another party support skills or not the last point is where and how we should Define the content about update and all score send and recipient IDs which is also currently a part of this draft so yeah to start going into a bit more detail so the first point is about the old score flag bits so there's been some discussion on the mailing list about this you can see in reference number one there but basically what has happened is"
  },
  {
    "startTime": "00:10:00",
    "text": "first of all our ID bit which is the bit that indicates that this is a Kudos message and that Anonymous component is present um has been registered now uh as for other um things basically um the current situation and this is about the actual Oscar flag Beats the current situation there is that bit 0 and 1 are resolved from those currency and the current text in Kudos is that we say that we should Define bit one for signaling a second flag byte so it's an extension bit for those score Flag by basically you're saying okay I want a second flag byte and the as you can see the D bit is then present in this second flag byte however there's been a discussion on the mailing list about an alternative approach where we want to instead Define bit 0 for signaling a second flag byte and then we can change bit 1 to unassigned and yeah sorry so the text became um on top of each other there but um the point is that this document is already updating the oscore RFC so these points can then be a part of that update as further elements that are to be updated and the thing here is that the Bit Zero there's not a concrete plan for using Bit Zero it's only um earlier considerations about possibly using it for an uncompressed cozy object but it seems that that is not um that was more an old plan which is um not presently uh considered and the nice thing about using Bit Zero for extension is that it's a consistent pattern and you have that let's say leftmost bit um so you can have Bit Zero for having you know the next byte and then in that"
  },
  {
    "startTime": "00:12:00",
    "text": "bit eight indicates to have yet another byte and then it's byte 16 so you see it's a pretty nice pattern like that so so this alternative approach basically um the question that if that is uh uh a reasonable way to take and in such case what we would do then is to do possibly do an early allocation of Bit Zero to say that this is for defining the signaling of a second flag byte and we can then change speed one to unassigned for possible future use and we may in addition to that already register bit 8 16 24 Etc as extension bits to indicate that you want um one more byte apart from what you already have um so that's the question should we switch to this alternative approach from our current approach um and yeah we feel it has a number of advantages in doing so yeah and also yeah let's see class one from Karsten there in the chat and joran is in the queue yeah sorry I came late here but I uh I think this is a good good poster I don't think we need to allocate in advance we could take a bite at a time or or maybe the next bite also but uh yeah but I think this is a good approach and uh the interesting thing here is that the person that proposed I think the person that proposed the other previous use of zero it is the same person as now is proposing the other way of using it so so um yeah I think that's uh there there should be no one that's not heard here in this in this question but there might be other yeah unless there's anyone else having a comment of course and if anyone has a"
  },
  {
    "startTime": "00:14:00",
    "text": "you know of course feel free to uh then uh this is also uh discussion on the mailing list so people can jump in there if they have a concern so we should of course check more that there are no further comments but okay it sounds like you agree with this um Approach at least yes to be sure you were suggesting to not rush with registering bits 8 16 24 right uh so I I didn't see the reason to to register this I mean you can register for zero a bit and eight because those are the ones that we have plans for the other bytes are really uh I see it okay theoretical at the point this point so so when you start registering things in in the in the third byte then I think you can allocate 60. but this is not a big thing either I think this is a good approach just go ahead the specifying details and on how we do it with a 10 and 16 and such we can we can think about a bit more yes um car stands as in the chat you'd prefer to earmark a bit n times eight I guess every bit yeah uh that is fine if you want to do that that's yeah I don't have a strong strong view here I see okay but thanks thanks for the feedback on this point I'll jump to the next one then so yeah this was another point I believe triggered by some discussions and also uh an issue that was created on this so the point is that currently in the update CTX function which actually practically updates those core context so you feed it the nuns essentially or the nonsense and it produces a new master secret Mass result but the point is that currently we have two internal code paths it can"
  },
  {
    "startTime": "00:16:01",
    "text": "take one is using the adoqi update which you see is Method one in the green box and that can be used if the original context was established using ad hoc so you have the Nokia update available the other path is that you base the update on an hqdf extract and expand and you see in the blue box and that is intended to be used when adult was not used to generate the context for the initial context and so the point is that well method one first of all assumes and requires that you have a valid adult context or session available because otherwise you can't use that okay update and it may also be the case that you need us kind of fall back that okay what if um you know the pairs originally used at dock but okay that look session someone became invalid so your you wish to use the hqdf extract and expand method rather than the Adobe update so you may need a fallback or even some kind of negotiation in that case so basically the feedback from itf-14 was and our idea then was 2K but why not you know only use metal tool so we actually removed that the key update path and we only rely on the hqdf extract and expand and it seems that just like using the Ado key update it doesn't provide an additional benefits over only relying on the hqdf extraction expand and it also has some good um properties in terms of building this X and value which we can simplify uh building because that okay update requires that it's a super byte string but if we use the hdf extract and expand we no longer have such requirements so it simplifies things so yeah to summarize the proposed change here is to update this of the CTX method to remove method one and only use method to only use the hqdf extract and expand method and that's a simplification and a team sits there's no drawbacks in terms of"
  },
  {
    "startTime": "00:18:00",
    "text": "security so that's the question are there any objections to this um idea seems um not as a constant is jumping in so how do we check that there are no changes in the security characteristics yeah I guess that's the I think we discussed it briefly uh during itf-14 I guess the question is fundamentally like are there any Security benefits you get from the adoki update that you do not get from the hkdf extract and expand and from our reasoning and and discussions we have not been able to identify that there should be any specific benefits for using educate update compared to the hqf extract and expands so I know how to if we're not let's say formally prove that but from what we have um discussed and thought about we could not see any drawback in simplifying this to only use the method to but that's also why we ask feedback uh in the here if anyone has an ID or um why this would be um not good or or why it's preferable to keep both Metals around um I see yoran and Marco yeah just a short comment the construction image until by the way mimics the same construction of key update of TLS yeah that inspired from there exactly yeah same same design yeah I try to think here um so what what okay update does is iterate equal to an iteration with the hash function based on it it's taking um the to the random key comes out of ad hoc and it reiterates hashes that"
  },
  {
    "startTime": "00:20:00",
    "text": "uh and and then you derive from that the Oscar Master Secret and this is just doing the iteration to the master Secret and I don't see any difference from my right that's that's also what we conclude and that fundamentally you regardless you end up building a brand new master secret Master's old um and with the same same type of method so yeah yeah it's similar in that right yeah the only thing I I thought about was that uh if you're using uh of course with some other key derivation function you are now locking this to hkdf which I mean which everything else in in the default values for for Oscar is iskdf um but for for ad hoc we have a little bit more agility when we sort of you may use kmac or you may use some other yeah I see what you're saying I guess like in this case this this update CTX procedure will be unique for Kudos and the way we have to find now then sure you would lock it to only allowing the hqfx extract and expand way um so that's true then I don't know if it's worth having you could have flexibility there I suppose but then it comes down to how do the parties synchronize on which yeah no I don't I don't think there is any need for that but I mean let's let's not do that now let's let's stick to this as as we have hkdf already as a as a default in in our score yeah but I think it's it's a it's a good point to think that you that you mentioned um"
  },
  {
    "startTime": "00:22:01",
    "text": "feedback there in the in the chat from Christian on the previous point but fair enough um then it seems the uh yeah there's no um strong objections from what I can tell to proceeding in this way and of course we should we can have an extra round of thinking about if this really uh that we're really sure about this thing about the security properties let me move on um yeah so this was a point raised based on an issue that Christian created so the question here is essentially currently um Kudos can operate in two modes one you one with forward secrecy and one without and the reason for that is that some devices may be very constrained and unable to store uh right information to a disk which means that if they reboot they they lose any um Master secret has been generated from Kudos so they basically have to report back to some kind of bootstrap Master secret so the the point of having this no forward secrecy mode is to allow such devices to actually use Kudos because if you want for a secrecy mode you have to be able to remember and write to disk the intermediate Master secrets that you generate um and currently we have some signaling for this in this P bit as you can see in the figure on the right hand side and essentially you can set the P bit to um zero if you want to use Kudos in forward secrecy mode and one if you want to use the no forward secrecy mode and the point is that both players have to agree so both have to have either zero zero or one one so they match they agree on which path to take right but the point is that there is um the case where let's say the initiator says P0 so it wants to use Kudos with forward secrecy however the responder is not capable of that because for instance"
  },
  {
    "startTime": "00:24:00",
    "text": "it's a very constrained device which cannot save to disk well then the initiative can simply respond with P one and um yeah the then the actual procedure can be aborted and the initiator can re-rank Kudos but now with P0 so now you're running with a no forward secrecy mode and the point is that of course this is all you it's a potential it's a learning procedure that after you have one at one time run codes with other pair you can learn about these capabilities um but it's not a certain that you know ahead of time if the other pair supports the fs mode or not so the question is basically and the issue Christian race is like can we make an assumption or can we require that the devices know ahead of time whether the other peer supports the fs mode or not because in such case there would be no need for the negotiation at all right you simply know what other parties supports and that's what you go for um so we talked about that I mean the thing is the question though is that security context have this information about whether other peers support Kudos and if yes does it have the information regarding if it supports the fs mode or not so I believe the answer is really maybe and because the point is that the way we do it now we don't require that we don't require that they have this pre-knowledge so the solution is flexible so it would work also in a scenario where you don't have the tree knowledge and if we want to mandate that they have to have free knowledge whether our departure support staff as mode or not then we have to make sure that in all cases where Kudos is used they have this information in this course security context um which may not always be possible for instance if you use those core Ace profile um there may be no way to convey this so"
  },
  {
    "startTime": "00:26:02",
    "text": "that both parties know what the other one is capable of so if we make this requirement that they must know we may limit usability or add these extra requirement of pre-knowledge that may be hard to fulfill yeah Christian I see it's in the I think the the ace Oscar profile is a good example of why this information would be available because the authorization server which picks a secret that would be shared between the peers um has to know already which algorithms those peers support and whether or not you support forward secrecy node is an information that is very similar to the information about the algorithms and that information already has to be with the authorizations foreign within the token itself I believe and so that may add complications in terms of having to change the else currency profile and yeah I've seen the chat Christian says my sound is a bit choppy um yes it's better now okay it's better now let me try sometimes it helps you if I disconnect from the wireless network I don't know why it would prefer that but sometimes it does so hopefully it will be better now um if not I can repeat things but"
  },
  {
    "startTime": "00:28:00",
    "text": "yeah so to repeat what I said basically having this requirement may need uh May mean that we have to extend those queries profiles because there must be a way to convey this information to both peers which means putting this in the response from the As and also putting this information within the token itself and there's no um appropriate Fields where to do that currently right so it may add complications in terms of having to update those Grays profile oh and how if this is combined with Oscar's profile how would the parties know that they can do um they would I mean they they wouldn't but I think that's one of the strength of the way we designed Kudos right now is that it's not necessary that you know if the other players support Cruisers are not uh and it's not necessary to know in which mode the other player uh which mode the other players support because you can actually for Kudos you can you can simply try to initiate Kudos and as far as the mode while we have this let's call it a basic negotiation to to synchronize on the mode so today you wouldn't know but you don't need to know okay yeah if it's com if it's completely uh just try and if it doesn't if it doesn't work you can still fall back then at least negotiating in the sense of yep trying to do forward secrecy more than if the other says that no sorry can't do that falling back um the sounds not too bad no I think right so that that's the strong suit of the current solution and also of course if you do have free knowledge somehow you can take advantage of that and immediately go for the mode that you know the other parties approached I say both Jon and Carson they're in the queue okay I don't know if I'm first yeah I"
  },
  {
    "startTime": "00:30:00",
    "text": "can start anyway so the I think the trial and error is it's good enough [Music] for unless I don't see any reason why this needs to be known beforehand really but please enlighten me on that and the important thing here is that the negotiation is secured but like you've talked about it is because the actual these flag Beats that you see where the p-bit is is the X byte where the pivot is present that will actually act as input also to the key direct to the update CTX function so it is integrity protected due to that and as far as your point yeah the uh pre-knowledge is today is not required but if it if we put it as required okay the simplification is we can remove the negotiation but yeah the downside is we lose some flexibility and then we have to enforce the fact that they have to know in all situations whether it's with endoc whether it's hard code that's context whether it's those guys profile yeah let's see yeah I I think could ask you have to wrap up I think I uh thank you and uh I think that what is it's good if we don't add more things that you need to configure beforehand let's go to people if things can be discovered because that would mean we will need to update all these documents containing uh various information bits and the protocol becomes more complicated and so on so I I'd like to keep it separate if possible okay I see thanks for the input I see Kirsten also in the queue yeah I just wanted to make the general deployability uh point that by requiring some other components to also move with you uh you make it harder to actually start using Kudos so um I think I agree with joran here that we should reduce potential interactions dependencies here to make sure that that people actually can"
  },
  {
    "startTime": "00:32:01",
    "text": "start using cudas scooters as soon as possible but my question would just be um you say kudas is about it if the pivots do not agree um I I assume the the code already has to be there to handle an abort right there are other cases when Kudos cannot go on or is this the first one um that's a good point I think uh probably I mean okay so if one side doesn't support Kudos at all of course it will be about it in a sense but I would I believe that they currently the only way it can be aborted in this sense of the world uh is uh this case where the pivots do not match um that's I believe in the only case now where it's you actually have an abortion happening um yeah otherwise it would be okay one side support is not even aware and has no Kudos related codes so so essentially the the one who wants to use the feature pays for the code which is essentially the the right way to introduce new features yeah so I guess that was I suppose was a pointer and Christian that daily removing this negotiation also has a potential benefit of reducing the number of code paths and and code complexity in a sense so that could be put as a pro on the side of requiring pre knowledge and pre-configuration uh but thanks a lot for the feedback on this point I'll try to continue and maybe speed up a bit and if if 440 is the time and deadline in a sense so this is about another Point here about splitting out the context related to update of Oscar IDs because currently"
  },
  {
    "startTime": "00:34:00",
    "text": "we're in one section that is about a procedure for updating the old score sending recipient IDs based on early mailing list discussion and also an oscore issue and this can be related to privacy for instance where you want to switch IDs to not be trackable across different networks currently this procedure can be run completely Standalone it can also be run as port and integrated within aquila's execution and yeah it can be initiated by either server or client um it's a fairly simple way you have a new core option where you propose a recipient ID and of course you have to follow certain rules in what recipient that you pick that it is free Etc and both players have to agree and use this option to opt in to say that yes we want to update our IDs and of course changing ideas will practically trigger derivation of new score security context so you have new sender recipient keys that we'll be using um so the question is from feedback from itf14 should we split this out into a separate draft this is not directly related to Kudos it is however directly related to oscore um but if we split this out the Kudo Strat will be more focused on Kudos and this is a independent procedure for only updating the old score sender and recipient IDs so that was one thing brought up during the previous IDF meeting that okay what about next is splitting out this functionality to have let's say more but shorter or less complex drafts so that's the question here is is there any strong feeling whether we should split this out or keep it in its current position within this Kudos draft yeah I think I already stated my case at"
  },
  {
    "startTime": "00:36:00",
    "text": "the itf-14 that is you think you think we should write article yeah it was you who had brought up this point during the previous meeting um yeah it has this advantages of course in terms of making the draft more focused on on the core content which is Kudos and the limits and this can be used possibly someone would be only interested in these procedure updating procedure and not actually kudos um but okay thanks for the input and of course any further Yeah question Kirsten what do you think about this plate we're not too many people so it's good to hear from the few ones that we are I don't have any key preference whatever works better for the authors okay thank you generally yes it is what you want to have if you expect different groups of people to review something so that's a strong argument for a split I'm not sure this is the case here maybe not necessarily I would say that it would be different people reviewing it I guess it would be a similar group of people at all I would say I think the argument appeared in in the context of size of specification and how many I mean there was we looked at two um two drafts and we cons said that maybe we can split out functionality to make them more focused I think that was the main argument to have it's better like it's a trade-off like it but then the argument was it's better than more drafts but that are less complex and shorter and more focused compared to fewer bigger with more content right I think that was the main argument here so what is the size of this feature the size uh in terms of length uh let me"
  },
  {
    "startTime": "00:38:02",
    "text": "check here it's a bit hard to estimate I can't see the page number where I'm looking now but it's um [Music] yeah let me have a look in the text version I can see how how long it is how many pages it is uh of it there yeah so it's okay it's one it's it's basically um let's say six six pages of content from two examples or is that without examples early versions of examples essentially improved but the the core mechanics should all be there so the examples here they may grow a bit because of comments but it's um it has basic samples so it's six six pages fluently out of uh 15 total with appendixes so I want to say ten percent yeah I cannot really derive a strong benefit of separating it out from those six pages but it's also largely enough that it's at least worth considering so I think I'm pretty much neutral on this okay I see I see yeah it's not it's not super short to the sense where it will be strange to have a draft only about this I would agree now I think the main point we discussed was the key limits which is also in this draft that is so we note that yes that's actually coming up also as a further point if you mean about relocating that content yeah so we have key limits we have uh Kudos and we have the these identifiers and sort of based on making focusing on codos I think the proposal from my side was that we take out everything that's not kudos"
  },
  {
    "startTime": "00:40:01",
    "text": "which would not have any impact on the Kudos size but it would be it would be more so yeah right so I can maybe yum in to the next one he actually let me Jump Ahead a little bit so but this was the point about so essentially You could argue that the draft has three main parts now which is Kudos the limit part and the Oscar ID update so One path is we keep them all in the current draft another part is we split into two new drafts so we have cures and limits we have the update so to the rest the other part is we have three drafts so we have Kudos only the limits related things and then the Oscar ID updating things so there's actually multiple options there on terms of if we're talking about splitting the draft into multiple as far as the content about the limits there are let's say sub options there on what to do with it so um currently the limits really focus on three things one is an overview of the limits calculations with recommended values to use building on the C for G draft the other part is how do you extend those core context um in terms of limit and counter objects in there and you have this x parameter where you actually can define a lifetime of those core context and the third part there is um extending the score message processing so practically when you when you uh encrypt a message you want to um increment the sort encounter um yeah and also tell me if we should to move to the other document I know there was had a limited time slot um but yes let's finish this page there's three options here in terms of what to do with the limits one is keeping this second move some parts related to the"
  },
  {
    "startTime": "00:42:00",
    "text": "limits to the appendix third move to complete a new draft so in general it's one part is about splitting the draft to be a one to a two to a three the other part is okay as far as the limit specifically what do we do with that then there's also options keep assist mode to a new draft or like a middle ground which is to move to an appendix um but I think your answer your point was you would prefer to even split this into three separate drafts yes right that so that's this one option on the exactly right so then it's more focused you have the limits and those core processing related limits you have Kudos you have those variety updates three shorter but more focused drafts and yes and and just agreeing with Carson here that the limits is the one that should go out and the other the identifiers is not that that's important yeah just to be fair on the way we got to this point um the very original plan was to have one document on the limits and one on Kudos and at some point at that interim meeting quoted their uh John had a very strong opinion about having a single document instead we both so we we can take it back and go the other way but but just for the record to document how we got where we are sure that this was from an interim back in April of 2021 where this was brought up and then it was kind of the consensus was to keep it in one document but okay so should we move to to Michael's point yeah okay so once light was skipped but that can even go on the amazing yes registering Adobe idea items to a signal Kudos support basically but yeah let me that can be on the mailing list and you"
  },
  {
    "startTime": "00:44:01",
    "text": "can check the slides that are uploaded also to the meeting materials yeah but thanks thanks a lot for all the feedback and then I will end by uh sharing now thank you Michael welcome do you want to drive this lot and there's a few useful pointers um in the notes actually yes yeah I think it was mostly to continue and hopefully wrap up the discussion that you and Christian especially had on the mailing list oh okay uh Christian you want to add anything on on top of what you said on the mailing list about this um I don't have anything particular to add right now all because I haven't managed to follow up on all the on the latest responses I got um but uh I'm afraid yes to the list against yeah to to me it seemed that the discussion we were having was actually useful in that it seemed to uncover at least a new way of uh looking at the things that animal is actually doing there and I'm not sure that that this thinking process is completed at this point in time so I'm not having any any well-considered opinions because I'm still trying to digest the the changes in"
  },
  {
    "startTime": "00:46:01",
    "text": "um perception of what the the animal points actually are um but I'm still I still want to make sure that we are not the people who are holding up uh the the animal uh document so we should try to help be as helpful as possible but perhaps a dedicated presenting meeting with help with people providing on core right if it cannot happen right here right now will be another way to discuss if it doesn't continue on the main list spontaneously anyway what do you think Kirsten and Michael you can type yeah I think having a design team meeting would be good I was hoping to use today's interim thank you for that um but maybe we don't have the the right circumstances here right okay Michael says we need some core person to express a specific view on how to deal and Diamond will do whatever he says best and the sentimenting is good yeah I think the the most important person is Christian who just said he has a hard time picking a slot yep I'll um let's try to come up with something in in in in mail exchanges um to to get a concrete proposal and then see whether we still needed this"
  },
  {
    "startTime": "00:48:00",
    "text": "hunting meeting okay where do these mailing exchanges happen right now I think it's a big threat that is shared between core and animal it might make sense while we nail down what becomes like quote unquote the the core opinion uh to for to to limit the recipients to basically core and then um take the rest of the recipients up again the thread is linked in the notes by the way on top of this um agenda item okay thank you since we saved some time out of this should we get back to record that skip slide and wrap up the presentation foreign I could show that one it should be pretty quick yes if we have the time and to wrap up on the last Point discussed by the way is there a preference to really have three separate documents on the three different things yeah because I would also say that one option is of course to split so we split out the limits but we keep the ID update and Kudos in one draft that's also another option [Music] yeah at least yorans had a clear preference for free yes and it's yeah indeed yeah so okay if I can add here I think that when we talked about this uh in the meeting it seemed it seemed like pretty clear that we wanted to"
  },
  {
    "startTime": "00:50:01",
    "text": "reduce we're actually discussing some other draft first and then discuss this draft and then we support this was a good idea in reducing the the sizes and the scope of the document now with when we discuss this now people seem not equally uh convinced that this is the right way to go so maybe we should just wait a little before doing this and keep things in one one draft until we really understood why what yeah we could wait I mean what I heard was more let's say more enthusiasm for splitting out the limits and the ID then people will more neutral let's say foreign I'm just wondering which part has the agility here um so the the limits discussion can can by its nature not be crypto agile it's talking about specific algorithms right yes yes exactly it would need to be updated each time we we uh pull in new algorithms um and so on so it's kind of a different style of document than the protocol documents uh which uh agile uh by their nature so it may make sense to separate the documents just from that uh point of view that it's uh it's easier to update the limits discussion if we don't have to update the the protocol documents and vice versa is your point right because sure if there are some new algorithms coming then they may have then specific limits because like you said the limits document is talking about concrete specific algorithms with lists of individual algorithms to add to that I think that the limits discussion is not concluded and we don't"
  },
  {
    "startTime": "00:52:01",
    "text": "really know what the conclusion will be we are referencing the cfrd draft that's not has not passed working group last call and right expect it will be further discussion on that before that's finished so that's also a good thing too separate them for that reason right that's we need to follow that CPD document and of course there may be updates there that that end up happening then we should follow along with um updated formulas or otherwise yes true so then there are then those two uh benefits of splitting out the limits about yes so we would have an informative reference from the key update uh documents to the limits document yeah I mean I guess like the limits basically the limits are like if you reach those limits you shoot your key but then practically the different ways of the keying uh you can run end though and one one way is then Kudos um yes but that is one way of multiple in a sense well about splitting on those credit is we can just wait a bit maybe raise it again in the next round right so yes so right to exactly so that is my feeling too that splitting out the limits is less um controversial let's say people agree more with that and that the IDS can let's keep that within the Kudos main document for now um that makes sense yeah uh but yeah so of course just feel free to to give any further feedback on the on the mailing list or otherwise uh I will go to this last point then so this is about introducing ad hoc EAD items for signal"
  },
  {
    "startTime": "00:54:00",
    "text": "in Kudos support so the point is that we could register um an ed item in ad hoc that is used for signaling whether other players approach Kudos or not then essentially the benefit is that the appear will learn if the other peers support Kudos and which modes during endoc execution and we have a idea for semantic is you could rely on four different values basically one to Simply say that okay I want you the other player to tell me what you support other value would be but I don't support kudos and third one would be I support kudos in both modes and also asking the other player to indicate what did support and the fourth value would be okay I support Kudos but only in the no FS mode and also to indicate whether the player to say what it supports if it have not already done so so it has the benefit of yeah being able to buy a network execution you can exchange these information so both peers would know what other parties approach and there's no ambiguity so the question is should this be done or not I saw Christian had a comment also in the chat early related to this point uh uh can I find it now it was I think he was saying split um it's a bit moot because the conclusion before was that Kudos works well in opt-in mode so sure this functionality is not really speaking necessary because within Kudos you do have this negotiation or simple negotiation to learn this regardless and you can do a trial and error attempt to run Kudos um it may still be nice though to be able to exchange this information through Network execution so that um because you can take advantage of the fact that you do know what other supports"
  },
  {
    "startTime": "00:56:01",
    "text": "um and just go straight for that without any um risk or chance that there will be a mismatch so yeah it basically would be about registering on either item in network so yeah thanks my thoughts here are um if we're going to do this I think that Christian's point is good so now we're really going in in we sort of we started a line a train of thought here and we're going in that direction and that makes sense uh so that Kudos already is can uh can be opt-in so that's nice um The Other Extreme is that and we have any idea item which is actually not only telling you whether you support Kudos but also whether you will use adoky update which we already sort of taken out now but that's true there could be I mean that's also something we were thinking about in terms of The Advocate update if we wanted to keep that around it would uh it would need some kind of signaling either yeah within an EAD item or even maybe even actually signaling within the Proto within the Kudos execution itself because you may need to on some Curious executions can you use Adobe update but in others you can't right so having a even an ID item may not be significant okay so that's that's that's a good point um my main concern how now that we've taken out is from the Kudos execution is actually how are we going to invoke Advocate updates I mean we haven't we have specified the uh the function but we haven't specified how it's used uh that might be a problem for ad hoc rather than for oscore but it's still something"
  },
  {
    "startTime": "00:58:00",
    "text": "if we don't we don't currently don't have any pointer to how to how to invoke it we had that before we took it out today I see what you're saying so that's moriana I like to have a practical example on how to involve it um yeah sure if we take that out there won't be such an example in Kudos and Kudos will no longer use it so perhaps that would have to be placed within the ad hoc document itself in such case uh I just wanted to remind the reason why we started to think about removing method one actually um the fact that both peers support it uh by by learning about that in advance or by trial and error is not sufficient to actually run that method uh based on a low-key update the the edoc session established back then also still has to be valid whatever valid really means and has to be defined uh yeah the document I think if that's not the case uh then the peers have to go also in this case for an agreed fallback and that's where we started to think okay but it mattered you and would always work then and and is not worse in terms of security why not keeping methods you alone anyway and that's when we started to think okay maybe we can forget about method one yeah practically I think if we keep both we would have to have one more flag beat to Signal whether to use method one or two because it has to be dynamic per Kudos execution no no I'm just thinking so I'll turn off my microphone I actually don't have a good a good view here I need to think more but yeah the point like Norco said if this is a like a pure simplification and we remove that okay update without loss of any um with having the same functionality with that doc with the hdf extract and expand and also security properties then it's"
  },
  {
    "startTime": "01:00:01",
    "text": "uh simplification in terms of code and avoiding this negotiation thing we probably have to introduce the hooky boat methods that was alone and yeah probably again like having an ed item for that is it's not enough because it doesn't help if you know you it's not enough just to know what once you have to be able to decide for every execution because what if you're at accession became invalid due to for some reason like um some certificate expire or or other reasons then practically you shouldn't use at the Caps you need to be able to signal for each curious execution uh whether you want to send a key update or the hqdf variant yeah but to summarize this final point this again the question here is yeah should we register DC the item in edoc and again it's not unnecessary for kudos to function it is so nice to have because it helps the players learn about this ahead of time and again there's then they know for sure 100 and they never have to um there will never be a mismatch so they have to retry your such it's just clear from the start yeah something to yeah just to what Rikers say this is not strictly speaking needed to enable anyway the rationale was just that if the two peers are running edoc anyway this is a cheap way to learn things that spare them uh for further logic later on that's it it's a cheap way and it's using it's a built-in functionality of a dog by the ad right um yeah that was a that was the logic behind it essentially but okay there was that was that was it so um"
  },
  {
    "startTime": "01:02:00",
    "text": "yeah um if there are no last comments I think that's uh that's about it for this uh presentation so thanks a lot for the um good discussion and feedback thank you thank you so I take next one right uh this is an update on the Oscar capable proxies document and last time we saw that presented was in November last year at itf112 and that was version zero one so quite a few things um happened since uh since then I try to summarize here uh just to give some recap um this is about considering scenarios where you have a proxy between a client and the server and you may have and there are a number of use cases also described in the draft uh the need for a security association between the client and the proxy typically but in general with the proxy and it would be nice if that secure Association uh is based on Oscar um especially about not only if you are already using low score and end-to-end with the origin server uh so this is a territory not really considered in the old score RFC that actually explicitly forbids uh a number of things that they would come up here especially uh protecting a message with Oscar multiple times uh we actually started the work in this direction as an appendix of another document a group called proxy that in fact ended up being the first use case uh where this could make sense but then it was discussed a few times and agree that it was much better to develop this particular Point independently on a separate document and just to recall the main use case"
  },
  {
    "startTime": "01:04:01",
    "text": "we've had in mind but there are more uh in the drafts one was an indeed group comproxy where you have a proxy taking um a request from a client and is supposed to identify the client through a secure Association before uh forwarding that request uh to a group of servers there's a similar use case related to group communication um where the server uh sends back notifications over multicast and if there is a proxy and group of score is used end-to-end then the clients are supposed to take an additional step and instruct the proxy on how to practically listen to the multicast notifications and that step on the lag client proxy would require uh protection and then we mostly had a lot of time to in related use case where from the transport binding specification uh the lightweight endpoint client can well not only talk to the light effect from server um as part of internal exchanges as usual uh but also at the same time use the lightning server um as a proxy to talk to an external application server and that external exchange can also be a protected end-to-end with Oscar again there are more use cases on the draft but these have always been the the main ones so what we are trying to do here is uh updating uh 86 13 and in order first of all to enable the use of all score with endpoints that are uh not only the application origin endpoints but in general any endpoint including um intermediaries and uh admitting explicitly because it will end up being needed uh the possible multiple protection of the same message with Oscar applying a different layer in sequence and I would expect the most typical case to be tier Protections in a row at most for the same message but we are not really posing any limit which"
  },
  {
    "startTime": "01:06:02",
    "text": "interestingly opens for something like Oscar protected on your forwarding that we started to elaborate um as an appendix and I keep talking about Oscar here but you take all this here and it is just as well applied if Grupo score is specifically used doesn't really make any difference so what happened uh since the last version we uh we presented we added one more very relevant use case related again to lighter than 12 um and proposed by David Navarro uh this considers the life of n2m um Gateway uh that in principle allows the Lively 10 FM server to Well normally access resources add the likely to end Gateway itself like if it was an origin endpoint but also to use the likertane to engage with through proper paths uh to reach out and devices that are not necessarily likely Implement devices actually and in this latter case the lighter 1020 Gateway is basically acting as a reverse proxy and the same rational applies for protecting uh the different legs with all score with this in mind we took the opportunity to revise a bit some terminology especially For What concern what we call a proxy related options we used to have only the first um two entries we added a third one so Ur iPad options uh present not together with proxy skin which is basically what happens if you are trying to to perform a sort of reverse proxy so if you wanted terminology but it's in the interest especially of the use case uh that David suggested um yeah it took some more effort to uh improve once again uh the definition that we are giving for um Co-op options that are originally defined to be class U or I uh but that uh depending on the other Oscar endpoint"
  },
  {
    "startTime": "01:08:00",
    "text": "for which you are about to protect the message uh you have to protect anyway like if they were defined um as Class E so suppose you are applying an ith Oscar layer using the context share with another Oscar endpoint X that has to consume that layer and that can be an origin server a proxy it doesn't matter these options are essentially the Oscar option if you already see one as the result of a previously applied layer uh the edoc option defined in the Oscar adult document to signal and optimize execution of redoc only if this is not intended for that Oscar endpoint otherwise the workflow will just break and finally more generally well any option that is intended to be consumed at some point by X but it's not important to be seen already during any processing before decryption or in order to perform the decryption itself and this is really typically about uh options for proxies uh to be protected when you are using oscore to protect the message for the proxy there are more examples that than these ones but I just shown the one we are reporting um in the draft considering the two points put together we also Revisited the message processing but actually only for uh for the incoming requests because any other processing is as it was in in the first version basically uh well for incoming requests we required a bit more of engineering and we were actually able to do some simplification uh especially following um the the improved definition of options to be uh protected anyway but we also needed to add an additional sub step again to cover the case of reverse proxy uh justified by the use case from David and if you remember from the first versions uh this processing"
  },
  {
    "startTime": "01:10:02",
    "text": "was supposed to be about three Alternatives absc and the endpoint had to to choose which one was applying at present uh we slightly present now in a different way as three steps including the possible jumping forward or or looping back and it is really about looking at the message you have at your hands right now and deciding first of all if that's about proxy or not if it's about proxying well consume the proxy options and forward uh otherwise it's about uh consuming the application if the origin application on endpoint has been reached or decrypting and and then actually repeating uh now we have the text for the whole processing in the document we plan to add at some point and ascii-based art figure uh but until then in the interest of this meeting I prefer to prepare something um in that spirit and anyway and these are basically the three steps I mentioned uh that you can distinguish based on the on the color and the first step is really about understanding is this about proxy or not based on the visible presence of some options about proxy and it's the only box in light blue so uh simplifying things a bit here if it is about proxying you get into the light yellow territory you check the details uh other than error handling not shown here for Simplicity if you conclude this is indeed about uh proxy and everything is fine you forward and you're done uh the processing ends if it's not about proxying well you check for the presence of an Oscar option uh if there is none uh you are the original endpoint you deliver to the application uh if there is an Oscar option other than a corner case for your handling uh well do what dios corruption says the Crypt accordingly take your result and start again so you will eventually end because"
  },
  {
    "startTime": "01:12:01",
    "text": "either you are consuming at your application or because you are forwarding and in the process you may end up stripping uh one or more Oscar layers in the backup slides there's a slightly extended version of this one with more boxes for error handling okay I'm I'm just looking up at the at the at the backup slides but it doesn't say that there either um I think one important aspect to consider of foreign for the document is before forwarding to check whether the sender is also whether the sender is authorized to be proxied and that authorization might typically come from the request not originating just from the network stack on the left from the white circle but from having been decrypted from a particular context and that is what authorizes the forwarding absolutely yes and probably right now this is too implicit because it was indeed the core motivation from all those use cases so we'll add it explicitly thanks thank you um okay uh so I hope we can have one day and ask you base art um along these lines but this should be helpful already uh right we added an appendix uh with a message exchange example I think the first one is the most relevant one really also reported here when you use Oscar both um end-to-end and also between the client and the proxy uh we have similar examples uh that the following two ones where you basically have the help I hope protection on a different leg or when you have the protection end-to-end and on both legs and we have a fourth example also which is basically like the first one as to where Oscar is used but rather than starting from pre-established security context we show um how those are established um at runtime using uh using edoc so"
  },
  {
    "startTime": "01:14:02",
    "text": "first between client and proxy and then end-to-end between client and server through the proxy protecting the like between client and proxy already with oscore yeah we also added a sectional cachability of responses simply simply and explaining and hopefully convincing that that's possible in this case uh too uh basically using the approach defined in the cachable score document that doesn't require any adaptation or extension whatsoever uh here we just need to be careful to to clarify um which exact message a proxy should really consider uh as a response to possibly cache or as a request to um to use to look for a potential uh cachet and then as I mentioned before we added an appendix B that for now is just a list of a very raw bullet points so not really a readable section but all the raw content should be there and basically what they find in the document body is a set of building blocks that can be used to to build something um quite similar to Thor but using using Oscar um instead I think we need to mature this content quite a bit to make it an actual section in the first place uh for later on we may want actually to consider uh to extract this content out and to be a separate and experimental document but no rush with that so yeah I think I've gone pretty much through everything this document is about we are not done yet we have a number of um next steps summarized here related to um Corner cases and guidelines on the establishment uh there's an ongoing proposal and open NPR in group of score related to um improving some handling of responses that I believe will have an"
  },
  {
    "startTime": "01:16:00",
    "text": "impact here too to extend the handling on the incoming responses consistently uh also in this case and we plan to add more examples in particular for when edoc is used with the optimized workflow to establish the context and at least one example where a reverse proxy is used in the spirit of David's use case and we've also started to look at the um Chic compression framework and especially its profile for Co-Op that covers also the usable score uh if it can be used here and I think yes and if it needs some adaptation to be used in in a situation where you protect the message multiple times and I think it needs some of the caption but we have just started to look into that and we need more work regardless we think the core mechanics in this version is quite stable and that's especially thanks to feedback we got all the way uh mostly from from Europe and Christian recently from David so it's certainly stable for review and while we work on the next steps yeah comments and input are welcome on what we have today uh that's it from my side if there's no more comment and questions sorry I couldn't follow the chat so I'm a little bit curious about this Oscar this uh onion thing what Christian there's been some work on this already with chank and others what what is the status and how does that compare to this um if I'm in Germany um the onion is um The Onion work is not not so much part of what I did with tank um this is this is this is really this is mainly a sketch this is about hey we um by by having all this proxying and having the ability to Nest or score"
  },
  {
    "startTime": "01:18:02",
    "text": "we get just so many properties that um that on that tool works really hard for um possibly for free and that's the reason to to explore this um it's it's somewhat related to using proxies to to hide yourself which proxies already do and on top of it just gives it proper security properties um but it's it's mainly I'm exploring how to take things further from for example um using a client Pro um using the proxy as a client to hide your precise address or registering with a reverse proxy or with a with a proxy say behind the resource directory not just to to hide your ad so like which we do a lot um not to hide our address but to become reachable but padding the address is a side effect and like if you if you do this once it has this side effect once and if you do it repeatedly you gain the the benefits of on your routine okay so this is this is still this is sort of not covering what you've done it this is this is actually providing some new starting point for for or continue for continuing that type of experiment it's not repeating what you've already done so to speak yes it's um to my knowledge nobody has has really implemented this yet and this is this is new and new and experimental okay thanks thank you all and yeah if there's no more comments we get into the last item uh Copper got Christian I don't think you uploaded any slides do you want me to share anything from the July meeting um I didn't upload any slides because I was a bit short in time and then got stuck in a traffic jam but what I'd like to do is just to uh"
  },
  {
    "startTime": "01:20:03",
    "text": "yes I really want to share my screen um so now I just have to so basically what I what I'm screen sharing is really just the um the um the the the notes uh but it still happens to be practical to be convenient here um just um before before I get right into the details I'm summarizing what this is about um I've I've written a draft about how we could use Co-op workout which is Bluetooth low Island which is a way of using Bluetooth low energy or whether it's a profile of Bluetooth low energy um the main motivation is that just like um just like web applications in a web browser are typically um isolated from the rest of the of the cons of the core Network because the only thing they can do is HTTP requests and web sockets and therefore we created Cooper websockets to allow applications there to interact with the rest of the of the co-op world um the same is true for applications on on cell phones and especially from on browsers and cell phones because they might be able they might have the physical links they would need the physical means to establish a link to say a co-op enabled sensor that has Bluetooth radio but the operating system and the browser and the basic basically the whole everything outside the core ecosystem um will not will not make it easy for them to join the ipsp um AKA six level work over Bluetooth um Network that might even be existing between several uh bluetooth enabled Co-op uh Bluetooth and code devices so going through gut is um basically an escape hatch for device for Consumer devices for which Gap might"
  },
  {
    "startTime": "01:22:02",
    "text": "be the only way to communicate if if not through if not through the large internet so this would enable applications such as um having having a website be maybe even in casual local application on your cell phone you approach a device that is that has uh that is Bluetooth enabled and you can use all your security contacts like um is the whole stack but you would usually use to connect to that device through some routing infrastructure to interact with that device locally this has a lot of facets one of them being addresses but what I'd like to focus on today is the the message sub layer um that I think would be suitable for this um if there are any questions please don't drop me at any time yeah so looking at code over UDP the transport that this is based on is unordered might have duplications does not have any state um there is no inherent reliability and which protocol we're using on top of that is essentially gas so we do have report number which gives a clue um but you might be running it on the ports and then um then things would be different so what we have as a consequence of those requirements what we have in there in terms of Transport specifics are the version protecting us against critical mismatch um the type in order to get all that reliability the message ID participating in the reliability and in um in accounting for repeat uh for for repetition message loss and the token for matching requests and response because I didn't mention this here because it's not different but"
  },
  {
    "startTime": "01:24:01",
    "text": "um UDP doesn't give us any matching request response so we use tokens and then the rest is in in the the rest is basically the the tail of a co-op uh Co-op method as it is in all zero relations now with cat we have uh vastly different base so the communication between the uh the Gap server and the gut client or between the Bluetooth Central and the Bluetooth peripheral both of which rows are independent but um I think it makes sense to use the gut server the peripheral which is the constraint device as the gut server and the central as the gut client so that the cell phone in the typical scenario initiates um initiates the the request um that communication is strictly ordered um there is no danger of um mistake of mistaking a message to be repeated it is connected so a loss of connection and uh complete reconnect are detected and there is this very weird situation that we have unidirectional reliability that means that um the the Gap the gut client so the cell phone um can know that this operation um completed and that there are lower layers that will keep retrying but of course um with the with the general issues of um of synchronization and to generous problem um only one of those parties can know and the and the constraint device in this setup would not know what um whether whether the operation was successful and lastly um which protocol is being taught is very clear from the context because at this at this connection stage under the discovery"
  },
  {
    "startTime": "01:26:00",
    "text": "um there is a 16 to 128 bit identifier of the particular uh Bluetooth profile of a particular characteristic that is being talked about and this uh clarifies which protocols will you which protocol we're using the version that I have um published so far as um there's zero um takes a bit of a simplification and works completely without token and completely without token life using the properties of being ordered and not repeated and just as here's the code and the options are the payload um please process this and send me the response limitation is that this only works as long as the rows are aligned so there is the cell phone that is working as a client and the constrained device working as a server and as long as all the non-traditional responses that we that we would be sending are um have eventually consistent semantics um this is the case for observations but this is for example not the case if the constraint device where it could be used as a multicast proxy and this might be sounding like um this might sound like a like an exotic use case but I think it's a very realistic one because I'm taking my cell phone to a constrained network of many nodes that are talking Bluetooth ipsp like my home my complete home network I go there I connect with one of those nodes via Gap and then the first thing I do is I send out a request to a multicast address all Co-op nodes through that once one distinct that I picked as a proxy and that one finds it out through the network I get the response and I get multiple responses and this is where this is where the dash or one proposal is falling apart"
  },
  {
    "startTime": "01:28:02",
    "text": "so what I'm working on for Dasher 2 is that we uh that we do um go back to using tokens and I hope I did get the numbers right and the most recent one is actually um is to actually use tokens and to use those uh that that nibble that is unused in front of that in order to do a very minimal version of message of the message IDs in Google UDP our message IDs are 16-bit because we might have a lot of messages in the year here everything is clearly ordered so that synchronization can happen in a matter of um basically a one bit message ID and the client and it's secret and it's um always acknowledging the one on the on the peripheral um yeah so this um that's that's the that's the rough design um it's deviating a lot from what we have on corporate VDP but I think it's saving some things and it's just making good use of the properties we have on that particular transport versus trying to force identical behavior when the underlying transport is not behaving identically and yeah I think it's a good direction to go but I would be happy to get some feedback from the group on on well with whether you do it differently I hope we have the minor command that next version should be zero three okay thank you any comment or question for Christian"
  },
  {
    "startTime": "01:30:00",
    "text": "yeah I'm just curious about the discussions with Marek and and their their deployment is that is there anything to learn from that or is it is it day that we need to learn from it is it um this is using a bit of feedback from Marek um but I had I have still not seen what they are precisely using so I cannot um taking them up so a bit for a bit of context um for for others involved um there are there are two major companies that are both um interested in in getting this operational again um EDF and Assad and part of part of getting this forward is due to their involvement um is also is also working on something related but I don't know precisely where he is foreign if there's no other business thank you very much for the great meeting today thanks a lot Rican Christian for everything out with the minutes uh talk to you latest 20 weeks thank you all bye-bye"
  }
]
