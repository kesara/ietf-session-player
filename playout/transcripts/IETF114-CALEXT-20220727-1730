[
  {
    "startTime": "00:00:14",
    "text": "you not sure it is 3 30 a.m for him so uh according to uh to my clock it is time for us to start this session so hello everybody and welcome to this this massively packed collect session um i will just quickly flick through these slides here i think everyone in the room has has checked in to the system so that's all good um the note well applies i'm sure you have all seen this and if you have not please read it i expect everyone will be behaving themselves perfectly hello welcome just flipping through the the chair slides here meeting tips we're about halfway through this atf now so most of you have probably already seen how to add yourself in we're pretty happy for people just to pop in and chat i don't think we'll use the queue unless we have to but feel free to pop yourself in the queue or just pop yourself straight on audio if you're remote good morning neil and um here's some links handy links but basically go to the data tracker and everything's available from the agenda i have put together a separate set of slides just because this template was a pain to use with the agenda as sent out but if there's any agenda bashing please let us know does anybody want to change the order or talk about anything different here"
  },
  {
    "startTime": "00:02:02",
    "text": "cool all right we're starting with js contact and with that i think should we just get straight into it yes let's do that hello everyone um hope you can hear me if not let me know in the chat starting with js contact on the next slide please so um we already had two rfcs in the work js contact o3 is the current version of the js contact format specification js contact vcard o2 is the specification for mapping between js contact and vcar and as a new addition we have now we are also defining vcard extensions for js contact which define new vcart properties and parameters that we require for dgs contact vcard mapping that being said this this last rfc the extensions rfc most likely isn't uh complete yet so we so we plan to publish all of those d3 rfcs together as really this only makes sense next slide please um that being so what are the main changes um for js contact we clarified that the id values that that you use in these options objects for mapping specific types like addresses and others to short identifiers these identifiers must be persisted um that's mainly because we want to make patching existing js contact objects easy and it's way more way more easier than if you um if you can rely on being these ids being set as you had stored them on your"
  },
  {
    "startTime": "00:04:01",
    "text": "client or whatever secondly the js contact specification defines the resources property the resources properties a property that combines various vcard properties like directory services and such that all basically are uris for a specific use case we combined most of them into a resources property but we came to realize that for some um some of these resources we need to specialize one of them and this is the latest addition our online services so that you can specify as the service this uri is for which should where the service name should be the canonical name of the of the service um and as i said before we now define new vcard properties and parameters um as you can see there is there's the list of current ones i think there are a few more um if not they will get more um and some of them we will share with the exact same semantics between new i calendar properties and vcard properties so um i would like to now use the time more to talk about the stuff but that we that is currently in discussion and the next slide starts with that um so for js contact we in almost every complex object type we have a label property the label property is meant to is meant for users um to set any any human readable text they want to set in there there's no semantics art in that so it's um it's not expected that machines parse it and extract values from it this mainly was motivated by apple address books using a label service already now that we want to standardize this"
  },
  {
    "startTime": "00:06:00",
    "text": "also for vcard we need to define how a short history on labels in vcard so um there is already a label parameter defined for the address property in the vcard which is like really meant to be like the the label you would put in a package if you want to send that package there so um it contains delivery address interestingly it the rfc6350 defines this parameter but it's not included in the iana registry i think that's just an omission but if somebody knows better please let me know but also there was already a label property in the vcard 3 rfcs but which also were used for delivery addresses but these got obsoleted so at least we now know that the name label for either a parameter or a property in vcard is loaded and most likely we will not be able to use this name for the type of thing we want to use with jscontact label if we map it to vcard or as i said before already on the next slide there exists a mechanism for that but it's disputable if this really is what we what the current js contact label properly defines and that is apple address books so apple address books since a long time use um both vcard groupings of properties and the specific xab label property to assign a label to another item or a couple of items in the nd card so in this case we would have an address with the label my label you you can assign that also to i don't know basically any property um that the apple address books allow you to define now um having had a look at how apple implements this in their clients for example the context app in mac os"
  },
  {
    "startTime": "00:08:00",
    "text": "it seems that this label is really meant for very short identifiers like you would use it if you do not want to if you want to sign a phone number anything else then mobile work like the predefined values you use this one um [Music] you can see a bit of the history in the link that i provided here which also discusses a couple of other properties which i mainly think are covered in vcot4 already with standard properties so the topic i would like like now to bring up is how to how to deal with labeling js contact and mapping it in vcard um i'm also not sure actually that the jscontact label property necessarily is defined as how we want it to be defined as i said before it was really motivated by mapping the xav labels from apple into our structures but now it seems that the definitions like kind of got out of sync it won't be like a free text how long you ever wanted to be labor and a promo seemingly using it only for very short identifiers so maybe someone who is using the labels can shed more light on their experience with it hansiak also says he needs to look it up um yeah so i think at least we can say here that um there is more work required on identifying if the js contact labor property as it currently is defined really is useful um do people really need to tag an arbitrary node to every"
  },
  {
    "startTime": "00:10:00",
    "text": "to every object type that we define in the new format and independently of that would would we want something like what apple is doing in apple address books with these xab labels would we want to have something similar to map and shares context or not and um if there is no opinion on that in the room today then we will continue uh working with this both mario and me and um will come up with a proposal what is your intention well i think i think for interoperability we should we should understand what the xab label is is really used for since it's for such a long time already in existing data um we should not we should find a way to map it the question i think on the next slide i even posed a question um if uh if we should just use xab label because i would assume that since it's defined since 20 years uh the majority of clients who do care implement it so maybe we should just use that one um but that will only be in my opinion useful if we have a full understanding of what this property is supposed to do so this is yours speaking yeah so my opinion on this just to give an opinion is it should the label property should at least be as powerful as the apple xav label property but i don't see it in it like it's not necessarily it doesn't necessarily need to be more powerful yeah at least if if there's like a mapping that we can do between the two"
  },
  {
    "startTime": "00:12:00",
    "text": "it's fine yeah um and okay if we cannot map the the full label property of js contact back to the the mac x property i would also say it's fine in my opinion yeah if we do it sorry from the old to the new there should be a good way to map or from new to old it's not necessarily in my opinion yeah but that's it what i would say um yeah i mean the charter currently requires us to define a clear mapping between all context properties we have yeah um but yeah there are pros and cons of just reusing the xav label or introducing a new one i think with the current definition of the label property in js contact we should use a new one because i would very much assume that clients that use the xab label expected to be very short and have their user interfaces designed as such um if we come to the conclusion there is really no need for a free text thingy you can tag on everything in shares contact then we should clarify it is meant for very short identifiers in the in the js contact and then i think we should just use xav label let me just get um okay um there is no further input on that next slide please we already brought it up property groups so vcard allows to group properties as you can see on the left there is a group with identifier group one vcard says there is no further meaning to that it's just like an um opaque identifier and you can group two or more properties in vcard with that um we already um define in the in the mapping rfc a way how to preserve them it's it's it's a draft version still but um basically we will just use js json pointers um to define the members of the group"
  },
  {
    "startTime": "00:14:01",
    "text": "[Music] what i'm not sure about is is if property groups should be a thing in js contact in the format 2 at the moment as you can see we're using our special mapping properties which really are meant only to preserve stuff that exists in vcart but we do not map to a chase contact um but [Music] i wouldn't know of a use case where property groups are used but if somebody here uses them or knows of use cases for them and says they are they should be a regular feature in js contact then please let us know now or later maybe we go to the next slide please ah sorry back again i thought there was a second slide i was just waiting to be called so this is hanseaux speaking um no particular strong opinion right at the moment but just an uh a note i think the only system i'm aware of that's i've ever seen using these kind of group properties is really apple so i'm not aware of any other system i've never seen it before um i might still need to look into if the case for apple is valid or makes sense so might make sense because apple is quite a big usage factor here but yeah that's just as a short note for the moment i'll also keep that on my list for rechecking okay thank you yeah as i said so um i surely want to preserve them in the js contact data so that we can map that cleanly back again to a vcard but currently i do not see the need or do not also hear the need that something like property groups should be a first class feature in js content all right then the next and uh if i remember correctly the last slide for gs contact is stuff that we do not intend to cover in js contact um"
  },
  {
    "startTime": "00:16:03",
    "text": "we want this to be quite short but it's never going to be completely empty so what we do not what we will not map um to standard properties in js contact are the pid and client pid properties these are defined in vcards for synchronization so very of different so that such that different applications can work on the same vcard similar kind of simultaneously and can keep track of who added or changed what um i haven't seen this in use anywhere um i also have doubts that this is really this this is this is how synchronization should be done um that being said we can of course preserve these values if they show up in a v card but as for now we have no intention to provide a similar mechanism in js contact um similarly for the vcard defines um a couple of temporal values um timestamp being like a regular utc timestamp a date end or time but also just the date and time and all of them can have partial values so you can define a time where you do not know the minutes or you can have a date or you just know the year we we do not intend to support the date and time types mainly because there is no property using them also in vcard at least as far as we know um [Music] we do support the date and or time type for anniversaries um and here at the current definition we support partial dates we do not support time only birthdays um"
  },
  {
    "startTime": "00:18:01",
    "text": "which i think makes sense but if somebody disagrees let me know um what we might change is that um at the moment if i recall correctly but i might be wrong i think we do not support time in a birthday and i think if we do not support it we should support it um because people might know their exact time of birth i do know for example so i think that should also be supported and as i said again all this is just the discussion of what to um were to provide standard properties in js contact we can all preserve this from a vcard when we map it to js conflict all right any further input on gs contact otherwise i would continue with js calendar all right cool just calendar next slide please uh again the same story like with vcard we have three rfcs the latest the last one being the latest edition which defines a couple of new um eye credit the properties at the moment um we are it for these extension rfcs for both weaker and icalendar at the end they will share a couple of definitions um for example the prop id parameter that you currently see just defined in the icard and the js calendar extensions will also use them for vcard and similarly in the in the in the v card extension i think in one of them we have defined already the mapping of of of properties um that are in icalendar vcard to chase contact.js calendar as long as these definitions are not as these definitions are not final we want to just"
  },
  {
    "startTime": "00:20:00",
    "text": "propose it in one of the rfcs just not to double our editing work because we definitely want these mechanisms to be exactly the same for both formats except where one of the formats for example vcard requires additional definitions but they should share the same mechanisms where they share the same property types and values so i encourage you to look at the latest one the extensions draft and see if how you think about that um that being said on the next slide we will discuss a couple of changes for js calendar biz uh we currently identify the number of of changes that are mainly improving the design or were just clarifying things that were not as clearly defined by and as we came to learn while we were implementing the standard mapping between js calendar and icalendar that so the the main points um that we want to get into gs calendar biz i've kept for this discussion today um as there are as there is not consensus about them for all the changes that already made it into the rfc i've put the link into this into this presentation which you can click on if you download the pdf yes now it says clearly what i couldn't remember in the js calendar i calendar rfc we defined the standard mapping for unknown properties the summary is we are using an extension property mechanism for that where we use a uri in the urn namespace um to which allows us to use the already itf registered namespace for urns and we can exactly point to the rfc where we define this mapping so that the property also kind of"
  },
  {
    "startTime": "00:22:01",
    "text": "self-documents um where it is defined the last one i already talked about so next slide please and that brings up the first point for discussion which we have seen on the mailing list already i will just give a short summary and then i would like to ask mike and neil to join the discussion um and and hopefully we can sort this out today so in js calendar we have reply to property it's a multivalued property which allows to define um multiple ways to send rsr rsvps or invites keyed by the identifier of the scheduling method currently the scheduling methods imap web and other are defined for reply to um where web is basically link the user is expected to click on to to rsvp and similarly in participant oops there is a s missing so it's participant sent to this defines where to send invites to this participant this does not allow the web method as we do not expect organizers to manually click on something where they can invite a participant next slide please now the issue that came up during the conversion to icalendar and from i calendar to js calendar was that as as we said there is a multivalued property in gs calendar using various scheduling methods but i canada really only allows one which is a calendar address aka uri almost always a mail to uri but the spec does not require that that you can put in the organizer or attendee properties in a calendar resource de facto scheduling is done over uh is over it is with itip over imip so um as i said typically you will see male 2 uris in the organization but there can be anything else"
  },
  {
    "startTime": "00:24:00",
    "text": "um now this brings up the issue that we cannot unambiguously map from the sent to property or the reply to properties to the organizer or attendee respectively and there are a couple of options how we make this uh unambiguous uh that are that that were discussed on the list um [Music] and um maybe yeah so maybe let's also say that we we currently do not have ways to define multiple uris for for an attendee or participant and the web 2 method at the moment has absolutely no mapping at all so on the next slide we'll discuss options uh the first option is to keep js calendar multivalued um and define a heuristic and say okay if you if you have an imap just put that into the 10d because it's very likely that the scheduling should be done over um with it over imip um but of course there is data where there is no mailto uri in the original icard and the data so what happens if you add in js calendar in addition to an an existing other uh scheduling method in imap should that overrule what's in the icon the data or should you stick to what was in the ikland data before we just don't know and um and uh most likely also the people updating the data will not be even aware of the rules and if we use heuristic like this we need to be aware that for every additional scheduling method defined we need to update the rule because we always want to be unambiguous the alternative would be that we merge the other and imit methods the other method really just came up because we realized in rare cases there are non-male to uris in an attendee or organizer and we can't map the two imaps so we introduced other"
  },
  {
    "startTime": "00:26:01",
    "text": "um so the idea really one of the ideas now would be okay we just say it's not other or image we just say it's imit i tip sorry and then it's absolutely clear whatever you put into this value will end up if you schedule over itip will end up in the in the it message and the last option that was brought up was to um do not use a multivalued property but for each scheduling method define its own property which still might be uri might be something more complex that very much depends on the scheduling method speaking of scheduling methods and this will be my last comment before i hope neil and mike can join at the moment we have the scheduling methods that we have defined are imip and and or itip but really it's itip over imap the web scheduling method seems rather straightforward to understand if it's if it means to click on something and let the user do manual action at the moment i wouldn't know of any other scheduling method that should go into js calendar so we might not know the requirements the full requirements for additional scheduling methods okay that's the end of my intro to this topic feel free to just type in neil go ahead hello can i jump in oh i've got echo again correct so i thought about this quite a bit and i still think the current i'm gonna have to mute this okay"
  },
  {
    "startTime": "00:28:05",
    "text": "how do you mean i think the current version is the best option although we should be more explicit about what to do with male 2 non-male 2 now i need to find a way without this echo i can't possibly um try different device way back in a sec this i don't know if it's coming from this room or whether it's in his own system that he's getting the echo this is very interesting i can't remove him from the queue because he's not online that's definitely hi let me can you hear me yes i'm not getting any echo i'm not going remotely did he just connect oh yeah he's back again"
  },
  {
    "startTime": "00:30:02",
    "text": "okay can you hear me here yep that's much better sorry about that um it was impossible to concentrate with your own words coming back new year like two seconds later um so i think the at the moment there's basically there there's two types of address we can get here it's um a itup address that's uh mailed to and so we understand i can use the admit one eye to address that is not and so can only be used essentially internally with calder now there is a poor name for that and we should probably rename that to something else to make it explicit we could merge those two into a single item thing but i prefer them separate i think um like uh uh put on the mailing list that at the moment you've got servers trying to do this translation on the edges which doesn't always work and so sometimes they leak out the they they you don't get the mail to address when you need it because they didn't translate it within an external system um and you'll be much cleaner for them if they could have both stored inside it um now the the thing about having multi-value property in general is essentially it's kind of a name spacing you'd say all of these are um properties are kind of the scheduling properties rather than having them with the separate top level names and the reason that's important is um for when you have something like uh jmap calendars you could have the servers add support for a new scheduling thing without the clients having to explicitly know about it uh so the all the the jmat spec can say that you can identify which um"
  },
  {
    "startTime": "00:32:03",
    "text": "uh which participant is you by looking for a corresponding kind of uh key value within the send to and like the identity for that user so saying this user um if you add this user to an event here are the scheduling methods for it and you just add that as a single property um so it might have say uh this is mail to neil jay at fastmailteam.com and a future thing new uri and the client doesn't have to know anything about how those scheduling methods work it just gets told by the server those are that that object is what you add for the send to and if it wants to know if if an existing event is for that user it just has to look for if there's a corresponding uri within that object otherwise it wouldn't know which properties it could look at so you'd have to hard code kind of which protocols you support and that's going to make it much harder to extend um in in the future so i i i do think the current design is correct um the i in terms of of translating um i would probably go with just a simple yeah if um well from calendar to just count i can't stress down as a straightforward there's a single value if it's um because icalendar is you know currently quite limited it's it's it's always got to be an item value it's either a mail to one or something else and that's pretty much all we care about um and so it either goes to i'm it or to whatever the other one's called depending on whether it's a mail to uh and then reverse i take the item one first and if not take the um the other one to go back and i i just like i think that's actually absolutely gonna be fine in practice that's um we just if we want to just be able to store the other values in eye"
  },
  {
    "startTime": "00:34:00",
    "text": "calendar we'll need to find some extra properties to store them um obviously you know existing clients won't support the other properties yet and that's fine because they can't that's kind of the point of js calendar was giving us an extension method for the future um yeah so that that's a summary of my position on that i'm not sure i saw mike before in the queue now he's gone mike do you want to say something or otherwise and i just don't and i just don't really see what what um problems he's trying to solve it doesn't map onto what it does at the moment um it i definitely disagree with the idea of referring to it as imip anyway but that's that's just a naming thing it's really i tip we're doing and it it's up to servers or clients to figure out having identified the the attendee uh is to figure out how to get it to the attendee whether these imip or some other transport method they've got available to them is is up to them and i think the only thing that we've identified as a as as something that needs changing and this predates js calendar is is separating out the organizer from from the the reply to address that that became a problem with sharing and shared calendars the the organizer really shouldn't be the one you reply to necessarily but that's that's that's something we can easily deal with we can extend it to add a a reply to um but that's the only thing i'm seeing i think we really need to simplify this back down to what we do and not not try"
  },
  {
    "startTime": "00:36:00",
    "text": "to anticipate um some scheduling approach that we don't have yet and it and i'm not even sure we should try and deal with the um the web thing i mean that's an extension again it'd be nice to standardize the um having a a way of of responding to an invitation through some other mechanism such as the web and the the you know the current approach of adding um http bodies to the to the message it works sort of but um it'd be nice to standardize that i guess but i don't think i said that's something we necessarily have to deal with here um it's something we can add later i'd just like to see us get it working minimize js calendar so it does enough to do that and not try and anticipate some future scheduling method we don't have because it may not be adequate for that if there's multiple properties to deal with then it's simply not going to be adequate simply having another reply to address the i think the only thing we need to do with is identify the the um the recipient and and we're done that's all we have at the moment just popping myself in the queue with uh with my chair hat off here i think i'd definitely say the the point in having a single object that all the reply to is inside so then you can patch overwrite whatever happens to be in it with new replacements without needing to keep a full list of all the possible fields in future um so having that one level of indirection is still makes a nice easy extension point here even if we only need to find one thing inside it and i think that that might be the way"
  },
  {
    "startTime": "00:38:02",
    "text": "maps directly to whatever's in our calendar but we have a future extension point that's quite convenient there yeah you i mean so so with mike's point about not being sure whether it it'll be rich enough i you know we could say yeah the values are currently defined to be your eyes we could relax that say they could be anything i uh i don't know we necessarily need to do that um but that's that's an option um that would make it harder by saying they have to be your eyes we i said that the advantage is that a client can check is there a match between this property and a uri i know about identifies this user without having to know anything about how the uri works without how that scheduling method works so i said you're you're dis you're not coupling the ability to add this other uh method to the to the client knowing about it um i would like to clarify um what i would like to first state one point and then i would outcast for clarification so the point i'm i want to make is um given the charter and also practically all practical purposes i think it's necessary that scheduling with js calendar i calendar should be should be seamless there should be no source for implementers to mess this up because this is really the core of the specification um so that's why i'm so much against um heuristics so whatever we come up with it needs to be absolutely critically clear what to do um and it it should be simple to implement what i wanted to ask for clarification is um neil um what do you described before that the um like the client might not necessarily know the scheduling methods of the people they invite"
  },
  {
    "startTime": "00:40:00",
    "text": "um so that this kind of is the same thing like in icalendar currently that the uri both acts as an identifier like as of the user but also as a way to reach that user and wouldn't that speak more of what you were saying to like splitting this so um why why would i necessarily define the imit method to identify someone and not just identify with the uri who i want to contact and the server might have the best idea idea what to put then in the reply to or sent to properties um so i identify that last minute so um [Music] are wondering if we are conflating identification of a participant with their uh scheduling method uris which is what i calendar is doing we definitely are just yes i think to extend i'm not sure we can get away from no we i don't know i think about this compatibility that was that was where that was where i actually started to experience difficulties with seeing how this would work is is being able to unequivocally identify the the attendee we're dealing with the participant and um and that was where what i wanted to um simplify this to to ensure that that was was the case that it looked to me it's gonna be too easy for me to get a uh invitation where i couldn't even identify the uh the participant we're talking about well i think that's quite well defined so i don't think that's a problem like i i think what we were saying about could we split that is interesting i just don't know that there is a way"
  },
  {
    "startTime": "00:42:00",
    "text": "to do that right now um you know if this is the problem of if i have an event in my calendar how do i know which one of the participants is me so to speak and the way we do it at the moment is one of the presumings added by mail to one of those um uh mail to uh send two things on the participant matches an email address that i own or possibly if you're using implicit scheduling you know that this uri matches my own yeah i think that this is something that already was kind of trying to address in the new icon the properties rfc 7986 i think it is where this this email parameter right this was exactly meant to like you can provide the email address of someone who identifies them i think the description was in a con in an address book but that's not that's not necessarily the address where you send the imap to and i think this is exactly going in the same direction um if there is the need to separate scheduling from identification because as you described before you you really would expect the server to better know the various scheduling methods rather the client and at the moment it seems not so clear to me um if as a client implementer one what what they would put into the reply to are they expected to not they know all the scheduling methods for the participants no i mean the recommendation in the jmf spec is they do not set a reply to the server sets it when you create it and the server can put in any methods it knows about if the client wants to it can create an explicit one um you know wants to save whatever we can reply to this way and i know this is going to work but the recommendation is they don't set it in the services yeah but it's the same for send tool right for cento you need like to say"
  },
  {
    "startTime": "00:44:00",
    "text": "this is going to be so sure but for your send to um again you get those from the server the server says here's the identity so to you for each of these identities this is the center object you just put this object in verbatim and that may have whatever scheduling methods the server knows how it's going to receive and so in both cases the client doesn't have to know how those protocols work which the server just says here's the value to use what the client needs to know is i can know that this user is this participant by matching a uri in the send to with one of the uis in the send to for that identity that user yeah but now it's multiple uris right so yeah you know that let's look through yeah so at the moment i i i get the impression that we haven't progressed from the state of um consensus or non-existence of consensus from the mailing list i don't know if i don't know how to proceed currently with that um i'll write up a bit more for the mailing list i meant that for the meeting and didn't get a chance as i really like just kind of trying to make what we talked about today you know clearer because it's easy when you see it written down i'm trying to think about it um maybe that will help mike um no i i don't i don't see that we've progressed um uh so i hesitate to offer a number four uh both because it's a number four and because i may be deadly wrong this is rick sickness um it sounds like part of the problem here is the conflation of identity and reply"
  },
  {
    "startTime": "00:46:02",
    "text": "mechanism and right now we have a single value uh attendee who is you know we conventionally always use their mail to i wonder if the this a simpler answer is to always have that with the assumption that if you only have that that is your single reply mechanism you can always reply with imip uh to the attendee as you said like their email address so instead of saying add an email property which is their address book email and the organizers addresses the the reply to we say the the field that is there now which is doing two jobs that's the default reply to for imep and if you wish you can supply alternate reply mechanisms this is the current replied to which is these are these are alternates and then to get rid of this heuristic i would suggest replacing the use of an object with an array and you can put them in the recipient's preferred order or the server's preferred order in multi-part alternative style so you could say look if there's nothing here imip will work you have my mail too and if i didn't use a mail to as my identifier uri what am i doing and if we have other mechanisms that we would like transport to upgrade to we can supply those as alternative preferential methods so this is this is an idea shot from the hip but i haven't been able to see why it's a terrible one yet so the main difference there is this is very rather an object sorry it's the main difference just that it's an array or is there a different another different side missing there saying the the other difference is that unless i misremember js calendar that we're pulling out the need for reply to to fall back to a single identifier that is on uh that's it's on the data but for this um [Music] i would understand that so we can't do"
  },
  {
    "startTime": "00:48:00",
    "text": "that with itip as it is right now so we would need i mean currently at the moment is um what do we need to provide to to make it in interoperate with the current eye tip over with i calendar yeah method and of course we can build something on top but we need to extend it um but if i understood correctly what you were saying like we there are a couple of scheduling addresses and then there is one where you say this is the preferred and this is what the preferred one also should go into the eye tip right no no i don't well we can follow those up on the list where i can write it down very clear but my suggestion is we have a canonical identifier that's what we're currently using the single uri for the user which is which is now the identifier for the user and can be used for itip if nothing for sending imap right if it's mailed to and nothing else is present but to offer an upgrade path to to richer forms of reply than imip allows there can be a list of alternative paths i'll write something up but i i think i've called it yeah i think i get it so just as a point here we have 10 minutes left in the session we have uh six more slides on this plus task so let's not spend too much longer on this okay oh it should probably take the rest but can yeah so real quick um i originally stood up to basically thumbs up what ron and mike said earlier and partially what rick just said so i think there's three points we need to look at we need to preserve the identifier in the attendee or the organizer which may or may not be a mail to uri if it's if it's a url or something else we need to preserve the mail property it should be a mail parameter because that's the address we actually need to use for itunes i'm with mike on this there's"
  },
  {
    "startTime": "00:50:02",
    "text": "no distinction between itip and imip they're both the same thing that's the address currently being used and as braun said i think we should allow this to be extensible but as mike said let's not try to jam something in there now because we don't know what might be coming down the road and whatever we come up with now might be insufficient i think that's a fairly straightforward way forward whether we're making an object or an array agnostic on that i don't really care either way yep i agree uh next slide please um okay send buyer make this quick uh so there is it sent by property property's calendar defined to be the email address of the the from header from the email that this uh this calendaring data got received from there is a send by parameter on an attendee in i calendar which is defined differently i wonder if we should rename sent by in chairs calendar to send from because it doesn't name have to use the same name for something different and the question is also do we need to preserve descent by parameter from i calendar on a participant i would say yes are any quick opinions on that okay i hear thumbs up perfect um next one please um okay so very quick um we propose to uh change the vendor extension naming schemes uh currently it's defined to be a domain and the property name while mapping by defining the standard mapping for js kind of icon that we realized we don't have a domain we can we are authorized to use so uh we want to change the extension mechanism on the next slide there is the proposal we propose to allow any https uri which should point to the definition of the property this any any vendor extend vendor can"
  },
  {
    "startTime": "00:52:01",
    "text": "use for extension we also allow uris in the urn namespace if they use the itf namespace so basically for every property it will be self-documented in which i receive they were defined any all right that was quick thank you sorry yours okay um last point uh at last itf we were saying um that unknown properties should be preserved so that that unknown properties in js calendar should not lead to clients invalid invalidate the js calendar data that was mainly because we were saying okay maybe some implementations will not keep up with all the extensions so currently they would reject legit js calendar data it turns out that we need specified meter in the in in the existing jsk and the rfc so we are free to do whatever we want there are two ways to deal with that and the next slide is the first option the first option would be to validate known properties but to demand that all others should be ignored but stored but this in my opinion can lead to name squatting for example if you have a vendor a using prop a later on an rfc defines prop a but with a different value type or semantics there's going to be data with that property already out there and we do not want it because it would um it would clash we already have quite a lenient way to add things to js calendar we have expert review and not specification review but i would propose even something more lenient so that vendors are encouraged to at least document their extensions and this is on the next slide i would like to propose that we do not support any"
  },
  {
    "startTime": "00:54:01",
    "text": "unvendered properties at all after we have defined js calendar implicitly all properties that do not have have a prefix will be the properties of js calendar biz everything else will be prefixed either by an https uri or by the urn of the rfc that the extension is defined in this way this is very similar to chain map capabilities in a way um it decreases the payload because we have longer strings in a way but um using complex types like i've shown with the examples on the right side i think it would be worth it so that we do not have any issue with name clashes and hopefully uh all the properties one sees are self-documented in the payload i don't think this deals with the issue of of um implementations getting out of step with the i mean they may not be unknown properties in the specification there may just be unknown properties to that particular implementation yeah so it'll be rejecting a perfectly valid object because it simply doesn't know about a property but we already we we we require implementations to preserve extension properties we obviously require implementations to implement the js calendar spec and there can be nothing else uh in a js calendar data either an extension properties from future extensions or the ones that are defined in the specification that the implementation is expected to implement so in that using this scheme there can't be any unprefixed unknown property ever so basically the properties we define in this document are the only things that can't start with a"
  },
  {
    "startTime": "00:56:00",
    "text": "url or an html yes okay um so i have questions around patching and and path objects with all the slashes that are in these it's going to be very easy for people to screw up the quoting i'm not i'm not a fan of all those slashers i'm seeing in these examples here given that that's a special character in in our patch syntax i mean we won't get rid of all the slashes um i can see the point you're raising i was thinking of if we should say that the h if it's not the urn the https scheme is implicit so we would be back again at domain name but with the path yeah i mean it's not hard to do if you're using you know not trying to do it by hand but if you are then yes you could screw that up so maybe um we can separate https domains from which of the two options or other set is option two something that people tend to agree with other than me are there any would you see any reason not to do the second option which is um saying that only the the only non vendor extended properties in the js calendar are the ones in the rfc that this js kind of is and everything else is added as an extension properly with the proper rfc number where this property is defined i don't particularly like option two because over time we're going to wind up with a lot lots of"
  },
  {
    "startTime": "00:58:00",
    "text": "url rfc number stuff everywhere it does really bloat it and make it hard for people to to deal with in future i think this is ken my suggestion was going to be if there are vendor specific properties why can't they define their own url space just like the ietf has and then yeah we can do that we get rid of slashes that way i just thought like it might not make sense to have an isbn url in the as a property but maybe it does i don't know but um taking points i brought point into account for option one there is the unresolved question of how to deal with name squatting of non-vendor extended properties given the time i don't think we will be able to resolve that i'd just say that you can't create non non um vendor properties unless you specify an rfc done no the issue here is what would we expect implementations to do if they don't know about this property but it's actually legit properly should they reject it or not they don't know they should do exactly as they would if it had a urn rfc number on the front if as far as they can yeah ignore it just a string they don't know so it will so it will mean that um clients or services can store data with standard named properties that are not standard and in the future the same same standard property will come up and it will have a different semantic or value fight that's going to happen whatever you do alright so i don't know it was said that it's not going to happen or yeah i i can't see how that's different either way it could happen it could happen now and um and it's not uh it's not that much of a problem but i think i think um he can avoid it um"
  },
  {
    "startTime": "01:00:02",
    "text": "happening when people are trying to do stuff legitimately by making a very easy registration process or pre-registration process for names we already have expert review i don't think we can make it more easy than that okay that might be enough all right so then that's it for today um all right mike go for it all right next next slide please this came up as part of discussions we were having about um other possibilities for for the tasks um specification and somebody pointed this out and i hadn't even noticed this so it says in rfc 5545 the v2du explicitly disallows a duration on its own um so i hadn't noticed this bit of text uh if you go to the next slide um okay just saying the same thing again you've got to have a dt start like a five five four five now two four four five didn't say that it didn't have that restriction so that restriction got slipped in when bernard rewrote 245 and produce five five four five um so um can we move on the next slide i'll see if i can move along here and get us done in um okay so 245 allows duration by itself um and why does it matter it matters in things like one of the things with our aims with um with the the tasks update was to try and make the more compatible things like project management and um when you string tasks together uh using temporal relationships it's quite probable that the uh these"
  },
  {
    "startTime": "01:02:01",
    "text": "subsequent tasks in the in the chain will not have a start because they depend on previous tasks in the chain you may know um how long you you're going to allow for the task but you don't necessarily know exactly when it's going to start so having a duration on its own is perfectly reasonable there in fact i think duration is perfectly reasonable on a standalone task your if you don't have a start on a task or on end it just floats along and it's supposed to appear there in your in your ui every day until you do something about it um having a duration on it just as i say i think this is going to take an hour and it can just carry on floating along like that i i believe that was probably the intent of two four four five was you you want to know how long this thing's going to take but you don't necessarily know when you're going to do it so um next slide please my suggestion is we simply drop the constraint um because there's no real indication of why it was added i did have a call with bernard and asked and he couldn't remember um and i don't think there's any discussion online it just appeared there and then i had a look i'd look at ical for jay i think ken is that ken wandering up there uh looks at liv ical ice alpha j doesn't doesn't apply the constraint most of these libraries i suspect were written around two four four five times and up and they they weren't changed for this thing so i'm not sure it's going to cause any problem family so this is yeah yeah so um i agree with mike's assessment i also believe that this text crept into 545 by mistake and duration should be allowed by itself uh which brings up the question of what"
  },
  {
    "startTime": "01:04:00",
    "text": "do libraries currently do with would they choke if it saw a duration while the dt start uh i did check lib ical which i'm a maintainer of it does not enforce dt start with duration presumably because it was based on two four four five and it's been very minimally updated as required with five four pro five that being said i'm not sure if we can rewrite this and just drop it uh wholesale we may have to talk to our ad to see i think that's the next move to the next slide yeah there we go i don't know what we do about it is it an errata or is it an update yes exactly which which is which is why i think we probably need to talk to our a.d and i already have something with uh with read card i need to talk to him about tomorrow night so i'll bring this up with him and uh see what his opinions are yeah i mean clearly something was in somebody's mind when they added this it's probably bernard's mind um and and he added it i don't know why um and i don't think he does now so i think i think that was i think that was my last slide i just think add one more point so um yes it was added in an intermediate draft and it is not mentioned as one of the changes in the appendix of 545. so oh yes i could find no traffic on the mailing list with discussion so my gut feeling is this was some kind of copy and paste mistake that wasn't even noticed uh in review and neither by the author or by the working group so this is yours i just want to state that"
  },
  {
    "startTime": "01:06:00",
    "text": "it might also be relevant for mapping between icalendar and js calendar because js calendar does not and for you can also have a duration on its own there yeah yeah that's where that's where it came up and i was i um there was a lot of talking across purposes because i hadn't realized that the constraint was there in in 5545 all right um we're also already over time is there anything else people want to do before we we let this go i mean i guess this just has to go to the area director but we're all keen to lose the restriction if we can good yes all right our area director is officially francesca for this working group um but obviously she's on leave at the moment so i guess we talked to murray for now kenya were going to talk to him cool perfect all right thanks everybody um we're done enjoy the rest of your day last week thank you if you're wondering whether it's in the right dominant update it should be an update ideally"
  }
]
