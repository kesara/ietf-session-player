[
  {
    "startTime": "00:00:07",
    "text": "i can see i can see some names slowly ticking in hello daniel good morning yes one of those good morning good afternoon it is i think i generally count 5 a.m as being more morning than night but it is it's certainly on the cusp isn't it it's hard to have to tell which one it is welcome to the calex session first session of the day here on tuesday at what did i put the wrong date on that i did there you go that's yesterday it's still yesterday somewhere in the world um right let's move on nobody saw that this is the noteworld where i believe everyone in this room is very familiar with the noteworld and probably everyone remotely as well um we have a a small but high quality group of people here so yes note the noteworld some tips for this one if you're in the room please scan the qr code or pop into the data tracker and get online in meet echo somehow that is how you get blue sheeted and how we know you are here and we'll allow you to speak because if you don't if you don't follow the process exactly there's no speaking for you all right some resources whatever that's just on the hi barry you can talk no you can't here's the agenda as you can see it is long and detailed with very many documents but this is we don't have to stick to this um whoever feels like speaking let me know pop up do your thing we have lots of time and i don't know if we'll"
  },
  {
    "startTime": "00:02:00",
    "text": "use it all but we might any other business before we hit the new charter discussion i'm seeing a lack of hands i'm gonna just share it's not very often that you have ah that's alexi um breaking protocol not standing in the microphone sitting drinking his tea with no mask on disgraceful and giving me giving me crap from the heckling from the back row of this room which for those of you who are remote is three rows deep so it's not very not very remote all right we have a new charter congratulations everybody we are now the maintenance working group for everything calendar contacts and and related enough to to stick itself into this pile as well um i think everyone's seen this charter we we say we're going to be maintaining the existing standards the important thing here is that we expect everything to be backwards compatible uh one thing that's come out of this is that any work on i calendar or js calendar is required to update the mapping document and update the other things there so please keep that in mind for any documents that are in progress or that we do from now on we have to make sure we do both those formats and i suspect that the same thing is going to happen with vcard and jscontact as they come along because it says with the existing standards it doesn't specify what specifies in fact for those those two that we expect things but yeah anything where we have multiple representations we're expected to update the model and then update the representation in both cool uh this was basically just a summary for"
  },
  {
    "startTime": "00:04:00",
    "text": "for the hundreds of people who came in to check out what's happening and who the millions who are going to watch this on youtube when it goes viral so welcome everybody shall we move on excellent woohoo uh according to the agenda next things were the the new work no hang on next thing was the let me pull up my chair slides again the work that's actually at the isg which is ical relations uh mike did you want to say anything about this you hear me yeah good um i guess i guess the only there's i uploaded once uh you know a small slide deck for that and because there's only one slide for it and uh there was one remaining yes it's next the next one i think yeah there's a section um there's a section where um using existing link relations and um whether there should be some text to say you really need to write an rfc if you're going to use existing link relations to say how you're going to use them and so other people know what you're doing there's no text as such at the moment other than to say you can use existing link relations i'm a little uneasy about having nothing so there's some suggestion from benjamin suggested something of that kind at the bottom and i guess the other question is um does this need a section on um does it need js calendar examples"
  },
  {
    "startTime": "00:06:02",
    "text": "it sort of started off before and one of the reasons for getting this um moved along is because it's sort of used by the js calendar mapping draft hey michael don't we get to see your face oh five in the morning there's no law that says you have to show your face yeah i'll show my face for a short while there you go good morning um so so that's they're the two questions i think it's pretty much done um it sort of started before um the new new charter um and it's so do you think i should i should put in some js calendar stuff or is it going to be covered by the mapping drone actually if you want to speak first or because you were in the queue okay go for it again this is cameron so mike if if this is going to go out the door before the mapping document i would suggest the mapping docking mapping document deal with relations itself it'll be good yeah i'd prefer not to hold it up as well francesca yeah hi i don't have a like opinion about that but i just wanted to mention that the isg is changing tomorrow so we will lose some ballots and i was hoping to kind of so the document is all green which means that it could be approved but i know we're waiting for this uh small update and so i was thinking of changing its status to approve approved announcement to be sent revised that he needed to kind of like"
  },
  {
    "startTime": "00:08:02",
    "text": "uh freeze the fact that it's approved but small changes are quite so very uh nodding so yeah i will do that so we don't lose the balance it should still be enough balance but yeah never know great yeah i mean it's only a minor change anyway so so i think uh it doesn't really change the uh any specification it could be considered editorial i guess hey this is robert speaking so um for link in terms of link relations i see that we are currently doing duplicate work uh for defining link relations both in the i js calendar icalendar mapping document and in the um in this draft so um we should certainly just make sure that we're using one of these options and not introducing two options to do the same thing basically we might come back to this discussion when we discuss the gs calendar i calendar mapping graph okay so just putting the notes in there all right so i think i think everything's agreed on this yes daniel yeah so so basically there is one one thing we don't have to do in that document which is the document in gs calendar yeah so we decided that because the js calendar icalendar mapping document's not done yet that would document it in that one for this draft rather than the other way around because this one's going to go through first so this one is almost baked"
  },
  {
    "startTime": "00:10:01",
    "text": "yeah do you think mike do you think you you will be able to do that um this week for example yeah i think um i mean this is the only the only it's really just adding this one sec sentence to the to the text and it could just be left as part of the editorial process so i think it's pretty much it's pretty much done it's really this only there's one question it's okay good so so it's it's time aim um let's target that we we this draft is going to be done by uh um by this week yeah i was i was gonna i was gonna um put some text in there last night but i thought i might as well leave it till till with at least a chance to talk about it okay good awesome so francesca's going to approve it mike's going to add the text and we're done fantastic all right and mike you had one more slide yeah i thought i could do a subscription upgrade um i took i took another look at this um and i think i think actually it's pretty much ready uh i did i did see as i say here that um i was referring to the wrong uh spec because this has some um link relations um uses link relations as well um so i need to i need to update it to reference the right spec and and i did also notice that somehow the privacy section that got its header screwed up so it got tagged onto the end of the security"
  },
  {
    "startTime": "00:12:00",
    "text": "section but apart from that it looks pretty much uh we've had a certain amount of discussion about already online and this is another one i think which is pretty much done cool um so does this sound like you push a new copy with that fixed and i do a working group last call on it that's where i think we're at yes and i can probably get that done as well um the next two three days fantastic well we're making good progress then thanks mike all right next on our list um let's do one of the js contact things so i'll pop up robert slides oh wow that is fancy we robert's just hacked together the thing we've got in the bigger rooms where there's a tv in front of him by putting his laptop on a chair for those of you who can't see take a photo of this little approach beautiful mostly just a barry all right so um uh let's discuss j's contact and the gs js contact v card mapping drafts uh together um next slides please um so yeah both of these drafts are now adopted by calyx which is a great thing because uh now we can can make sure to be better aligned also with the existing vcard and i calendar vcard drafts the the main open item that we had at the last session was that we were discussing options how to"
  },
  {
    "startTime": "00:14:03",
    "text": "how to define gender related properties within js contact scoped to the use case of knowing how to address a contact um so we we we were not keen on reproducing the gender property definition of vcard which in our understanding um is not appropriate for um for use in terms of um it defined the biological sex um which and it defined a free text for gender and both understanding current gender studies advancements are not really appropriate um to either know knowing how to address a person in languages that require a grammatical gender and and and also the free text for gender was not deemed to be um the right approach and we are waiting for defining uh gender identities we are waiting for people who have knowledge in this area to come up with an additional proposal but that's not going to be part of the core js contact specification what we did defined was a new property called speak to us the speak to us property is scoped to define the grammatical gender and it allows a free text field for pronouns um typically used in english like they slash them but it's really up to the user to um to enter whatever they want there um there is no um this also means that it's more informative to the people looking at the card it's not not that useful for um machines to like like it's it's it's not that easy then to use this information in an automated way in"
  },
  {
    "startTime": "00:16:02",
    "text": "in any um in any situations but um this is um what we've seen in other proprietary formats being used as well for example google the google people api also uses a free text feed only and we figured we go with that um yesterday there were two discussions so basically we we we didn't see any further discussion on js contact um but yesterday two topics were brought up and uh we'll be happy to discuss them here now uh one is around there this and these concern context and labor properties in contact resources um but before we go into this discussion uh then our next step is really interop testing um so mario the co-author um who's in the chat um has an existing implementation um i'm working on an implementation at fast mail and i understand that um also other vendors um rodrigo for example have their um already have an experimental implementation so that's going along well in my understanding and we target for uh for a lot of working group last call before or at the next itf in philly next slide please the the topics that came up very recently is one is the context property so in at a couple of places in the js contact properties we have specific object types say for telephone numbers for online accounts um for email addresses and all these have a share a property which is called contexts which allows to define in which context this contact method should be used so the example i've been giving here you can have a phone number you can"
  },
  {
    "startTime": "00:18:01",
    "text": "say this is my this should be used for work related stuff or for private stuff at the moment we only have work and private um we if i recall correctly we originally also had the value other but in one of the latest versions i removed all mentions of any any enum value that was called other because it's really it doesn't tell anything at all so um the i now came to understand that some address book applications still use this like using a like a a generic value if there is really not much known um else about it um i do not think we should do that in js contact but i'm open for discussion what the benefits of allowing like a catch-all value would be um the options that are on the table of course are to extend the enum um which would then also go through ayanna at least for the ones that we don't define in in the course back um or if we really should just allow a free text value with the benefit of being that people are really able to put in whatever they want but of course that might degrade interoperability so um i don't know if there are opinions around here alexi did you want to pop up here in the key yeah hello alexis monica good question uh what are the other values that people do want to use it for other than work and private yeah that's that's the main question at the moment i i don't know um that's why we restricted it to work in private um if there are other use cases uh of course we can add them to the spec now"
  },
  {
    "startTime": "00:20:00",
    "text": "um but most maybe we will never be able to catch to identify all situations and so the question then is should we expect implementers to register the new enum um at diana or should we just allow to put in everything personally i i lean towards defining an enum with restricted values because then we can define semantics for each of the enum values yeah i would like to try to find out what people using other form at the moment no is it uh because you know like yeah we can add the iron registry but if it's unclear whether it will ever be extended what's the point and you can just defer it until the point when you know that you need extra values but if you know now or suspect now that it's a you probably will need to extend them just to the registry so i hope it helps cool oh we got a whole list here here okay hi i'm yours um yeah for us it's just we we saw that in several systems that they are currently using other and it might be a more generic question how to map that to js contact as long as the the information as long as it's possible to transfer it to js contact and back to vcards doesn't necessarily need to be an official value maybe but just it should be mentioned somewhere in the in the conversion spec a question to that please so if these applications allow other do these also allow to not set the context so okay so then basically since the context is i think optional in js contact if not it should be then um a non-existing context would be would map to other in"
  },
  {
    "startTime": "00:22:00",
    "text": "in in other applications or of application formats actually okay what of course would be very interesting is um if there are contexts that we can like that are scoped to some specific context that would be really interesting but yeah for other i would just say the absence of context describes it as good as yes yeah okay makes sense to me okay barry this is barry lieber what what is the substantive difference between an enum that and and any arbitrary string that has to be registered with diana i don't understand oh no maybe i i so what i've tried to say is um we should register enums at iana that can be extended but i wouldn't say that i mean free texts registering at diana doesn't make sense so i i wanted to say either it should be an extendable list of enums but the extension must go through the regular iana registry process of adding another value or it should be a free text value that at json level it's going to be a string value either way right so that's fine i mean i think the right answer is to have uh the context registered with ayanna with specification required yes yes that's what i'm trying to get yeah that's maybe i i was not saying it correctly and then that gives you the ability to in the specification to say that this is just a meaningless string or that this has the following semantics and you can go either way depending on the registration and then there's an expert reviewer all right hello this is here um so maybe to shed some light on this other thing a little bit from what i know so historically i think it was exchange introducing this uh word home"
  },
  {
    "startTime": "00:24:02",
    "text": "other so they just have three fields for addresses for email for everything so that's the scheme they just had and a lot of systems followed that approach yeah and then some systems came i think maybe for instance google started with that like they resolved all that and allowed you to do more than three email addresses more than three postal addresses and so on and they basically came on with a more or less free form context thing yeah so you could basically define everything so the question now if we need in terms of together with work and home other yeah actually it's not really defined it's just legacy thing because there were just those three fields yeah my point would be there is a lot of applications based on that a little bit because it's long it's there for quite some time so that in my opinion would be maybe one reason to consider this as a as a standard field as well because it's super established in a lot of applications um already um that is for the why there is other also i mean there's not so much magic beyond that around it actually and probably you won't lose so much else but you would probably make a life a little easier for people adopting jmap of with existing tools because they already have this you know standard model of those three context properties baked in um to your second question with the hana registry i would probably say in my opinion um i mean as far as i know for instance if you do it in in google or something like that you can even add free form um connect properties and i think people use it more like a keyword thing or something like that so probably a hana registry to do it really formally specify what a certain value means beyond these work home and private private work private and other probably over engineering and make it too slow as a process because i think nobody might do the work on submitting it to a inaudible it sounds like the the biggest challenge here is going to be round tripping"
  },
  {
    "startTime": "00:26:01",
    "text": "between a v card that has these additional things that someone's entered and and js contact there needs to be a way to to round trip it through so they don't lose information they've added so um there is for every property in or any type in js contact it has a context or contexts actually uh there is also a free text label field and this is um um and the in in earlier drafts we had i think this other context but it basically meant um if you write other in here put the free text value whatever you want into label but you can still do that so i don't think i mean for if there is the specific value of other i really do not see how that would differ from not defining a context at all and just writing into the label whatever you whatever free text you want i don't disagree with you i think the the magic here would then be just to be very clear on that in the mapping yes yes people know what to do for because it's a common case so people will want to know how to deal with it and probably we should give them a guidance on how this is to be done in a jazz content yes yes so we need to be very clear and that would be super clear obviously if it's in the right in the top level spec but i agree with you writing in the future something which has been weird in the past not necessarily makes it better all right okay thank you this is ken again i just wanted to say plus one to the idea of other being lack of context okay then um i suggest we go to the next slide please okay and that's um that's bringing us to the label property so um the as i said before the label is a free text value that you can assign to any contact method um"
  },
  {
    "startTime": "00:28:01",
    "text": "it's basically meant to to accommodate for the use case that in several um uh applications you can like add additional information like a free text value to a telephone number or whatever and the expectation is that usually this will be used by applications to display to the user so it's more informative to user rather than informative to the implementations um however the current js contact vcard mapping document um uses under some circumstances the labor property to contain um information that's relevant for mapping between js calling the js calendar and icalendar so notably if you have a cal uri property in vcard that defines the calendar address for this contact then that's currently mapped with the label property set to cal uri um now as you can see in this example um a resource has a type and that's again a restricted enumeration of values one of them being uri so i would suggest that we not use the label property for defining any mapping related information because that's really useful for the machine but not useful for the for the for the for the user so we should rather extend the type um enumeration values if uri is too generic to convey the specific type of to convey the specific type of of of uri or the context where it's used um the alternative would be a sub-type property but that might go too far in my under in my opinion um however um this shows that there is the necessity since we are mapping a couple of vcard"
  },
  {
    "startTime": "00:30:02",
    "text": "of distinct vcard properties into the same object type in in js calendar and and using the label in the current mapping document clearly shows that we are lacking a way to uh convey to to um to keep the information which property was mapped to where so i'd rather suggest we look into defining a january scheme where we can define for um for these situations which property mapped to where this could be um an extension property on on the js calendar object type um sorry the js contact object type which like tells okay i came from this vcard property or probably we come up with other schemes but i would say i would not use um free text values to to to use that especially not something that's shown to the user any opinions on that i strongly agree keep the the user and the structure separate you use the data instructions separate okay so what it shows that we are lacking this uh this this way to um keep information for the mapping and this we have the exact same situation in chairs calendar anyway so at the best we can come up with with a scheme that's appropriate for both mappings and i highly insist that we should use one scheme for both uh performance all right that's um that's the last slide are there any topics to discuss in terms of js contact in the queue nope nobody's in the key right so then"
  },
  {
    "startTime": "00:32:01",
    "text": "i'd say that's it for cheers contact cool so you already said upfront that the plan is to have it ready for working group last call um by next atf are there any other intermediate steps we should be tracking along the way um i mean the next important step is to to do interop testing um i don't know if that if that should be a step within itf that we should track um there's also a virtual cal connect coming up somewhere in between isn't there so yes um i think that's next month already so we might not be ready to do that though cool it's may okay that could work so do we are we going to do an interim then at calco next we probably will do an interim meeting at cal connect yeah okay we normally do great cool all right thanks robert thank you um let's see we're going to maybe do do some more of mike's stuff just so that we don't have all the same person all the same time so let's maybe skip ahead in the agenda to what do we got their tasks now mike i can hand you control of the slides if you like you should now be able to to drive it yourself oh well arrows yep let me try that"
  },
  {
    "startTime": "00:34:05",
    "text": "nothing's happening oh you did that amazing technology isn't that great so um the the um when we when we when we were originally putting this this uh this spec together we were still frightened of using new components some reason um and i was taking a look through it um once i resurrected this thing and realized that a lot of the stuff we've done was to try and group properties together uh so you could actually express more information about about something and in particular it was adding uh more information about uh status and um and and attendees said the actors in the in in a task so it um i decided to invent a v status component which would be a we should encapsulate information about about a status and um probably the three main um things is is to have with that would go within a v status are the current status property um most likely a comment because that's what it was largely about is what what happened what why did the status change or whatever and a um and a dates down um there could be other other properties but those are the main ones that we were trying to group together um the idea with with this uh all these updates was originally was to try and express things that go on in in in"
  },
  {
    "startTime": "00:36:02",
    "text": "processes and tracking this in particular interest for the the other author was was of cm because he's dhl was was tracking packages and things of that kind through a system so um so i've i actually added a v status property to the last one i published and this is largely what what is likely to change as a result and mostly it's um did i jump to there no um we had a reason parameter which was indicating why there was a change in status um so that could be a new property i was sort of toying in my mind over the last couple would that just be a summary or could we actually have a new reason property um for tying these things together in with an attendee i think the thing to use there is the participant component and um the what was the event pub draft and a comment on the rfc which defines the participant component has a way of tying it to the attendee so you can sort of add metadata about attendees though that's already covered so um if we invent a new reason property you should just be free text um i think that covers what was being done this draft it's it's certainly simpler in pro in concept um i did wonder the summary meant the same thing but i don't i don't think it's quite the same thing um and we had a modified parameter which really is just a dt stamp so that that would disappear um"
  },
  {
    "startTime": "00:38:00",
    "text": "this seems to be there's a delay or i don't know here we go um and in the text of the thing it defines uh the idea of a substate parameter and and has some text around that i think again that would just be turned into into a property to go inside the v status take two presses and the attendee changes yeah these are just i mean there's so many slides because these are partly my my noting this stuff down as i went through the thing um again as i said with the 10d we just use the participant component and show everything inside that which means we get rid of this group parameter that we were we invented [Music] uh there we go uh we had yes and we had some changes section 142 was changed to comment which to add um some of the bits and pieces that were before with grouping we don't need that anymore so that section would just disappear this way um again another section that would drop and that was a quick first pass that i shoved in there um before i put to see what it looks like it'll need some updating if to add the reason properly but uh apart from that it greatly simplifies the spec and um and the other question was do we need to do a v calendar mapping because some of this uh js canon i think some of this stuff is um referred to in the js calendar mapping so that was another reason i was trying to get this thing um moved along for that"
  },
  {
    "startTime": "00:40:00",
    "text": "and let's just take two button presses to get something to happen or maybe i've hit the end maybe that's the end so that's that's uh that's um where my thoughts were going it's adding the b status just seems to making it a lot cleaner and simpler all right ken did you want to pop up this is ken again yes yeah so mike um if my recollection is is correct a lot of those parameters were just mirroring properties at a per attendee basis correct they were they were largely to try they would the thing i wanted to try and get rid of was that group parameter which is which is to try and group things together understood yep basically i was going to say i'm all in favor of moving these per uh participant parameters into properties within participant itself and same thing with v status as far as where to put the mapping my gut is we should this is we're gonna have some churn on this draft so my gut is to put the mapping in this draft and pull it out of what robert's currently working on or you and robert are currently working on so at least we have a example of how future specs need to include a mapping that makes yeah that makes sense and that's why i asked the question you know the relations draft is so far along it didn't seem to make sense there but this one is not quite that far right so i'm happy to add a section on um so i'm not sure what mapping the draft currently discussed uh would include for participant is the idea that it defines but the all the mapping for the"
  },
  {
    "startTime": "00:42:01",
    "text": "participant or just the parts that are relevant to this draft probably parts that are relevant i think what's going to hap this is going to run in parallel with what we're doing with with the the js calendar mapping so we can probably work out exactly what goes where as we as we do the two steps that what that is what i would uh appreciate um and i would rather say the the general mapping of the participant component to js calendar and the other way around should be in the js calendar icalendar draft that we are working on um because i think there should be there should be one document uh that explains how the existing rfc8984 can be mapped to icalendar and the other way around and any extension that then should go into into other drafts yeah my concern when i started on the work with the js calendar mapping was i realized that we were we had something that was um related to this this spec and i didn't want to see um us end up hanging around waiting for this spec or having to pull stuff out so i think i think they're going to move along together we'll figure out any um okay great all right yeah one thing i'd like to to avoid is that um the mapping introduced in the ical gs format um translation some complexity so that when we read the main document we don't really understand where this complexity come from so but um that's uh that's the only thing i'm i'd like to avoid but um um a lot of i mean um"
  },
  {
    "startTime": "00:44:01",
    "text": "um a lot of the reference should be from the main document which is the ical gs but um i suppose we will still have some small adaptation or things like that in that document in the task document yeah i i would like to see us reach a point fairly soon where we have every everything in js calendar representable in our calendar and vice versa and this document's certainly part of that and then get to the point where all new documents just define both and we don't have to we don't have a separate mapping stage happening so the question really is how many documents do we need to complete that we we reach that milestone where everything's everything's representable in both so i don't really care which document each thing goes in but it it may even be more sensible for this one to not mention the djs calendar at all and have the mapping document be the one place that gives us that basis yeah i think that i think they'll come clear as we work through the um the things we'll um but i mean it's only the only thing it might make sense to have the uh the show how the v status component is mapped um in this spec but um we can make that decision down the road cool all right thanks mike um anything else on this document what's our expected next step timing here um i i think that the first thing i can do is is is is make those changes i i outlined is is drop the um the group and um modified parameters and"
  },
  {
    "startTime": "00:46:02",
    "text": "um create add a reasoned a reason a reason property and then redo the the spec along those lines which shouldn't take very long and i could bring i could i could publish that draft and then we can move from there i'm i'm keen not to load you with too many tasks all of which then take longer because because we don't have an ordering on them so far they're all relatively so far they're all relatively um quick and easy things so at the very least i should get this now cool all right so just one thing is that we have the explanation how to move from v car to gs uh vtask to gstask the other thing is that we do have a gs example in the document and i think it's also good that someone that is only considering json is able to start from that document as well so if we have at least an example or something tangible i think that would be great to have cool looking back at the agenda we've moved through very fast so far we're what 47 minutes in we have we've done the js contact work we've got js calendar i calendar still to go um and then there was i calendar series and server side subscription and vpol are drafts in progress but i don't think we have slides for all of those so we might skim over the remaining ones at the end"
  },
  {
    "startTime": "00:48:00",
    "text": "uh under that slide put up the jazz calendar our calendar all right so yeah like the previous discussions already have shown um we quite have the need for defining finally defining on how to map the gs the rfc8984 uh to i calendar and that it's not being done is to a good part also on me that um i didn't have the bandwidth to work on it but it now it it clearly showed in the last weeks uh already months actually that it's um that we really should get this now out of the door as soon as possible and um that's now my top priority to do next slide please so before going to the mapping we have we have an errata for 8984 i think i covered it on the next slide we have implementations experimental implementations of the mapping in cyprus imap and betawork in cyrus imac we actually have two mappings the the one that proprietary mapping using lots of x properties in icalendar that's very stable but of course not the thing we want to keep for the future and there is an experimental mapping that's not yet complete that i'm working on i do have the plan to implement the standard mapping outside of cyrus imap and if the icalc project agrees to integrate it directly in there"
  },
  {
    "startTime": "00:50:00",
    "text": "this should make it also possible for other applications that are building on lib ical to use the mapping out of the box for the mapping we now have a better understanding on where we where the formats are lacking to map in one or the other direction and i'm going to present uh quite a number of properties uh that we want to introduce for either icon.js calendar today and apart from that we do have the need to still then decide on how to map properties for for which there is for which we have no specific mapping defined mainly that's going to be the x properties that we see might see in icalendar and it and the equivalent of those are the vendored properties in the vendor extension properties in js calendar which look like uh like a domain name controlled by the vendor slash and then the property name um we definitely need to come up with something to map these and that's also what has been discussed before already shortly uh for vcard where we have the exact same need um next slide please so the rata very shortly um there was a mistake in the definition of um so let me step one one step back so in by default a js event uh the properties of a chase event all are visible but you one can define js event to be private in which case only a subset of the of the properties are visible namely there is no information included which conveys the the contexts or meanings um of this event it's more that you know when it happens um but you don't know very much more than that"
  },
  {
    "startTime": "00:52:00",
    "text": "um and we uh there is a list of properties that can be shown for private events uh but there was the mistake that we didn't include all recurrence related properties um and we now added the errata to include all recurrence properties so that if it's a recurring event the the implementation that looks at the private event can still know for all occurrences when they are occurring the secondary router that we filed is also related to recurrences we mistakenly constrained that events that have a recurrence id set so which are an instance of a recurring event must have a recurrence id timezone set but that's wrong because an occurrence is an instance of a of a recurring event in floating time still is in floating time there is no time zone bound to that so um these are i don't know about this exact status of these if they are like um accepted already or um yeah yes they are verified that okay yeah thank you um yeah any comments on the errata i guess not so then next slide please all right and this brings me now to a couple of property definitions that we would want to discuss um that have been shown to be lacking currently in the js calendar icalendar mapping so the first thing is the geoproperty in icalendar the property in icalendar is defined to be two float values specifying latitude and longitude separated by a semicolon however in js calendar we allow we set the geoproperty to a geo uri defined in rfc 5870"
  },
  {
    "startTime": "00:54:02",
    "text": "and this is this is much richer information about the geolocation so what we propose is that that we extend the value types allowed for the geoproperty to be a uri are restricted to a geo uri the alternative would be to um do not extend the value type of a geoproperty and keep it with the two floats but at the high fidelity resolution in the alt wrap parameter however it seems better to us to extend the value type which breaks backward compatibility with implementations than having two probably conflicting values in parameter and value of the property yeah uri is to stop people sitting in the back right there's all these states so this is jerk so it's basically a question if i understood it correctly so what you propose is in order to have some mapping set up to retrospectively um modify the icon on the spec in order to be able to use a more rich geo representation within i can alright yes um okay i mean i would have a little bit to concern your race by yourself with respect to back backwards compatibility and my question would be isn't it just possible um to um you know um derives the value for the legacy geo property within i calendar from that more rich presentation yeah that direction works the other"
  },
  {
    "startTime": "00:56:00",
    "text": "direction won't you okay why is it so for example if you look at the example on the slide of for the downloads for the uri the geo ui you see it has latitude and longitude what you don't see in the example it could also have altitude so it's already one dimension more it also allows to explicitly define the coordinate reference system that's the crs parameter and it also for example allows to set the uncertainty so it's like a 40 that's actually um the address of a church in vienna okay which has like a 40 meter um radius but would it be allowed to leave these parameters away or is that is it specified in that um okay yes they are optional how would we preserve them then in eye calendar so yeah okay you would lose them you're right okay so this is barry uh the the problem with you can add another another parameter another field whatever that that lets you specify the richer information i don't think it's worth it i think it's better to break the backward compatibility in this case yeah yeah i i have to sorry alex just i have to say the geo property rarely is used anyway so yeah i'm also in favor of your eyes um that seems just it's also the way you extend it is a is a genetic way you extend other properties so i mean it's kind of in spirit of original format right so yep um um as far as um i i think saying that it has to be jio uri is probably fine but maybe not saying completely that you know nothing else can ever been be used there in the sense of you know who knows maybe somebody invents a better uri representation for"
  },
  {
    "startTime": "00:58:01",
    "text": "this so in the gs deal but in the cheers candle spec we currently require a geo uri so for if we allow here generic uris we we would need to also define that in the other spec so maybe yeah sir okay all right that was very same thing jio from his seat by the way for those of you who are remote okay final remarks that bringing a little bit of the devil's advocate so since you're arguing not so many people are using it anyway yeah so why um you know doing the effort of uh you know even improving it in a way i mean well i think if we do that we might it might get even used more than it currently is for example um apple have their have a next property x appreciate location which basically is like when you use their clients and you select you give it you enter an address and it picks it on the apple maps that's going to be a geo uri in the x approach structured location so okay i'll put myself in the queue here because i have a question upper layer here this document is currently slated to be an informational draft so if we are planning to update uh anything in our calendar we might need to do a proposed standard level document defining those changes to icalendar um as a separate document so is that the intention here just to do it i think we even had already agreed earlier that it should be a standard document so maybe i just didn't update the document properly okay so is the mapping document going to be a standard document in that case then or are we going to do one that's just in our calendar update and then build the mapping document cool this is barry being as i'm"
  },
  {
    "startTime": "01:00:02",
    "text": "yeah being as i'm in the queue i'll just i'll comment on that i think it should be standard uh standard track the the other thing about usage of the field is um that if we had this more detailed information i would i would make more use of it so i can support that what what uh robert just said because uh well for instance i'm i don't want to put my home address in my id card but if i could use the uncertainty i would be happy to put it in with a broad level of uncertainty that that just got it into my town without giving me the specific address so um just to uh specify this is for calendar event information um but um we might discuss the same thing for the same yeah same with both yeah all right so then let's see we go to the next property please ah which is uh the chainmap id property and parameter um so the chain map course base specifications uh defines the id type and the id type uh is restricted to um base64 url uh characters with a given with the maximum length of 255 um octets and uh we currently do not have a standard way to preserve these in icalendar uh icalendar has the notion of using uids typically for unique identifiers but the unit uid property is defined as a utf-8 text value of any length and any characters so um and we typically see these also being non uh chip id strings in in practice so a couple of"
  },
  {
    "startTime": "01:02:03",
    "text": "implementations for example append to each uid they append their um their domain um if you're looking at the v calendar from itf for this for this session for example we see that it's like um itf 113 and then like it's a safe id but it's like a semantic id so uh we are going to need a way to keep the chain map id uh which typically are only which are always only scoped within a jmap object like if you have three locations they could be called location one location two location three in chain in in chase in a chase event so we want to preserve these um and the suggestion is that we allow that we lose both properties and parameters that have this exact same requirements as a chemical specification um and for example as you see in the example this is coming from an idea how to map this to a relocation a v location in i calendar has a uid property we would just tack on the chain map id as a parameter on the uid which also allows us if and the idea for example is if the uid would be a safe jmap id then we could just omit this parameter at all and just use the uid and the other way around any thoughts to that all right so then next please all right the content id parameter so um uh in js events or js calendar objects it's also gs task we have link objects a link yeah a link is basically an attachment uh to the uh"
  },
  {
    "startTime": "01:04:01",
    "text": "to this up to this js event for example um in js events we have we allow the text description of a js event to not only be plain text but also to be html or any any subtype of the text mime type actually especially for html though we tried to replicate in js calendar what's being done in my messages with content id so that you can have that you can in an html text can reference a content an attachment by content id to embed the html and for js calendar the idea is that the application does that looks up in the links the content id of the one referenced in the html description for that we propose to introduce the content id parameter which follows the exact same semantics as defined for the cid scheme in the respective rfc oh yeah and we suggest to allow this to be attached to attach and image properties um mike i'm not sure if that should also go on a link properly um probably i don't know up to you will um no i'd have to dive look at the speck and think about it okay uh any other thoughts on that great so then uh continue please cool um alexia and i will probably be coming along and trying to attack a digest in here as well with our large file thing so that you can have a url and a digest so you can say fetch it from over here but here's what it should be"
  },
  {
    "startTime": "01:06:03",
    "text": "i suspect all right and that brings us to what has been brought up already in the relations draft um where i said we might risk duplicate work here so um again the link object in a js calendar object um has a rel parameter which is restricted to the to the same iana uh registered link relations that are currently used in html contexts so the really link relation parameter that we propose here is is again attached to an attach or image properly to keep that information i do see that the link rel parameter that you introduced mike in the relations document allows for more it also allows the value to be a uri or the hard-coded value source so i do not know how we best handle that if if if we go with the link rel definition which could be perfectly fine we would need to update the js calendar link object that the rel values are not restricted only to the registry defined in a288 but i do not know if the if that's appropriate um because the source string value relation seems to be very explicitly defined that the link is the event that this relation is linking to but that's not something one would store in a link relation in js calendar so i see that there might be some that there might be semantics for the link rail parameter that wouldn't be covered by the current js calendar rail"
  },
  {
    "startTime": "01:08:00",
    "text": "i don't know how we should address this i i mean the the point of of the link relations is they point to um metadata about the about the object that's that's doing the pointing so in the in this case this is just adding um a link relation which says this this is where the the event was derived from this is the source of the event it's a particular kind of relationship um and if you look through all the link relations they're all they're all like that and in fact eight eight two eight eight is where it defines the idea of using uri um that's for unregistered um link relations so isn't that that covered by the related to property in js calendar and likewise no no related related to point um very specifically used uids yeah but i mean yeah yes you could you could i mean if we started all over again from scratch we probably wouldn't have had a related to property we would have had just link relations and and perhaps extended that enough to do what related to does but um related to exists already did but um so could it be that we are just using the same words for different things then um yeah i i very explicitly said in the in the in to draft that you don't um use a link relation to um to handle what we treat as attachments now specifically because attachments are"
  },
  {
    "startTime": "01:10:01",
    "text": "are not metadata as such they're just a they're they're a bunch of data like the agenda or something like that attached to the to the to the event and there's this whole thing about managed attachments in in which which sort of puts makes puts them on a different level okay so um and i don't know how that's going to be you know i mean the question is how that's going to work in js calendar what happens if you have a huge object pointed to by a link yes it sounds to me as if um the the link property and the link rel parameter defined in the ical relations uh draft um is something that it might be currently missing in 3s calendar um so that we might need to introduce new properties to the gs calendar in as part of publishing the iq relations draft probably um and we might then need to figure out if the link rel parameter should get another name because it obviously means something else then the relation parameter proposed here right um i mean the alternative would be to define just the link rail or the link relation parameter whatever the name then is with the value types that is required for the relations ical relations rfc but restricting the values that make sense for a js can the link object to the ones defined at iana for"
  },
  {
    "startTime": "01:12:00",
    "text": "i say actual link relations in in the meaning of what rfc8288 yes the js calendar spec uh currently defines for link object um for the rel property to be restricted to the values defined by the link relations rfc the 88288 i think that's that's exactly what link rail is in in the relations draft no um i see that in the in the draft it defines also it allows the values of eight to eight eight but it also allows the value to be a new uri or to be uh the hard-coded string source if i misread it that's right now that's the source the sources extend is is registering a new value with h8288 yeah that's that's all it's doing it's just it's just registering a new value okay great um then that um that solves that so the only remaining value not covered in js calendar for rel would be a generic uri and i think um i'd have to look back at 8 28 but i think i think in eight to eight eight it's that's that's how it recommends you specify an unregistered link relation okay okay i mean i i was pretty much following the the eight to eight eight spec okay then then um i might have seen an issue that is not an issue so in in any case we should just introduce one parameter and not have two doing the same thing yeah the link real parameter could be used elsewhere uh it's just that i i i think we need to look at how this is gonna work with things like managed attachments okay"
  },
  {
    "startTime": "01:14:01",
    "text": "and that's more a matter of of looking back at js calendar i guess because that that sort of got got ignored in that there's no special attachment um you know object so how do you figure out that you need to actually manage it yes agreed so um if it if the link rail parameter then comes um with the iq if the iq relations document is published sooner than the js kind of the icon mapping then then you just use the link just use this one for the mapping yeah neil do you want to speak for links that are attachments i think we say in the spec that's only if rail equals attach sorry rel of enclosure i've got the spec in front of me now uh linked with the relevant enclosure must be considered by the client to be attachments so specifically that kind of link all right that that then we probably should say we probably should have said something about managed attachments um but um well jmap calendars will talk about managed attachments but js calendar can't because it's just the data format yeah yeah that's true up here okay in that case it sounds like it's gonna it's gonna be possible to cover it okay great so in my understanding um if ever there has been an issue it's solved now anyway so let's continue to the next slide please so they're related to property um"
  },
  {
    "startTime": "01:16:00",
    "text": "that we have already in icalendar um we in js calendar we have a location um object type and the location object type can can also define if it relates to the start or end of the um embedding object that being either an event or a task um so an option would be that we extend the value the allowed values for the related property to also allow these exact to define temporal relations in the related to property and that would be start or end that would map cleanly to js calendar um the alternative thought could be if if one could define um any temporal relation in between started and two um that would then deviate from what's currently defined in js calendar um but it might if there is the need to define for a location that it that it relates to sometime in between the start and the end of the event if you have like i don't know i don't know how to say in english like a schnitzel act like if you are like running around and collecting clues uh for a puzzle you have to solve or whatever um we didn't cover that in js calendar we mainly introduced the the relation um to allow an end relation to be set on a location because that would then would be the time zone identifier of the btn property in my calendar but the question now is should we just introduce start and end or should we extend the definition right now i don't this is only this is only for locations"
  },
  {
    "startTime": "01:18:02",
    "text": "isn't it that's only for locations yes i'm more inclined to to find a new property to go inside a v location i mean it just seems a bit odd to extend related to just for this particular case it just seems like a property with a value of start or end or or something else that you wanted to have yeah works equally fine for me i think we had discussed this a couple of weeks ago to go with related to but i'm equally fine to just introduce a new property yeah i think i think it's it's it's simpler and it um it seems odd too complicated related to for this one case all right that works for me and then we are going to restrict it to the exact values that we also allowing js calendar so that should be straightforward yeah yeah okay uh next slide please oh yeah um and that's bringing up a specific question that then might later be discussed as a generic question so with the relocation component and the participant component in i calendar having a uid um we we will need we might need to introduce the uiv property also on the location participant objects in js calendar these would be optional in js calendar and if one would map from js calendar location to i calendar where there is no uid defined by the client the implementation would just generate a uh uid that it from then on uses for both um are there any and the generic question will come up very soon on the slides later is how to map how we can typically map um properties for which we already have a"
  },
  {
    "startTime": "01:20:01",
    "text": "well-defined mapping to js calendar but in other contexts for example we already have a uid property in in js calendar defined for the for the main for the event and the task and this the question came up during work on the on the mapping document how we should deal with well let me get back to this then so first of all are there any any specific uh points to discuss for uid in this context yeah yes please yeah i just wanted to ask is this meant to be an id that's consistent if you have say a location in one event and are located another event so you know that they are the same yeah so the uid property and icalendar is defined to to mean a globally unique id so in in that sense yes um if i get i i'm just trying to chest so check how this is different to the id in like the locations object in js calendar because it's a id to location object so in js calendar the id um that we use in the in the in the in the map of all locations within that event the id only needs to be unique within that locations property whereas a uid property in icalendar is is meant to be globally unique so they cover different scopes um and so yes one would expect a uid property of location for the same location to be the same um if that's really done in practice i would very much doubt um but"
  },
  {
    "startTime": "01:22:00",
    "text": "i guess then you could map it to just the id in js calendar like obviously a uid is already a valid id yeah we can't do that in all cases because the uid might contain characters that are not available jmap id sure but you could define a consistent mapping i mean i guess you could take a digest that's always short enough um you can't guarantee a two-way mapping because the uid might also be longer than 255 characters yeah that's true and i don't know if because we we we discussed that um the ids in a js calendar event should persist in the same in the same js calendar object instance at least so i i don't know if applications are going to have their own idea what what ids they generate um which might not necessarily then map to a might not necessarily would be a good choice for a uid property because it might just not be unique enough or something like that so if we keep them separate i think we have the least friction uh when mapping between icalend and js calendar again this is ken so i i forget what the current spec is what are we doing when a v alarm has a uid property how are we mapping that into the alerts if we already do that we should just use the same mechanism well for v alarms the thing is an alert in gs calendar is is not as sophisticated as it is in the alarm and i do not think that we"
  },
  {
    "startTime": "01:24:01",
    "text": "currently preserve the uid that there is the need to preserve the uae at all um we might need to i need to check our implementation what we are doing but then i can't recall that there is a uid property in the in an alert currently yeah in order to round trip this you could have snoozed vr alarms that refer to the main uh alarm by uid so i think we'd want to preserve that yeah yeah we should to be very honest i don't know at the moment fair enough just wanted to raise the question yeah and if we choose this mechanism or something different for alerts we should use the same mechanism across because the calendar currently any different component should have its own uid yes so those are going to be mapped some way shape or form yeah i mean that's that's sorry please go ahead mike no i just i was i was just trying to recall the conversation way back when cyrus was um he said he basically expressed the opinion that he wishes we'd always put uids inside components because that's why they added it to the alarm because the difficulty of identifying things so that's why these new components had have a uid properties because we've found in practice it's better to have one yeah and this discussion uh leads already kind of to the to the next discussion point i think but let's if we scope it just to you eddie the more we introduce icalendar components that are uh that have a mapping to a js calendar object type be that allocation a link a participant whatever um we will we will always need uh uids or also for v alarms so the question then remains should we define the uid property explicitly for all"
  },
  {
    "startTime": "01:26:02",
    "text": "these object types or should there rather be allowed to be a uid set on any um on any on any js calendar type um probably ron if you could show the next slide please i think that already maybe you can skip this slide and we get back to this and this because what we would like to discuss is um currently there are like um different understandings how to deal with properties and and component definitions in icl energy is kind of in js calendar we explicitly register at iana an explicit list of things allowed in an object if you want to put more in it either register diana or use a vendor extension properly in icalendar we for almost any definition of a component the last thing always will be ianaprop and that means you can stuff anything anywhere in a component that's defined somewhere else um and we don't really like as you see with uid for example we now run in this situation that there might be stuff in an icalendar object for which we didn't make room in a js calendar object um and this is going to come up more and more the more and more stuff we met so um i would like to discuss the general options that we have to um to do that um maybe on the on the next slide i think i i introduced a couple of approaches yeah so the the one thing is whenever we see something not being able to map to a jscanda object type for example the uad we could just define it there or the other way around like we did with chainmap id"
  },
  {
    "startTime": "01:28:00",
    "text": "um that's in a way that always will make clear what's the exact purpose of this property um the um lexan version of that this would be like that we define if there is already a well-defined mapping for example for the dt stamp in a v event we mapped it to an updated property in the js event we could say okay if the dt stamp shows up in a v location then map that to the to an updated property of the js calendar location object type although the current spec doesn't allow that um and that still then that still doesn't cover everything because there might still be stuff that we don't know how to map from icalendar to gs canada and for the for this part in any case we need to come up with a mapping that somehow um it somehow preserves preserves mapping related information uh what was the source of this property if we want to be able if we want to be able to always be able to convert back and forth between the two formats and that's the third point is the thing that um also came up before for vcard mapping actually so where i said we should use the same scheme whatever we use um mike i think you you wanted to discuss this point anyway or are you yeah do you yeah please um i i just i i i felt that it was like to lead to a more robust mapping process is if we allow if you recognize the property i mean clearly i think your example there is you know"
  },
  {
    "startTime": "01:30:01",
    "text": "dt stamp to to update it somewhere you're going to know that if you get a dt stamp you're going to create a js calendar updated property the only thing we're talking about is whether that's supposed to be allowed within the the um the the object you're translating and um i i'm inclined to just allow it and just just put it in there it just seems a bit weird to to turn them all into vendor properties just because you you somewhere it says you shouldn't have that in this particular um object uh because you're going to end up with the situations where um you're not keeping up with the current state of the registry and and so something will turn up with this property in it and you won't in your code you won't recognize that supposed to be in that in that object but it in reality it is it's just you're out of date um it it just seems more robust to to allow these things to to go in there um and there were places where um back in i calendar where the the um the um i think you have of say um availability where it has this this construct it it has a certain number of properties which which are called out in the spec because they have some particular um meaning in the context of availability and then it says you put anything else you like inside there and and the reason for that was that you might want to say certain things about that available time like it has a particular location or it has some other characteristic um and and restricting it didn't allow all sorts of use cases to to you know so i i just just feel"
  },
  {
    "startTime": "01:32:01",
    "text": "we shouldn't necessarily we should if we can if we have a mapping for the property we should just do it even if it's not in the current spec yeah i mean yes i agree um with caveats i mean for metadata like created and updated for example or comment probably also that that makes sense to me um but somehow we need to update the js calendar spec because it currently would reject such uh such properties as invalid so and the question then is should we define like again a well-defined list of stuff that can go anywhere um no you can contain uh the the the type of stuff that can go anywhere or should we really allow like okay we just provide the generic mapping and if it ever shows up anywhere just put it to the appropriate place if you don't know any better like just for an example if we find a geo uri in and participant we would not map that to a she coordinates property probably in a participant we would map it to a location and that is referenced as it currently is possible by this uh js calendar participant then i think there's the difference between you know wanting to validate a a um an object you know a calendar object or whatever and actually just accept it so you can process it and strict adherence to what you believe the standard to be at a time leads to problems because you're inevitably going to get um an object that is actually adhering to the spec it's just you're"
  },
  {
    "startTime": "01:34:00",
    "text": "not up to date with it um and somebody did uh raise exactly that problem on on the um ical4j list where they they got a property and because they got strict validation running on their at their end it rejected this thing because it had a property they didn't recognize which is actually in a spec so the the because of this um i mean there are ways to avoid having to do all this stuff if um as i was saying to the other day part of the reason for having to do this complete transformation and trying to get as complete as possible is because we have this um this update by replacement thing going on if everything was done through patching and and you know incremental updates you this probably wouldn't be as much of a problem as it as it is so i i'm inclined to just allow um properties that you don't recognize as being part of the object simply for robustness i think needless in the queue yep go ahead neil sorry if i was that was by accident yeah that's why you've been there for a long time oh okay alexi i think i tend to agree with michael that it looks like the original js calendar restriction is not useful anymore or at least you know for interrupt for you know um by direction conversions so you need some mechanism of converging arbitrary properties"
  },
  {
    "startTime": "01:36:00",
    "text": "requiring them all of them need to be added to iron registry before they can be converted that's a bit it doesn't seem practical yeah so you need some kind of variant whether it's magic uh prefix like vendor extension or no extension which is what michael is talking about i think you need a generic mechanism i think if you recognize the property then just convert it if you don't then then you get to some sort of vendor extension thing yes so yeah i think the distinction sorry into interrupt but i think the distinction should be made between stuff where we already know a well-defined mapping for example for the time yeah absolutely i understand we certainly need this vendor extension mapping always because there will always be stuff we don't know anything about okay yeah this is ken um yeah i was going to suggest that and neil might throw up when he hears my suggestion but um perhaps we just come up with a json representation of a generic high calendar parameter property and component and for everything we don't understand we create an object or an array over these particular things yes um the idea of this vendor extension thing would actually and it's just an idea to to to uh use json of course as a value but uh use a gs cal so which allows like a direct mapping yeah it's good the jcal foreign that's why i said you know neil might not like my suggestion um yeah but yeah jkl's fine"
  },
  {
    "startTime": "01:38:04",
    "text": "yeah so i think the open discussion point still is um what to do with stuff that that we could just map because we have the mapping defined already somewhere else so in in the term of we have some generic well-defined properties as i said off the top of my head created updated command um probably i'm sure there is other stuff um if we if we need to if we should register these ordered iana that is the current scheme or if we allow a generic map that's tricky because if we if we don't register everything up front then you'll get implementations that do different levels of quality of mapping here okay um but if we don't register if we don't have a specific list of things that are the ones you should map then yeah the question is what what do you do with and what don't you do this with maybe we should just say everything that's not specifically defined gets this jkl treatment and that way everyone will will have the same representations i think for i calendar she has kind of mapping i think that's uh i also would like to go with that approach um that still leaves the point that mike proud brought up like um that implementations currently that implement like one snapshot of the state of js calendar rfcs would reject js events that use properties um of later it's the same it's the same it's the same thing whether whether whether you're doing a mapping or whether you're accepting js calendar into your system it's if it's a recognized if it's a known js calendar um property um"
  },
  {
    "startTime": "01:40:00",
    "text": "when you're doing the mapping then just convert it to that known js calendar property even if the spec that the other end is using doesn't recognize that as being valid within that object you may as well just just put it there i don't think you should map that to this to to some because you're going to get the same situation if you're accepting js calendar the other end may be more up to date than you are that's what i what i understood you saying is that yeah but i don't think some property should be ignored not rejected right yeah if you don't know about it you just ignore it yes and um which is sort of what we do in in our calendar i don't think there's a distinction between them as us doing the mapping particularly and and we just do the same thing there you've got a property that you recognize then map it and the other end will ignore it just saying that if you need to change the semantic from you know ignoring instead of rejecting unknown stuff do it early do it in a draft so hopefully whoever follows the discussion now will implement the new semantic if it makes sense good as early as possible and then you'll figure out the exactly so um from what i gather from this here is that uh we won't be able to come to an agreement within this session uh there are too many unknowns and it's up to mike and me to now write up a proposal well i'm we are writing the draft anyway already so um yeah we should we should come up with something and then sent to the list or um and or um present in the interim in when is it in may yeah uh the second week of may okay um next slide please i think we are yeah we"
  },
  {
    "startTime": "01:42:01",
    "text": "yeah but there are more specific mapping that doesn't need to be discussed properly probably now yeah so next steps are in top testing and or as i already wrote um we need to define um how to how to to map these new properties what did i ask this i can't have a shared set of test cases for this that all the all the implementations use yeah um the question i i brought up here also then is if we do should we define separate rfcs for the i calendar and the js calendar extensions or should this all go into one draft this is kind of i was getting up to make a suggestion the given effect we're going to change the mapping document from informational to standards track and we're also extending js calendar a little bit and we have two errata already for js calendar that perhaps we refresh that at the same time we're doing the mapping and send them to the editor as a group and then they'll have consecutive rfc numbers as well so they're easy to find if somebody goes to use them yeah sounds good i i raised this i think what uh the other thing i suggested um a fusion when we started talking about the geo and allowing a new uri i was sort of favoring the idea of splitting that out into a separate rfc updating 5545 largely because it just makes it more visible and and the the idea of using um a uri value for the geo thing is something that is of general usefulness just in the icalendar world so it just seemed wrong to hide it away inside the mapping spec"
  },
  {
    "startTime": "01:44:01",
    "text": "this is kind of i stood back up to say that if we are going to refresh js calendar i would volunteer to be editor on that if no one else wants to do it i know you guys are already busy and similarly if we decide to split out the updating geoproperty uh to take a uri i'd also be willing to do that work take that off your guys plate um one um one rfc candidate we haven't talked about in this session is uh we also were having the idea for allowing sub-second uh precision in i calendar time values and i i recorded we agreed on having that in a separate area as well yeah i think i think so because i i did i did create that draft um fractional thing that it was based on on what we originally talked about but then i realized um part of the problem with the whole thing is negotiation do you know somebody can accept fractional um seconds or whatever there is a demand for it but it's it's not something that is generally needed it's it's more for people doing things like process control or things of that kind so i was more inclined to just do that as a as a separate rfc which um because it touches on so many things is simply extend the things so you accept fractional stuff everywhere okay but it it occurs you know it's recurrences and things of that kind yeah um i generally agree but it if if we don't have that then uh the conversion from gs calendar to icalendar is probably lossy um it will be yeah but but you're going to break things anyway if you try and and carry across all the fractional stuff so it just seemed i think i think i actually updated the spec to say you should just uh round it down to the to the nearest second yep this sounds good to me"
  },
  {
    "startTime": "01:46:01",
    "text": "um but still yeah so then we would not be able to map in fact the the yeah the just kind of spec is actually not quite um fully capable of doing fractional seconds either because there's something missing i forgot what it is now probably it's in the r rule i think we don't have something to do with ideas frequency or something like that there's something of that yeah yeah okay so just to note down what i'm hearing here sounds like we've got four documents in total we've got the sub second time we've got the update for geo and potentially a couple of other little bits and pieces for five five four five we've got a refresh of js calendar and we've got the js calendar icalendar mapping document um we're going to keep this for do we refresh js calendar and put the mapping in it i don't know much about the process what the difference between a refresh and the new rfc is um it's new rfc it's just it's replacing the old one oh okay i forgot to check in this this is kind of i i still think they should be separate documents personally but i'm not gonna die in that hill if the group decides otherwise yeah i tend to think that like it is between a director working group chair and editor as in you know if you have a preference for whatever reason you know stated i don't have a strong preference either way um i do think that if we're going to do that then it's probably not worth blocking tasks on having a js calendar representation in it we're better off doing tasks as maybe the fifth of this series of"
  },
  {
    "startTime": "01:48:01",
    "text": "documents which is another icon to update and then do the js calendar keeping that in mind and then that becomes our alignment point so just to be sure that we already defined it js task in the js calendar in the nine eight four already includes a definition yeah yeah but if we're refreshing it anyway um maybe we should do the i calendar dot just referencing our calendar and not referencing that and then have our two js calendar documents be the alignment point together and then we can make sure everything's fully aligned across those documents yes that sounds very good to me okay all right excellent we have 12 minutes left in this session go ahead the the only the only thing i i raised i raised a point with um uh robert the other day that the mapping the mapping um document and and carrying out this mapping it depends on the context you're in and i was i was suggesting we should have an initial section in the mapping document if you're if you're doing um imip um the mapping can be a lot simpler because you you really don't have to have a full representation of um what's in the js calendar um document and the replies that come back in only the only thing you need to pay any attention to are the parts that and and other things so if you're if you have it it seemed that it might be worth having an imp section um which would be a lot easier to do to to do yeah so about that i think i would prefer a separate rfc we didn't cover the"
  },
  {
    "startTime": "01:50:02",
    "text": "scheduling parts in terms of the protocols involved at all and i think there's there's still quite some stuff we need to figure out in there so in terms of timeline i very much would rather just define the format mapping without any protocol specific um editions because otherwise it i have the fear that it will just drag on and on as a draft and i think we should get it published to chase calendar i killed the mapping as soon as possible now all right uh we have 10 minutes left in this session is there anything else on this document now or is it uh keep working on it it's keep working on it cool thank you all right popping back to our agenda i think that's everything um that i had slides for but there were also um a calendar series server side subscription and vpol potentially to discuss mike did you have anything any progress no not not at this stage um v poll i'm trying to upgrade my implementation but uh um i think we should just leave that until next time maybe other stuff will be out the way then so well this is ken mike uh rather than send you an email or text or what have you i i read a service type subscription and vpol this morning uh the example in server side subscription is supposed to be a make collection example and it's actually a post so it just needs to be fixed and as far as vpol um i don't recall the discussions about"
  },
  {
    "startTime": "01:52:00",
    "text": "the actual pulse status method and i'm wondering why we needed a separate method as just as opposed as using request to refresh the voters with the current vote do you call why that is at this stage no yeah because we we send the initial poll out with a request we send the final result as a request but updating the existing uh voters with the current status we have a separate method which seems contrary to what we do with events where we use requests for both the initial event and any updates well including just updating part stats i think probably because is it okay uh i i mean we we can we can certainly take this offline it's just something that something yeah yep okay cool all right i'm going to pop up the milestones so we can have a glance through them and then i think that will basically be all our time all right here's our shiny new milestones um submit task draft asg that's the first one on the list it was supposed to be january this year where do we think we're at with that um i think so i mean i'll i'll make those updates today outlined and resubmit possibly this week cool so put that for april uh it probably is the the let's see if it may be that the name has changed yep sorry i'll change that"
  },
  {
    "startTime": "01:54:01",
    "text": "cool so target for april maybe for may actually if we do a working group last call yep it'll take about that long all right good uh subscription upgrade was also going to be that's probably even faster because that's got less work to do yep js calendar mapping document that's a little way down the line robert rough estimate um i want to have that down for the next fight here all right so july uh jason contact same people we're kicking down the road we're gonna push that right out to december set aside subscription kicking down the road as well and i calendar series we're kicking down the road do we have other milestones we need to add here almost definitely um what did we what did we have in our document there we're going to refresh psk yeah um yeah relations basically done that is the main thing it's just kind of i can't all right i'll leave that for now um just put these ones through i think there were errors yes because i added a field that i need to remove now how do i do that delete i guess done all right uh anything else in our last five minutes i'll add a new milestone for the refresh dock once we issue that once we send out a call for adoption on that and i'll do a corporate option for the"
  },
  {
    "startTime": "01:56:01",
    "text": "the geodock and the um sub second time as well all right thanks everybody see you in early may for the the interim and then in july in philly all righty bye then bye inception okay all right i've made my way through both those water bottles so while you guys are both here yeah um they sent us a v4 card with the uid changed from a text value to the url using our new id as the url all right and we're refusing it because technically they're changing ui yeah i'm sure"
  }
]
