[
  {
    "startTime": "00:01:08",
    "text": "heads up we're going to give it uh one more minute for folks to trickle in"
  },
  {
    "startTime": "00:03:06",
    "text": "all right let's get started so good morning everybody welcome to the february interim for the mask working group a little bit of housekeeping before we get into our presentation this session is being recorded uh we have a set of notes which are linked in this slide that you cannot click on but we'll drop the link in the chat as well please go and add your name and affiliation into those notes just in case medico is not automatically blue sheeting for virtual interims as you're hopefully aware you can enter the queue by raising your hand and you can leave the cube by clicking on that same button which will change once you've clicked on it and when it's time to start speaking you can click the little icon that indicates that you're not currently sending audio and click it again to stop sending audio"
  },
  {
    "startTime": "00:04:05",
    "text": "this is the note well it's the terms under which we participate in the itf please take some time to read it also please note that there is a code of conduct and that everyone needs to be treated with respect here we've got a couple of links this is our agenda the meeting that you are already in and that's the notes link and for our agenda we're going to try to keep it fairly focused today on the output from the http 3 datagram design team that has been meeting for the last several weeks and months since our previous ietf meeting and we're going to go through those results have some time for discussion and then we will take the final consensus on that to the list so we're going to use the full block of time today for which we only have an hour and we're going to see if we can get through all of that and get that wrapped up so that we can go into 113 in really good shape and with that david you have some slides all right looks like there's audio and slides and people confirm that you can see them thank you very much sean all right good morning everyone my name is david kanazi and we're going to go over the output of the design team today um so um but before we begin uh just wanted to"
  },
  {
    "startTime": "00:06:01",
    "text": "wish everyone a happy valentine's day from us over here at mask enthusiast incorporated hope everyone will be having fun at some point today um now for folks who haven't been paying attention a quick recap um so our main focus for the mass working group is building connect udp no lucas this meeting is very fun you have to know which is like connect but for udp and since there was interest from other works such as web transport and using datagram with http we split that draft into two one of them became was initially called h3 datagrams is now called http datagrams and the other being connect2udp which builds on the first we had an interim on this topic in april of last year um to focus on the design of the http datagrams and went through multiple iterations of the design like the through feedback from the community we we changed and then we had some discussion we made the changes we implemented them in software we redesigned everything again and again and so you know at 112 we realized we were kind of going in circles so maybe we should get everyone who like really cares about those design elements into a room and form a design team so that's what we did uh and so they everyone in the working group could volunteer there was an email sent to the list and up here on the screen is the list of all the participants so i want to in particular thank eric martin mike tommy allen lucas alex marcus ben victor for all their work and reviewing the documents and offering suggestions and most importantly for all reaching consensus on a proposal so i'm really glad we landed on something that everyone could live with that was really important um what were the goals of this design team that we what was our mandate when we begin began was to reach consensus"
  },
  {
    "startTime": "00:08:03",
    "text": "you know if needed rough consensus uh amongst the members of the design team on an overall design for http datagrams so in what you know what they mean what they look like somewhere encoding and things like that and the are the output of the design team would be to write a recommendation as forms of github pull requests uh to then bring them back to the working group and discuss them before 113. so the idea here is today i'm going to go through these uh or like the contents so we can have discussions feel free to jump in at any point to ask any questions uh and then the goal we'll hand it back over to the chairs afterwards to see if this design team consensus can turn into working group consensus if everyone is okay with it so the output came as two pull requests one on http datagrams one on connect2udp i'm pasting the two links into the chat so folks can open them if they want uh we thanks to martin thompson's amazing uh id draft tools we have uh if you open the pull request in the description there should be a link to a rendered view of the pr of like the the final text assuming the pr gets landed and also a rendered diff between the current draft and the pr but you don't need to do that i'm going to walk you through all the changes that we made and how what the protocol looks like now some of these bits are changes some of them are just elements that we already had in the draft before the design team but that we agreed on keeping um so the first one is the capsule protocol uh so the http datagrams document defines the capsule protocol which is a sequence of tlvs type length values on"
  },
  {
    "startTime": "00:10:02",
    "text": "the data stream so the data stream is like if you have an http request stream once you're done with your either your request headers or your 200 response headers it's that bidirectional stream of bytes and the wire encoding using the rfc 9000 formatting is on the right which is as a sequence of tlvs where the t and the l are quick style variable length integers 62 bits um and there is an in a registry for these capsule types uh and then any new method or upgrade token http uh so upgrade token is what we use in h1 for upgrade and in h2 and h3 for what's called extended connect so if you want to do websockets or other things over uh should be two or three you use http upgrade tokens and so those new ones can in in their specifications say that they use the capsule protocol so as an example connect udp says i choose to use the capsule protocol and so so does web transport we also introduce a new capsule protocol http header that allows endpoints to inform intermediaries that the capsule protocol is in use so the idea there is if someone wants to write an intermediary that can forward the capsule protocol and like handle the specific datagram frame that i'll explain later they can recognize it by this header and one important detail is that allows intermediaries to translate between different versions of http so for example common deployment scenario is you have http 3 from the client like say the browser to the front end and then using another version of http from the front end to the back end that still works here with connect udp or web transport with http datagrams so http datagrams are"
  },
  {
    "startTime": "00:12:00",
    "text": "strongly associated with a currently open http request stream so that means that when you send an http datagram it has to be tied to a let's say a connect udp request they can't be just sent on a quick connection without any semantics um and the stream has to be open so once you close it you're not supposed to send datagrams anymore uh and so there are two ways of sending them one is in the http oh sorry in the quick datagram frame which is the draft itf quick datagram extension to quick that is that was just last week approved by the asg and is um going through a editing by the rfc editor um and that allows you to send unreliable frames inside quick so and this document explains how when the alpn is h3 how you can send http datagrams using that frame and so i have the wire format here on the top right of the slide and so i've copied the bits from the quick specification as well so it's the quick datagram frame which has a type of 0x30 or 31 which tells you if the length is there if the length is not there it goes to the end of the packet but that's like that's inside quick like we're not talking about that here that's already almost published what we add in this specification is in the start of what the quick frames calls the payload we add a quarter stream id which allows you to associate any datagram with a http request stream and the reason for that is http defines request streams as client-initiated bi-directional streams which are all divisible by four so in order to save some bits on the encoding we divide by four uh and then inside that you have the h or after that rather you have the http datagram payload which then methods define the semantics of that and the second way we have to send http datagrams is a new capsule called datagram so the type is datagram the length and similarly right after it has the http datagram payload this one doesn't have"
  },
  {
    "startTime": "00:14:01",
    "text": "the quarter stream id because capsules are sent inside the request stream so you already know on which stream you are when you're parsing it so you don't need to repeat that field um and the nice property that that gives you is that you can now send hp datagrams over all versions of instruments sorry all versions of http uh over quick and sorry http 3 you can use the datagram quick frame but on other ones you can send them over this it means that you can do this property of having all this work when let's say you're front end to back and link doesn't support h3 or if you're on a network that blocks quick or udp uh so the one of the bits that was a major change was the extensibility demultiplexing so before we had a concept of a context id inside the http datagrams frame we took it from there and we moved it to connect udp so what that means is no now in http datagrams there is no longer a demultiplexing identifier that feature has been removed uh and so web transport for example doesn't have any demultiplexing because it doesn't need it uh we we introduced it however in connectudp so how does it look there um the oh so i see a question in the chat from martin duke uh yes it is sorry one second it is currently inconceivable to send an h3 datagram over a push stream um part of the reason for that logic is that uh quick push streams are also associated with requests you can still send your http datagram with that request um so that's one of the parts of the design uh back to where i was uh connect udp um decides to use the capsule protocol and it's an issue so it's even though the we still informally call it connect2dp all caps it's not an http new http method it's an http upgrade token so what that means in http 2 or 3 it's you"
  },
  {
    "startTime": "00:16:02",
    "text": "you send the method as connect and you send the colon protocol a new pseudo header using connect2dp so this has a dependency on ryan hamilton's uh using websocket over http 3 draft or for h2 rfc 8441 which is how you add the protocol new pseudo header and then we introduce a context id which was the concept i mentioned used to be in http datagrams and is now inside connect udp which allows the multiplexing uh so in uh if your context id is set to zero that just means this is a udp payload and then so the proxy processing is defined in the document you get a datagram with context id 0 you write it to the destination that was specified during the request and hostname and port and you just write it there on that socket and if you receive something on that same socket you put it in a datagram with context id 0. and that the context id is so we can kind of see the y encoding here on the right of the slide if we're inside the datagram quick frame after the quarter stream id we now have a context id followed by the payload and if we're in the capsule uh after the length we have a context id followed by the payload um and any other value is there for extensibility so the the values are dynamically allocated and what that means is every uh request keeps a pool of these context id values so in practice the simplest way to implement this is you keep a uint64 in memory of what's the hot what's the next one i can give out that hasn't been used and any time an extension wants a new demultiplexing identifier it just gets a new one and then it can send it so the even numbers are client allocated"
  },
  {
    "startTime": "00:18:00",
    "text": "and the odd numbers are server allocated this kind of mimics the design of quick streams the idea there is that way you don't need a synchronization point between them you can just start using the next one because you know you own it as an endpoint um and so but then once you have that context id you have to communicate to the other side what does it mean like oh now i'm going to send you datagrams with context id 2. you have the other side has to know how to parse them and what semantics they have so in the draft we define the concept of registration which is this idea of telling the peer what does this number mean and there we're foreseeing at least two ways of doing that one is an http header so one second sorry sorry uh so in an http header you can say oh by the way uh context id 2 means like in the definition of an extension you say context id2 means um the uh sorry in the in a new extension that wants to do uh timestamps with connect udp you could say i have a new header that is udp with timestamps and that takes an integer with it and when you send it you send it with two and that tells the peer by the way when i send you a datagram with two that means that it's this extension um and if the gear doesn't know the extension it'll just receive datagrams for a number that it doesn't know and it'll then drop those on the floor so there's no harm then uh and another way like there are some extensions let's say if you want to do compression of like quick connection ids where like you want to do something stateful halfway through the connection you can use capsules for registration so you can say like halfway through your your question being live you can send a capsule that says by the way context id 42 means we're compressing these bits or have this extra state so you can do that either at the start of the request with headers or during with capsules and"
  },
  {
    "startTime": "00:20:00",
    "text": "we also don't close the door if their people come up with new ways later but we don't specify a generic way for registering we just say that you have this these options and that isn't somewhat of an open question that we decided wasn't in scope for the design team of we could decide as a working group that that's good enough uh that we can leave the extensions figure this out or we could define a standardized way for registration inside this document that extensions have to adhere to so that one i don't think we should discuss today because that's outside the scope of the design team that's still an open question that we'll discuss as a working group potentially at 1 13. um and another bit that we similarly decided like that to leave for the working group is how you compose extensions um one way to say is we don't particularly define that now but some folks were saying maybe we define a way that if you have two extensions to make it easy to combine them oh that's one adds the timestamp at the beginning and then the next one adds ecm markers that's again an open question we haven't discussed that as a design team or want to discuss that with the working group and that's kind of all of it from uh from the slides so my hope there is that this somewhat makes sense it's a design that that's not too far from what we had before we've kind of moved things to simplify http datagrams as much as possible while keeping connect2dp extensible for all the extensions that working group members want to build but i think we have everything we need to build these um so i this is the end of my slides uh please send any please walk up to the mic and come ask any questions uh someone just tried to join the qubit then they popped off i don't know if that was an accident or not"
  },
  {
    "startTime": "00:22:04",
    "text": "yes use the little hand button to join the queue and then i i can run it if you want so uh patrick go ahead yeah hi there uh patrick tarpy from ofcom um i'm kind of i'm i suppose i'm trying to assimilate all this it's quite a lot to take in and i'm a bit more of a kind of like i need to see things running are there any kind of like test stacks written in go or something like that i can spin up and actually watch it perform um so let's see uh i so my team has a stack in c plus plus i know the cloudflare folks have one in rust that supports the well not the latest version of the draft so we're gonna we're waiting to implement that once it lands uh i don't know if quick go supports datagrams currently um there are i know the erickson folks have added support for this into aio quick but i don't know if that made its way back into open source so to answer your question yes there are quite a few test uh stacks i'm not 100 sure about go oh thank you i mean if if anyone can share something on the mailing list i'd be really appreciative because as i say i'm a bit more i need to see stuff running before i really understand it thanks sounds great so um i see miriam asking a question on the oh well perfect mira's in the queue go ahead maria yeah um yeah i thought i'd just come to the to the queue and ask so i don't remember all details of the previous um version but it seems like the main difference is that you moved some of the text from the"
  },
  {
    "startTime": "00:24:00",
    "text": "http datagram document into the udp connect document or was it like what are the major changes maybe you can summarize that um so yeah i didn't go into too much detail of the previous proposal because i didn't want to to be confusing but in a nutshell the the previous system was quite a bit more complicated it had a lot more concepts so it had like the concept of a datagram format type with a separate iena registry uh it had uh all this extensibility mechanism to add context that were also optional with a header that then you would negotiate with a special mode to all you allow you to send things during your first flight all in http datagrams so that was the feedback i got was that that was pretty complex uh and so all of that is now gone and it's replaced by kind of a more static choice where each method decides if it uses this or not and that ends up simplifying both specifications and at the end of the day the implementations as well so that that was like the the main concerns from my recollection on the previous designs were complexity and so we added a lot of these moving parts uh and found something that gives you uh almost as much flexibility with way less complexity in the current design so the i think the reason why you put this first into the http data driven draft was because the expectation for that other protocols would use the same kind of extensibility mechanism the same kind of structure um and now you kind of agreed that everything was moved into content connect udp and basically this kind of context protocol would only be used by connect udp or what's the exception so the connect udp is going to use it uh and our expectation is that connect ip will do the same thing because both of those have very similar uh use cases with transport however uh"
  },
  {
    "startTime": "00:26:02",
    "text": "will not um that's the current plan well obviously the the web transfer working group will have a chance to react to these changes in the http datagram draft there but i expect that from all of the key participants of web transport that were part of the design team that's what i think they will go with okay so the input from web transport was they're not interested in using this anyway um so we don't need to provide a new generic mechanism for it that that's right we don't need to provide a generic mechanism inside http datagrams and so since we want it for connect2dp and connect ip these like documents will define their mechanism it ends up being a very small amount of text so we'll have some duplication between connect2dp and connect ip um the uh martin thompson phrased it pretty well as uh preferring um uh composition over inheritance kind of um and so that that simplifies things especially for for web transport i mean i don't think there's anybody else in the queue so ask another question um sure so of course we cannot kind of dictate the web transport group what they should be doing but like how is this group feeling about actually having at the end two approaches which are very similar but still not the same at the end what do you mean yes it's not a question very similar but can you clarify your question what do you mean by two approaches that are similar so i i assume that web transport also needs these kind of extension mechanisms to some extent right no it does not at all okay so web transport doesn't need this at all it just has an api for datagrams that fits directly into datagrams so webtransport doesn't plan on having any kind of extensibility there because it doesn't need it i see okay thank you"
  },
  {
    "startTime": "00:28:01",
    "text": "of course thank you for your questions does anyone else have any questions all right that sounds good i'm gonna hand it back to the chairs thank you david all right if we have no more clarifying questions or other comments we're going to give the show of hands tool a workout this morning um we're going to go with one quick question to kind of confirm the the sentiments in the room and then we will take the output from this design team back to the list to discuss consensus with the working group as a whole so we're going to start the show of hands session here it's the uh it should pop up for you actually and you can either raise your hand or not raise your hand so raising your hand says i believe that the output from the design team is the direction that the working group should take for http 3 datagrams and if you do not raise your hand you are saying that i believe the output from the design team is not the direction that we should take give everybody a minute to find the button and click on it all right we appear to have stabilized we're going to end that and take it down in the minutes"
  },
  {
    "startTime": "00:30:03",
    "text": "and with that if we do not have any further clarifying questions or comments we're going to eric can you uh confirm for everyone what the result was yes we have 21 raised hands saying that we believe the direction is the direction that we should take and we have zero not raised hands so this is normally where i would ask if anybody who did not raise their hand would like to come to the mic but no one did so that is glorious thank you that's great all right thank you to everybody in the design team and everybody for showing up this morning we're going to give everybody some time back rather than try to plow through a couple of issues we will save those for uh 113 and keep this nice and tight and focused on the design teamwork if i may before we adjourn um david you thank a lot of people for the design team um we wanted to thank you uh for leading the effort and getting everyone to consensus as is clear in the chat um this was a pretty big effort over many months so you know thank you for thank you for all the time you put into this thank you chris i really appreciate that this uh this ended up being fun and uh i just told people that the uh meetings would continue until the consensus emerged and eventually they got tired of seeing me every other week and we landed with something that i honestly liked so that was great thanks appreciate it yeah excellent all right folks there's nothing else i think we can call it get 30 minutes back have a good rest of the day"
  },
  {
    "startTime": "00:33:36",
    "text": "you"
  }
]
